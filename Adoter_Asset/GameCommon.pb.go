// Code generated by protoc-gen-go. DO NOT EDIT.
// source: GameCommon.proto

package Adoter_Asset

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntitySpawnType int32

const (
	EntitySpawnType_Trigger EntitySpawnType = 0
	EntitySpawnType_Enemy   EntitySpawnType = 1
)

var EntitySpawnType_name = map[int32]string{
	0: "Trigger",
	1: "Enemy",
}

var EntitySpawnType_value = map[string]int32{
	"Trigger": 0,
	"Enemy":   1,
}

func (x EntitySpawnType) String() string {
	return proto.EnumName(EntitySpawnType_name, int32(x))
}

func (EntitySpawnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{0}
}

type EquipmentSpecial int32

const (
	EquipmentSpecial_UnUse       EquipmentSpecial = 0
	EquipmentSpecial_ReplaceSuit EquipmentSpecial = 1
)

var EquipmentSpecial_name = map[int32]string{
	0: "UnUse",
	1: "ReplaceSuit",
}

var EquipmentSpecial_value = map[string]int32{
	"UnUse":       0,
	"ReplaceSuit": 1,
}

func (x EquipmentSpecial) String() string {
	return proto.EnumName(EquipmentSpecial_name, int32(x))
}

func (EquipmentSpecial) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{1}
}

type LevelDifficulty int32

const (
	LevelDifficulty_LevelDifficulty_Normal LevelDifficulty = 0
	LevelDifficulty_LevelDifficulty_Hard   LevelDifficulty = 1
	LevelDifficulty_LevelDifficulty_Hell   LevelDifficulty = 2
	LevelDifficulty_LevelDifficulty_Mythic LevelDifficulty = 3
)

var LevelDifficulty_name = map[int32]string{
	0: "LevelDifficulty_Normal",
	1: "LevelDifficulty_Hard",
	2: "LevelDifficulty_Hell",
	3: "LevelDifficulty_Mythic",
}

var LevelDifficulty_value = map[string]int32{
	"LevelDifficulty_Normal": 0,
	"LevelDifficulty_Hard":   1,
	"LevelDifficulty_Hell":   2,
	"LevelDifficulty_Mythic": 3,
}

func (x LevelDifficulty) String() string {
	return proto.EnumName(LevelDifficulty_name, int32(x))
}

func (LevelDifficulty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{2}
}

type EMailboxType int32

const (
	EMailboxType_Mailbox_None   EMailboxType = 0
	EMailboxType_Mailbox_System EMailboxType = 1
	EMailboxType_Mailbox_Player EMailboxType = 2
	EMailboxType_Mailbox_Hidden EMailboxType = 3
)

var EMailboxType_name = map[int32]string{
	0: "Mailbox_None",
	1: "Mailbox_System",
	2: "Mailbox_Player",
	3: "Mailbox_Hidden",
}

var EMailboxType_value = map[string]int32{
	"Mailbox_None":   0,
	"Mailbox_System": 1,
	"Mailbox_Player": 2,
	"Mailbox_Hidden": 3,
}

func (x EMailboxType) String() string {
	return proto.EnumName(EMailboxType_name, int32(x))
}

func (EMailboxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{3}
}

type GameSystemType int32

const (
	GameSystemType_GameSystemType_None GameSystemType = 0
	GameSystemType_GameSystemType_Sin  GameSystemType = 1
)

var GameSystemType_name = map[int32]string{
	0: "GameSystemType_None",
	1: "GameSystemType_Sin",
}

var GameSystemType_value = map[string]int32{
	"GameSystemType_None": 0,
	"GameSystemType_Sin":  1,
}

func (x GameSystemType) String() string {
	return proto.EnumName(GameSystemType_name, int32(x))
}

func (GameSystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{4}
}

type EMoneyType int32

const (
	EMoneyType_Money_None    EMoneyType = 0
	EMoneyType_Money_Diamond EMoneyType = 1
	EMoneyType_Money_Gold    EMoneyType = 2
	EMoneyType_Money_Silver  EMoneyType = 3
	EMoneyType_Money_Coin    EMoneyType = 4
	EMoneyType_Money_RMB     EMoneyType = 5
	EMoneyType_Money_USD     EMoneyType = 6
	EMoneyType_Money_HKD     EMoneyType = 7
)

var EMoneyType_name = map[int32]string{
	0: "Money_None",
	1: "Money_Diamond",
	2: "Money_Gold",
	3: "Money_Silver",
	4: "Money_Coin",
	5: "Money_RMB",
	6: "Money_USD",
	7: "Money_HKD",
}

var EMoneyType_value = map[string]int32{
	"Money_None":    0,
	"Money_Diamond": 1,
	"Money_Gold":    2,
	"Money_Silver":  3,
	"Money_Coin":    4,
	"Money_RMB":     5,
	"Money_USD":     6,
	"Money_HKD":     7,
}

func (x EMoneyType) String() string {
	return proto.EnumName(EMoneyType_name, int32(x))
}

func (EMoneyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{5}
}

type EMailState int32

const (
	EMailState_Mail_None         EMailState = 0
	EMailState_Mail_New          EMailState = 1
	EMailState_Mail_Read         EMailState = 2
	EMailState_Mail_ItemLocked   EMailState = 3
	EMailState_Mail_ItemReceived EMailState = 4
	EMailState_Mail_Deleted      EMailState = 5
)

var EMailState_name = map[int32]string{
	0: "Mail_None",
	1: "Mail_New",
	2: "Mail_Read",
	3: "Mail_ItemLocked",
	4: "Mail_ItemReceived",
	5: "Mail_Deleted",
}

var EMailState_value = map[string]int32{
	"Mail_None":         0,
	"Mail_New":          1,
	"Mail_Read":         2,
	"Mail_ItemLocked":   3,
	"Mail_ItemReceived": 4,
	"Mail_Deleted":      5,
}

func (x EMailState) String() string {
	return proto.EnumName(EMailState_name, int32(x))
}

func (EMailState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{6}
}

type HandbookQuestType int32

const (
	HandbookQuestType_HandbookQuest_Null          HandbookQuestType = 0
	HandbookQuestType_HandbookQuest_Scroll        HandbookQuestType = 1
	HandbookQuestType_HandbookQuest_Enemy         HandbookQuestType = 2
	HandbookQuestType_HandbookQuest_EquipHun      HandbookQuestType = 3
	HandbookQuestType_HandbookQuest_EquipXiaokui  HandbookQuestType = 4
	HandbookQuestType_HandbookQuest_EquipXianzhe  HandbookQuestType = 5
	HandbookQuestType_HandbookQuest_EquipZuoshang HandbookQuestType = 6
	HandbookQuestType_HandbookQuest_Armor         HandbookQuestType = 7
	HandbookQuestType_HandbookQuest_EquipXiaosi   HandbookQuestType = 8
)

var HandbookQuestType_name = map[int32]string{
	0: "HandbookQuest_Null",
	1: "HandbookQuest_Scroll",
	2: "HandbookQuest_Enemy",
	3: "HandbookQuest_EquipHun",
	4: "HandbookQuest_EquipXiaokui",
	5: "HandbookQuest_EquipXianzhe",
	6: "HandbookQuest_EquipZuoshang",
	7: "HandbookQuest_Armor",
	8: "HandbookQuest_EquipXiaosi",
}

var HandbookQuestType_value = map[string]int32{
	"HandbookQuest_Null":          0,
	"HandbookQuest_Scroll":        1,
	"HandbookQuest_Enemy":         2,
	"HandbookQuest_EquipHun":      3,
	"HandbookQuest_EquipXiaokui":  4,
	"HandbookQuest_EquipXianzhe":  5,
	"HandbookQuest_EquipZuoshang": 6,
	"HandbookQuest_Armor":         7,
	"HandbookQuest_EquipXiaosi":   8,
}

func (x HandbookQuestType) String() string {
	return proto.EnumName(HandbookQuestType_name, int32(x))
}

func (HandbookQuestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{7}
}

type ItemType int32

const (
	ItemType_ItemType_Null ItemType = 0
	//数据类
	ItemType_ItemType_Exp        ItemType = 1
	ItemType_ItemType_Sycee      ItemType = 2
	ItemType_ItemType_YuanBao    ItemType = 3
	ItemType_ItemType_Gold       ItemType = 4
	ItemType_ItemType_Stamina    ItemType = 5
	ItemType_ItemType_SkillPoint ItemType = 6
	ItemType_ItemType_Reputation ItemType = 7
	ItemType_ItemType_Rmb        ItemType = 8
	//实体类
	ItemType_ItemType_Item           ItemType = 101
	ItemType_ItemType_Equipment      ItemType = 102
	ItemType_ItemType_Drop           ItemType = 103
	ItemType_ItemType_Scroll         ItemType = 104
	ItemType_ItemType_Rune           ItemType = 105
	ItemType_ItemType_Skin           ItemType = 106
	ItemType_ItemType_SpecifyItem    ItemType = 107
	ItemType_ItemType_HeadFrame      ItemType = 108
	ItemType_ItemType_CorpsHeadFrame ItemType = 109
	ItemType_ItemType_Sticker        ItemType = 110
	ItemType_ItemType_Gacha          ItemType = 111
	ItemType_ItemType_SecretFile     ItemType = 112
	ItemType_ItemType_Furniture      ItemType = 113
	ItemType_ItemType_Skill          ItemType = 114
	ItemType_ItemType_GiftBox        ItemType = 115
)

var ItemType_name = map[int32]string{
	0:   "ItemType_Null",
	1:   "ItemType_Exp",
	2:   "ItemType_Sycee",
	3:   "ItemType_YuanBao",
	4:   "ItemType_Gold",
	5:   "ItemType_Stamina",
	6:   "ItemType_SkillPoint",
	7:   "ItemType_Reputation",
	8:   "ItemType_Rmb",
	101: "ItemType_Item",
	102: "ItemType_Equipment",
	103: "ItemType_Drop",
	104: "ItemType_Scroll",
	105: "ItemType_Rune",
	106: "ItemType_Skin",
	107: "ItemType_SpecifyItem",
	108: "ItemType_HeadFrame",
	109: "ItemType_CorpsHeadFrame",
	110: "ItemType_Sticker",
	111: "ItemType_Gacha",
	112: "ItemType_SecretFile",
	113: "ItemType_Furniture",
	114: "ItemType_Skill",
	115: "ItemType_GiftBox",
}

var ItemType_value = map[string]int32{
	"ItemType_Null":           0,
	"ItemType_Exp":            1,
	"ItemType_Sycee":          2,
	"ItemType_YuanBao":        3,
	"ItemType_Gold":           4,
	"ItemType_Stamina":        5,
	"ItemType_SkillPoint":     6,
	"ItemType_Reputation":     7,
	"ItemType_Rmb":            8,
	"ItemType_Item":           101,
	"ItemType_Equipment":      102,
	"ItemType_Drop":           103,
	"ItemType_Scroll":         104,
	"ItemType_Rune":           105,
	"ItemType_Skin":           106,
	"ItemType_SpecifyItem":    107,
	"ItemType_HeadFrame":      108,
	"ItemType_CorpsHeadFrame": 109,
	"ItemType_Sticker":        110,
	"ItemType_Gacha":          111,
	"ItemType_SecretFile":     112,
	"ItemType_Furniture":      113,
	"ItemType_Skill":          114,
	"ItemType_GiftBox":        115,
}

func (x ItemType) String() string {
	return proto.EnumName(ItemType_name, int32(x))
}

func (ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{8}
}

type MaterialType int32

const (
	MaterialType_Material_Null       MaterialType = 0
	MaterialType_Material_Equipment  MaterialType = 1
	MaterialType_Material_Scroll     MaterialType = 2
	MaterialType_Material_Cooking    MaterialType = 3
	MaterialType_Material_Craft      MaterialType = 4
	MaterialType_Story               MaterialType = 5
	MaterialType_Currency            MaterialType = 6
	MaterialType_Blueprint           MaterialType = 7
	MaterialType_Material_BattlePass MaterialType = 8
	MaterialType_Material_Guard      MaterialType = 9
)

var MaterialType_name = map[int32]string{
	0: "Material_Null",
	1: "Material_Equipment",
	2: "Material_Scroll",
	3: "Material_Cooking",
	4: "Material_Craft",
	5: "Story",
	6: "Currency",
	7: "Blueprint",
	8: "Material_BattlePass",
	9: "Material_Guard",
}

var MaterialType_value = map[string]int32{
	"Material_Null":       0,
	"Material_Equipment":  1,
	"Material_Scroll":     2,
	"Material_Cooking":    3,
	"Material_Craft":      4,
	"Story":               5,
	"Currency":            6,
	"Blueprint":           7,
	"Material_BattlePass": 8,
	"Material_Guard":      9,
}

func (x MaterialType) String() string {
	return proto.EnumName(MaterialType_name, int32(x))
}

func (MaterialType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{9}
}

type ETypeItem int32

const (
	ETypeItem_TItem_None          ETypeItem = 0
	ETypeItem_TItem_Diamond       ETypeItem = 1
	ETypeItem_TItem_Gold          ETypeItem = 2
	ETypeItem_TItem_Silver        ETypeItem = 3
	ETypeItem_TItem_Coin          ETypeItem = 4
	ETypeItem_TItem_Exp           ETypeItem = 5
	ETypeItem_TItem_Stamina       ETypeItem = 6
	ETypeItem_TItem_SkillPoint    ETypeItem = 7
	ETypeItem_TItem_AnecdotePage  ETypeItem = 8
	ETypeItem_TItem_TaskPoint     ETypeItem = 9
	ETypeItem_TItem_MaxCurrency   ETypeItem = 10
	ETypeItem_TItem_RealItemStart ETypeItem = 11
	ETypeItem_TItem_Normal        ETypeItem = 12
	ETypeItem_TItem_Equipment     ETypeItem = 13
	ETypeItem_TItem_Scroll        ETypeItem = 14
	ETypeItem_TItem_Rune          ETypeItem = 15
	ETypeItem_TItem_Skin          ETypeItem = 16
	ETypeItem_TItem_Frame         ETypeItem = 17
)

var ETypeItem_name = map[int32]string{
	0:  "TItem_None",
	1:  "TItem_Diamond",
	2:  "TItem_Gold",
	3:  "TItem_Silver",
	4:  "TItem_Coin",
	5:  "TItem_Exp",
	6:  "TItem_Stamina",
	7:  "TItem_SkillPoint",
	8:  "TItem_AnecdotePage",
	9:  "TItem_TaskPoint",
	10: "TItem_MaxCurrency",
	11: "TItem_RealItemStart",
	12: "TItem_Normal",
	13: "TItem_Equipment",
	14: "TItem_Scroll",
	15: "TItem_Rune",
	16: "TItem_Skin",
	17: "TItem_Frame",
}

var ETypeItem_value = map[string]int32{
	"TItem_None":          0,
	"TItem_Diamond":       1,
	"TItem_Gold":          2,
	"TItem_Silver":        3,
	"TItem_Coin":          4,
	"TItem_Exp":           5,
	"TItem_Stamina":       6,
	"TItem_SkillPoint":    7,
	"TItem_AnecdotePage":  8,
	"TItem_TaskPoint":     9,
	"TItem_MaxCurrency":   10,
	"TItem_RealItemStart": 11,
	"TItem_Normal":        12,
	"TItem_Equipment":     13,
	"TItem_Scroll":        14,
	"TItem_Rune":          15,
	"TItem_Skin":          16,
	"TItem_Frame":         17,
}

func (x ETypeItem) String() string {
	return proto.EnumName(ETypeItem_name, int32(x))
}

func (ETypeItem) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{10}
}

type GameDungeonDirection int32

const (
	GameDungeonDirection_North GameDungeonDirection = 0
	GameDungeonDirection_East  GameDungeonDirection = 1
	GameDungeonDirection_South GameDungeonDirection = 2
	GameDungeonDirection_West  GameDungeonDirection = 3
	GameDungeonDirection_None  GameDungeonDirection = 4
)

var GameDungeonDirection_name = map[int32]string{
	0: "North",
	1: "East",
	2: "South",
	3: "West",
	4: "None",
}

var GameDungeonDirection_value = map[string]int32{
	"North": 0,
	"East":  1,
	"South": 2,
	"West":  3,
	"None":  4,
}

func (x GameDungeonDirection) String() string {
	return proto.EnumName(GameDungeonDirection_name, int32(x))
}

func (GameDungeonDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{11}
}

type UnitSubType int32

const (
	UnitSubType_Melee  UnitSubType = 0
	UnitSubType_Ranger UnitSubType = 1
	UnitSubType_Wild   UnitSubType = 2
	UnitSubType_Camp   UnitSubType = 3
)

var UnitSubType_name = map[int32]string{
	0: "Melee",
	1: "Ranger",
	2: "Wild",
	3: "Camp",
}

var UnitSubType_value = map[string]int32{
	"Melee":  0,
	"Ranger": 1,
	"Wild":   2,
	"Camp":   3,
}

func (x UnitSubType) String() string {
	return proto.EnumName(UnitSubType_name, int32(x))
}

func (UnitSubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{12}
}

type GameQuestActionType int32

const (
	GameQuestActionType_GameQuestActionType_Reward GameQuestActionType = 0
)

var GameQuestActionType_name = map[int32]string{
	0: "GameQuestActionType_Reward",
}

var GameQuestActionType_value = map[string]int32{
	"GameQuestActionType_Reward": 0,
}

func (x GameQuestActionType) String() string {
	return proto.EnumName(GameQuestActionType_name, int32(x))
}

func (GameQuestActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{13}
}

type GameConditionOperator int32

const (
	GameConditionOperator_GameConditionOperator_And GameConditionOperator = 0
	GameConditionOperator_GameConditionOperator_Or  GameConditionOperator = 1
)

var GameConditionOperator_name = map[int32]string{
	0: "GameConditionOperator_And",
	1: "GameConditionOperator_Or",
}

var GameConditionOperator_value = map[string]int32{
	"GameConditionOperator_And": 0,
	"GameConditionOperator_Or":  1,
}

func (x GameConditionOperator) String() string {
	return proto.EnumName(GameConditionOperator_name, int32(x))
}

func (GameConditionOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{14}
}

type GameConditionType int32

const (
	GameConditionType_GameConditionType_Stamina       GameConditionType = 0
	GameConditionType_GameConditionType_PlayerLevel   GameConditionType = 1
	GameConditionType_GameConditionType_PreLevel      GameConditionType = 2
	GameConditionType_GameConditionType_Item          GameConditionType = 3
	GameConditionType_GameConditionType_DayOfWeek     GameConditionType = 4
	GameConditionType_GameConditionType_DateTime      GameConditionType = 5
	GameConditionType_GameConditionType_Quest         GameConditionType = 6
	GameConditionType_GameConditionType_Hero          GameConditionType = 7
	GameConditionType_GameConditionType_NoItem        GameConditionType = 8
	GameConditionType_GameConditionType_PlayerLevelLE GameConditionType = 9
	GameConditionType_GameConditionType_CumRecharge   GameConditionType = 10
	GameConditionType_GameConditionType_Reputation    GameConditionType = 11
	GameConditionType_GameConditionType_PlayerClLevel GameConditionType = 12
	GameConditionType_GameConditionType_Skin          GameConditionType = 13
	GameConditionType_GameConditionType_NoReputation  GameConditionType = 14
	GameConditionType_GameConditionType_CompleteGuide GameConditionType = 15
)

var GameConditionType_name = map[int32]string{
	0:  "GameConditionType_Stamina",
	1:  "GameConditionType_PlayerLevel",
	2:  "GameConditionType_PreLevel",
	3:  "GameConditionType_Item",
	4:  "GameConditionType_DayOfWeek",
	5:  "GameConditionType_DateTime",
	6:  "GameConditionType_Quest",
	7:  "GameConditionType_Hero",
	8:  "GameConditionType_NoItem",
	9:  "GameConditionType_PlayerLevelLE",
	10: "GameConditionType_CumRecharge",
	11: "GameConditionType_Reputation",
	12: "GameConditionType_PlayerClLevel",
	13: "GameConditionType_Skin",
	14: "GameConditionType_NoReputation",
	15: "GameConditionType_CompleteGuide",
}

var GameConditionType_value = map[string]int32{
	"GameConditionType_Stamina":       0,
	"GameConditionType_PlayerLevel":   1,
	"GameConditionType_PreLevel":      2,
	"GameConditionType_Item":          3,
	"GameConditionType_DayOfWeek":     4,
	"GameConditionType_DateTime":      5,
	"GameConditionType_Quest":         6,
	"GameConditionType_Hero":          7,
	"GameConditionType_NoItem":        8,
	"GameConditionType_PlayerLevelLE": 9,
	"GameConditionType_CumRecharge":   10,
	"GameConditionType_Reputation":    11,
	"GameConditionType_PlayerClLevel": 12,
	"GameConditionType_Skin":          13,
	"GameConditionType_NoReputation":  14,
	"GameConditionType_CompleteGuide": 15,
}

func (x GameConditionType) String() string {
	return proto.EnumName(GameConditionType_name, int32(x))
}

func (GameConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{15}
}

type QuestStatus int32

const (
	QuestStatus_QuestStatus_Inactive QuestStatus = 0
	QuestStatus_QuestStatus_Active   QuestStatus = 1
	QuestStatus_QuestStatus_Finish   QuestStatus = 2
	QuestStatus_QuestStatus_Rewarded QuestStatus = 3
)

var QuestStatus_name = map[int32]string{
	0: "QuestStatus_Inactive",
	1: "QuestStatus_Active",
	2: "QuestStatus_Finish",
	3: "QuestStatus_Rewarded",
}

var QuestStatus_value = map[string]int32{
	"QuestStatus_Inactive": 0,
	"QuestStatus_Active":   1,
	"QuestStatus_Finish":   2,
	"QuestStatus_Rewarded": 3,
}

func (x QuestStatus) String() string {
	return proto.EnumName(QuestStatus_name, int32(x))
}

func (QuestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{16}
}

type GameQuestRepeatType int32

const (
	GameQuestRepeatType_GameQuestRepeatType_Once        GameQuestRepeatType = 0
	GameQuestRepeatType_GameQuestRepeatType_Repeat      GameQuestRepeatType = 1
	GameQuestRepeatType_GameQuestRepeatType_AccountOnce GameQuestRepeatType = 2
)

var GameQuestRepeatType_name = map[int32]string{
	0: "GameQuestRepeatType_Once",
	1: "GameQuestRepeatType_Repeat",
	2: "GameQuestRepeatType_AccountOnce",
}

var GameQuestRepeatType_value = map[string]int32{
	"GameQuestRepeatType_Once":        0,
	"GameQuestRepeatType_Repeat":      1,
	"GameQuestRepeatType_AccountOnce": 2,
}

func (x GameQuestRepeatType) String() string {
	return proto.EnumName(GameQuestRepeatType_name, int32(x))
}

func (GameQuestRepeatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{17}
}

type GameQuestType int32

const (
	GameQuestType_GameQuestType_Normal                    GameQuestType = 0
	GameQuestType_GameQuestType_Login                     GameQuestType = 1
	GameQuestType_GameQuestType_QuestPoint                GameQuestType = 2
	GameQuestType_GameQuestType_Level                     GameQuestType = 3
	GameQuestType_GameQuestType_PassLevel                 GameQuestType = 4
	GameQuestType_GameQuestType_PassLevelWithAdvanceSkill GameQuestType = 5
	GameQuestType_GameQuestType_PassLevelWithSkillType    GameQuestType = 6
	GameQuestType_GameQuestType_PassLevelWithSkillCount   GameQuestType = 7
	GameQuestType_GameQuestType_PassLevelWithEmptyChain   GameQuestType = 8
	GameQuestType_GameQuestType_SkillSlot                 GameQuestType = 9
	GameQuestType_GameQuestType_SkillLevel                GameQuestType = 10
	GameQuestType_GameQuestType_GetSkill                  GameQuestType = 11
	GameQuestType_GameQuestType_RefreshSkillPoint         GameQuestType = 12
	GameQuestType_GameQuestType_MurderCount               GameQuestType = 13
	GameQuestType_GameQuestType_AdvanceSkillCount         GameQuestType = 14
	GameQuestType_GameQuestType_ScrollLevelUp             GameQuestType = 15
	GameQuestType_GameQuestType_GetScroll                 GameQuestType = 16
	GameQuestType_GameQuestType_ScrollSkilldAttributeUp   GameQuestType = 17
	GameQuestType_GameQuestType_ScrollMax                 GameQuestType = 18
	GameQuestType_GameQuestType_EquipScroll               GameQuestType = 19
	GameQuestType_GameQuestType_ActivateScrollSet         GameQuestType = 20
	GameQuestType_GameQuestType_ScrollUpgrade             GameQuestType = 21
	GameQuestType_GameQuestType_GainEquipmentCount        GameQuestType = 22
	GameQuestType_GameQuestType_RefineTimes               GameQuestType = 23
	GameQuestType_GameQuestType_EnhanceTimes              GameQuestType = 24
	GameQuestType_GameQuestType_EnhanceLevel              GameQuestType = 25
	GameQuestType_GameQuestType_RecycleEquipment          GameQuestType = 26
	GameQuestType_GameQuestType_EquipEquipment            GameQuestType = 27
	GameQuestType_GameQuestType_EnhanceLevelAndCount      GameQuestType = 28
	GameQuestType_GameQuestType_FullEquipment             GameQuestType = 29
	GameQuestType_GameQuestType_FollowerCount             GameQuestType = 30
	GameQuestType_GameQuestType_FollowsCount              GameQuestType = 31
	GameQuestType_GameQuestType_AccumulateLoginTimes      GameQuestType = 32
	GameQuestType_GameQuestType_ContinuityLoginTimes      GameQuestType = 33
	GameQuestType_GameQuestType_ChangeItem                GameQuestType = 34
	GameQuestType_GameQuestType_ShopBuy                   GameQuestType = 35
	GameQuestType_GameQuestType_NPCEvent                  GameQuestType = 36
	GameQuestType_GameQuestType_Switch                    GameQuestType = 37
	GameQuestType_GameQuestType_PassLevelWithBasicSkill   GameQuestType = 38
	GameQuestType_GameQuestType_PassLevelWithoutMurder    GameQuestType = 39
	GameQuestType_GameQuestType_MultiLevelPass            GameQuestType = 40
	GameQuestType_GameQuestType_MultiItemGet              GameQuestType = 41
	GameQuestType_GameQuestType_MultiQuestFinish          GameQuestType = 42
	GameQuestType_GameQuestType_DefeatSin                 GameQuestType = 43
	GameQuestType_GameQuestType_UpgradeRune               GameQuestType = 44
	GameQuestType_GameQuestType_EvolutionEquipment        GameQuestType = 45
	GameQuestType_GameQuestType_SendGift                  GameQuestType = 46
	GameQuestType_GameQuestType_EquipRune                 GameQuestType = 47
	GameQuestType_GameQuestType_ResetRuneSlot             GameQuestType = 48
	GameQuestType_GameQuestType_GetFriend                 GameQuestType = 49
	GameQuestType_GameQuestType_HaoGanDu                  GameQuestType = 50
	GameQuestType_GameQuestType_ZuiTiJingHua              GameQuestType = 51
	GameQuestType_GameQuestType_ZuiTiZhenXie              GameQuestType = 52
	GameQuestType_GameQuestType_Rank                      GameQuestType = 53
	GameQuestType_GameQuestType_UnlockFood                GameQuestType = 54
	GameQuestType_GameQuestType_ActivePotential           GameQuestType = 55
	GameQuestType_GameQuestType_DifferentShopBuy          GameQuestType = 56
	GameQuestType_GameQuestType_Cook                      GameQuestType = 57
	GameQuestType_GameQuestType_ConsumeItem               GameQuestType = 58
	GameQuestType_GameQuestType_GetEquipment              GameQuestType = 59
	GameQuestType_GameQuestType_KillEnemy                 GameQuestType = 60
	GameQuestType_GameQuestType_Activity                  GameQuestType = 61
	GameQuestType_GameQuestType_ScrollReinforce           GameQuestType = 62
	GameQuestType_GameQuestType_Reputation                GameQuestType = 63
	GameQuestType_GameQuestType_SharePictures             GameQuestType = 64
	GameQuestType_GameQuestType_Handbook                  GameQuestType = 65
	GameQuestType_GameQuestType_AccumulateLogin           GameQuestType = 66
	GameQuestType_GameQuestType_LevelChallenge            GameQuestType = 67
	GameQuestType_GameQuestType_LevelChallenge_FinishAll  GameQuestType = 68
	GameQuestType_GameQuestType_ActivityLoginDays         GameQuestType = 69
	GameQuestType_GameQuestType_CorpsContribute           GameQuestType = 70
	GameQuestType_GameQuestType_MultiConsumeItem          GameQuestType = 71
	GameQuestType_GameQuestType_ConsumeRepu               GameQuestType = 72
	GameQuestType_GameQuestType_AccumulateRecharge        GameQuestType = 73
	GameQuestType_GameQuestType_DefeatCorpBoss            GameQuestType = 74
	GameQuestType_GameQuestType_PVP                       GameQuestType = 75
	GameQuestType_GameQuestType_JoinSecretFileIns         GameQuestType = 76
	GameQuestType_GameQuestType_PassSecretFileIns         GameQuestType = 77
	GameQuestType_GameQuestType_GlobalChallenge           GameQuestType = 78
	GameQuestType_GameQuestType_EnterHomeland             GameQuestType = 79
	GameQuestType_GameQuestType_MultiShopBuy              GameQuestType = 80
	GameQuestType_GameQuestType_EnterLevel                GameQuestType = 81
	GameQuestType_GameQuestType_EnterLocation             GameQuestType = 82
)

var GameQuestType_name = map[int32]string{
	0:  "GameQuestType_Normal",
	1:  "GameQuestType_Login",
	2:  "GameQuestType_QuestPoint",
	3:  "GameQuestType_Level",
	4:  "GameQuestType_PassLevel",
	5:  "GameQuestType_PassLevelWithAdvanceSkill",
	6:  "GameQuestType_PassLevelWithSkillType",
	7:  "GameQuestType_PassLevelWithSkillCount",
	8:  "GameQuestType_PassLevelWithEmptyChain",
	9:  "GameQuestType_SkillSlot",
	10: "GameQuestType_SkillLevel",
	11: "GameQuestType_GetSkill",
	12: "GameQuestType_RefreshSkillPoint",
	13: "GameQuestType_MurderCount",
	14: "GameQuestType_AdvanceSkillCount",
	15: "GameQuestType_ScrollLevelUp",
	16: "GameQuestType_GetScroll",
	17: "GameQuestType_ScrollSkilldAttributeUp",
	18: "GameQuestType_ScrollMax",
	19: "GameQuestType_EquipScroll",
	20: "GameQuestType_ActivateScrollSet",
	21: "GameQuestType_ScrollUpgrade",
	22: "GameQuestType_GainEquipmentCount",
	23: "GameQuestType_RefineTimes",
	24: "GameQuestType_EnhanceTimes",
	25: "GameQuestType_EnhanceLevel",
	26: "GameQuestType_RecycleEquipment",
	27: "GameQuestType_EquipEquipment",
	28: "GameQuestType_EnhanceLevelAndCount",
	29: "GameQuestType_FullEquipment",
	30: "GameQuestType_FollowerCount",
	31: "GameQuestType_FollowsCount",
	32: "GameQuestType_AccumulateLoginTimes",
	33: "GameQuestType_ContinuityLoginTimes",
	34: "GameQuestType_ChangeItem",
	35: "GameQuestType_ShopBuy",
	36: "GameQuestType_NPCEvent",
	37: "GameQuestType_Switch",
	38: "GameQuestType_PassLevelWithBasicSkill",
	39: "GameQuestType_PassLevelWithoutMurder",
	40: "GameQuestType_MultiLevelPass",
	41: "GameQuestType_MultiItemGet",
	42: "GameQuestType_MultiQuestFinish",
	43: "GameQuestType_DefeatSin",
	44: "GameQuestType_UpgradeRune",
	45: "GameQuestType_EvolutionEquipment",
	46: "GameQuestType_SendGift",
	47: "GameQuestType_EquipRune",
	48: "GameQuestType_ResetRuneSlot",
	49: "GameQuestType_GetFriend",
	50: "GameQuestType_HaoGanDu",
	51: "GameQuestType_ZuiTiJingHua",
	52: "GameQuestType_ZuiTiZhenXie",
	53: "GameQuestType_Rank",
	54: "GameQuestType_UnlockFood",
	55: "GameQuestType_ActivePotential",
	56: "GameQuestType_DifferentShopBuy",
	57: "GameQuestType_Cook",
	58: "GameQuestType_ConsumeItem",
	59: "GameQuestType_GetEquipment",
	60: "GameQuestType_KillEnemy",
	61: "GameQuestType_Activity",
	62: "GameQuestType_ScrollReinforce",
	63: "GameQuestType_Reputation",
	64: "GameQuestType_SharePictures",
	65: "GameQuestType_Handbook",
	66: "GameQuestType_AccumulateLogin",
	67: "GameQuestType_LevelChallenge",
	68: "GameQuestType_LevelChallenge_FinishAll",
	69: "GameQuestType_ActivityLoginDays",
	70: "GameQuestType_CorpsContribute",
	71: "GameQuestType_MultiConsumeItem",
	72: "GameQuestType_ConsumeRepu",
	73: "GameQuestType_AccumulateRecharge",
	74: "GameQuestType_DefeatCorpBoss",
	75: "GameQuestType_PVP",
	76: "GameQuestType_JoinSecretFileIns",
	77: "GameQuestType_PassSecretFileIns",
	78: "GameQuestType_GlobalChallenge",
	79: "GameQuestType_EnterHomeland",
	80: "GameQuestType_MultiShopBuy",
	81: "GameQuestType_EnterLevel",
	82: "GameQuestType_EnterLocation",
}

var GameQuestType_value = map[string]int32{
	"GameQuestType_Normal":                    0,
	"GameQuestType_Login":                     1,
	"GameQuestType_QuestPoint":                2,
	"GameQuestType_Level":                     3,
	"GameQuestType_PassLevel":                 4,
	"GameQuestType_PassLevelWithAdvanceSkill": 5,
	"GameQuestType_PassLevelWithSkillType":    6,
	"GameQuestType_PassLevelWithSkillCount":   7,
	"GameQuestType_PassLevelWithEmptyChain":   8,
	"GameQuestType_SkillSlot":                 9,
	"GameQuestType_SkillLevel":                10,
	"GameQuestType_GetSkill":                  11,
	"GameQuestType_RefreshSkillPoint":         12,
	"GameQuestType_MurderCount":               13,
	"GameQuestType_AdvanceSkillCount":         14,
	"GameQuestType_ScrollLevelUp":             15,
	"GameQuestType_GetScroll":                 16,
	"GameQuestType_ScrollSkilldAttributeUp":   17,
	"GameQuestType_ScrollMax":                 18,
	"GameQuestType_EquipScroll":               19,
	"GameQuestType_ActivateScrollSet":         20,
	"GameQuestType_ScrollUpgrade":             21,
	"GameQuestType_GainEquipmentCount":        22,
	"GameQuestType_RefineTimes":               23,
	"GameQuestType_EnhanceTimes":              24,
	"GameQuestType_EnhanceLevel":              25,
	"GameQuestType_RecycleEquipment":          26,
	"GameQuestType_EquipEquipment":            27,
	"GameQuestType_EnhanceLevelAndCount":      28,
	"GameQuestType_FullEquipment":             29,
	"GameQuestType_FollowerCount":             30,
	"GameQuestType_FollowsCount":              31,
	"GameQuestType_AccumulateLoginTimes":      32,
	"GameQuestType_ContinuityLoginTimes":      33,
	"GameQuestType_ChangeItem":                34,
	"GameQuestType_ShopBuy":                   35,
	"GameQuestType_NPCEvent":                  36,
	"GameQuestType_Switch":                    37,
	"GameQuestType_PassLevelWithBasicSkill":   38,
	"GameQuestType_PassLevelWithoutMurder":    39,
	"GameQuestType_MultiLevelPass":            40,
	"GameQuestType_MultiItemGet":              41,
	"GameQuestType_MultiQuestFinish":          42,
	"GameQuestType_DefeatSin":                 43,
	"GameQuestType_UpgradeRune":               44,
	"GameQuestType_EvolutionEquipment":        45,
	"GameQuestType_SendGift":                  46,
	"GameQuestType_EquipRune":                 47,
	"GameQuestType_ResetRuneSlot":             48,
	"GameQuestType_GetFriend":                 49,
	"GameQuestType_HaoGanDu":                  50,
	"GameQuestType_ZuiTiJingHua":              51,
	"GameQuestType_ZuiTiZhenXie":              52,
	"GameQuestType_Rank":                      53,
	"GameQuestType_UnlockFood":                54,
	"GameQuestType_ActivePotential":           55,
	"GameQuestType_DifferentShopBuy":          56,
	"GameQuestType_Cook":                      57,
	"GameQuestType_ConsumeItem":               58,
	"GameQuestType_GetEquipment":              59,
	"GameQuestType_KillEnemy":                 60,
	"GameQuestType_Activity":                  61,
	"GameQuestType_ScrollReinforce":           62,
	"GameQuestType_Reputation":                63,
	"GameQuestType_SharePictures":             64,
	"GameQuestType_Handbook":                  65,
	"GameQuestType_AccumulateLogin":           66,
	"GameQuestType_LevelChallenge":            67,
	"GameQuestType_LevelChallenge_FinishAll":  68,
	"GameQuestType_ActivityLoginDays":         69,
	"GameQuestType_CorpsContribute":           70,
	"GameQuestType_MultiConsumeItem":          71,
	"GameQuestType_ConsumeRepu":               72,
	"GameQuestType_AccumulateRecharge":        73,
	"GameQuestType_DefeatCorpBoss":            74,
	"GameQuestType_PVP":                       75,
	"GameQuestType_JoinSecretFileIns":         76,
	"GameQuestType_PassSecretFileIns":         77,
	"GameQuestType_GlobalChallenge":           78,
	"GameQuestType_EnterHomeland":             79,
	"GameQuestType_MultiShopBuy":              80,
	"GameQuestType_EnterLevel":                81,
	"GameQuestType_EnterLocation":             82,
}

func (x GameQuestType) String() string {
	return proto.EnumName(GameQuestType_name, int32(x))
}

func (GameQuestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{18}
}

type EGameRoomType int32

const (
	EGameRoomType_Room_None EGameRoomType = 0
	EGameRoomType_Room_PvP  EGameRoomType = 1
	EGameRoomType_Room_PvE  EGameRoomType = 2
)

var EGameRoomType_name = map[int32]string{
	0: "Room_None",
	1: "Room_PvP",
	2: "Room_PvE",
}

var EGameRoomType_value = map[string]int32{
	"Room_None": 0,
	"Room_PvP":  1,
	"Room_PvE":  2,
}

func (x EGameRoomType) String() string {
	return proto.EnumName(EGameRoomType_name, int32(x))
}

func (EGameRoomType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{19}
}

type EEntranceState int32

const (
	EEntranceState_ES_None     EEntranceState = 0
	EEntranceState_ES_Hidden   EEntranceState = 1
	EEntranceState_ES_ShowOnly EEntranceState = 2
	EEntranceState_ES_Actived  EEntranceState = 3
)

var EEntranceState_name = map[int32]string{
	0: "ES_None",
	1: "ES_Hidden",
	2: "ES_ShowOnly",
	3: "ES_Actived",
}

var EEntranceState_value = map[string]int32{
	"ES_None":     0,
	"ES_Hidden":   1,
	"ES_ShowOnly": 2,
	"ES_Actived":  3,
}

func (x EEntranceState) String() string {
	return proto.EnumName(EEntranceState_name, int32(x))
}

func (EEntranceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{20}
}

type EGameRoomState int32

const (
	EGameRoomState_GRS_None         EGameRoomState = 0
	EGameRoomState_GRS_WaitingJoin  EGameRoomState = 1
	EGameRoomState_GRS_WaitingReady EGameRoomState = 2
	EGameRoomState_GRS_Playing      EGameRoomState = 3
	EGameRoomState_GRS_Disbanding   EGameRoomState = 4
	EGameRoomState_GRS_Closed       EGameRoomState = 5
)

var EGameRoomState_name = map[int32]string{
	0: "GRS_None",
	1: "GRS_WaitingJoin",
	2: "GRS_WaitingReady",
	3: "GRS_Playing",
	4: "GRS_Disbanding",
	5: "GRS_Closed",
}

var EGameRoomState_value = map[string]int32{
	"GRS_None":         0,
	"GRS_WaitingJoin":  1,
	"GRS_WaitingReady": 2,
	"GRS_Playing":      3,
	"GRS_Disbanding":   4,
	"GRS_Closed":       5,
}

func (x EGameRoomState) String() string {
	return proto.EnumName(EGameRoomState_name, int32(x))
}

func (EGameRoomState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{21}
}

type ESlotState int32

const (
	ESlotState_Slot_Unused ESlotState = 0
	ESlotState_Slot_Locked ESlotState = -1
)

var ESlotState_name = map[int32]string{
	0:  "Slot_Unused",
	-1: "Slot_Locked",
}

var ESlotState_value = map[string]int32{
	"Slot_Unused": 0,
	"Slot_Locked": -1,
}

func (x ESlotState) String() string {
	return proto.EnumName(ESlotState_name, int32(x))
}

func (ESlotState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{22}
}

type LuckyCritType int32

const (
	LuckyCritType_Crit_Normal     LuckyCritType = 0
	LuckyCritType_Crit_Lucky      LuckyCritType = 1
	LuckyCritType_Crit_UltraLucky LuckyCritType = 2
)

var LuckyCritType_name = map[int32]string{
	0: "Crit_Normal",
	1: "Crit_Lucky",
	2: "Crit_UltraLucky",
}

var LuckyCritType_value = map[string]int32{
	"Crit_Normal":     0,
	"Crit_Lucky":      1,
	"Crit_UltraLucky": 2,
}

func (x LuckyCritType) String() string {
	return proto.EnumName(LuckyCritType_name, int32(x))
}

func (LuckyCritType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{23}
}

type EquipmentSexLimit int32

const (
	EquipmentSexLimit_EquipmentSexLimit_Female EquipmentSexLimit = 0
	EquipmentSexLimit_EquipmentSexLimit_Male   EquipmentSexLimit = 1
	EquipmentSexLimit_EquipmentSexLimit_Common EquipmentSexLimit = 2
)

var EquipmentSexLimit_name = map[int32]string{
	0: "EquipmentSexLimit_Female",
	1: "EquipmentSexLimit_Male",
	2: "EquipmentSexLimit_Common",
}

var EquipmentSexLimit_value = map[string]int32{
	"EquipmentSexLimit_Female": 0,
	"EquipmentSexLimit_Male":   1,
	"EquipmentSexLimit_Common": 2,
}

func (x EquipmentSexLimit) String() string {
	return proto.EnumName(EquipmentSexLimit_name, int32(x))
}

func (EquipmentSexLimit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{24}
}

type UnitCareerType1 int32

const (
	UnitCareerType1_UnitCareer_None      UnitCareerType1 = 0
	UnitCareerType1_UnitCareer_Hun       UnitCareerType1 = 1
	UnitCareerType1_UnitCareer_MuXiaoKui UnitCareerType1 = 2
	UnitCareerType1_UnitCareer_XianZhe   UnitCareerType1 = 3
	UnitCareerType1_UnitCareer_ZuoShang  UnitCareerType1 = 4
	UnitCareerType1_UnitCareer_XiaoSi    UnitCareerType1 = 5
)

var UnitCareerType1_name = map[int32]string{
	0: "UnitCareer_None",
	1: "UnitCareer_Hun",
	2: "UnitCareer_MuXiaoKui",
	3: "UnitCareer_XianZhe",
	4: "UnitCareer_ZuoShang",
	5: "UnitCareer_XiaoSi",
}

var UnitCareerType1_value = map[string]int32{
	"UnitCareer_None":      0,
	"UnitCareer_Hun":       1,
	"UnitCareer_MuXiaoKui": 2,
	"UnitCareer_XianZhe":   3,
	"UnitCareer_ZuoShang":  4,
	"UnitCareer_XiaoSi":    5,
}

func (x UnitCareerType1) String() string {
	return proto.EnumName(UnitCareerType1_name, int32(x))
}

func (UnitCareerType1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{25}
}

type NumericType int32

const (
	NumericType_Numeric_None NumericType = 0
	//真正属性的最大枚举值
	NumericType_Max NumericType = 10000
	//当前血量
	NumericType_Hp     NumericType = 1001
	NumericType_HpBase NumericType = 10011
	//血量上限
	NumericType_MaxHp         NumericType = 1002
	NumericType_MaxHpBase     NumericType = 10021
	NumericType_MaxHpAdd      NumericType = 10022
	NumericType_MaxHpPct      NumericType = 10023
	NumericType_MaxHpFinalAdd NumericType = 10024
	NumericType_MaxHpFinalPct NumericType = 10025
	//物理攻击
	NumericType_Attack         NumericType = 1003
	NumericType_AttackBase     NumericType = 10031
	NumericType_AttackAdd      NumericType = 10032
	NumericType_AttackPct      NumericType = 10033
	NumericType_AttackFinalAdd NumericType = 10034
	NumericType_AttackFinalPct NumericType = 10035
	//混乱攻击,无视护甲
	NumericType_ChaosAttack         NumericType = 1004
	NumericType_ChaosAttackBase     NumericType = 10041
	NumericType_ChaosAttackAdd      NumericType = 10042
	NumericType_ChaosAttackPct      NumericType = 10043
	NumericType_ChaosAttackFinalAdd NumericType = 10044
	NumericType_ChaosAttackFinalPct NumericType = 10045
	//元素攻击
	NumericType_ElementAttack         NumericType = 1005
	NumericType_ElementAttackBase     NumericType = 10051
	NumericType_ElementAttackAdd      NumericType = 10052
	NumericType_ElementAttackPct      NumericType = 10053
	NumericType_ElementAttackFinalAdd NumericType = 10054
	NumericType_ElementAttackFinalPct NumericType = 10055
	//物理防御
	NumericType_Defence         NumericType = 1006
	NumericType_DefenceBase     NumericType = 10061
	NumericType_DefenceAdd      NumericType = 10062
	NumericType_DefencePct      NumericType = 10063
	NumericType_DefenceFinalAdd NumericType = 10064
	NumericType_DefenceFinalPct NumericType = 10065
	//暴击几率
	NumericType_CritChance         NumericType = 1007
	NumericType_CritChanceBase     NumericType = 10071
	NumericType_CritChanceAdd      NumericType = 10072
	NumericType_CritChancePct      NumericType = 10073
	NumericType_CritChanceFinalAdd NumericType = 10074
	NumericType_CritChanceFinalPct NumericType = 10075
	//暴击伤害
	NumericType_CritRate         NumericType = 1008
	NumericType_CritRateBase     NumericType = 10081
	NumericType_CritRateAdd      NumericType = 10082
	NumericType_CritRatePct      NumericType = 10083
	NumericType_CritRateFinalAdd NumericType = 10084
	NumericType_CritRateFinalPct NumericType = 10085
	//护盾当前值
	NumericType_Shield     NumericType = 1009
	NumericType_ShieldBase NumericType = 10091
	//护盾最大值
	NumericType_MaxShield         NumericType = 1010
	NumericType_MaxShieldBase     NumericType = 10101
	NumericType_MaxShieldAdd      NumericType = 10102
	NumericType_MaxShieldPct      NumericType = 10103
	NumericType_MaxShieldFinalAdd NumericType = 10104
	NumericType_MaxShieldFinalPct NumericType = 10105
	//破盾值
	NumericType_BreakShield         NumericType = 1012
	NumericType_BreakShieldBase     NumericType = 10121
	NumericType_BreakShieldAdd      NumericType = 10122
	NumericType_BreakShieldPct      NumericType = 10123
	NumericType_BreakShieldFinalAdd NumericType = 10124
	NumericType_BreakShieldFinalPct NumericType = 10125
	//护盾恢复时间
	NumericType_ShieldRegenTime     NumericType = 1013
	NumericType_ShieldRegenTimeBase NumericType = 10131
	NumericType_ShieldRegenTimeAdd  NumericType = 10132
	NumericType_ShieldRegenTimePct  NumericType = 10133
	//护盾恢复次数
	NumericType_ShieldRegenCount     NumericType = 1014
	NumericType_ShieldRegenCountBase NumericType = 10141
	NumericType_ShieldRegenCountAdd  NumericType = 10142
	NumericType_ShieldRegenCountPct  NumericType = 10143
	//护盾持续时间
	NumericType_ShieldDuration     NumericType = 1015
	NumericType_ShieldDurationBase NumericType = 10151
	NumericType_ShieldDurationAdd  NumericType = 10152
	NumericType_ShieldDurationPct  NumericType = 10153
	//护盾减伤率
	NumericType_ShieldReductionRate     NumericType = 1016
	NumericType_ShieldReductionRateBase NumericType = 10161
	NumericType_ShieldReductionRateAdd  NumericType = 10162
	NumericType_ShieldReductionRatePct  NumericType = 10163
	//火抗性
	NumericType_FireResistance     NumericType = 1017
	NumericType_FireResistanceBase NumericType = 10171
	NumericType_FireResistanceAdd  NumericType = 10172
	NumericType_FireResistancePct  NumericType = 10173
	//冰抗性
	NumericType_IceResistance     NumericType = 1018
	NumericType_IceResistanceBase NumericType = 10181
	NumericType_IceResistanceAdd  NumericType = 10182
	NumericType_IceResistancePct  NumericType = 10183
	//光抗性
	NumericType_LightResistance     NumericType = 1019
	NumericType_LightResistanceBase NumericType = 10191
	NumericType_LightResistanceAdd  NumericType = 10192
	NumericType_LightResistancePct  NumericType = 10193
	//暗抗性
	NumericType_DarkResistance     NumericType = 1020
	NumericType_DarkResistanceBase NumericType = 10201
	NumericType_DarkResistanceAdd  NumericType = 10202
	NumericType_DarkResistancePct  NumericType = 10203
	//当前奥义值
	NumericType_Ultimate     NumericType = 1021
	NumericType_UltimateBase NumericType = 10211
	//奥义值上限
	NumericType_MaxUltimate     NumericType = 1022
	NumericType_MaxUltimateBase NumericType = 10221
	NumericType_MaxUltimateAdd  NumericType = 10222
	NumericType_MaxUltimatePct  NumericType = 10223
	//当前杀意值
	NumericType_Murder     NumericType = 1023
	NumericType_MurderBase NumericType = 10231
	//杀意值上限
	NumericType_MaxMurder     NumericType = 1024
	NumericType_MaxMurderBase NumericType = 10241
	NumericType_MaxMurderAdd  NumericType = 10242
	NumericType_MaxMurderPct  NumericType = 10243
	//Unit 此次技能杀意消耗总值
	NumericType_MurderConsume     NumericType = 1025
	NumericType_MurderConsumeBase NumericType = 10251
	//使用技能消耗,增加杀意之前的值
	NumericType_MurderUsePre     NumericType = 1026
	NumericType_MurderUsePreBase NumericType = 10261
	//全抗性穿透
	NumericType_ResistanceBreakAll     NumericType = 1027
	NumericType_ResistanceBreakAllBase NumericType = 10271
	NumericType_ResistanceBreakAllAdd  NumericType = 10272
	NumericType_ResistanceBreakAllPct  NumericType = 10273
	//火抗性穿透
	NumericType_ResistanceBreakFire     NumericType = 1028
	NumericType_ResistanceBreakFireBase NumericType = 10281
	NumericType_ResistanceBreakFireAdd  NumericType = 10282
	NumericType_ResistanceBreakFirePct  NumericType = 10283
	//冰抗性穿透
	NumericType_ResistanceBreakIce     NumericType = 1029
	NumericType_ResistanceBreakIceBase NumericType = 10291
	NumericType_ResistanceBreakIceAdd  NumericType = 10292
	NumericType_ResistanceBreakIcePct  NumericType = 10293
	//光抗性穿透
	NumericType_ResistanceBreakLight     NumericType = 1030
	NumericType_ResistanceBreakLightBase NumericType = 10301
	NumericType_ResistanceBreakLightAdd  NumericType = 10302
	NumericType_ResistanceBreakLightPct  NumericType = 10303
	//暗抗性穿透
	NumericType_ResistanceBreakDark     NumericType = 1031
	NumericType_ResistanceBreakDarkBase NumericType = 10311
	NumericType_ResistanceBreakDarkAdd  NumericType = 10312
	NumericType_ResistanceBreakDarkPct  NumericType = 10313
	//物理穿透
	NumericType_PhysicBreak     NumericType = 1032
	NumericType_PhysicBreakBase NumericType = 10321
	NumericType_PhysicBreakAdd  NumericType = 10322
	NumericType_PhysicBreakPct  NumericType = 10323
	//全抗性
	NumericType_AllResistance     NumericType = 1033
	NumericType_AllResistanceBase NumericType = 10331
	NumericType_AllResistanceAdd  NumericType = 10332
	NumericType_AllResistancePct  NumericType = 10333
	//杀意消耗恢复生命
	NumericType_MurderConsumeCure     NumericType = 1034
	NumericType_MurderConsumeCureBase NumericType = 10341
	NumericType_MurderConsumeCureAdd  NumericType = 10342
	NumericType_MurderConsumeCurePct  NumericType = 10343
	//装备等级提升
	NumericType_EquipLevelUp     NumericType = 1035
	NumericType_EquipLevelUpBase NumericType = 10351
	NumericType_EquipLevelUpAdd  NumericType = 10352
	NumericType_EquipLevelUpPct  NumericType = 10353
	//装备套装需要数量减少
	NumericType_EquipSetNeedDown     NumericType = 1036
	NumericType_EquipSetNeedDownBase NumericType = 10361
	NumericType_EquipSetNeedDownAdd  NumericType = 10362
	NumericType_EquipSetNeedDownPct  NumericType = 10363
	//心法悟性值减少 x%
	NumericType_ScrollComprehensionDownRate     NumericType = 1037
	NumericType_ScrollComprehensionDownRateBase NumericType = 10371
	NumericType_ScrollComprehensionDownRateAdd  NumericType = 10372
	NumericType_ScrollComprehensionDownRatePct  NumericType = 10373
	//心法等级提升
	NumericType_ScrollLevelUp     NumericType = 1038
	NumericType_ScrollLevelUpBase NumericType = 10381
	NumericType_ScrollLevelUpAdd  NumericType = 10382
	NumericType_ScrollLevelUpPct  NumericType = 10383
	//心法绝技等级提升
	NumericType_ScrolSkilllLevelUp     NumericType = 1039
	NumericType_ScrolSkilllLevelUpBase NumericType = 10391
	NumericType_ScrolSkilllLevelUpAdd  NumericType = 10392
	NumericType_ScrollSkillLevelUpPct  NumericType = 10393
	//随机获得一个极品装备特效
	NumericType_GetEquipmentBuff     NumericType = 1040
	NumericType_GetEquipmentBuffBase NumericType = 10401
	NumericType_GetEquipmentBuffAdd  NumericType = 10402
	NumericType_GetEquipmentBuffPct  NumericType = 10403
	//完美防御延长
	NumericType_PerfectDefenseUp     NumericType = 1041
	NumericType_PerfectDefenseUpBase NumericType = 10411
	NumericType_PerfectDefenseUpAdd  NumericType = 10412
	NumericType_PerfectDefenseUpPct  NumericType = 10413
	//普通数值反伤
	NumericType_NormalDamageBack     NumericType = 1042
	NumericType_NormalDamageBackBase NumericType = 10421
	NumericType_NormalDamageBackAdd  NumericType = 10422
	NumericType_NormalDamageBackPct  NumericType = 10423
	//高级反伤 敌人伤害反弹比例
	NumericType_AdvanceDamageBackByDamage     NumericType = 1043
	NumericType_AdvanceDamageBackByDamageBase NumericType = 10431
	NumericType_AdvanceDamageBackByDamageAdd  NumericType = 10432
	NumericType_AdvanceDamageBackByDamagePct  NumericType = 10433
	//高级反伤 根据自身防御力比例
	NumericType_AdvanceDamageBackByDefence     NumericType = 1044
	NumericType_AdvanceDamageBackByDefenceBase NumericType = 10441
	NumericType_AdvanceDamageBackByDefenceAdd  NumericType = 10442
	NumericType_AdvanceDamageBackByDefencePct  NumericType = 10443
	//光环间隔延长(怪物专用)
	NumericType_HaloIntervalUp     NumericType = 1045
	NumericType_HaloIntervalUpBase NumericType = 10451
	NumericType_HaloIntervalUpAdd  NumericType = 10452
	NumericType_HaloIntervalUpPct  NumericType = 10453
	//重生次数
	NumericType_ReviveCount     NumericType = 1046
	NumericType_ReviveCountBase NumericType = 10461
	NumericType_ReviveCountAdd  NumericType = 10462
	NumericType_ReviveCountPct  NumericType = 10463
	//战斗过程中的护盾消耗(用于计算根据护盾转化伤害的功能)
	NumericType_BreakShieldConsume     NumericType = 1047
	NumericType_BreakShieldConsumeBase NumericType = 10471
	//数值血量消耗
	NumericType_HpConsumePercent     NumericType = 1048
	NumericType_HpConsumePercentBase NumericType = 10481
	//真实伤害
	NumericType_TrueDamage     NumericType = 1049
	NumericType_TrueDamageBase NumericType = 10491
	NumericType_TrueDamageAdd  NumericType = 10492
	NumericType_TrueDamagePct  NumericType = 10493
	//真实提升百分比
	NumericType_AllTrueDamage     NumericType = 1050
	NumericType_AllTrueDamageBase NumericType = 10501
	NumericType_AllTrueDamageAdd  NumericType = 10502
	NumericType_AllTrueDamagePct  NumericType = 10503
	//罪体战回血系数百分比
	NumericType_CrimeBlood         NumericType = 1051
	NumericType_CrimeBloodBase     NumericType = 10511
	NumericType_CrimeBloodBloodAdd NumericType = 10512
	NumericType_CrimeBloodBloodPct NumericType = 10513
	//罪体战反伤系数百分比
	NumericType_CrimeBackHurt     NumericType = 1052
	NumericType_CrimeBackHurtBase NumericType = 10521
	NumericType_CrimeBackHurtAdd  NumericType = 10522
	NumericType_CrimeBackHurtPct  NumericType = 10523
	//最终伤害修正值
	NumericType_DamageFinal     NumericType = 1053
	NumericType_DamageFinalBase NumericType = 10531
	NumericType_DamageFinalAdd  NumericType = 10532
	NumericType_DamageFinalPct  NumericType = 10533
	//恢复生命修正值
	NumericType_HealFinal     NumericType = 1054
	NumericType_HealFinalBase NumericType = 10541
	NumericType_HealFinalAdd  NumericType = 10542
	NumericType_HealFinalPct  NumericType = 10543
	/// 真最终暴击值
	NumericType_FinalCritChance     NumericType = 1055
	NumericType_FinalCritChanceBase NumericType = 10551
	NumericType_FinalCritChanceAdd  NumericType = 10552
	NumericType_FinalCritChancePct  NumericType = 10553
	// 防御输出修正
	NumericType_DefenseDamageFinal     NumericType = 1056
	NumericType_DefenseDamageFinalBase NumericType = 10561
	NumericType_DefenseDamageFinalAdd  NumericType = 10562
	NumericType_DefenseDamageFinalPct  NumericType = 10563
	// 奥义抗性
	NumericType_aoyiRd     NumericType = 1057
	NumericType_aoyiRdBase NumericType = 10571
	NumericType_aoyiRdAdd  NumericType = 10572
	NumericType_aoyiRdPct  NumericType = 10573
	// 普攻抗性
	NumericType_pugongRd     NumericType = 1058
	NumericType_pugongRdBase NumericType = 10581
	NumericType_pugongRdAdd  NumericType = 10582
	NumericType_pugongRdPct  NumericType = 10583
	//攻击最终伤害增加
	NumericType_AttackFinalHarm     NumericType = 1059
	NumericType_AttackFinalHarmBase NumericType = 10591
	NumericType_AttackFinalHarmAdd  NumericType = 10592
	// 防御最终伤害减少
	NumericType_DefenseFinalLossHarm     NumericType = 1060
	NumericType_DefenseFinalLossHarmBase NumericType = 10601
	NumericType_DefenseFinalLossHarmAdd  NumericType = 10602
	// 真人PVP减对方重量
	NumericType_RealPvpReduceWeight     NumericType = 1061
	NumericType_RealPvpReduceWeightBase NumericType = 10611
	NumericType_RealPvpReduceWeightAdd  NumericType = 10612
	NumericType_RealPvpReduceWeightPct  NumericType = 10613
	// 真人PVP抵抗减对方重量
	NumericType_RealPvpRdReduceWeight     NumericType = 1062
	NumericType_RealPvpRdReduceWeightBase NumericType = 10621
	NumericType_RealPvpRdReduceWeightAdd  NumericType = 10622
	NumericType_RealPvpRdReduceWeightPct  NumericType = 10623
	// 真人PVP抵抗暴击
	NumericType_RealPvpRdCritChance     NumericType = 1063
	NumericType_RealPvpRdCritChanceBase NumericType = 10631
	NumericType_RealPvpRdCritChanceAdd  NumericType = 10632
	NumericType_RealPvpRdCritChancePct  NumericType = 10633
	// 真人PVP抵抗暴击伤害
	NumericType_RealPvpRdCritRate     NumericType = 1064
	NumericType_RealPvpRdCritRateBase NumericType = 10641
	NumericType_RealPvpRdCritRateAdd  NumericType = 10642
	NumericType_RealPvpRdCritRatePct  NumericType = 10643
	// 真人PVP新雨加血效果
	NumericType_RealPvpXinYu     NumericType = 1065
	NumericType_RealPvpXinYuBase NumericType = 10651
	NumericType_RealPvpXinYuAdd  NumericType = 10652
	NumericType_RealPvpXinYuPct  NumericType = 10653
	// 真人PVP新雨加血抵抗效果
	NumericType_RealPvpRdXinYu     NumericType = 1066
	NumericType_RealPvpRdXinYuBase NumericType = 10661
	NumericType_RealPvpRdXinYuAdd  NumericType = 10662
	NumericType_RealPvpRdXinYuPct  NumericType = 10663
	// 仁王体力
	NumericType_RenWangTiLi     NumericType = 1067
	NumericType_RenWangTiLiBase NumericType = 10671
	NumericType_RenWangTiLiAdd  NumericType = 10672
	NumericType_RenWangTiLiPct  NumericType = 10673
	// 仁王体力恢复时间
	NumericType_RenWangTiLiRecoverTime     NumericType = 1068
	NumericType_RenWangTiLiRecoverTimeBase NumericType = 10681
	NumericType_RenWangTiLiRecoverTimeAdd  NumericType = 10682
	NumericType_RenWangTiLiRecoverTimePct  NumericType = 10683
	//全伤害增加
	NumericType_DamageEd     NumericType = 1101
	NumericType_DamageEdBase NumericType = 11011
	NumericType_DamageEdAdd  NumericType = 11012
	NumericType_DamageEdPct  NumericType = 11013
	//物理伤害增加
	NumericType_DamageNormalEd     NumericType = 1102
	NumericType_DamageNormalEdBase NumericType = 11021
	NumericType_DamageNormalEdAdd  NumericType = 11022
	NumericType_DamageNormalEdPct  NumericType = 11023
	//全元素伤害增加
	NumericType_DamageElementEd     NumericType = 1103
	NumericType_DamageElementEdBase NumericType = 11031
	NumericType_DamageElementEdAdd  NumericType = 11032
	NumericType_DamageElementEdPct  NumericType = 11033
	//火伤害增加
	NumericType_DamageEdFire     NumericType = 1104
	NumericType_DamageEdFireBase NumericType = 11041
	NumericType_DamageEdFireAdd  NumericType = 11042
	NumericType_DamageEdFirePct  NumericType = 11043
	//冰伤害增加
	NumericType_DamageEdIce     NumericType = 1105
	NumericType_DamageEdIceBase NumericType = 11051
	NumericType_DamageEdIceAdd  NumericType = 11052
	NumericType_DamageEdIcePct  NumericType = 11053
	//光伤害增加
	NumericType_DamageEdLight     NumericType = 1106
	NumericType_DamageEdLightBase NumericType = 11061
	NumericType_DamageEdLightAdd  NumericType = 11062
	NumericType_DamageEdLightPct  NumericType = 11063
	//暗伤害增加
	NumericType_DamageEdDark     NumericType = 1107
	NumericType_DamageEdDarkBase NumericType = 11071
	NumericType_DamageEdDarkAdd  NumericType = 11072
	NumericType_DamageEdDarkPct  NumericType = 11073
	//精英伤
	NumericType_EliteEd     NumericType = 1108
	NumericType_EliteEdBase NumericType = 11081
	NumericType_EliteEdAdd  NumericType = 11082
	NumericType_EliteEdPct  NumericType = 11083
	//Boss伤
	NumericType_BossEd     NumericType = 1109
	NumericType_BossEdBase NumericType = 11091
	NumericType_BossEdAdd  NumericType = 11092
	NumericType_BossEdPct  NumericType = 11093
	//普通怪物伤
	NumericType_MonsterEd     NumericType = 1110
	NumericType_MonsterEdBase NumericType = 11101
	NumericType_MonsterEdAdd  NumericType = 11102
	NumericType_MonsterEdPct  NumericType = 11103
	//近战伤
	NumericType_MeleeEd     NumericType = 1111
	NumericType_MeleeEdBase NumericType = 11111
	NumericType_MeleeEdAdd  NumericType = 11112
	NumericType_MeleeEdPct  NumericType = 11113
	//远程伤
	NumericType_RangerEd     NumericType = 1112
	NumericType_RangerEdBase NumericType = 11121
	NumericType_RangerEdAdd  NumericType = 11122
	NumericType_RangerEdPct  NumericType = 11123
	//承受全伤害减少
	NumericType_DamageRd     NumericType = 1131
	NumericType_DamageRdBase NumericType = 11311
	NumericType_DamageRdAdd  NumericType = 11312
	NumericType_DamageRdPct  NumericType = 11313
	//物理伤害减免
	NumericType_DamageNormalRd     NumericType = 1132
	NumericType_DamageNormalRdBase NumericType = 11321
	NumericType_DamageNormalRdAdd  NumericType = 11322
	NumericType_DamageNormalRdPct  NumericType = 11323
	//承受全元素伤害减少
	NumericType_DamageElementRd     NumericType = 1133
	NumericType_DamageElementRdBase NumericType = 11331
	NumericType_DamageElementRdAdd  NumericType = 11332
	NumericType_DamageElementRdPct  NumericType = 11333
	//承受火伤害减少
	NumericType_DamageRdFire     NumericType = 1134
	NumericType_DamageRdFireBase NumericType = 11341
	NumericType_DamageRdFireAdd  NumericType = 11342
	NumericType_DamageRdFirePct  NumericType = 11343
	//承受冰伤害减少
	NumericType_DamageRdIce     NumericType = 1135
	NumericType_DamageRdIceBase NumericType = 11351
	NumericType_DamageRdIceAdd  NumericType = 11352
	NumericType_DamageRdIcePct  NumericType = 11353
	//承受光伤害减少
	NumericType_DamageRdLight     NumericType = 1136
	NumericType_DamageRdLightBase NumericType = 11361
	NumericType_DamageRdLightAdd  NumericType = 11362
	NumericType_DamageRdLightPct  NumericType = 11363
	//承受暗伤害减少
	NumericType_DamageRdDark     NumericType = 1137
	NumericType_DamageRdDarkBase NumericType = 11371
	NumericType_DamageRdDarkAdd  NumericType = 11372
	NumericType_DamageRdDarkPct  NumericType = 11373
	//承受精英伤害减少
	NumericType_EliteRd     NumericType = 1138
	NumericType_EliteRdBase NumericType = 11381
	NumericType_EliteRdAdd  NumericType = 11382
	NumericType_EliteRdPct  NumericType = 11383
	//承受Boss伤害减少
	NumericType_BossRd     NumericType = 1139
	NumericType_BossRdBase NumericType = 11391
	NumericType_BossRdAdd  NumericType = 11392
	NumericType_BossRdPct  NumericType = 11393
	//承受普通怪物伤害减少
	NumericType_MonsterRd     NumericType = 1140
	NumericType_MonsterRdBase NumericType = 11401
	NumericType_MonsterRdAdd  NumericType = 11402
	NumericType_MonsterRdPct  NumericType = 11403
	//承受近战伤害减少
	NumericType_MeleeRd     NumericType = 1141
	NumericType_MeleeRdBase NumericType = 11411
	NumericType_MeleeRdAdd  NumericType = 11412
	NumericType_MeleeRdPct  NumericType = 11413
	//承受远程伤害减少
	NumericType_RangerRd     NumericType = 1142
	NumericType_RangerRdBase NumericType = 11421
	NumericType_RangerRdAdd  NumericType = 11422
	NumericType_RangerRdPct  NumericType = 11423
	//普攻伤害增加或减少
	//目前有两种特殊方式:
	//技能链上空技能槽,增加普攻伤害X%.
	NumericType_NormalAttackDamage     NumericType = 1161
	NumericType_NormalAttackDamageBase NumericType = 11611
	NumericType_NormalAttackDamageAdd  NumericType = 11612
	NumericType_NormalAttackDamagePct  NumericType = 11613
	//物理最终伤害增加
	//TODO:zhangwentao 和笑辰沟通, 要删除的属性.
	NumericType_DamageNormalFinalEd     NumericType = 1162
	NumericType_DamageNormalFinalEdBase NumericType = 11621
	NumericType_DamageNormalFinalEdAdd  NumericType = 11622
	NumericType_DamageNormalFinalEdPct  NumericType = 11623
	//元素最终伤害增加
	//TODO:zhangwentao 和笑辰沟通, 要删除的属性.
	NumericType_DamageElementFinalEd     NumericType = 1163
	NumericType_DamageElementFinalEdBase NumericType = 11631
	NumericType_DamageElementFinalEdAdd  NumericType = 11632
	NumericType_DamageElementFinalEdPct  NumericType = 11633
	//关卡内金币翻x倍
	NumericType_GoldMultiply     NumericType = 1164
	NumericType_GoldMultiplyBase NumericType = 11641
	NumericType_GoldMultiplyAdd  NumericType = 11642
	NumericType_GoldMultiplyPct  NumericType = 11643
	//关卡内经验翻x倍
	NumericType_ExpMultiply     NumericType = 1165
	NumericType_ExpMultiplyBase NumericType = 11651
	NumericType_ExpMultiplyAdd  NumericType = 11652
	NumericType_ExpMultiplyPct  NumericType = 11653
	//关卡内装备掉落率翻x倍
	NumericType_EquipDropMultiply     NumericType = 1166
	NumericType_EquipDropMultiplyBase NumericType = 11661
	NumericType_EquipDropMultiplyAdd  NumericType = 11662
	NumericType_EquipDropMultiplyPct  NumericType = 11663
	//关卡内装备掉落数量翻x倍
	NumericType_EquipDropCountMultiply     NumericType = 1167
	NumericType_EquipDropCountMultiplyBase NumericType = 11671
	NumericType_EquipDropCountMultiplyAdd  NumericType = 11672
	NumericType_EquipDropCountMultiplyPct  NumericType = 11673
	//伤害造成的回血减少
	NumericType_LifeEachDowm     NumericType = 1168
	NumericType_LifeEachDowmBase NumericType = 11681
	NumericType_LifeEachDowmAdd  NumericType = 11682
	NumericType_LifeEachDowmPct  NumericType = 11683
	//副心法的数量
	NumericType_SideScrollNum     NumericType = 1169
	NumericType_SideScrollNumBase NumericType = 11691
	NumericType_SideScrollNumAdd  NumericType = 11692
	//全链（包括主副心法）不可以装备同名心法
	NumericType_NotAllowSameScroll     NumericType = 1170
	NumericType_NotAllowSameScrollBase NumericType = 11701
	NumericType_NotAllowSameScrollAdd  NumericType = 11702
	//两件套只需要一件装备
	NumericType_MaxSuitTwoNeedOne     NumericType = 1171
	NumericType_MaxSuitTwoNeedOneBase NumericType = 11711
	NumericType_MaxSuitTwoNeedOneAdd  NumericType = 11712
	//机关伤害减少
	NumericType_TrapDamageRd     NumericType = 1172
	NumericType_TrapDamageRdBase NumericType = 11721
	NumericType_TrapDamageRdAdd  NumericType = 11722
	NumericType_TrapDamageRdPct  NumericType = 11723
	//击中恢复固定值(暗黑3 回击)
	NumericType_AddFixLifeEachHit     NumericType = 1201
	NumericType_AddFixLifeEachHitBase NumericType = 12011
	NumericType_AddFixLifeEachHitAdd  NumericType = 12012
	NumericType_AddFixLifeEachHitPct  NumericType = 12013
	//击中恢复伤害的百分比(常规游戏吸血)
	NumericType_AddPctLifeEachHit     NumericType = 1202
	NumericType_AddPctLifeEachHitBase NumericType = 12021
	NumericType_AddPctLifeEachHitAdd  NumericType = 12022
	NumericType_AddPctLifeEachHitPct  NumericType = 12023
	//击杀恢复
	NumericType_AddLifeEachKill     NumericType = 1203
	NumericType_AddLifeEachKillBase NumericType = 12031
	NumericType_AddLifeEachKillAdd  NumericType = 12032
	NumericType_AddLifeEachKillPct  NumericType = 12033
	//暗黑怪物的反伤固定值
	NumericType_ThornFixDamage     NumericType = 1204
	NumericType_ThornFixDamageBase NumericType = 12041
	NumericType_ThornFixDamageAdd  NumericType = 12042
	NumericType_ThornFixDamagePct  NumericType = 12043
	//暗黑怪物的反伤百分比
	NumericType_ThornPctDamage     NumericType = 1205
	NumericType_ThornPctDamageBase NumericType = 12051
	NumericType_ThornPctDamageAdd  NumericType = 12052
	NumericType_ThornPctDamagePct  NumericType = 12053
	//技能链1 总CD 增加或降低百分比
	NumericType_Chain1CoolDown     NumericType = 1206
	NumericType_Chain1CoolDownBase NumericType = 12061
	NumericType_Chain1CoolDownAdd  NumericType = 12062
	NumericType_Chain1CoolDownPct  NumericType = 12063
	//技能链2 总CD 增加或降低百分比
	NumericType_Chain2CoolDown     NumericType = 1207
	NumericType_Chain2CoolDownBase NumericType = 12071
	NumericType_Chain2CoolDownAdd  NumericType = 12072
	NumericType_Chain2CoolDownPct  NumericType = 12073
	//技能链1 破盾能力增加或者减少
	NumericType_Chain1BreakShield     NumericType = 1208
	NumericType_Chain1BreakShieldBase NumericType = 12081
	NumericType_Chain1BreakShieldAdd  NumericType = 12082
	NumericType_Chain1BreakShieldPct  NumericType = 12083
	//技能链2 破盾能力增加或者减少
	NumericType_Chain2BreakShield     NumericType = 1209
	NumericType_Chain2BreakShieldBase NumericType = 12091
	NumericType_Chain2BreakShieldAdd  NumericType = 12092
	NumericType_Chain2BreakShieldPct  NumericType = 12093
	//技能链1 伤害增加或者减少
	NumericType_Chain1PctDamage     NumericType = 1210
	NumericType_Chain1PctDamageBase NumericType = 12101
	NumericType_Chain1PctDamageAdd  NumericType = 12102
	NumericType_Chain1PctDamagePct  NumericType = 12103
	//技能链2 伤害增加或者减少
	NumericType_Chain2PctDamage     NumericType = 1211
	NumericType_Chain2PctDamageBase NumericType = 12111
	NumericType_Chain2PctDamageAdd  NumericType = 12112
	NumericType_Chain2PctDamagePct  NumericType = 12113
	//当前技能槽剩余数量
	NumericType_ChainSlotLeft     NumericType = 1212
	NumericType_ChainSlotLeftBase NumericType = 12121
	//技能槽剩余增伤
	NumericType_ChainSlotLeftPctDamage     NumericType = 1213
	NumericType_ChainSlotLeftPctDamageBase NumericType = 12131
	NumericType_ChainSlotLeftPctDamageAdd  NumericType = 12132
	NumericType_ChainSlotLeftPctDamagePct  NumericType = 12133
	//当前杀意满时增伤
	NumericType_MurderFullPctEd     NumericType = 1214
	NumericType_MurderFullPctEdBase NumericType = 12141
	NumericType_MurderFullPctEdAdd  NumericType = 12142
	NumericType_MurderFullPctEdPct  NumericType = 12143
	//当前杀意满时承受减伤
	NumericType_MurderFullPctRd     NumericType = 1215
	NumericType_MurderFullPctRdBase NumericType = 12151
	NumericType_MurderFullPctRdAdd  NumericType = 12152
	NumericType_MurderFullPctRdPct  NumericType = 12153
	//杀意技能有概率获得一个buff
	NumericType_MurderSkillGetBuffChance NumericType = 1216
	//血量x%触发buff
	NumericType_LifeRateGetBuff NumericType = 1217
	//玩家在空中可以叠加buff
	NumericType_SkyBuffOverlap NumericType = 1218
	//80%物理伤害转换为x%元素伤害
	NumericType_PhysicDamageToElementDamage     NumericType = 1219
	NumericType_PhysicDamageToElementDamageBase NumericType = 12191
	NumericType_PhysicDamageToElementDamageAdd  NumericType = 12192
	NumericType_PhysicDamageToElementDamagePct  NumericType = 12193
	//是否是杀意全消耗
	NumericType_MurderConsumeAll     NumericType = 1220
	NumericType_MurderConsumeAllBase NumericType = 12201
	NumericType_MurderConsumeAllAdd  NumericType = 12202
	//
	NumericType_Gorgeous     NumericType = 1221
	NumericType_GorgeousBase NumericType = 12211
	NumericType_GorgeousAdd  NumericType = 12212
	NumericType_GorgeousPct  NumericType = 12213
	//
	NumericType_GorgeousDoubleHitPct     NumericType = 1222
	NumericType_GorgeousDoubleHitPctBase NumericType = 12221
	NumericType_GorgeousDoubleHitPctAdd  NumericType = 12222
	//技能链小于一定个数技能时的CD减少值
	NumericType_LessSkillCd     NumericType = 1223
	NumericType_LessSkillCdBase NumericType = 12231
	NumericType_LessSkillCdAdd  NumericType = 12232
	NumericType_LessSkillCdPct  NumericType = 12233
	//技能链大于一定个数技能时的CD减少值
	NumericType_SurpassSkillCd     NumericType = 1224
	NumericType_SurpassSkillCdBase NumericType = 12241
	NumericType_SurpassSkillCdAdd  NumericType = 12242
	NumericType_SurpassSkillCdPct  NumericType = 12243
	//空槽位放心法角色值转换率
	NumericType_EmptySkillScroll     NumericType = 1225
	NumericType_EmptySkillScrollBase NumericType = 12251
	NumericType_EmptySkillScrollAdd  NumericType = 12252
	//所有心法关联技能属性属性增加到普攻上
	NumericType_AllLinkSkillGeneral     NumericType = 1226
	NumericType_AllLinkSkillGeneralBase NumericType = 12261
	NumericType_AllLinkSkillGeneralAdd  NumericType = 12262
	//所有心法关联技能属性属性增加到奥义上
	NumericType_AllLinkSkillAoyi     NumericType = 1227
	NumericType_AllLinkSkillAoyiBase NumericType = 12271
	NumericType_AllLinkSkillAoyiAdd  NumericType = 12272
	//显示特殊的心法
	NumericType_AddSpecialSkill     NumericType = 1228
	NumericType_AddSpecialSkillBase NumericType = 12281
	NumericType_AddSpecialSkillAdd  NumericType = 12282
	//恢复所有奥义
	NumericType_RecoveryUltimate     NumericType = 1229
	NumericType_RecoveryUltimateBase NumericType = 12291
	//真伤最终成系数
	NumericType_TrueDamageFinal     NumericType = 1230
	NumericType_TrueDamageFinalBase NumericType = 12301
	NumericType_TrueDamageFinalAdd  NumericType = 12302
	//最终伤害系数
	NumericType_RateFinal     NumericType = 1231
	NumericType_RateFinalBase NumericType = 12311
	NumericType_RateFinalAdd  NumericType = 12312
	//最终伤害系数值
	NumericType_RateVal     NumericType = 1232
	NumericType_RateValBase NumericType = 12321
	NumericType_RateValAdd  NumericType = 12322
	//最终独立增伤修正系数
	NumericType_BuffFinal     NumericType = 1233
	NumericType_BuffFinalBase NumericType = 12331
	NumericType_BuffFinalAdd  NumericType = 12332
	//食物的饱食度上限
	NumericType_SatiationLimit     NumericType = 1234
	NumericType_SatiationLimitBase NumericType = 12341
	NumericType_SatiationLimitAdd  NumericType = 12342
	//食物可用次数
	NumericType_FoodUseTimes     NumericType = 1235
	NumericType_FoodUseTimesBase NumericType = 12351
	NumericType_FoodUseTimesAdd  NumericType = 12352
	// 五圣祝福属性（服务器用）
	NumericType_WuSheng     NumericType = 1236
	NumericType_WuShengBase NumericType = 12361
	NumericType_WuShengAdd  NumericType = 12362
	//移动速度
	NumericType_MoveSpeed         NumericType = 1301
	NumericType_MoveSpeedBase     NumericType = 13011
	NumericType_MoveSpeedAdd      NumericType = 13012
	NumericType_MoveSpeedPct      NumericType = 13013
	NumericType_MoveSpeedFinalAdd NumericType = 13014
	NumericType_MoveSpeedFinalPct NumericType = 13015
	//移动动画速度
	NumericType_MoveAnimSpeed     NumericType = 1302
	NumericType_MoveAnimSpeedBase NumericType = 13021
	NumericType_MoveAnimSpeedAdd  NumericType = 13022
	NumericType_MoveAnimSpeedPct  NumericType = 13023
	//攻击速度
	NumericType_AttackSpeed         NumericType = 1303
	NumericType_AttackSpeedBase     NumericType = 13031
	NumericType_AttackSpeedAdd      NumericType = 13032
	NumericType_AttackSpeedPct      NumericType = 13033
	NumericType_AttackSpeedFinalAdd NumericType = 13034
	NumericType_AttackSpeedFinalPct NumericType = 13035
	//攻击动画速度
	NumericType_AttackAnimSpeed         NumericType = 1304
	NumericType_AttackAnimSpeedBase     NumericType = 13041
	NumericType_AttackAnimSpeedAdd      NumericType = 13042
	NumericType_AttackAnimSpeedPct      NumericType = 13043
	NumericType_AttackAnimSpeedFinalAdd NumericType = 13044
	NumericType_AttackAnimSpeedFinalPct NumericType = 13045
	//单位质量
	NumericType_Weight               NumericType = 1305
	NumericType_WeightBase           NumericType = 13051
	NumericType_WeightAdd            NumericType = 13052
	NumericType_WeightPct            NumericType = 13053
	NumericType_EmitObjPropertyStart NumericType = 1401
	//EmitObj 伤害权重
	NumericType_EmitObjWeight     NumericType = 1402
	NumericType_EmitObjWeightBase NumericType = 14021
	NumericType_EmitObjWeightAdd  NumericType = 14022
	NumericType_EmitObjWeightPct  NumericType = 14023
	//子弹最大Hit次数
	NumericType_EmitObjMaxHitCount     NumericType = 1403
	NumericType_EmitObjMaxHitCountBase NumericType = 14031
	NumericType_EmitObjMaxHitCountAdd  NumericType = 14032
	NumericType_EmitObjMaxHitCountPct  NumericType = 14033
	//子弹添加X轴最用力
	NumericType_EmitObjAddForceX     NumericType = 1404
	NumericType_EmitObjAddForceXBase NumericType = 14041
	NumericType_EmitObjAddForceXAdd  NumericType = 14042
	NumericType_EmitObjAddForceXPct  NumericType = 14043
	//子弹添加Y轴最用力
	NumericType_EmitObjAddForceY     NumericType = 1405
	NumericType_EmitObjAddForceYBase NumericType = 14051
	NumericType_EmitObjAddForceYAdd  NumericType = 14052
	NumericType_EmitObjAddForceYPct  NumericType = 14053
	//子弹添加Z轴最用力
	NumericType_EmitObjAddForceZ     NumericType = 1406
	NumericType_EmitObjAddForceZBase NumericType = 14061
	NumericType_EmitObjAddForceZAdd  NumericType = 14062
	NumericType_EmitObjAddForceZPct  NumericType = 14063
	NumericType_EmitObjPropertyEnd   NumericType = 1500
	NumericType_SkillPropertyStart   NumericType = 1501
	//技能吸附距离下限
	NumericType_SkillAdsorbLow     NumericType = 1502
	NumericType_SkillAdsorbLowBase NumericType = 15021
	NumericType_SkillAdsorbLowAdd  NumericType = 15022
	NumericType_SkillAdsorbLowPct  NumericType = 15023
	//技能吸附距离上限
	NumericType_SkillAdsorbUp     NumericType = 1503
	NumericType_SkillAdsorbUpBase NumericType = 15031
	NumericType_SkillAdsorbUpAdd  NumericType = 15032
	NumericType_SkillAdsorbUpPct  NumericType = 15033
	//技能破盾值
	NumericType_SkillBreakShield     NumericType = 1504
	NumericType_SkillBreakShieldBase NumericType = 15041
	NumericType_SkillBreakShieldAdd  NumericType = 15042
	NumericType_SkillBreakShieldPct  NumericType = 15043
	//技能冷却
	NumericType_SkillCoolDown     NumericType = 1505
	NumericType_SkillCoolDownBase NumericType = 15051
	NumericType_SkillCoolDownAdd  NumericType = 15052
	NumericType_SkillCoolDownPct  NumericType = 15053
	//技能固定伤害
	NumericType_SkillFixDamage     NumericType = 1521
	NumericType_SkillFixDamageBase NumericType = 15211
	NumericType_SkillFixDamageAdd  NumericType = 15212
	NumericType_SkillFixDamagePct  NumericType = 15213
	//技能百分比伤害
	NumericType_SkillPctDamage     NumericType = 1522
	NumericType_SkillPctDamageBase NumericType = 15221
	NumericType_SkillPctDamageAdd  NumericType = 15222
	NumericType_SkillPctDamagePct  NumericType = 15223
	//技能固定元素伤害
	NumericType_SkillFixElementDamage    NumericType = 1523
	NumericType_SkillFixElmentDamageBase NumericType = 15231
	NumericType_SkillFixElmentDamageAdd  NumericType = 15232
	NumericType_SkillFixElmentDamagePct  NumericType = 15233
	//技能百分比伤害
	NumericType_SkillPctElementDamage    NumericType = 1524
	NumericType_SkillPctElmentDamageBase NumericType = 15241
	NumericType_SkillPctElmentDamageAdd  NumericType = 15242
	NumericType_SkillPctElmentDamagePct  NumericType = 15243
	//技能护甲穿透
	NumericType_SkillPctArmour     NumericType = 1525
	NumericType_SkillPctArmourBase NumericType = 15251
	NumericType_SkillPctArmourAdd  NumericType = 15252
	NumericType_SkillPctArmourPct  NumericType = 15253
	//技能杀意值消耗,增加
	NumericType_SkillMurder     NumericType = 1541
	NumericType_SkillMurderBase NumericType = 15411
	NumericType_SkillMurderAdd  NumericType = 15412
	NumericType_SkillMurderPct  NumericType = 15413
	//技能杀意强化破盾倍率
	NumericType_SkillMurderBreakShieldRate     NumericType = 1542
	NumericType_SkillMurderBreakShieldRateBase NumericType = 15421
	NumericType_SkillMurderBreakShieldRateAdd  NumericType = 15422
	NumericType_SkillMurderBreakShieldRatePct  NumericType = 15423
	//技能杀意强化伤害倍率
	NumericType_SkillMurderDamageRate     NumericType = 1543
	NumericType_SkillMurderDamageRateBase NumericType = 15431
	NumericType_SkillMurderDamageRateAdd  NumericType = 15432
	NumericType_SkillMurderDamageRatePct  NumericType = 15433
	//技能奥义值增加,减少
	NumericType_SkillUltimate     NumericType = 1544
	NumericType_SkillUltimateBase NumericType = 15441
	NumericType_SkillUltimateAdd  NumericType = 15442
	NumericType_SkillUltimatePct  NumericType = 15443
	//技能全伤害增加,减少
	NumericType_SkillAllDamageRate     NumericType = 1545
	NumericType_SkillAllDamageRateBase NumericType = 15451
	NumericType_SkillAllDamageRateAdd  NumericType = 15452
	NumericType_SkillAllDamageRatePct  NumericType = 15453
	//技能暴击率
	NumericType_SkillCritChance         NumericType = 1546
	NumericType_SkillCritChanceBase     NumericType = 15461
	NumericType_SkillCritChanceAdd      NumericType = 15462
	NumericType_SkillCritChancePct      NumericType = 15463
	NumericType_SkillCritChanceFinalAdd NumericType = 15464
	NumericType_SkillCritChanceFinalPct NumericType = 15465
	//技能暴击比率
	NumericType_SkillCritRate     NumericType = 1547
	NumericType_SkillCritRateBase NumericType = 15471
	NumericType_SkillCritRateAdd  NumericType = 15472
	NumericType_SkillCritRatePct  NumericType = 15473
	//技能物理穿透
	NumericType_SkillPhysicBreak     NumericType = 1548
	NumericType_SkillPhysicBreakBase NumericType = 15481
	NumericType_SkillPhysicBreakAdd  NumericType = 15482
	NumericType_SkillPhysicBreakPct  NumericType = 15483
	//技能击中恢复固定值
	NumericType_SkillAddFixLifeEachHit     NumericType = 1549
	NumericType_SkillAddFixLifeEachHitBase NumericType = 15491
	NumericType_SkillAddFixLifeEachHitAdd  NumericType = 15492
	NumericType_SkillAddFixLifeEachHitPct  NumericType = 15493
	//技能击杀恢复固定值
	NumericType_SkillAddLifeEachKill     NumericType = 1550
	NumericType_SkillAddLifeEachKillBase NumericType = 15501
	NumericType_SkillAddLifeEachKillAdd  NumericType = 15502
	NumericType_SkillAddLifeEachKillPct  NumericType = 15503
	//技能命中触发buff几率
	NumericType_SkillHitGetBuffChance NumericType = 1551
	//火心法元素伤害系数
	NumericType_ScrollFireElementDamageRate     NumericType = 1552
	NumericType_ScrollFireElementDamageRateBase NumericType = 15521
	NumericType_ScrollFireElementDamageRateAdd  NumericType = 15522
	NumericType_ScrollFireElementDamageRatePct  NumericType = 15523
	//冰心法元素伤害系数
	NumericType_ScrollIceElementDamageRate     NumericType = 1553
	NumericType_ScrollIceElementDamageRateBase NumericType = 15531
	NumericType_ScrollIceElementDamageRateAdd  NumericType = 15532
	NumericType_ScrollIceElementDamageRatePct  NumericType = 15533
	//光心法元素伤害系数
	NumericType_ScrollLightElementDamageRate     NumericType = 1554
	NumericType_ScrollLightElementDamageRateBase NumericType = 15541
	NumericType_ScrollLightElementDamageRateAdd  NumericType = 15542
	NumericType_ScrollLightElementDamageRatePct  NumericType = 15543
	//暗心法元素伤害系数
	NumericType_ScrollDarkElementDamageRate     NumericType = 1555
	NumericType_ScrollDarkElementDamageRateBase NumericType = 15551
	NumericType_ScrollDarkElementDamageRateAdd  NumericType = 15552
	NumericType_ScrollDarkElementDamageRatePct  NumericType = 15553
	//关联技能释放获得buff
	NumericType_SkillTakeBuff NumericType = 1556
	//所有技能命中触发buff几率
	NumericType_AllSkillHitGetBuffChance NumericType = 1557
	//技能的挑空力
	NumericType_SkillSkyForce     NumericType = 1558
	NumericType_SkillSkyForceBase NumericType = 15581
	NumericType_SkillSkyForceAdd  NumericType = 15582
	NumericType_SkillSkyForcePct  NumericType = 15583
	//技能的无视护甲概率
	NumericType_SkillOverShield     NumericType = 1559
	NumericType_SkillOverShieldBase NumericType = 15591
	NumericType_SkillOverShieldAdd  NumericType = 15592
	NumericType_SkillOverShieldPct  NumericType = 15593
	//技能溅射触发概率
	NumericType_SkillSplash     NumericType = 1560
	NumericType_SkillSplashBase NumericType = 15601
	NumericType_SkillSplashAdd  NumericType = 15602
	NumericType_SkillSplashPct  NumericType = 15603
	//根据技能伤害按百分比回血
	NumericType_SkillLifeCure     NumericType = 1561
	NumericType_SkillLifeCureBase NumericType = 15611
	NumericType_SkillLifeCureAdd  NumericType = 15612
	NumericType_SkillLifeCurePct  NumericType = 15613
	//技能概率触发使敌人混乱,攻击队友
	NumericType_SkillMakeEnemyConfuse     NumericType = 1562
	NumericType_SkillMakeEnemyConfuseBase NumericType = 15621
	NumericType_SkillMakeEnemyConfuseAdd  NumericType = 15622
	NumericType_SkillMakeEnemyConfusePct  NumericType = 15623
	//技能伤害吸收摊到队友身上
	NumericType_SkillAbsorbToAlly     NumericType = 1563
	NumericType_SkillAbsorbToAllyBase NumericType = 15631
	NumericType_SkillAbsorbToAllyAdd  NumericType = 15632
	NumericType_SkillAbsorbToAllyPct  NumericType = 15633
	//技能特殊作用数值(用以实现双动态,第一个动态设置这个数值,第二个动态根据这个数值增长)
	NumericType_SkillSpecialUseArgument     NumericType = 1564
	NumericType_SkillSpecialUseArgumentBase NumericType = 15641
	NumericType_SkillSpecialUseArgumentAdd  NumericType = 15642
	NumericType_SkillSpecialUseArgumentPct  NumericType = 15643
	//技能真实伤害
	NumericType_SkillTrueDamage     NumericType = 1565
	NumericType_SkillTrueDamageBase NumericType = 15651
	NumericType_SkillTrueDamageAdd  NumericType = 15652
	NumericType_SkillTrueDamagePct  NumericType = 15653
	//技能真实伤害百分比
	NumericType_SkillPctTrueDamage     NumericType = 1567
	NumericType_SkillPctTrueDamageBase NumericType = 15671
	NumericType_SkillPctTrueDamageAdd  NumericType = 15672
	NumericType_SkillPctTrueDamagePct  NumericType = 15673
	//技能暴击伤害
	NumericType_SkillCritHarm         NumericType = 1568
	NumericType_SkillCritHarmBase     NumericType = 15681
	NumericType_SkillCritHarmAdd      NumericType = 15682
	NumericType_SkillCritHarmPct      NumericType = 15683
	NumericType_SkillCritHarmFinalAdd NumericType = 15684
	NumericType_SkillCritHarmFinalPct NumericType = 15685
	//技能传递伤害
	NumericType_SkillTransmitHarm     NumericType = 1569
	NumericType_SkillTransmitHarmBase NumericType = 15691
	NumericType_SkillTransmitHarmAdd  NumericType = 15692
	NumericType_SkillTransmitHarmPct  NumericType = 15693
	//技能关联心法基础属性提升
	NumericType_SkillScrollBaseVal     NumericType = 1570
	NumericType_SkillScrollBaseValBase NumericType = 15701
	NumericType_SkillScrollBaseValAdd  NumericType = 15702
	NumericType_SkillScrollBaseValPct  NumericType = 15703
	//技能关联心法被动技能伤害提升
	NumericType_SkillScrollHutr     NumericType = 1571
	NumericType_SkillScrollHutrBase NumericType = 15711
	NumericType_SkillScrollHutrAdd  NumericType = 15712
	NumericType_SkillScrollHutrPct  NumericType = 15713
	//关联心法伤害转换为技能伤害百分比
	NumericType_ScrollAttToSkillHurt     NumericType = 1572
	NumericType_ScrollAttToSkillHurtBase NumericType = 15721
	NumericType_ScrollAttToSkillHurtAdd  NumericType = 15722
	NumericType_ScrollAttToSkillHurtPct  NumericType = 15723
	//关联心法伤害转换为技能真实伤害百分比
	NumericType_ScrollAttToSkillTrueHurt     NumericType = 1573
	NumericType_ScrollAttToSkillTrueHurtBase NumericType = 15731
	NumericType_ScrollAttToSkillTrueHurtAdd  NumericType = 15732
	NumericType_ScrollAttToSkillTrueHurtPct  NumericType = 15733
	//关联心法破甲转换为技能破甲百分比
	NumericType_ScrollAttToSkillBreak     NumericType = 1574
	NumericType_ScrollAttToSkillBreakBase NumericType = 15741
	NumericType_ScrollAttToSkillBreakAdd  NumericType = 15742
	NumericType_ScrollAttToSkillBreakPct  NumericType = 15743
	//技能真实伤害 回血百分比
	NumericType_SkillTrueLifeCure     NumericType = 1575
	NumericType_SkillTrueLifeCureBase NumericType = 15751
	NumericType_SkillTrueLifeCureAdd  NumericType = 15752
	NumericType_SkillTrueLifeCurePct  NumericType = 15753
	// 心法伤害转为技能伤害值
	NumericType_ScrollToSkillHurt     NumericType = 1576
	NumericType_ScrollToSkillHurtBase NumericType = 15761
	NumericType_ScrollToSkillHurtAdd  NumericType = 15762
	NumericType_ScrollToSkillHurtPct  NumericType = 15763
	/// 心法伤害转为技能真实伤害值
	NumericType_ScrollToSkillTrueHurt     NumericType = 1577
	NumericType_ScrollToSkillTrueHurtBase NumericType = 15771
	NumericType_ScrollToSkillTrueHurtAdd  NumericType = 15772
	NumericType_ScrollToSkillTrueHurtPct  NumericType = 15773
	// 精研技能固定破甲值
	NumericType_SkillRfFixedSBreakShield     NumericType = 1578
	NumericType_SkillRfFixedSBreakShieldBase NumericType = 15781
	NumericType_SkillRfFixedSBreakShieldAdd  NumericType = 15782
	NumericType_SkillRfFixedSBreakShieldPct  NumericType = 15783
	// 精研技能固定伤害
	NumericType_SkillRfFixedPctDamage     NumericType = 1579
	NumericType_SkillRfFixedPctDamageBase NumericType = 15791
	NumericType_SkillRfFixedPctDamageAdd  NumericType = 15792
	NumericType_SkillRfFixedPctDamagePct  NumericType = 15793
	// 精研技能真实伤害
	NumericType_SkillRfFixedPctTrueDamage     NumericType = 1580
	NumericType_SkillRfFixedPctTrueDamageBase NumericType = 15801
	NumericType_SkillRfFixedPctTrueDamageAdd  NumericType = 15802
	NumericType_SkillRfFixedPctTrueDamagePct  NumericType = 15803
	// 额外附加攻击力固定值
	NumericType_SkillUpAttackFix     NumericType = 1581
	NumericType_SkillUpAttackFixBase NumericType = 15811
	NumericType_SkillUpAttackFixAdd  NumericType = 15812
	NumericType_SkillUpAttackFixPct  NumericType = 15813
	// 额外附加攻击力百分比值
	NumericType_SkillUpAttackPct     NumericType = 1582
	NumericType_SkillUpAttackPctBase NumericType = 15821
	NumericType_SkillUpAttackPctAdd  NumericType = 15822
	NumericType_SkillUpAttackPctPct  NumericType = 15823
	// 额外附加杀意攻击力固定值
	NumericType_SkillUpAttackFixMurder     NumericType = 1583
	NumericType_SkillUpAttackFixMurderBase NumericType = 15831
	NumericType_SkillUpAttackFixMurderAdd  NumericType = 15832
	NumericType_SkillUpAttackFixMurderPct  NumericType = 15833
	// 额外附加杀意攻击力固定值
	NumericType_SkillUpAttackPctMurder     NumericType = 1584
	NumericType_SkillUpAttackPctMurderBase NumericType = 15841
	NumericType_SkillUpAttackPctMurderAdd  NumericType = 15842
	NumericType_SkillUpAttackPctMurderPct  NumericType = 15843
	// 技能能量值.
	NumericType_SkillEnemgy       NumericType = 1585
	NumericType_SkillEnemgyBase   NumericType = 15851
	NumericType_SkillEnemgyAdd    NumericType = 15852
	NumericType_SkillEnemgyPct    NumericType = 15853
	NumericType_SkillPropertyEnd  NumericType = 1600
	NumericType_BuffPropertyStart NumericType = 1601
	//Buff持续时间
	NumericType_BuffLifeTime     NumericType = 1602
	NumericType_BuffLifeTimeBase NumericType = 16021
	NumericType_BuffLifeTimeAdd  NumericType = 16022
	NumericType_BuffLifeTimePct  NumericType = 16023
	//击杀概率获得buff
	NumericType_KillTakeBuffChance NumericType = 1603
	//Buff叠加次数
	NumericType_BuffOverlapCount     NumericType = 1604
	NumericType_BuffOverlapCountBase NumericType = 16041
	NumericType_BuffOverlapCountAdd  NumericType = 16042
	NumericType_BuffOverlapCountPct  NumericType = 16043
	//MF值
	NumericType_MagicFind          NumericType = 1605
	NumericType_MagicFindBase      NumericType = 16051
	NumericType_MagicFindAdd       NumericType = 16052
	NumericType_MagicFindPct       NumericType = 16053
	NumericType_BuffPropertyEnd    NumericType = 1700
	NumericType_GuardPropertyStart NumericType = 1701
	// 幻体充能总值
	NumericType_GuardEnergyMax     NumericType = 1702
	NumericType_GuardEnergyMaxBase NumericType = 17021
	NumericType_GuardEnergyMaxAdd  NumericType = 17022
	NumericType_GuardEnergyMaxPct  NumericType = 17023
	// 幻体持续时间
	NumericType_SustainCd     NumericType = 1703
	NumericType_SustainCdBase NumericType = 17031
	NumericType_SustainCdAdd  NumericType = 17032
	NumericType_SustainCdPct  NumericType = 17033
	// 幻体冷却
	NumericType_ColdCd     NumericType = 1704
	NumericType_ColdCdBase NumericType = 17041
	NumericType_ColdCdAdd  NumericType = 17042
	NumericType_ColdCdPct  NumericType = 17043
	//当前幻体能量
	NumericType_GuardEnergy      NumericType = 1705
	NumericType_GuardEnergyBase  NumericType = 17051
	NumericType_GuardPropertyEnd NumericType = 1750
	//罪体等级
	NumericType_SinEquipmentLevel     NumericType = 1760
	NumericType_SinEquipmentLevelBase NumericType = 17601
	NumericType_SinEquipmentLevelAdd  NumericType = 17602
	NumericType_SinEquipmentLevelPct  NumericType = 17603
)

var NumericType_name = map[int32]string{
	0:     "Numeric_None",
	10000: "Max",
	1001:  "Hp",
	10011: "HpBase",
	1002:  "MaxHp",
	10021: "MaxHpBase",
	10022: "MaxHpAdd",
	10023: "MaxHpPct",
	10024: "MaxHpFinalAdd",
	10025: "MaxHpFinalPct",
	1003:  "Attack",
	10031: "AttackBase",
	10032: "AttackAdd",
	10033: "AttackPct",
	10034: "AttackFinalAdd",
	10035: "AttackFinalPct",
	1004:  "ChaosAttack",
	10041: "ChaosAttackBase",
	10042: "ChaosAttackAdd",
	10043: "ChaosAttackPct",
	10044: "ChaosAttackFinalAdd",
	10045: "ChaosAttackFinalPct",
	1005:  "ElementAttack",
	10051: "ElementAttackBase",
	10052: "ElementAttackAdd",
	10053: "ElementAttackPct",
	10054: "ElementAttackFinalAdd",
	10055: "ElementAttackFinalPct",
	1006:  "Defence",
	10061: "DefenceBase",
	10062: "DefenceAdd",
	10063: "DefencePct",
	10064: "DefenceFinalAdd",
	10065: "DefenceFinalPct",
	1007:  "CritChance",
	10071: "CritChanceBase",
	10072: "CritChanceAdd",
	10073: "CritChancePct",
	10074: "CritChanceFinalAdd",
	10075: "CritChanceFinalPct",
	1008:  "CritRate",
	10081: "CritRateBase",
	10082: "CritRateAdd",
	10083: "CritRatePct",
	10084: "CritRateFinalAdd",
	10085: "CritRateFinalPct",
	1009:  "Shield",
	10091: "ShieldBase",
	1010:  "MaxShield",
	10101: "MaxShieldBase",
	10102: "MaxShieldAdd",
	10103: "MaxShieldPct",
	10104: "MaxShieldFinalAdd",
	10105: "MaxShieldFinalPct",
	1012:  "BreakShield",
	10121: "BreakShieldBase",
	10122: "BreakShieldAdd",
	10123: "BreakShieldPct",
	10124: "BreakShieldFinalAdd",
	10125: "BreakShieldFinalPct",
	1013:  "ShieldRegenTime",
	10131: "ShieldRegenTimeBase",
	10132: "ShieldRegenTimeAdd",
	10133: "ShieldRegenTimePct",
	1014:  "ShieldRegenCount",
	10141: "ShieldRegenCountBase",
	10142: "ShieldRegenCountAdd",
	10143: "ShieldRegenCountPct",
	1015:  "ShieldDuration",
	10151: "ShieldDurationBase",
	10152: "ShieldDurationAdd",
	10153: "ShieldDurationPct",
	1016:  "ShieldReductionRate",
	10161: "ShieldReductionRateBase",
	10162: "ShieldReductionRateAdd",
	10163: "ShieldReductionRatePct",
	1017:  "FireResistance",
	10171: "FireResistanceBase",
	10172: "FireResistanceAdd",
	10173: "FireResistancePct",
	1018:  "IceResistance",
	10181: "IceResistanceBase",
	10182: "IceResistanceAdd",
	10183: "IceResistancePct",
	1019:  "LightResistance",
	10191: "LightResistanceBase",
	10192: "LightResistanceAdd",
	10193: "LightResistancePct",
	1020:  "DarkResistance",
	10201: "DarkResistanceBase",
	10202: "DarkResistanceAdd",
	10203: "DarkResistancePct",
	1021:  "Ultimate",
	10211: "UltimateBase",
	1022:  "MaxUltimate",
	10221: "MaxUltimateBase",
	10222: "MaxUltimateAdd",
	10223: "MaxUltimatePct",
	1023:  "Murder",
	10231: "MurderBase",
	1024:  "MaxMurder",
	10241: "MaxMurderBase",
	10242: "MaxMurderAdd",
	10243: "MaxMurderPct",
	1025:  "MurderConsume",
	10251: "MurderConsumeBase",
	1026:  "MurderUsePre",
	10261: "MurderUsePreBase",
	1027:  "ResistanceBreakAll",
	10271: "ResistanceBreakAllBase",
	10272: "ResistanceBreakAllAdd",
	10273: "ResistanceBreakAllPct",
	1028:  "ResistanceBreakFire",
	10281: "ResistanceBreakFireBase",
	10282: "ResistanceBreakFireAdd",
	10283: "ResistanceBreakFirePct",
	1029:  "ResistanceBreakIce",
	10291: "ResistanceBreakIceBase",
	10292: "ResistanceBreakIceAdd",
	10293: "ResistanceBreakIcePct",
	1030:  "ResistanceBreakLight",
	10301: "ResistanceBreakLightBase",
	10302: "ResistanceBreakLightAdd",
	10303: "ResistanceBreakLightPct",
	1031:  "ResistanceBreakDark",
	10311: "ResistanceBreakDarkBase",
	10312: "ResistanceBreakDarkAdd",
	10313: "ResistanceBreakDarkPct",
	1032:  "PhysicBreak",
	10321: "PhysicBreakBase",
	10322: "PhysicBreakAdd",
	10323: "PhysicBreakPct",
	1033:  "AllResistance",
	10331: "AllResistanceBase",
	10332: "AllResistanceAdd",
	10333: "AllResistancePct",
	1034:  "MurderConsumeCure",
	10341: "MurderConsumeCureBase",
	10342: "MurderConsumeCureAdd",
	10343: "MurderConsumeCurePct",
	1035:  "EquipLevelUp",
	10351: "EquipLevelUpBase",
	10352: "EquipLevelUpAdd",
	10353: "EquipLevelUpPct",
	1036:  "EquipSetNeedDown",
	10361: "EquipSetNeedDownBase",
	10362: "EquipSetNeedDownAdd",
	10363: "EquipSetNeedDownPct",
	1037:  "ScrollComprehensionDownRate",
	10371: "ScrollComprehensionDownRateBase",
	10372: "ScrollComprehensionDownRateAdd",
	10373: "ScrollComprehensionDownRatePct",
	1038:  "ScrollLevelUp",
	10381: "ScrollLevelUpBase",
	10382: "ScrollLevelUpAdd",
	10383: "ScrollLevelUpPct",
	1039:  "ScrolSkilllLevelUp",
	10391: "ScrolSkilllLevelUpBase",
	10392: "ScrolSkilllLevelUpAdd",
	10393: "ScrollSkillLevelUpPct",
	1040:  "GetEquipmentBuff",
	10401: "GetEquipmentBuffBase",
	10402: "GetEquipmentBuffAdd",
	10403: "GetEquipmentBuffPct",
	1041:  "PerfectDefenseUp",
	10411: "PerfectDefenseUpBase",
	10412: "PerfectDefenseUpAdd",
	10413: "PerfectDefenseUpPct",
	1042:  "NormalDamageBack",
	10421: "NormalDamageBackBase",
	10422: "NormalDamageBackAdd",
	10423: "NormalDamageBackPct",
	1043:  "AdvanceDamageBackByDamage",
	10431: "AdvanceDamageBackByDamageBase",
	10432: "AdvanceDamageBackByDamageAdd",
	10433: "AdvanceDamageBackByDamagePct",
	1044:  "AdvanceDamageBackByDefence",
	10441: "AdvanceDamageBackByDefenceBase",
	10442: "AdvanceDamageBackByDefenceAdd",
	10443: "AdvanceDamageBackByDefencePct",
	1045:  "HaloIntervalUp",
	10451: "HaloIntervalUpBase",
	10452: "HaloIntervalUpAdd",
	10453: "HaloIntervalUpPct",
	1046:  "ReviveCount",
	10461: "ReviveCountBase",
	10462: "ReviveCountAdd",
	10463: "ReviveCountPct",
	1047:  "BreakShieldConsume",
	10471: "BreakShieldConsumeBase",
	1048:  "HpConsumePercent",
	10481: "HpConsumePercentBase",
	1049:  "TrueDamage",
	10491: "TrueDamageBase",
	10492: "TrueDamageAdd",
	10493: "TrueDamagePct",
	1050:  "AllTrueDamage",
	10501: "AllTrueDamageBase",
	10502: "AllTrueDamageAdd",
	10503: "AllTrueDamagePct",
	1051:  "CrimeBlood",
	10511: "CrimeBloodBase",
	10512: "CrimeBloodBloodAdd",
	10513: "CrimeBloodBloodPct",
	1052:  "CrimeBackHurt",
	10521: "CrimeBackHurtBase",
	10522: "CrimeBackHurtAdd",
	10523: "CrimeBackHurtPct",
	1053:  "DamageFinal",
	10531: "DamageFinalBase",
	10532: "DamageFinalAdd",
	10533: "DamageFinalPct",
	1054:  "HealFinal",
	10541: "HealFinalBase",
	10542: "HealFinalAdd",
	10543: "HealFinalPct",
	1055:  "FinalCritChance",
	10551: "FinalCritChanceBase",
	10552: "FinalCritChanceAdd",
	10553: "FinalCritChancePct",
	1056:  "DefenseDamageFinal",
	10561: "DefenseDamageFinalBase",
	10562: "DefenseDamageFinalAdd",
	10563: "DefenseDamageFinalPct",
	1057:  "aoyiRd",
	10571: "aoyiRdBase",
	10572: "aoyiRdAdd",
	10573: "aoyiRdPct",
	1058:  "pugongRd",
	10581: "pugongRdBase",
	10582: "pugongRdAdd",
	10583: "pugongRdPct",
	1059:  "AttackFinalHarm",
	10591: "AttackFinalHarmBase",
	10592: "AttackFinalHarmAdd",
	1060:  "DefenseFinalLossHarm",
	10601: "DefenseFinalLossHarmBase",
	10602: "DefenseFinalLossHarmAdd",
	1061:  "RealPvpReduceWeight",
	10611: "RealPvpReduceWeightBase",
	10612: "RealPvpReduceWeightAdd",
	10613: "RealPvpReduceWeightPct",
	1062:  "RealPvpRdReduceWeight",
	10621: "RealPvpRdReduceWeightBase",
	10622: "RealPvpRdReduceWeightAdd",
	10623: "RealPvpRdReduceWeightPct",
	1063:  "RealPvpRdCritChance",
	10631: "RealPvpRdCritChanceBase",
	10632: "RealPvpRdCritChanceAdd",
	10633: "RealPvpRdCritChancePct",
	1064:  "RealPvpRdCritRate",
	10641: "RealPvpRdCritRateBase",
	10642: "RealPvpRdCritRateAdd",
	10643: "RealPvpRdCritRatePct",
	1065:  "RealPvpXinYu",
	10651: "RealPvpXinYuBase",
	10652: "RealPvpXinYuAdd",
	10653: "RealPvpXinYuPct",
	1066:  "RealPvpRdXinYu",
	10661: "RealPvpRdXinYuBase",
	10662: "RealPvpRdXinYuAdd",
	10663: "RealPvpRdXinYuPct",
	1067:  "RenWangTiLi",
	10671: "RenWangTiLiBase",
	10672: "RenWangTiLiAdd",
	10673: "RenWangTiLiPct",
	1068:  "RenWangTiLiRecoverTime",
	10681: "RenWangTiLiRecoverTimeBase",
	10682: "RenWangTiLiRecoverTimeAdd",
	10683: "RenWangTiLiRecoverTimePct",
	1101:  "DamageEd",
	11011: "DamageEdBase",
	11012: "DamageEdAdd",
	11013: "DamageEdPct",
	1102:  "DamageNormalEd",
	11021: "DamageNormalEdBase",
	11022: "DamageNormalEdAdd",
	11023: "DamageNormalEdPct",
	1103:  "DamageElementEd",
	11031: "DamageElementEdBase",
	11032: "DamageElementEdAdd",
	11033: "DamageElementEdPct",
	1104:  "DamageEdFire",
	11041: "DamageEdFireBase",
	11042: "DamageEdFireAdd",
	11043: "DamageEdFirePct",
	1105:  "DamageEdIce",
	11051: "DamageEdIceBase",
	11052: "DamageEdIceAdd",
	11053: "DamageEdIcePct",
	1106:  "DamageEdLight",
	11061: "DamageEdLightBase",
	11062: "DamageEdLightAdd",
	11063: "DamageEdLightPct",
	1107:  "DamageEdDark",
	11071: "DamageEdDarkBase",
	11072: "DamageEdDarkAdd",
	11073: "DamageEdDarkPct",
	1108:  "EliteEd",
	11081: "EliteEdBase",
	11082: "EliteEdAdd",
	11083: "EliteEdPct",
	1109:  "BossEd",
	11091: "BossEdBase",
	11092: "BossEdAdd",
	11093: "BossEdPct",
	1110:  "MonsterEd",
	11101: "MonsterEdBase",
	11102: "MonsterEdAdd",
	11103: "MonsterEdPct",
	1111:  "MeleeEd",
	11111: "MeleeEdBase",
	11112: "MeleeEdAdd",
	11113: "MeleeEdPct",
	1112:  "RangerEd",
	11121: "RangerEdBase",
	11122: "RangerEdAdd",
	11123: "RangerEdPct",
	1131:  "DamageRd",
	11311: "DamageRdBase",
	11312: "DamageRdAdd",
	11313: "DamageRdPct",
	1132:  "DamageNormalRd",
	11321: "DamageNormalRdBase",
	11322: "DamageNormalRdAdd",
	11323: "DamageNormalRdPct",
	1133:  "DamageElementRd",
	11331: "DamageElementRdBase",
	11332: "DamageElementRdAdd",
	11333: "DamageElementRdPct",
	1134:  "DamageRdFire",
	11341: "DamageRdFireBase",
	11342: "DamageRdFireAdd",
	11343: "DamageRdFirePct",
	1135:  "DamageRdIce",
	11351: "DamageRdIceBase",
	11352: "DamageRdIceAdd",
	11353: "DamageRdIcePct",
	1136:  "DamageRdLight",
	11361: "DamageRdLightBase",
	11362: "DamageRdLightAdd",
	11363: "DamageRdLightPct",
	1137:  "DamageRdDark",
	11371: "DamageRdDarkBase",
	11372: "DamageRdDarkAdd",
	11373: "DamageRdDarkPct",
	1138:  "EliteRd",
	11381: "EliteRdBase",
	11382: "EliteRdAdd",
	11383: "EliteRdPct",
	1139:  "BossRd",
	11391: "BossRdBase",
	11392: "BossRdAdd",
	11393: "BossRdPct",
	1140:  "MonsterRd",
	11401: "MonsterRdBase",
	11402: "MonsterRdAdd",
	11403: "MonsterRdPct",
	1141:  "MeleeRd",
	11411: "MeleeRdBase",
	11412: "MeleeRdAdd",
	11413: "MeleeRdPct",
	1142:  "RangerRd",
	11421: "RangerRdBase",
	11422: "RangerRdAdd",
	11423: "RangerRdPct",
	1161:  "NormalAttackDamage",
	11611: "NormalAttackDamageBase",
	11612: "NormalAttackDamageAdd",
	11613: "NormalAttackDamagePct",
	1162:  "DamageNormalFinalEd",
	11621: "DamageNormalFinalEdBase",
	11622: "DamageNormalFinalEdAdd",
	11623: "DamageNormalFinalEdPct",
	1163:  "DamageElementFinalEd",
	11631: "DamageElementFinalEdBase",
	11632: "DamageElementFinalEdAdd",
	11633: "DamageElementFinalEdPct",
	1164:  "GoldMultiply",
	11641: "GoldMultiplyBase",
	11642: "GoldMultiplyAdd",
	11643: "GoldMultiplyPct",
	1165:  "ExpMultiply",
	11651: "ExpMultiplyBase",
	11652: "ExpMultiplyAdd",
	11653: "ExpMultiplyPct",
	1166:  "EquipDropMultiply",
	11661: "EquipDropMultiplyBase",
	11662: "EquipDropMultiplyAdd",
	11663: "EquipDropMultiplyPct",
	1167:  "EquipDropCountMultiply",
	11671: "EquipDropCountMultiplyBase",
	11672: "EquipDropCountMultiplyAdd",
	11673: "EquipDropCountMultiplyPct",
	1168:  "LifeEachDowm",
	11681: "LifeEachDowmBase",
	11682: "LifeEachDowmAdd",
	11683: "LifeEachDowmPct",
	1169:  "SideScrollNum",
	11691: "SideScrollNumBase",
	11692: "SideScrollNumAdd",
	1170:  "NotAllowSameScroll",
	11701: "NotAllowSameScrollBase",
	11702: "NotAllowSameScrollAdd",
	1171:  "MaxSuitTwoNeedOne",
	11711: "MaxSuitTwoNeedOneBase",
	11712: "MaxSuitTwoNeedOneAdd",
	1172:  "TrapDamageRd",
	11721: "TrapDamageRdBase",
	11722: "TrapDamageRdAdd",
	11723: "TrapDamageRdPct",
	1201:  "AddFixLifeEachHit",
	12011: "AddFixLifeEachHitBase",
	12012: "AddFixLifeEachHitAdd",
	12013: "AddFixLifeEachHitPct",
	1202:  "AddPctLifeEachHit",
	12021: "AddPctLifeEachHitBase",
	12022: "AddPctLifeEachHitAdd",
	12023: "AddPctLifeEachHitPct",
	1203:  "AddLifeEachKill",
	12031: "AddLifeEachKillBase",
	12032: "AddLifeEachKillAdd",
	12033: "AddLifeEachKillPct",
	1204:  "ThornFixDamage",
	12041: "ThornFixDamageBase",
	12042: "ThornFixDamageAdd",
	12043: "ThornFixDamagePct",
	1205:  "ThornPctDamage",
	12051: "ThornPctDamageBase",
	12052: "ThornPctDamageAdd",
	12053: "ThornPctDamagePct",
	1206:  "Chain1CoolDown",
	12061: "Chain1CoolDownBase",
	12062: "Chain1CoolDownAdd",
	12063: "Chain1CoolDownPct",
	1207:  "Chain2CoolDown",
	12071: "Chain2CoolDownBase",
	12072: "Chain2CoolDownAdd",
	12073: "Chain2CoolDownPct",
	1208:  "Chain1BreakShield",
	12081: "Chain1BreakShieldBase",
	12082: "Chain1BreakShieldAdd",
	12083: "Chain1BreakShieldPct",
	1209:  "Chain2BreakShield",
	12091: "Chain2BreakShieldBase",
	12092: "Chain2BreakShieldAdd",
	12093: "Chain2BreakShieldPct",
	1210:  "Chain1PctDamage",
	12101: "Chain1PctDamageBase",
	12102: "Chain1PctDamageAdd",
	12103: "Chain1PctDamagePct",
	1211:  "Chain2PctDamage",
	12111: "Chain2PctDamageBase",
	12112: "Chain2PctDamageAdd",
	12113: "Chain2PctDamagePct",
	1212:  "ChainSlotLeft",
	12121: "ChainSlotLeftBase",
	1213:  "ChainSlotLeftPctDamage",
	12131: "ChainSlotLeftPctDamageBase",
	12132: "ChainSlotLeftPctDamageAdd",
	12133: "ChainSlotLeftPctDamagePct",
	1214:  "MurderFullPctEd",
	12141: "MurderFullPctEdBase",
	12142: "MurderFullPctEdAdd",
	12143: "MurderFullPctEdPct",
	1215:  "MurderFullPctRd",
	12151: "MurderFullPctRdBase",
	12152: "MurderFullPctRdAdd",
	12153: "MurderFullPctRdPct",
	1216:  "MurderSkillGetBuffChance",
	1217:  "LifeRateGetBuff",
	1218:  "SkyBuffOverlap",
	1219:  "PhysicDamageToElementDamage",
	12191: "PhysicDamageToElementDamageBase",
	12192: "PhysicDamageToElementDamageAdd",
	12193: "PhysicDamageToElementDamagePct",
	1220:  "MurderConsumeAll",
	12201: "MurderConsumeAllBase",
	12202: "MurderConsumeAllAdd",
	1221:  "Gorgeous",
	12211: "GorgeousBase",
	12212: "GorgeousAdd",
	12213: "GorgeousPct",
	1222:  "GorgeousDoubleHitPct",
	12221: "GorgeousDoubleHitPctBase",
	12222: "GorgeousDoubleHitPctAdd",
	1223:  "LessSkillCd",
	12231: "LessSkillCdBase",
	12232: "LessSkillCdAdd",
	12233: "LessSkillCdPct",
	1224:  "SurpassSkillCd",
	12241: "SurpassSkillCdBase",
	12242: "SurpassSkillCdAdd",
	12243: "SurpassSkillCdPct",
	1225:  "EmptySkillScroll",
	12251: "EmptySkillScrollBase",
	12252: "EmptySkillScrollAdd",
	1226:  "AllLinkSkillGeneral",
	12261: "AllLinkSkillGeneralBase",
	12262: "AllLinkSkillGeneralAdd",
	1227:  "AllLinkSkillAoyi",
	12271: "AllLinkSkillAoyiBase",
	12272: "AllLinkSkillAoyiAdd",
	1228:  "AddSpecialSkill",
	12281: "AddSpecialSkillBase",
	12282: "AddSpecialSkillAdd",
	1229:  "RecoveryUltimate",
	12291: "RecoveryUltimateBase",
	1230:  "TrueDamageFinal",
	12301: "TrueDamageFinalBase",
	12302: "TrueDamageFinalAdd",
	1231:  "RateFinal",
	12311: "RateFinalBase",
	12312: "RateFinalAdd",
	1232:  "RateVal",
	12321: "RateValBase",
	12322: "RateValAdd",
	1233:  "BuffFinal",
	12331: "BuffFinalBase",
	12332: "BuffFinalAdd",
	1234:  "SatiationLimit",
	12341: "SatiationLimitBase",
	12342: "SatiationLimitAdd",
	1235:  "FoodUseTimes",
	12351: "FoodUseTimesBase",
	12352: "FoodUseTimesAdd",
	1236:  "WuSheng",
	12361: "WuShengBase",
	12362: "WuShengAdd",
	1301:  "MoveSpeed",
	13011: "MoveSpeedBase",
	13012: "MoveSpeedAdd",
	13013: "MoveSpeedPct",
	13014: "MoveSpeedFinalAdd",
	13015: "MoveSpeedFinalPct",
	1302:  "MoveAnimSpeed",
	13021: "MoveAnimSpeedBase",
	13022: "MoveAnimSpeedAdd",
	13023: "MoveAnimSpeedPct",
	1303:  "AttackSpeed",
	13031: "AttackSpeedBase",
	13032: "AttackSpeedAdd",
	13033: "AttackSpeedPct",
	13034: "AttackSpeedFinalAdd",
	13035: "AttackSpeedFinalPct",
	1304:  "AttackAnimSpeed",
	13041: "AttackAnimSpeedBase",
	13042: "AttackAnimSpeedAdd",
	13043: "AttackAnimSpeedPct",
	13044: "AttackAnimSpeedFinalAdd",
	13045: "AttackAnimSpeedFinalPct",
	1305:  "Weight",
	13051: "WeightBase",
	13052: "WeightAdd",
	13053: "WeightPct",
	1401:  "EmitObjPropertyStart",
	1402:  "EmitObjWeight",
	14021: "EmitObjWeightBase",
	14022: "EmitObjWeightAdd",
	14023: "EmitObjWeightPct",
	1403:  "EmitObjMaxHitCount",
	14031: "EmitObjMaxHitCountBase",
	14032: "EmitObjMaxHitCountAdd",
	14033: "EmitObjMaxHitCountPct",
	1404:  "EmitObjAddForceX",
	14041: "EmitObjAddForceXBase",
	14042: "EmitObjAddForceXAdd",
	14043: "EmitObjAddForceXPct",
	1405:  "EmitObjAddForceY",
	14051: "EmitObjAddForceYBase",
	14052: "EmitObjAddForceYAdd",
	14053: "EmitObjAddForceYPct",
	1406:  "EmitObjAddForceZ",
	14061: "EmitObjAddForceZBase",
	14062: "EmitObjAddForceZAdd",
	14063: "EmitObjAddForceZPct",
	1500:  "EmitObjPropertyEnd",
	1501:  "SkillPropertyStart",
	1502:  "SkillAdsorbLow",
	15021: "SkillAdsorbLowBase",
	15022: "SkillAdsorbLowAdd",
	15023: "SkillAdsorbLowPct",
	1503:  "SkillAdsorbUp",
	15031: "SkillAdsorbUpBase",
	15032: "SkillAdsorbUpAdd",
	15033: "SkillAdsorbUpPct",
	1504:  "SkillBreakShield",
	15041: "SkillBreakShieldBase",
	15042: "SkillBreakShieldAdd",
	15043: "SkillBreakShieldPct",
	1505:  "SkillCoolDown",
	15051: "SkillCoolDownBase",
	15052: "SkillCoolDownAdd",
	15053: "SkillCoolDownPct",
	1521:  "SkillFixDamage",
	15211: "SkillFixDamageBase",
	15212: "SkillFixDamageAdd",
	15213: "SkillFixDamagePct",
	1522:  "SkillPctDamage",
	15221: "SkillPctDamageBase",
	15222: "SkillPctDamageAdd",
	15223: "SkillPctDamagePct",
	1523:  "SkillFixElementDamage",
	15231: "SkillFixElmentDamageBase",
	15232: "SkillFixElmentDamageAdd",
	15233: "SkillFixElmentDamagePct",
	1524:  "SkillPctElementDamage",
	15241: "SkillPctElmentDamageBase",
	15242: "SkillPctElmentDamageAdd",
	15243: "SkillPctElmentDamagePct",
	1525:  "SkillPctArmour",
	15251: "SkillPctArmourBase",
	15252: "SkillPctArmourAdd",
	15253: "SkillPctArmourPct",
	1541:  "SkillMurder",
	15411: "SkillMurderBase",
	15412: "SkillMurderAdd",
	15413: "SkillMurderPct",
	1542:  "SkillMurderBreakShieldRate",
	15421: "SkillMurderBreakShieldRateBase",
	15422: "SkillMurderBreakShieldRateAdd",
	15423: "SkillMurderBreakShieldRatePct",
	1543:  "SkillMurderDamageRate",
	15431: "SkillMurderDamageRateBase",
	15432: "SkillMurderDamageRateAdd",
	15433: "SkillMurderDamageRatePct",
	1544:  "SkillUltimate",
	15441: "SkillUltimateBase",
	15442: "SkillUltimateAdd",
	15443: "SkillUltimatePct",
	1545:  "SkillAllDamageRate",
	15451: "SkillAllDamageRateBase",
	15452: "SkillAllDamageRateAdd",
	15453: "SkillAllDamageRatePct",
	1546:  "SkillCritChance",
	15461: "SkillCritChanceBase",
	15462: "SkillCritChanceAdd",
	15463: "SkillCritChancePct",
	15464: "SkillCritChanceFinalAdd",
	15465: "SkillCritChanceFinalPct",
	1547:  "SkillCritRate",
	15471: "SkillCritRateBase",
	15472: "SkillCritRateAdd",
	15473: "SkillCritRatePct",
	1548:  "SkillPhysicBreak",
	15481: "SkillPhysicBreakBase",
	15482: "SkillPhysicBreakAdd",
	15483: "SkillPhysicBreakPct",
	1549:  "SkillAddFixLifeEachHit",
	15491: "SkillAddFixLifeEachHitBase",
	15492: "SkillAddFixLifeEachHitAdd",
	15493: "SkillAddFixLifeEachHitPct",
	1550:  "SkillAddLifeEachKill",
	15501: "SkillAddLifeEachKillBase",
	15502: "SkillAddLifeEachKillAdd",
	15503: "SkillAddLifeEachKillPct",
	1551:  "SkillHitGetBuffChance",
	1552:  "ScrollFireElementDamageRate",
	15521: "ScrollFireElementDamageRateBase",
	15522: "ScrollFireElementDamageRateAdd",
	15523: "ScrollFireElementDamageRatePct",
	1553:  "ScrollIceElementDamageRate",
	15531: "ScrollIceElementDamageRateBase",
	15532: "ScrollIceElementDamageRateAdd",
	15533: "ScrollIceElementDamageRatePct",
	1554:  "ScrollLightElementDamageRate",
	15541: "ScrollLightElementDamageRateBase",
	15542: "ScrollLightElementDamageRateAdd",
	15543: "ScrollLightElementDamageRatePct",
	1555:  "ScrollDarkElementDamageRate",
	15551: "ScrollDarkElementDamageRateBase",
	15552: "ScrollDarkElementDamageRateAdd",
	15553: "ScrollDarkElementDamageRatePct",
	1556:  "SkillTakeBuff",
	1557:  "AllSkillHitGetBuffChance",
	1558:  "SkillSkyForce",
	15581: "SkillSkyForceBase",
	15582: "SkillSkyForceAdd",
	15583: "SkillSkyForcePct",
	1559:  "SkillOverShield",
	15591: "SkillOverShieldBase",
	15592: "SkillOverShieldAdd",
	15593: "SkillOverShieldPct",
	1560:  "SkillSplash",
	15601: "SkillSplashBase",
	15602: "SkillSplashAdd",
	15603: "SkillSplashPct",
	1561:  "SkillLifeCure",
	15611: "SkillLifeCureBase",
	15612: "SkillLifeCureAdd",
	15613: "SkillLifeCurePct",
	1562:  "SkillMakeEnemyConfuse",
	15621: "SkillMakeEnemyConfuseBase",
	15622: "SkillMakeEnemyConfuseAdd",
	15623: "SkillMakeEnemyConfusePct",
	1563:  "SkillAbsorbToAlly",
	15631: "SkillAbsorbToAllyBase",
	15632: "SkillAbsorbToAllyAdd",
	15633: "SkillAbsorbToAllyPct",
	1564:  "SkillSpecialUseArgument",
	15641: "SkillSpecialUseArgumentBase",
	15642: "SkillSpecialUseArgumentAdd",
	15643: "SkillSpecialUseArgumentPct",
	1565:  "SkillTrueDamage",
	15651: "SkillTrueDamageBase",
	15652: "SkillTrueDamageAdd",
	15653: "SkillTrueDamagePct",
	1567:  "SkillPctTrueDamage",
	15671: "SkillPctTrueDamageBase",
	15672: "SkillPctTrueDamageAdd",
	15673: "SkillPctTrueDamagePct",
	1568:  "SkillCritHarm",
	15681: "SkillCritHarmBase",
	15682: "SkillCritHarmAdd",
	15683: "SkillCritHarmPct",
	15684: "SkillCritHarmFinalAdd",
	15685: "SkillCritHarmFinalPct",
	1569:  "SkillTransmitHarm",
	15691: "SkillTransmitHarmBase",
	15692: "SkillTransmitHarmAdd",
	15693: "SkillTransmitHarmPct",
	1570:  "SkillScrollBaseVal",
	15701: "SkillScrollBaseValBase",
	15702: "SkillScrollBaseValAdd",
	15703: "SkillScrollBaseValPct",
	1571:  "SkillScrollHutr",
	15711: "SkillScrollHutrBase",
	15712: "SkillScrollHutrAdd",
	15713: "SkillScrollHutrPct",
	1572:  "ScrollAttToSkillHurt",
	15721: "ScrollAttToSkillHurtBase",
	15722: "ScrollAttToSkillHurtAdd",
	15723: "ScrollAttToSkillHurtPct",
	1573:  "ScrollAttToSkillTrueHurt",
	15731: "ScrollAttToSkillTrueHurtBase",
	15732: "ScrollAttToSkillTrueHurtAdd",
	15733: "ScrollAttToSkillTrueHurtPct",
	1574:  "ScrollAttToSkillBreak",
	15741: "ScrollAttToSkillBreakBase",
	15742: "ScrollAttToSkillBreakAdd",
	15743: "ScrollAttToSkillBreakPct",
	1575:  "SkillTrueLifeCure",
	15751: "SkillTrueLifeCureBase",
	15752: "SkillTrueLifeCureAdd",
	15753: "SkillTrueLifeCurePct",
	1576:  "ScrollToSkillHurt",
	15761: "ScrollToSkillHurtBase",
	15762: "ScrollToSkillHurtAdd",
	15763: "ScrollToSkillHurtPct",
	1577:  "ScrollToSkillTrueHurt",
	15771: "ScrollToSkillTrueHurtBase",
	15772: "ScrollToSkillTrueHurtAdd",
	15773: "ScrollToSkillTrueHurtPct",
	1578:  "SkillRfFixedSBreakShield",
	15781: "SkillRfFixedSBreakShieldBase",
	15782: "SkillRfFixedSBreakShieldAdd",
	15783: "SkillRfFixedSBreakShieldPct",
	1579:  "SkillRfFixedPctDamage",
	15791: "SkillRfFixedPctDamageBase",
	15792: "SkillRfFixedPctDamageAdd",
	15793: "SkillRfFixedPctDamagePct",
	1580:  "SkillRfFixedPctTrueDamage",
	15801: "SkillRfFixedPctTrueDamageBase",
	15802: "SkillRfFixedPctTrueDamageAdd",
	15803: "SkillRfFixedPctTrueDamagePct",
	1581:  "SkillUpAttackFix",
	15811: "SkillUpAttackFixBase",
	15812: "SkillUpAttackFixAdd",
	15813: "SkillUpAttackFixPct",
	1582:  "SkillUpAttackPct",
	15821: "SkillUpAttackPctBase",
	15822: "SkillUpAttackPctAdd",
	15823: "SkillUpAttackPctPct",
	1583:  "SkillUpAttackFixMurder",
	15831: "SkillUpAttackFixMurderBase",
	15832: "SkillUpAttackFixMurderAdd",
	15833: "SkillUpAttackFixMurderPct",
	1584:  "SkillUpAttackPctMurder",
	15841: "SkillUpAttackPctMurderBase",
	15842: "SkillUpAttackPctMurderAdd",
	15843: "SkillUpAttackPctMurderPct",
	1585:  "SkillEnemgy",
	15851: "SkillEnemgyBase",
	15852: "SkillEnemgyAdd",
	15853: "SkillEnemgyPct",
	1600:  "SkillPropertyEnd",
	1601:  "BuffPropertyStart",
	1602:  "BuffLifeTime",
	16021: "BuffLifeTimeBase",
	16022: "BuffLifeTimeAdd",
	16023: "BuffLifeTimePct",
	1603:  "KillTakeBuffChance",
	1604:  "BuffOverlapCount",
	16041: "BuffOverlapCountBase",
	16042: "BuffOverlapCountAdd",
	16043: "BuffOverlapCountPct",
	1605:  "MagicFind",
	16051: "MagicFindBase",
	16052: "MagicFindAdd",
	16053: "MagicFindPct",
	1700:  "BuffPropertyEnd",
	1701:  "GuardPropertyStart",
	1702:  "GuardEnergyMax",
	17021: "GuardEnergyMaxBase",
	17022: "GuardEnergyMaxAdd",
	17023: "GuardEnergyMaxPct",
	1703:  "SustainCd",
	17031: "SustainCdBase",
	17032: "SustainCdAdd",
	17033: "SustainCdPct",
	1704:  "ColdCd",
	17041: "ColdCdBase",
	17042: "ColdCdAdd",
	17043: "ColdCdPct",
	1705:  "GuardEnergy",
	17051: "GuardEnergyBase",
	1750:  "GuardPropertyEnd",
	1760:  "SinEquipmentLevel",
	17601: "SinEquipmentLevelBase",
	17602: "SinEquipmentLevelAdd",
	17603: "SinEquipmentLevelPct",
}

var NumericType_value = map[string]int32{
	"Numeric_None":                     0,
	"Max":                              10000,
	"Hp":                               1001,
	"HpBase":                           10011,
	"MaxHp":                            1002,
	"MaxHpBase":                        10021,
	"MaxHpAdd":                         10022,
	"MaxHpPct":                         10023,
	"MaxHpFinalAdd":                    10024,
	"MaxHpFinalPct":                    10025,
	"Attack":                           1003,
	"AttackBase":                       10031,
	"AttackAdd":                        10032,
	"AttackPct":                        10033,
	"AttackFinalAdd":                   10034,
	"AttackFinalPct":                   10035,
	"ChaosAttack":                      1004,
	"ChaosAttackBase":                  10041,
	"ChaosAttackAdd":                   10042,
	"ChaosAttackPct":                   10043,
	"ChaosAttackFinalAdd":              10044,
	"ChaosAttackFinalPct":              10045,
	"ElementAttack":                    1005,
	"ElementAttackBase":                10051,
	"ElementAttackAdd":                 10052,
	"ElementAttackPct":                 10053,
	"ElementAttackFinalAdd":            10054,
	"ElementAttackFinalPct":            10055,
	"Defence":                          1006,
	"DefenceBase":                      10061,
	"DefenceAdd":                       10062,
	"DefencePct":                       10063,
	"DefenceFinalAdd":                  10064,
	"DefenceFinalPct":                  10065,
	"CritChance":                       1007,
	"CritChanceBase":                   10071,
	"CritChanceAdd":                    10072,
	"CritChancePct":                    10073,
	"CritChanceFinalAdd":               10074,
	"CritChanceFinalPct":               10075,
	"CritRate":                         1008,
	"CritRateBase":                     10081,
	"CritRateAdd":                      10082,
	"CritRatePct":                      10083,
	"CritRateFinalAdd":                 10084,
	"CritRateFinalPct":                 10085,
	"Shield":                           1009,
	"ShieldBase":                       10091,
	"MaxShield":                        1010,
	"MaxShieldBase":                    10101,
	"MaxShieldAdd":                     10102,
	"MaxShieldPct":                     10103,
	"MaxShieldFinalAdd":                10104,
	"MaxShieldFinalPct":                10105,
	"BreakShield":                      1012,
	"BreakShieldBase":                  10121,
	"BreakShieldAdd":                   10122,
	"BreakShieldPct":                   10123,
	"BreakShieldFinalAdd":              10124,
	"BreakShieldFinalPct":              10125,
	"ShieldRegenTime":                  1013,
	"ShieldRegenTimeBase":              10131,
	"ShieldRegenTimeAdd":               10132,
	"ShieldRegenTimePct":               10133,
	"ShieldRegenCount":                 1014,
	"ShieldRegenCountBase":             10141,
	"ShieldRegenCountAdd":              10142,
	"ShieldRegenCountPct":              10143,
	"ShieldDuration":                   1015,
	"ShieldDurationBase":               10151,
	"ShieldDurationAdd":                10152,
	"ShieldDurationPct":                10153,
	"ShieldReductionRate":              1016,
	"ShieldReductionRateBase":          10161,
	"ShieldReductionRateAdd":           10162,
	"ShieldReductionRatePct":           10163,
	"FireResistance":                   1017,
	"FireResistanceBase":               10171,
	"FireResistanceAdd":                10172,
	"FireResistancePct":                10173,
	"IceResistance":                    1018,
	"IceResistanceBase":                10181,
	"IceResistanceAdd":                 10182,
	"IceResistancePct":                 10183,
	"LightResistance":                  1019,
	"LightResistanceBase":              10191,
	"LightResistanceAdd":               10192,
	"LightResistancePct":               10193,
	"DarkResistance":                   1020,
	"DarkResistanceBase":               10201,
	"DarkResistanceAdd":                10202,
	"DarkResistancePct":                10203,
	"Ultimate":                         1021,
	"UltimateBase":                     10211,
	"MaxUltimate":                      1022,
	"MaxUltimateBase":                  10221,
	"MaxUltimateAdd":                   10222,
	"MaxUltimatePct":                   10223,
	"Murder":                           1023,
	"MurderBase":                       10231,
	"MaxMurder":                        1024,
	"MaxMurderBase":                    10241,
	"MaxMurderAdd":                     10242,
	"MaxMurderPct":                     10243,
	"MurderConsume":                    1025,
	"MurderConsumeBase":                10251,
	"MurderUsePre":                     1026,
	"MurderUsePreBase":                 10261,
	"ResistanceBreakAll":               1027,
	"ResistanceBreakAllBase":           10271,
	"ResistanceBreakAllAdd":            10272,
	"ResistanceBreakAllPct":            10273,
	"ResistanceBreakFire":              1028,
	"ResistanceBreakFireBase":          10281,
	"ResistanceBreakFireAdd":           10282,
	"ResistanceBreakFirePct":           10283,
	"ResistanceBreakIce":               1029,
	"ResistanceBreakIceBase":           10291,
	"ResistanceBreakIceAdd":            10292,
	"ResistanceBreakIcePct":            10293,
	"ResistanceBreakLight":             1030,
	"ResistanceBreakLightBase":         10301,
	"ResistanceBreakLightAdd":          10302,
	"ResistanceBreakLightPct":          10303,
	"ResistanceBreakDark":              1031,
	"ResistanceBreakDarkBase":          10311,
	"ResistanceBreakDarkAdd":           10312,
	"ResistanceBreakDarkPct":           10313,
	"PhysicBreak":                      1032,
	"PhysicBreakBase":                  10321,
	"PhysicBreakAdd":                   10322,
	"PhysicBreakPct":                   10323,
	"AllResistance":                    1033,
	"AllResistanceBase":                10331,
	"AllResistanceAdd":                 10332,
	"AllResistancePct":                 10333,
	"MurderConsumeCure":                1034,
	"MurderConsumeCureBase":            10341,
	"MurderConsumeCureAdd":             10342,
	"MurderConsumeCurePct":             10343,
	"EquipLevelUp":                     1035,
	"EquipLevelUpBase":                 10351,
	"EquipLevelUpAdd":                  10352,
	"EquipLevelUpPct":                  10353,
	"EquipSetNeedDown":                 1036,
	"EquipSetNeedDownBase":             10361,
	"EquipSetNeedDownAdd":              10362,
	"EquipSetNeedDownPct":              10363,
	"ScrollComprehensionDownRate":      1037,
	"ScrollComprehensionDownRateBase":  10371,
	"ScrollComprehensionDownRateAdd":   10372,
	"ScrollComprehensionDownRatePct":   10373,
	"ScrollLevelUp":                    1038,
	"ScrollLevelUpBase":                10381,
	"ScrollLevelUpAdd":                 10382,
	"ScrollLevelUpPct":                 10383,
	"ScrolSkilllLevelUp":               1039,
	"ScrolSkilllLevelUpBase":           10391,
	"ScrolSkilllLevelUpAdd":            10392,
	"ScrollSkillLevelUpPct":            10393,
	"GetEquipmentBuff":                 1040,
	"GetEquipmentBuffBase":             10401,
	"GetEquipmentBuffAdd":              10402,
	"GetEquipmentBuffPct":              10403,
	"PerfectDefenseUp":                 1041,
	"PerfectDefenseUpBase":             10411,
	"PerfectDefenseUpAdd":              10412,
	"PerfectDefenseUpPct":              10413,
	"NormalDamageBack":                 1042,
	"NormalDamageBackBase":             10421,
	"NormalDamageBackAdd":              10422,
	"NormalDamageBackPct":              10423,
	"AdvanceDamageBackByDamage":        1043,
	"AdvanceDamageBackByDamageBase":    10431,
	"AdvanceDamageBackByDamageAdd":     10432,
	"AdvanceDamageBackByDamagePct":     10433,
	"AdvanceDamageBackByDefence":       1044,
	"AdvanceDamageBackByDefenceBase":   10441,
	"AdvanceDamageBackByDefenceAdd":    10442,
	"AdvanceDamageBackByDefencePct":    10443,
	"HaloIntervalUp":                   1045,
	"HaloIntervalUpBase":               10451,
	"HaloIntervalUpAdd":                10452,
	"HaloIntervalUpPct":                10453,
	"ReviveCount":                      1046,
	"ReviveCountBase":                  10461,
	"ReviveCountAdd":                   10462,
	"ReviveCountPct":                   10463,
	"BreakShieldConsume":               1047,
	"BreakShieldConsumeBase":           10471,
	"HpConsumePercent":                 1048,
	"HpConsumePercentBase":             10481,
	"TrueDamage":                       1049,
	"TrueDamageBase":                   10491,
	"TrueDamageAdd":                    10492,
	"TrueDamagePct":                    10493,
	"AllTrueDamage":                    1050,
	"AllTrueDamageBase":                10501,
	"AllTrueDamageAdd":                 10502,
	"AllTrueDamagePct":                 10503,
	"CrimeBlood":                       1051,
	"CrimeBloodBase":                   10511,
	"CrimeBloodBloodAdd":               10512,
	"CrimeBloodBloodPct":               10513,
	"CrimeBackHurt":                    1052,
	"CrimeBackHurtBase":                10521,
	"CrimeBackHurtAdd":                 10522,
	"CrimeBackHurtPct":                 10523,
	"DamageFinal":                      1053,
	"DamageFinalBase":                  10531,
	"DamageFinalAdd":                   10532,
	"DamageFinalPct":                   10533,
	"HealFinal":                        1054,
	"HealFinalBase":                    10541,
	"HealFinalAdd":                     10542,
	"HealFinalPct":                     10543,
	"FinalCritChance":                  1055,
	"FinalCritChanceBase":              10551,
	"FinalCritChanceAdd":               10552,
	"FinalCritChancePct":               10553,
	"DefenseDamageFinal":               1056,
	"DefenseDamageFinalBase":           10561,
	"DefenseDamageFinalAdd":            10562,
	"DefenseDamageFinalPct":            10563,
	"aoyiRd":                           1057,
	"aoyiRdBase":                       10571,
	"aoyiRdAdd":                        10572,
	"aoyiRdPct":                        10573,
	"pugongRd":                         1058,
	"pugongRdBase":                     10581,
	"pugongRdAdd":                      10582,
	"pugongRdPct":                      10583,
	"AttackFinalHarm":                  1059,
	"AttackFinalHarmBase":              10591,
	"AttackFinalHarmAdd":               10592,
	"DefenseFinalLossHarm":             1060,
	"DefenseFinalLossHarmBase":         10601,
	"DefenseFinalLossHarmAdd":          10602,
	"RealPvpReduceWeight":              1061,
	"RealPvpReduceWeightBase":          10611,
	"RealPvpReduceWeightAdd":           10612,
	"RealPvpReduceWeightPct":           10613,
	"RealPvpRdReduceWeight":            1062,
	"RealPvpRdReduceWeightBase":        10621,
	"RealPvpRdReduceWeightAdd":         10622,
	"RealPvpRdReduceWeightPct":         10623,
	"RealPvpRdCritChance":              1063,
	"RealPvpRdCritChanceBase":          10631,
	"RealPvpRdCritChanceAdd":           10632,
	"RealPvpRdCritChancePct":           10633,
	"RealPvpRdCritRate":                1064,
	"RealPvpRdCritRateBase":            10641,
	"RealPvpRdCritRateAdd":             10642,
	"RealPvpRdCritRatePct":             10643,
	"RealPvpXinYu":                     1065,
	"RealPvpXinYuBase":                 10651,
	"RealPvpXinYuAdd":                  10652,
	"RealPvpXinYuPct":                  10653,
	"RealPvpRdXinYu":                   1066,
	"RealPvpRdXinYuBase":               10661,
	"RealPvpRdXinYuAdd":                10662,
	"RealPvpRdXinYuPct":                10663,
	"RenWangTiLi":                      1067,
	"RenWangTiLiBase":                  10671,
	"RenWangTiLiAdd":                   10672,
	"RenWangTiLiPct":                   10673,
	"RenWangTiLiRecoverTime":           1068,
	"RenWangTiLiRecoverTimeBase":       10681,
	"RenWangTiLiRecoverTimeAdd":        10682,
	"RenWangTiLiRecoverTimePct":        10683,
	"DamageEd":                         1101,
	"DamageEdBase":                     11011,
	"DamageEdAdd":                      11012,
	"DamageEdPct":                      11013,
	"DamageNormalEd":                   1102,
	"DamageNormalEdBase":               11021,
	"DamageNormalEdAdd":                11022,
	"DamageNormalEdPct":                11023,
	"DamageElementEd":                  1103,
	"DamageElementEdBase":              11031,
	"DamageElementEdAdd":               11032,
	"DamageElementEdPct":               11033,
	"DamageEdFire":                     1104,
	"DamageEdFireBase":                 11041,
	"DamageEdFireAdd":                  11042,
	"DamageEdFirePct":                  11043,
	"DamageEdIce":                      1105,
	"DamageEdIceBase":                  11051,
	"DamageEdIceAdd":                   11052,
	"DamageEdIcePct":                   11053,
	"DamageEdLight":                    1106,
	"DamageEdLightBase":                11061,
	"DamageEdLightAdd":                 11062,
	"DamageEdLightPct":                 11063,
	"DamageEdDark":                     1107,
	"DamageEdDarkBase":                 11071,
	"DamageEdDarkAdd":                  11072,
	"DamageEdDarkPct":                  11073,
	"EliteEd":                          1108,
	"EliteEdBase":                      11081,
	"EliteEdAdd":                       11082,
	"EliteEdPct":                       11083,
	"BossEd":                           1109,
	"BossEdBase":                       11091,
	"BossEdAdd":                        11092,
	"BossEdPct":                        11093,
	"MonsterEd":                        1110,
	"MonsterEdBase":                    11101,
	"MonsterEdAdd":                     11102,
	"MonsterEdPct":                     11103,
	"MeleeEd":                          1111,
	"MeleeEdBase":                      11111,
	"MeleeEdAdd":                       11112,
	"MeleeEdPct":                       11113,
	"RangerEd":                         1112,
	"RangerEdBase":                     11121,
	"RangerEdAdd":                      11122,
	"RangerEdPct":                      11123,
	"DamageRd":                         1131,
	"DamageRdBase":                     11311,
	"DamageRdAdd":                      11312,
	"DamageRdPct":                      11313,
	"DamageNormalRd":                   1132,
	"DamageNormalRdBase":               11321,
	"DamageNormalRdAdd":                11322,
	"DamageNormalRdPct":                11323,
	"DamageElementRd":                  1133,
	"DamageElementRdBase":              11331,
	"DamageElementRdAdd":               11332,
	"DamageElementRdPct":               11333,
	"DamageRdFire":                     1134,
	"DamageRdFireBase":                 11341,
	"DamageRdFireAdd":                  11342,
	"DamageRdFirePct":                  11343,
	"DamageRdIce":                      1135,
	"DamageRdIceBase":                  11351,
	"DamageRdIceAdd":                   11352,
	"DamageRdIcePct":                   11353,
	"DamageRdLight":                    1136,
	"DamageRdLightBase":                11361,
	"DamageRdLightAdd":                 11362,
	"DamageRdLightPct":                 11363,
	"DamageRdDark":                     1137,
	"DamageRdDarkBase":                 11371,
	"DamageRdDarkAdd":                  11372,
	"DamageRdDarkPct":                  11373,
	"EliteRd":                          1138,
	"EliteRdBase":                      11381,
	"EliteRdAdd":                       11382,
	"EliteRdPct":                       11383,
	"BossRd":                           1139,
	"BossRdBase":                       11391,
	"BossRdAdd":                        11392,
	"BossRdPct":                        11393,
	"MonsterRd":                        1140,
	"MonsterRdBase":                    11401,
	"MonsterRdAdd":                     11402,
	"MonsterRdPct":                     11403,
	"MeleeRd":                          1141,
	"MeleeRdBase":                      11411,
	"MeleeRdAdd":                       11412,
	"MeleeRdPct":                       11413,
	"RangerRd":                         1142,
	"RangerRdBase":                     11421,
	"RangerRdAdd":                      11422,
	"RangerRdPct":                      11423,
	"NormalAttackDamage":               1161,
	"NormalAttackDamageBase":           11611,
	"NormalAttackDamageAdd":            11612,
	"NormalAttackDamagePct":            11613,
	"DamageNormalFinalEd":              1162,
	"DamageNormalFinalEdBase":          11621,
	"DamageNormalFinalEdAdd":           11622,
	"DamageNormalFinalEdPct":           11623,
	"DamageElementFinalEd":             1163,
	"DamageElementFinalEdBase":         11631,
	"DamageElementFinalEdAdd":          11632,
	"DamageElementFinalEdPct":          11633,
	"GoldMultiply":                     1164,
	"GoldMultiplyBase":                 11641,
	"GoldMultiplyAdd":                  11642,
	"GoldMultiplyPct":                  11643,
	"ExpMultiply":                      1165,
	"ExpMultiplyBase":                  11651,
	"ExpMultiplyAdd":                   11652,
	"ExpMultiplyPct":                   11653,
	"EquipDropMultiply":                1166,
	"EquipDropMultiplyBase":            11661,
	"EquipDropMultiplyAdd":             11662,
	"EquipDropMultiplyPct":             11663,
	"EquipDropCountMultiply":           1167,
	"EquipDropCountMultiplyBase":       11671,
	"EquipDropCountMultiplyAdd":        11672,
	"EquipDropCountMultiplyPct":        11673,
	"LifeEachDowm":                     1168,
	"LifeEachDowmBase":                 11681,
	"LifeEachDowmAdd":                  11682,
	"LifeEachDowmPct":                  11683,
	"SideScrollNum":                    1169,
	"SideScrollNumBase":                11691,
	"SideScrollNumAdd":                 11692,
	"NotAllowSameScroll":               1170,
	"NotAllowSameScrollBase":           11701,
	"NotAllowSameScrollAdd":            11702,
	"MaxSuitTwoNeedOne":                1171,
	"MaxSuitTwoNeedOneBase":            11711,
	"MaxSuitTwoNeedOneAdd":             11712,
	"TrapDamageRd":                     1172,
	"TrapDamageRdBase":                 11721,
	"TrapDamageRdAdd":                  11722,
	"TrapDamageRdPct":                  11723,
	"AddFixLifeEachHit":                1201,
	"AddFixLifeEachHitBase":            12011,
	"AddFixLifeEachHitAdd":             12012,
	"AddFixLifeEachHitPct":             12013,
	"AddPctLifeEachHit":                1202,
	"AddPctLifeEachHitBase":            12021,
	"AddPctLifeEachHitAdd":             12022,
	"AddPctLifeEachHitPct":             12023,
	"AddLifeEachKill":                  1203,
	"AddLifeEachKillBase":              12031,
	"AddLifeEachKillAdd":               12032,
	"AddLifeEachKillPct":               12033,
	"ThornFixDamage":                   1204,
	"ThornFixDamageBase":               12041,
	"ThornFixDamageAdd":                12042,
	"ThornFixDamagePct":                12043,
	"ThornPctDamage":                   1205,
	"ThornPctDamageBase":               12051,
	"ThornPctDamageAdd":                12052,
	"ThornPctDamagePct":                12053,
	"Chain1CoolDown":                   1206,
	"Chain1CoolDownBase":               12061,
	"Chain1CoolDownAdd":                12062,
	"Chain1CoolDownPct":                12063,
	"Chain2CoolDown":                   1207,
	"Chain2CoolDownBase":               12071,
	"Chain2CoolDownAdd":                12072,
	"Chain2CoolDownPct":                12073,
	"Chain1BreakShield":                1208,
	"Chain1BreakShieldBase":            12081,
	"Chain1BreakShieldAdd":             12082,
	"Chain1BreakShieldPct":             12083,
	"Chain2BreakShield":                1209,
	"Chain2BreakShieldBase":            12091,
	"Chain2BreakShieldAdd":             12092,
	"Chain2BreakShieldPct":             12093,
	"Chain1PctDamage":                  1210,
	"Chain1PctDamageBase":              12101,
	"Chain1PctDamageAdd":               12102,
	"Chain1PctDamagePct":               12103,
	"Chain2PctDamage":                  1211,
	"Chain2PctDamageBase":              12111,
	"Chain2PctDamageAdd":               12112,
	"Chain2PctDamagePct":               12113,
	"ChainSlotLeft":                    1212,
	"ChainSlotLeftBase":                12121,
	"ChainSlotLeftPctDamage":           1213,
	"ChainSlotLeftPctDamageBase":       12131,
	"ChainSlotLeftPctDamageAdd":        12132,
	"ChainSlotLeftPctDamagePct":        12133,
	"MurderFullPctEd":                  1214,
	"MurderFullPctEdBase":              12141,
	"MurderFullPctEdAdd":               12142,
	"MurderFullPctEdPct":               12143,
	"MurderFullPctRd":                  1215,
	"MurderFullPctRdBase":              12151,
	"MurderFullPctRdAdd":               12152,
	"MurderFullPctRdPct":               12153,
	"MurderSkillGetBuffChance":         1216,
	"LifeRateGetBuff":                  1217,
	"SkyBuffOverlap":                   1218,
	"PhysicDamageToElementDamage":      1219,
	"PhysicDamageToElementDamageBase":  12191,
	"PhysicDamageToElementDamageAdd":   12192,
	"PhysicDamageToElementDamagePct":   12193,
	"MurderConsumeAll":                 1220,
	"MurderConsumeAllBase":             12201,
	"MurderConsumeAllAdd":              12202,
	"Gorgeous":                         1221,
	"GorgeousBase":                     12211,
	"GorgeousAdd":                      12212,
	"GorgeousPct":                      12213,
	"GorgeousDoubleHitPct":             1222,
	"GorgeousDoubleHitPctBase":         12221,
	"GorgeousDoubleHitPctAdd":          12222,
	"LessSkillCd":                      1223,
	"LessSkillCdBase":                  12231,
	"LessSkillCdAdd":                   12232,
	"LessSkillCdPct":                   12233,
	"SurpassSkillCd":                   1224,
	"SurpassSkillCdBase":               12241,
	"SurpassSkillCdAdd":                12242,
	"SurpassSkillCdPct":                12243,
	"EmptySkillScroll":                 1225,
	"EmptySkillScrollBase":             12251,
	"EmptySkillScrollAdd":              12252,
	"AllLinkSkillGeneral":              1226,
	"AllLinkSkillGeneralBase":          12261,
	"AllLinkSkillGeneralAdd":           12262,
	"AllLinkSkillAoyi":                 1227,
	"AllLinkSkillAoyiBase":             12271,
	"AllLinkSkillAoyiAdd":              12272,
	"AddSpecialSkill":                  1228,
	"AddSpecialSkillBase":              12281,
	"AddSpecialSkillAdd":               12282,
	"RecoveryUltimate":                 1229,
	"RecoveryUltimateBase":             12291,
	"TrueDamageFinal":                  1230,
	"TrueDamageFinalBase":              12301,
	"TrueDamageFinalAdd":               12302,
	"RateFinal":                        1231,
	"RateFinalBase":                    12311,
	"RateFinalAdd":                     12312,
	"RateVal":                          1232,
	"RateValBase":                      12321,
	"RateValAdd":                       12322,
	"BuffFinal":                        1233,
	"BuffFinalBase":                    12331,
	"BuffFinalAdd":                     12332,
	"SatiationLimit":                   1234,
	"SatiationLimitBase":               12341,
	"SatiationLimitAdd":                12342,
	"FoodUseTimes":                     1235,
	"FoodUseTimesBase":                 12351,
	"FoodUseTimesAdd":                  12352,
	"WuSheng":                          1236,
	"WuShengBase":                      12361,
	"WuShengAdd":                       12362,
	"MoveSpeed":                        1301,
	"MoveSpeedBase":                    13011,
	"MoveSpeedAdd":                     13012,
	"MoveSpeedPct":                     13013,
	"MoveSpeedFinalAdd":                13014,
	"MoveSpeedFinalPct":                13015,
	"MoveAnimSpeed":                    1302,
	"MoveAnimSpeedBase":                13021,
	"MoveAnimSpeedAdd":                 13022,
	"MoveAnimSpeedPct":                 13023,
	"AttackSpeed":                      1303,
	"AttackSpeedBase":                  13031,
	"AttackSpeedAdd":                   13032,
	"AttackSpeedPct":                   13033,
	"AttackSpeedFinalAdd":              13034,
	"AttackSpeedFinalPct":              13035,
	"AttackAnimSpeed":                  1304,
	"AttackAnimSpeedBase":              13041,
	"AttackAnimSpeedAdd":               13042,
	"AttackAnimSpeedPct":               13043,
	"AttackAnimSpeedFinalAdd":          13044,
	"AttackAnimSpeedFinalPct":          13045,
	"Weight":                           1305,
	"WeightBase":                       13051,
	"WeightAdd":                        13052,
	"WeightPct":                        13053,
	"EmitObjPropertyStart":             1401,
	"EmitObjWeight":                    1402,
	"EmitObjWeightBase":                14021,
	"EmitObjWeightAdd":                 14022,
	"EmitObjWeightPct":                 14023,
	"EmitObjMaxHitCount":               1403,
	"EmitObjMaxHitCountBase":           14031,
	"EmitObjMaxHitCountAdd":            14032,
	"EmitObjMaxHitCountPct":            14033,
	"EmitObjAddForceX":                 1404,
	"EmitObjAddForceXBase":             14041,
	"EmitObjAddForceXAdd":              14042,
	"EmitObjAddForceXPct":              14043,
	"EmitObjAddForceY":                 1405,
	"EmitObjAddForceYBase":             14051,
	"EmitObjAddForceYAdd":              14052,
	"EmitObjAddForceYPct":              14053,
	"EmitObjAddForceZ":                 1406,
	"EmitObjAddForceZBase":             14061,
	"EmitObjAddForceZAdd":              14062,
	"EmitObjAddForceZPct":              14063,
	"EmitObjPropertyEnd":               1500,
	"SkillPropertyStart":               1501,
	"SkillAdsorbLow":                   1502,
	"SkillAdsorbLowBase":               15021,
	"SkillAdsorbLowAdd":                15022,
	"SkillAdsorbLowPct":                15023,
	"SkillAdsorbUp":                    1503,
	"SkillAdsorbUpBase":                15031,
	"SkillAdsorbUpAdd":                 15032,
	"SkillAdsorbUpPct":                 15033,
	"SkillBreakShield":                 1504,
	"SkillBreakShieldBase":             15041,
	"SkillBreakShieldAdd":              15042,
	"SkillBreakShieldPct":              15043,
	"SkillCoolDown":                    1505,
	"SkillCoolDownBase":                15051,
	"SkillCoolDownAdd":                 15052,
	"SkillCoolDownPct":                 15053,
	"SkillFixDamage":                   1521,
	"SkillFixDamageBase":               15211,
	"SkillFixDamageAdd":                15212,
	"SkillFixDamagePct":                15213,
	"SkillPctDamage":                   1522,
	"SkillPctDamageBase":               15221,
	"SkillPctDamageAdd":                15222,
	"SkillPctDamagePct":                15223,
	"SkillFixElementDamage":            1523,
	"SkillFixElmentDamageBase":         15231,
	"SkillFixElmentDamageAdd":          15232,
	"SkillFixElmentDamagePct":          15233,
	"SkillPctElementDamage":            1524,
	"SkillPctElmentDamageBase":         15241,
	"SkillPctElmentDamageAdd":          15242,
	"SkillPctElmentDamagePct":          15243,
	"SkillPctArmour":                   1525,
	"SkillPctArmourBase":               15251,
	"SkillPctArmourAdd":                15252,
	"SkillPctArmourPct":                15253,
	"SkillMurder":                      1541,
	"SkillMurderBase":                  15411,
	"SkillMurderAdd":                   15412,
	"SkillMurderPct":                   15413,
	"SkillMurderBreakShieldRate":       1542,
	"SkillMurderBreakShieldRateBase":   15421,
	"SkillMurderBreakShieldRateAdd":    15422,
	"SkillMurderBreakShieldRatePct":    15423,
	"SkillMurderDamageRate":            1543,
	"SkillMurderDamageRateBase":        15431,
	"SkillMurderDamageRateAdd":         15432,
	"SkillMurderDamageRatePct":         15433,
	"SkillUltimate":                    1544,
	"SkillUltimateBase":                15441,
	"SkillUltimateAdd":                 15442,
	"SkillUltimatePct":                 15443,
	"SkillAllDamageRate":               1545,
	"SkillAllDamageRateBase":           15451,
	"SkillAllDamageRateAdd":            15452,
	"SkillAllDamageRatePct":            15453,
	"SkillCritChance":                  1546,
	"SkillCritChanceBase":              15461,
	"SkillCritChanceAdd":               15462,
	"SkillCritChancePct":               15463,
	"SkillCritChanceFinalAdd":          15464,
	"SkillCritChanceFinalPct":          15465,
	"SkillCritRate":                    1547,
	"SkillCritRateBase":                15471,
	"SkillCritRateAdd":                 15472,
	"SkillCritRatePct":                 15473,
	"SkillPhysicBreak":                 1548,
	"SkillPhysicBreakBase":             15481,
	"SkillPhysicBreakAdd":              15482,
	"SkillPhysicBreakPct":              15483,
	"SkillAddFixLifeEachHit":           1549,
	"SkillAddFixLifeEachHitBase":       15491,
	"SkillAddFixLifeEachHitAdd":        15492,
	"SkillAddFixLifeEachHitPct":        15493,
	"SkillAddLifeEachKill":             1550,
	"SkillAddLifeEachKillBase":         15501,
	"SkillAddLifeEachKillAdd":          15502,
	"SkillAddLifeEachKillPct":          15503,
	"SkillHitGetBuffChance":            1551,
	"ScrollFireElementDamageRate":      1552,
	"ScrollFireElementDamageRateBase":  15521,
	"ScrollFireElementDamageRateAdd":   15522,
	"ScrollFireElementDamageRatePct":   15523,
	"ScrollIceElementDamageRate":       1553,
	"ScrollIceElementDamageRateBase":   15531,
	"ScrollIceElementDamageRateAdd":    15532,
	"ScrollIceElementDamageRatePct":    15533,
	"ScrollLightElementDamageRate":     1554,
	"ScrollLightElementDamageRateBase": 15541,
	"ScrollLightElementDamageRateAdd":  15542,
	"ScrollLightElementDamageRatePct":  15543,
	"ScrollDarkElementDamageRate":      1555,
	"ScrollDarkElementDamageRateBase":  15551,
	"ScrollDarkElementDamageRateAdd":   15552,
	"ScrollDarkElementDamageRatePct":   15553,
	"SkillTakeBuff":                    1556,
	"AllSkillHitGetBuffChance":         1557,
	"SkillSkyForce":                    1558,
	"SkillSkyForceBase":                15581,
	"SkillSkyForceAdd":                 15582,
	"SkillSkyForcePct":                 15583,
	"SkillOverShield":                  1559,
	"SkillOverShieldBase":              15591,
	"SkillOverShieldAdd":               15592,
	"SkillOverShieldPct":               15593,
	"SkillSplash":                      1560,
	"SkillSplashBase":                  15601,
	"SkillSplashAdd":                   15602,
	"SkillSplashPct":                   15603,
	"SkillLifeCure":                    1561,
	"SkillLifeCureBase":                15611,
	"SkillLifeCureAdd":                 15612,
	"SkillLifeCurePct":                 15613,
	"SkillMakeEnemyConfuse":            1562,
	"SkillMakeEnemyConfuseBase":        15621,
	"SkillMakeEnemyConfuseAdd":         15622,
	"SkillMakeEnemyConfusePct":         15623,
	"SkillAbsorbToAlly":                1563,
	"SkillAbsorbToAllyBase":            15631,
	"SkillAbsorbToAllyAdd":             15632,
	"SkillAbsorbToAllyPct":             15633,
	"SkillSpecialUseArgument":          1564,
	"SkillSpecialUseArgumentBase":      15641,
	"SkillSpecialUseArgumentAdd":       15642,
	"SkillSpecialUseArgumentPct":       15643,
	"SkillTrueDamage":                  1565,
	"SkillTrueDamageBase":              15651,
	"SkillTrueDamageAdd":               15652,
	"SkillTrueDamagePct":               15653,
	"SkillPctTrueDamage":               1567,
	"SkillPctTrueDamageBase":           15671,
	"SkillPctTrueDamageAdd":            15672,
	"SkillPctTrueDamagePct":            15673,
	"SkillCritHarm":                    1568,
	"SkillCritHarmBase":                15681,
	"SkillCritHarmAdd":                 15682,
	"SkillCritHarmPct":                 15683,
	"SkillCritHarmFinalAdd":            15684,
	"SkillCritHarmFinalPct":            15685,
	"SkillTransmitHarm":                1569,
	"SkillTransmitHarmBase":            15691,
	"SkillTransmitHarmAdd":             15692,
	"SkillTransmitHarmPct":             15693,
	"SkillScrollBaseVal":               1570,
	"SkillScrollBaseValBase":           15701,
	"SkillScrollBaseValAdd":            15702,
	"SkillScrollBaseValPct":            15703,
	"SkillScrollHutr":                  1571,
	"SkillScrollHutrBase":              15711,
	"SkillScrollHutrAdd":               15712,
	"SkillScrollHutrPct":               15713,
	"ScrollAttToSkillHurt":             1572,
	"ScrollAttToSkillHurtBase":         15721,
	"ScrollAttToSkillHurtAdd":          15722,
	"ScrollAttToSkillHurtPct":          15723,
	"ScrollAttToSkillTrueHurt":         1573,
	"ScrollAttToSkillTrueHurtBase":     15731,
	"ScrollAttToSkillTrueHurtAdd":      15732,
	"ScrollAttToSkillTrueHurtPct":      15733,
	"ScrollAttToSkillBreak":            1574,
	"ScrollAttToSkillBreakBase":        15741,
	"ScrollAttToSkillBreakAdd":         15742,
	"ScrollAttToSkillBreakPct":         15743,
	"SkillTrueLifeCure":                1575,
	"SkillTrueLifeCureBase":            15751,
	"SkillTrueLifeCureAdd":             15752,
	"SkillTrueLifeCurePct":             15753,
	"ScrollToSkillHurt":                1576,
	"ScrollToSkillHurtBase":            15761,
	"ScrollToSkillHurtAdd":             15762,
	"ScrollToSkillHurtPct":             15763,
	"ScrollToSkillTrueHurt":            1577,
	"ScrollToSkillTrueHurtBase":        15771,
	"ScrollToSkillTrueHurtAdd":         15772,
	"ScrollToSkillTrueHurtPct":         15773,
	"SkillRfFixedSBreakShield":         1578,
	"SkillRfFixedSBreakShieldBase":     15781,
	"SkillRfFixedSBreakShieldAdd":      15782,
	"SkillRfFixedSBreakShieldPct":      15783,
	"SkillRfFixedPctDamage":            1579,
	"SkillRfFixedPctDamageBase":        15791,
	"SkillRfFixedPctDamageAdd":         15792,
	"SkillRfFixedPctDamagePct":         15793,
	"SkillRfFixedPctTrueDamage":        1580,
	"SkillRfFixedPctTrueDamageBase":    15801,
	"SkillRfFixedPctTrueDamageAdd":     15802,
	"SkillRfFixedPctTrueDamagePct":     15803,
	"SkillUpAttackFix":                 1581,
	"SkillUpAttackFixBase":             15811,
	"SkillUpAttackFixAdd":              15812,
	"SkillUpAttackFixPct":              15813,
	"SkillUpAttackPct":                 1582,
	"SkillUpAttackPctBase":             15821,
	"SkillUpAttackPctAdd":              15822,
	"SkillUpAttackPctPct":              15823,
	"SkillUpAttackFixMurder":           1583,
	"SkillUpAttackFixMurderBase":       15831,
	"SkillUpAttackFixMurderAdd":        15832,
	"SkillUpAttackFixMurderPct":        15833,
	"SkillUpAttackPctMurder":           1584,
	"SkillUpAttackPctMurderBase":       15841,
	"SkillUpAttackPctMurderAdd":        15842,
	"SkillUpAttackPctMurderPct":        15843,
	"SkillEnemgy":                      1585,
	"SkillEnemgyBase":                  15851,
	"SkillEnemgyAdd":                   15852,
	"SkillEnemgyPct":                   15853,
	"SkillPropertyEnd":                 1600,
	"BuffPropertyStart":                1601,
	"BuffLifeTime":                     1602,
	"BuffLifeTimeBase":                 16021,
	"BuffLifeTimeAdd":                  16022,
	"BuffLifeTimePct":                  16023,
	"KillTakeBuffChance":               1603,
	"BuffOverlapCount":                 1604,
	"BuffOverlapCountBase":             16041,
	"BuffOverlapCountAdd":              16042,
	"BuffOverlapCountPct":              16043,
	"MagicFind":                        1605,
	"MagicFindBase":                    16051,
	"MagicFindAdd":                     16052,
	"MagicFindPct":                     16053,
	"BuffPropertyEnd":                  1700,
	"GuardPropertyStart":               1701,
	"GuardEnergyMax":                   1702,
	"GuardEnergyMaxBase":               17021,
	"GuardEnergyMaxAdd":                17022,
	"GuardEnergyMaxPct":                17023,
	"SustainCd":                        1703,
	"SustainCdBase":                    17031,
	"SustainCdAdd":                     17032,
	"SustainCdPct":                     17033,
	"ColdCd":                           1704,
	"ColdCdBase":                       17041,
	"ColdCdAdd":                        17042,
	"ColdCdPct":                        17043,
	"GuardEnergy":                      1705,
	"GuardEnergyBase":                  17051,
	"GuardPropertyEnd":                 1750,
	"SinEquipmentLevel":                1760,
	"SinEquipmentLevelBase":            17601,
	"SinEquipmentLevelAdd":             17602,
	"SinEquipmentLevelPct":             17603,
}

func (x NumericType) String() string {
	return proto.EnumName(NumericType_name, int32(x))
}

func (NumericType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{26}
}

type HandBookType int32

const (
	HandBookType_HandBookType_None      HandBookType = 0
	HandBookType_HandBookType_Item      HandBookType = 1
	HandBookType_HandBookType_Equipment HandBookType = 2
	HandBookType_HandBookType_Scroll    HandBookType = 3
	HandBookType_HandBookType_Enemy     HandBookType = 4
	HandBookType_HandBookType_NPC       HandBookType = 5
)

var HandBookType_name = map[int32]string{
	0: "HandBookType_None",
	1: "HandBookType_Item",
	2: "HandBookType_Equipment",
	3: "HandBookType_Scroll",
	4: "HandBookType_Enemy",
	5: "HandBookType_NPC",
}

var HandBookType_value = map[string]int32{
	"HandBookType_None":      0,
	"HandBookType_Item":      1,
	"HandBookType_Equipment": 2,
	"HandBookType_Scroll":    3,
	"HandBookType_Enemy":     4,
	"HandBookType_NPC":       5,
}

func (x HandBookType) String() string {
	return proto.EnumName(HandBookType_name, int32(x))
}

func (HandBookType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{27}
}

type UnitType int32

const (
	UnitType_Monster       UnitType = 0
	UnitType_Elite         UnitType = 1
	UnitType_Boss          UnitType = 2
	UnitType_NPC           UnitType = 3
	UnitType_Trap          UnitType = 4
	UnitType_Block         UnitType = 5
	UnitType_Chest         UnitType = 6
	UnitType_ChestMonster  UnitType = 7
	UnitType_SinPlayer     UnitType = 8
	UnitType_AttachMonster UnitType = 9
	UnitType_SaveChest     UnitType = 10
	UnitType_Fragile       UnitType = 11
	UnitType_UnitTrigger   UnitType = 12
)

var UnitType_name = map[int32]string{
	0:  "Monster",
	1:  "Elite",
	2:  "Boss",
	3:  "NPC",
	4:  "Trap",
	5:  "Block",
	6:  "Chest",
	7:  "ChestMonster",
	8:  "SinPlayer",
	9:  "AttachMonster",
	10: "SaveChest",
	11: "Fragile",
	12: "UnitTrigger",
}

var UnitType_value = map[string]int32{
	"Monster":       0,
	"Elite":         1,
	"Boss":          2,
	"NPC":           3,
	"Trap":          4,
	"Block":         5,
	"Chest":         6,
	"ChestMonster":  7,
	"SinPlayer":     8,
	"AttachMonster": 9,
	"SaveChest":     10,
	"Fragile":       11,
	"UnitTrigger":   12,
}

func (x UnitType) String() string {
	return proto.EnumName(UnitType_name, int32(x))
}

func (UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{28}
}

type UnitElementType int32

const (
	UnitElementType_UnitElement_None  UnitElementType = 0
	UnitElementType_UnitElement_Fire  UnitElementType = 1
	UnitElementType_UnitElement_Ice   UnitElementType = 2
	UnitElementType_UnitElement_Light UnitElementType = 3
	UnitElementType_UnitElement_Dark  UnitElementType = 4
)

var UnitElementType_name = map[int32]string{
	0: "UnitElement_None",
	1: "UnitElement_Fire",
	2: "UnitElement_Ice",
	3: "UnitElement_Light",
	4: "UnitElement_Dark",
}

var UnitElementType_value = map[string]int32{
	"UnitElement_None":  0,
	"UnitElement_Fire":  1,
	"UnitElement_Ice":   2,
	"UnitElement_Light": 3,
	"UnitElement_Dark":  4,
}

func (x UnitElementType) String() string {
	return proto.EnumName(UnitElementType_name, int32(x))
}

func (UnitElementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{29}
}

//性别
type GENDER_TYPE int32

const (
	GENDER_TYPE_GENDER_TYPE_NULL  GENDER_TYPE = 0
	GENDER_TYPE_GENDER_TYPE_MAN   GENDER_TYPE = 1
	GENDER_TYPE_GENDER_TYPE_WOMAN GENDER_TYPE = 2
)

var GENDER_TYPE_name = map[int32]string{
	0: "GENDER_TYPE_NULL",
	1: "GENDER_TYPE_MAN",
	2: "GENDER_TYPE_WOMAN",
}

var GENDER_TYPE_value = map[string]int32{
	"GENDER_TYPE_NULL":  0,
	"GENDER_TYPE_MAN":   1,
	"GENDER_TYPE_WOMAN": 2,
}

func (x GENDER_TYPE) String() string {
	return proto.EnumName(GENDER_TYPE_name, int32(x))
}

func (GENDER_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{30}
}

//TXN
type TIME_OUT_TYPE int32

const (
	TIME_OUT_TYPE_TIME_OUT_TYPE_NULL TIME_OUT_TYPE = 0
	TIME_OUT_TYPE_TIME_OUT_TYPE_TXN  TIME_OUT_TYPE = 1
)

var TIME_OUT_TYPE_name = map[int32]string{
	0: "TIME_OUT_TYPE_NULL",
	1: "TIME_OUT_TYPE_TXN",
}

var TIME_OUT_TYPE_value = map[string]int32{
	"TIME_OUT_TYPE_NULL": 0,
	"TIME_OUT_TYPE_TXN":  1,
}

func (x TIME_OUT_TYPE) String() string {
	return proto.EnumName(TIME_OUT_TYPE_name, int32(x))
}

func (TIME_OUT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{31}
}

type TXN_TYPE int32

const (
	TXN_TYPE_TXN_TYPE_NULL           TXN_TYPE = 0
	TXN_TYPE_TXN_TYPE_UNKNOWN        TXN_TYPE = 1
	TXN_TYPE_TXN_TYPE_VOTE           TXN_TYPE = 2
	TXN_TYPE_TXN_TYPE_NATION_APPOINT TXN_TYPE = 3
	TXN_TYPE_TXN_TYPE_PARTY_OPEN     TXN_TYPE = 4
)

var TXN_TYPE_name = map[int32]string{
	0: "TXN_TYPE_NULL",
	1: "TXN_TYPE_UNKNOWN",
	2: "TXN_TYPE_VOTE",
	3: "TXN_TYPE_NATION_APPOINT",
	4: "TXN_TYPE_PARTY_OPEN",
}

var TXN_TYPE_value = map[string]int32{
	"TXN_TYPE_NULL":           0,
	"TXN_TYPE_UNKNOWN":        1,
	"TXN_TYPE_VOTE":           2,
	"TXN_TYPE_NATION_APPOINT": 3,
	"TXN_TYPE_PARTY_OPEN":     4,
}

func (x TXN_TYPE) String() string {
	return proto.EnumName(TXN_TYPE_name, int32(x))
}

func (TXN_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{32}
}

type TXN_RESULT int32

const (
	TXN_RESULT_TXN_RESULT_NULL    TXN_RESULT = 0
	TXN_RESULT_TXN_RESULT_UNKNOWN TXN_RESULT = 1
	TXN_RESULT_TXN_RESULT_FAILED  TXN_RESULT = 2
	TXN_RESULT_TXN_RESULT_SUCCESS TXN_RESULT = 3
	TXN_RESULT_TXN_RESULT_TIMEOUT TXN_RESULT = 4
)

var TXN_RESULT_name = map[int32]string{
	0: "TXN_RESULT_NULL",
	1: "TXN_RESULT_UNKNOWN",
	2: "TXN_RESULT_FAILED",
	3: "TXN_RESULT_SUCCESS",
	4: "TXN_RESULT_TIMEOUT",
}

var TXN_RESULT_value = map[string]int32{
	"TXN_RESULT_NULL":    0,
	"TXN_RESULT_UNKNOWN": 1,
	"TXN_RESULT_FAILED":  2,
	"TXN_RESULT_SUCCESS": 3,
	"TXN_RESULT_TIMEOUT": 4,
}

func (x TXN_RESULT) String() string {
	return proto.EnumName(TXN_RESULT_name, int32(x))
}

func (TXN_RESULT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{33}
}

//玩家属性类型
type PROP_TYPE int32

const (
	PROP_TYPE_PROP_TYPE_NULL      PROP_TYPE = 0
	PROP_TYPE_PROP_TYPE_LEVEL     PROP_TYPE = 1
	PROP_TYPE_PROP_TYPE_EQUIP     PROP_TYPE = 2
	PROP_TYPE_PROP_TYPE_SCROLL    PROP_TYPE = 3
	PROP_TYPE_PROP_TYPE_SKILL     PROP_TYPE = 4
	PROP_TYPE_PROP_TYPE_CL_LEVEL  PROP_TYPE = 5
	PROP_TYPE_PROP_TYPE_ORG_LEVEL PROP_TYPE = 6
	PROP_TYPE_PROP_TYPE_RUNE      PROP_TYPE = 7
)

var PROP_TYPE_name = map[int32]string{
	0: "PROP_TYPE_NULL",
	1: "PROP_TYPE_LEVEL",
	2: "PROP_TYPE_EQUIP",
	3: "PROP_TYPE_SCROLL",
	4: "PROP_TYPE_SKILL",
	5: "PROP_TYPE_CL_LEVEL",
	6: "PROP_TYPE_ORG_LEVEL",
	7: "PROP_TYPE_RUNE",
}

var PROP_TYPE_value = map[string]int32{
	"PROP_TYPE_NULL":      0,
	"PROP_TYPE_LEVEL":     1,
	"PROP_TYPE_EQUIP":     2,
	"PROP_TYPE_SCROLL":    3,
	"PROP_TYPE_SKILL":     4,
	"PROP_TYPE_CL_LEVEL":  5,
	"PROP_TYPE_ORG_LEVEL": 6,
	"PROP_TYPE_RUNE":      7,
}

func (x PROP_TYPE) String() string {
	return proto.EnumName(PROP_TYPE_name, int32(x))
}

func (PROP_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{34}
}

//战令等级
type BATTLE_PASS_LEVEL int32

const (
	BATTLE_PASS_LEVEL_BATTLE_PASS_LEVEL_NULL   BATTLE_PASS_LEVEL = 0
	BATTLE_PASS_LEVEL_BATTLE_PASS_LEVEL_LOW    BATTLE_PASS_LEVEL = 1
	BATTLE_PASS_LEVEL_BATTLE_PASS_LEVEL_HIGH   BATTLE_PASS_LEVEL = 2
	BATTLE_PASS_LEVEL_BATTLE_PASS_LEVEL_CHAJIA BATTLE_PASS_LEVEL = 3
)

var BATTLE_PASS_LEVEL_name = map[int32]string{
	0: "BATTLE_PASS_LEVEL_NULL",
	1: "BATTLE_PASS_LEVEL_LOW",
	2: "BATTLE_PASS_LEVEL_HIGH",
	3: "BATTLE_PASS_LEVEL_CHAJIA",
}

var BATTLE_PASS_LEVEL_value = map[string]int32{
	"BATTLE_PASS_LEVEL_NULL":   0,
	"BATTLE_PASS_LEVEL_LOW":    1,
	"BATTLE_PASS_LEVEL_HIGH":   2,
	"BATTLE_PASS_LEVEL_CHAJIA": 3,
}

func (x BATTLE_PASS_LEVEL) String() string {
	return proto.EnumName(BATTLE_PASS_LEVEL_name, int32(x))
}

func (BATTLE_PASS_LEVEL) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{35}
}

type SIN_THREAT int32

const (
	SIN_THREAT_SIN_THREAT_NONE   SIN_THREAT = 0
	SIN_THREAT_SIN_THREAT_EASY   SIN_THREAT = 1
	SIN_THREAT_SIN_THREAT_NORMAL SIN_THREAT = 2
	SIN_THREAT_SIN_THREAT_HARD   SIN_THREAT = 3
)

var SIN_THREAT_name = map[int32]string{
	0: "SIN_THREAT_NONE",
	1: "SIN_THREAT_EASY",
	2: "SIN_THREAT_NORMAL",
	3: "SIN_THREAT_HARD",
}

var SIN_THREAT_value = map[string]int32{
	"SIN_THREAT_NONE":   0,
	"SIN_THREAT_EASY":   1,
	"SIN_THREAT_NORMAL": 2,
	"SIN_THREAT_HARD":   3,
}

func (x SIN_THREAT) String() string {
	return proto.EnumName(SIN_THREAT_name, int32(x))
}

func (SIN_THREAT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{36}
}

//声望处理逻辑：所有声望都在gs进行处理，是ds声望的需要同步给ds
//
//个人声望列表
//
//排行榜奖励声望必须是ds声望
type REPUTATION_TYPE int32

const (
	REPUTATION_TYPE_REPUTATION_TYPE_NULL                        REPUTATION_TYPE = 0
	REPUTATION_TYPE_REPUTATION_TYPE_FIRST_RECHARGE_YUANBAO      REPUTATION_TYPE = 1
	REPUTATION_TYPE_REPUTATION_TYPE_RECHARGE_ACCUMULATE         REPUTATION_TYPE = 2
	REPUTATION_TYPE_REPUTATION_TYPE_RECHARGE_LIBAO              REPUTATION_TYPE = 3
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_SIGNIN                REPUTATION_TYPE = 4
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_CONTRIBUTE_LOW        REPUTATION_TYPE = 5
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_CONTRIBUTE_MIDDLE     REPUTATION_TYPE = 6
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_CONTRIBUTE_HIGH       REPUTATION_TYPE = 7
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_APPLY                 REPUTATION_TYPE = 8
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_EXP                   REPUTATION_TYPE = 9
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_CONTRI                REPUTATION_TYPE = 10
	REPUTATION_TYPE_REPUTATION_TYPE_LongYin                     REPUTATION_TYPE = 11
	REPUTATION_TYPE_REPUTATION_TYPE_VIP                         REPUTATION_TYPE = 14
	REPUTATION_TYPE_REPUTATION_TYPE_VIP_EXPERIENCE              REPUTATION_TYPE = 15
	REPUTATION_TYPE_REPUTATION_TYPE_FRIEND_GET_GIFT_COUNT       REPUTATION_TYPE = 16
	REPUTATION_TYPE_REPUTATION_TYPE_FRIEND_GIVE_GIFT_COUNT      REPUTATION_TYPE = 17
	REPUTATION_TYPE_REPUTATION_TYPE_LOGIN_ACCUMULATE            REPUTATION_TYPE = 20
	REPUTATION_TYPE_REPUTATION_TYPE_RECHARGE_DIAMOND_ACCUMULATE REPUTATION_TYPE = 27
	REPUTATION_TYPE_REPUTATION_TYPE_FREE_DIAMOND                REPUTATION_TYPE = 87
	REPUTATION_TYPE_REPUTATION_TYPE_DONATE_DIAMOND              REPUTATION_TYPE = 88
	REPUTATION_TYPE_REPUTATION_TYPE_SINSOUL                     REPUTATION_TYPE = 89
	REPUTATION_TYPE_REPUTATION_TYPE_SIN                         REPUTATION_TYPE = 90
	REPUTATION_TYPE_REPUTATION_TYPE_1_6SIN                      REPUTATION_TYPE = 91
	REPUTATION_TYPE_REPUTATION_TYPE_4_1SIN                      REPUTATION_TYPE = 92
	REPUTATION_TYPE_REPUTATION_TYPE_YOUQINGDIAN                 REPUTATION_TYPE = 93
	//REPUTATION_TYPE_FOREVERSIN = 94; //罪恶裂缝占用，不能使用
	REPUTATION_TYPE_REPUTATION_TYPE_SCROLLTICKET             REPUTATION_TYPE = 96
	REPUTATION_TYPE_REPUTATION_TYPE_SKILL_REFINE_POINT       REPUTATION_TYPE = 97
	REPUTATION_TYPE_REPUTATION_TYPE_ENDLESS_SINGLE           REPUTATION_TYPE = 98
	REPUTATION_TYPE_REPUTATION_TYPE_ENDLESS_MULTI            REPUTATION_TYPE = 99
	REPUTATION_TYPE_REPUTATION_TYPE_BLUESOUL                 REPUTATION_TYPE = 100
	REPUTATION_TYPE_REPUTATION_TYPE_SHARE_PIC_COUNT          REPUTATION_TYPE = 101
	REPUTATION_TYPE_REPUTATION_TYPE_BUY_SKIN_COUNT           REPUTATION_TYPE = 102
	REPUTATION_TYPE_REPUTATION_TYPE_TEMP_SKILL_POINT         REPUTATION_TYPE = 103
	REPUTATION_TYPE_REPUTATION_TYPE_BLACK_STONE              REPUTATION_TYPE = 104
	REPUTATION_TYPE_REPUTATION_TYPE_GACHA_COUNT              REPUTATION_TYPE = 105
	REPUTATION_TYPE_REPUTATION_TYPE_GACHA_COUNT1             REPUTATION_TYPE = 106
	REPUTATION_TYPE_REPUTATION_TYPE_GACHA_COUNT2             REPUTATION_TYPE = 107
	REPUTATION_TYPE_REPUTATION_TYPE_GACHA_COUNT3             REPUTATION_TYPE = 108
	REPUTATION_TYPE_REPUTATION_TYPE_GACHA_COUNT4             REPUTATION_TYPE = 109
	REPUTATION_TYPE_REPUTATION_TYPE_HUAFU_TICKET             REPUTATION_TYPE = 110
	REPUTATION_TYPE_REPUTATION_TYPE_HUAFU_PURPLE_TICKET      REPUTATION_TYPE = 111
	REPUTATION_TYPE_REPUTATION_TYPE_HUANTI                   REPUTATION_TYPE = 112
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_BATTLE_TIMES       REPUTATION_TYPE = 113
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_BATTLE_COIN        REPUTATION_TYPE = 114
	REPUTATION_TYPE_REPUTATION_TYPE_CORPS_TECH_POINT         REPUTATION_TYPE = 115
	REPUTATION_TYPE_REPUTATION_TYPE_TECH_POINT               REPUTATION_TYPE = 116
	REPUTATION_TYPE_REPUTATION_TYPE_XIAOSIZUITI              REPUTATION_TYPE = 117
	REPUTATION_TYPE_REPUTATION_TYPE_WORLD_BOSS_TICKET        REPUTATION_TYPE = 118
	REPUTATION_TYPE_REPUTATION_TYPE_XINGBIAO_HUAFU_TICKET    REPUTATION_TYPE = 119
	REPUTATION_TYPE_REPUTATION_TYPE_RENWANG_OPEN_WEB_SITE    REPUTATION_TYPE = 120
	REPUTATION_TYPE_REPUTATION_TYPE_ZHANLING_FIX             REPUTATION_TYPE = 121
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_C9                   REPUTATION_TYPE = 122
	REPUTATION_TYPE_REPUTATION_TYPE_SECRET_FILE_REWARD_TIMES REPUTATION_TYPE = 123
	REPUTATION_TYPE_REPUTATION_TYPE_WUHUN_FIX                REPUTATION_TYPE = 124
	REPUTATION_TYPE_REPUTATION_TYPE_SHARE_PIC_COUNT_RENWANG  REPUTATION_TYPE = 125
	REPUTATION_TYPE_REPUTATION_TYPE_GUSHANG_COIN             REPUTATION_TYPE = 126
	REPUTATION_TYPE_REPUTATION_TYPE_SECRET_FILE_SHEET        REPUTATION_TYPE = 127
	REPUTATION_TYPE_REPUTATION_TYPE_LOGIN_CONTINUOUS         REPUTATION_TYPE = 128
	REPUTATION_TYPE_REPUTATION_TYPE_TOTAL_GACHA_COUNT        REPUTATION_TYPE = 129
	REPUTATION_TYPE_REPUTATION_TYPE_FIRST_ENHANCE_SCROLL     REPUTATION_TYPE = 130
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_XIULUO               REPUTATION_TYPE = 131
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_SIN_RANK             REPUTATION_TYPE = 132
	//201--400 活动声望预埋, 不要在中间插入数据
	REPUTATION_TYPE_REPUTATION_TYPE_ACTIVITY_BEGIN REPUTATION_TYPE = 201
	REPUTATION_TYPE_REPUTATION_TYPE_ACTIVITY_202   REPUTATION_TYPE = 202
	REPUTATION_TYPE_REPUTATION_TYPE_ACTIVITY_END   REPUTATION_TYPE = 400
	//500->排行榜分数
	REPUTATION_TYPE_REPUTATION_TYPE_RANK_SIN       REPUTATION_TYPE = 553
	REPUTATION_TYPE_REPUTATION_TYPE_RANK_POWER     REPUTATION_TYPE = 554
	REPUTATION_TYPE_REPUTATION_TYPE_RANK_DAZHUANG  REPUTATION_TYPE = 555
	REPUTATION_TYPE_REPUTATION_TYPE_RANK_POWER_SIN REPUTATION_TYPE = 556
	REPUTATION_TYPE_REPUTATION_TYPE_RANK_PVP       REPUTATION_TYPE = 557
	//600->累计次数
	REPUTATION_TYPE_REPUTATION_TYPE_CHOUKA_ONE            REPUTATION_TYPE = 601
	REPUTATION_TYPE_REPUTATION_TYPE_CHOUKA_TEN            REPUTATION_TYPE = 602
	REPUTATION_TYPE_REPUTATION_TYPE_RECHARGE_NUM          REPUTATION_TYPE = 603
	REPUTATION_TYPE_REPUTATION_TYPE_ROLE_COST_LONGYIN_SUM REPUTATION_TYPE = 604
	//700->特殊功能
	REPUTATION_TYPE_REPUTATION_TYPE_SCROLL_LI_MAIL            REPUTATION_TYPE = 701
	REPUTATION_TYPE_REPUTATION_TYPE_WJJJ_MULTI_MAIL           REPUTATION_TYPE = 702
	REPUTATION_TYPE_REPUTATION_TYPE_HEIANXUKONGZ_RESET        REPUTATION_TYPE = 703
	REPUTATION_TYPE_REPUTATION_TYPE_TIMETRAVEL_QUEST          REPUTATION_TYPE = 704
	REPUTATION_TYPE_REPUTATION_TYPE_SCROLL_EQUIP              REPUTATION_TYPE = 705
	REPUTATION_TYPE_REPUTATION_TYPE_ANJIN_QUEST               REPUTATION_TYPE = 706
	REPUTATION_TYPE_REPUTATION_TYPE_LOST_SKIN                 REPUTATION_TYPE = 707
	REPUTATION_TYPE_REPUTATION_TYPE_RUNE_REFUND               REPUTATION_TYPE = 708
	REPUTATION_TYPE_REPUTATION_TYPE_RUNE_SLOT_RESET           REPUTATION_TYPE = 709
	REPUTATION_TYPE_REPUTATION_TYPE_SKIN_PROP_SELECT          REPUTATION_TYPE = 710
	REPUTATION_TYPE_REPUTATION_TYPE_EVENT_PARAM               REPUTATION_TYPE = 711
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_EVENT_QUEST           REPUTATION_TYPE = 712
	REPUTATION_TYPE_REPUTATION_TYPE_ZIYANHUAFU                REPUTATION_TYPE = 713
	REPUTATION_TYPE_REPUTATION_TYPE_DUPLI_SKILL               REPUTATION_TYPE = 714
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_ATTRIBUTE             REPUTATION_TYPE = 715
	REPUTATION_TYPE_REPUTATION_TYPE_SYNC_SHOP_4300            REPUTATION_TYPE = 716
	REPUTATION_TYPE_REPUTATION_TYPE_LIUPAI_CHECK              REPUTATION_TYPE = 717
	REPUTATION_TYPE_REPUTATION_TYPE_DUPLI_SECSCROLL           REPUTATION_TYPE = 718
	REPUTATION_TYPE_REPUTATION_TYPE_KUANGLONG_EQUIP           REPUTATION_TYPE = 719
	REPUTATION_TYPE_REPUTATION_TYPE_REMOVE_SIN_GENRE          REPUTATION_TYPE = 720
	REPUTATION_TYPE_REPUTATION_TYPE_ZHAOHUI_CHECK             REPUTATION_TYPE = 721
	REPUTATION_TYPE_REPUTATION_TYPE_TESTSERVER_INVITE         REPUTATION_TYPE = 722
	REPUTATION_TYPE_REPUTATION_TYPE_WUYI_ZHAOHUI_MAIL         REPUTATION_TYPE = 723
	REPUTATION_TYPE_REPUTATION_TYPE_QUEST_90931               REPUTATION_TYPE = 725
	REPUTATION_TYPE_REPUTATION_TYPE_UNAME_RELATION_CHAIN      REPUTATION_TYPE = 726
	REPUTATION_TYPE_REPUTATION_TYPE_TRANSFER                  REPUTATION_TYPE = 727
	REPUTATION_TYPE_REPUTATION_TYPE_SIN_GENRE_SCROLL          REPUTATION_TYPE = 728
	REPUTATION_TYPE_REPUTATION_TYPE_BUY_SHOPITEM              REPUTATION_TYPE = 729
	REPUTATION_TYPE_REPUTATION_TYPE_CLEAR_TEAM_ENDLESS        REPUTATION_TYPE = 730
	REPUTATION_TYPE_REPUTATION_TYPE_TESTSERVER_INVITE_2       REPUTATION_TYPE = 731
	REPUTATION_TYPE_REPUTATION_TYPE_LOST_UNITHANDBOOK         REPUTATION_TYPE = 732
	REPUTATION_TYPE_REPUTATION_TYPE_SET_QUEST_STATE           REPUTATION_TYPE = 733
	REPUTATION_TYPE_REPUTATION_TYPE_SIN_NUM                   REPUTATION_TYPE = 734
	REPUTATION_TYPE_REPUTATION_TYPE_XIAOSI_EVENT              REPUTATION_TYPE = 735
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_SIN_OPEN              REPUTATION_TYPE = 736
	REPUTATION_TYPE_REPUTATION_TYPE_TESTSERVER_INVITE_3       REPUTATION_TYPE = 737
	REPUTATION_TYPE_REPUTATION_TYPE_FOOD_COUNT                REPUTATION_TYPE = 738
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_TUANKEY               REPUTATION_TYPE = 739
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_APPLYLIST             REPUTATION_TYPE = 740
	REPUTATION_TYPE_REPUTATION_TYPE_FIX_WEEK_UPDATE           REPUTATION_TYPE = 741
	REPUTATION_TYPE_REPUTATION_TYPE_PVP_RECEIVE_REWARD_SEASON REPUTATION_TYPE = 742
	REPUTATION_TYPE_REPUTATION_TYPE_CLEAN_PVP_INFO            REPUTATION_TYPE = 743
	REPUTATION_TYPE_REPUTATION_TYPE_YOUYA_FIX                 REPUTATION_TYPE = 744
	REPUTATION_TYPE_REPUTATION_TYPE_XIEHOU_FIX                REPUTATION_TYPE = 745
	REPUTATION_TYPE_REPUTATION_TYPE_CLEAN_PVP_INFO_SEASON     REPUTATION_TYPE = 746
	REPUTATION_TYPE_REPUTATION_TYPE_TESTSERVER_INVITE_4_1     REPUTATION_TYPE = 747
	REPUTATION_TYPE_REPUTATION_TYPE_TESTSERVER_INVITE_4       REPUTATION_TYPE = 750
	REPUTATION_TYPE_REPUTATION_TYPE_FIXEQUIPUSKILL            REPUTATION_TYPE = 751
	//801~850战令经验使用
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU   REPUTATION_TYPE = 801
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU1  REPUTATION_TYPE = 802
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU2  REPUTATION_TYPE = 803
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU3  REPUTATION_TYPE = 804
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU4  REPUTATION_TYPE = 805
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU5  REPUTATION_TYPE = 806
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU6  REPUTATION_TYPE = 807
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU7  REPUTATION_TYPE = 808
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU8  REPUTATION_TYPE = 809
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU9  REPUTATION_TYPE = 810
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU10 REPUTATION_TYPE = 811
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU12 REPUTATION_TYPE = 812
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU13 REPUTATION_TYPE = 813
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU14 REPUTATION_TYPE = 814
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU15 REPUTATION_TYPE = 815
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU16 REPUTATION_TYPE = 816
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU17 REPUTATION_TYPE = 817
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU18 REPUTATION_TYPE = 818
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU19 REPUTATION_TYPE = 819
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU20 REPUTATION_TYPE = 820
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU21 REPUTATION_TYPE = 821
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU22 REPUTATION_TYPE = 822
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU23 REPUTATION_TYPE = 823
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU24 REPUTATION_TYPE = 824
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU25 REPUTATION_TYPE = 825
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU26 REPUTATION_TYPE = 826
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU27 REPUTATION_TYPE = 827
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU28 REPUTATION_TYPE = 828
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU29 REPUTATION_TYPE = 829
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU30 REPUTATION_TYPE = 830
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU31 REPUTATION_TYPE = 831
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU32 REPUTATION_TYPE = 832
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU33 REPUTATION_TYPE = 833
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU34 REPUTATION_TYPE = 834
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU35 REPUTATION_TYPE = 835
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU36 REPUTATION_TYPE = 836
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU37 REPUTATION_TYPE = 837
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU38 REPUTATION_TYPE = 838
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU39 REPUTATION_TYPE = 839
	REPUTATION_TYPE_REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU40 REPUTATION_TYPE = 840
	//851~880月卡礼包包装
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG1  REPUTATION_TYPE = 851
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG2  REPUTATION_TYPE = 852
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG3  REPUTATION_TYPE = 853
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG4  REPUTATION_TYPE = 854
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG5  REPUTATION_TYPE = 855
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG6  REPUTATION_TYPE = 856
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG7  REPUTATION_TYPE = 857
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG8  REPUTATION_TYPE = 858
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG9  REPUTATION_TYPE = 859
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG10 REPUTATION_TYPE = 860
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG11 REPUTATION_TYPE = 861
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG12 REPUTATION_TYPE = 862
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG13 REPUTATION_TYPE = 863
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG14 REPUTATION_TYPE = 864
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG15 REPUTATION_TYPE = 865
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG16 REPUTATION_TYPE = 866
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG17 REPUTATION_TYPE = 867
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG18 REPUTATION_TYPE = 868
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG19 REPUTATION_TYPE = 869
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG20 REPUTATION_TYPE = 870
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG21 REPUTATION_TYPE = 871
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG22 REPUTATION_TYPE = 872
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG23 REPUTATION_TYPE = 873
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG24 REPUTATION_TYPE = 874
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG25 REPUTATION_TYPE = 875
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG26 REPUTATION_TYPE = 876
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG27 REPUTATION_TYPE = 877
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG28 REPUTATION_TYPE = 878
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG29 REPUTATION_TYPE = 879
	REPUTATION_TYPE_REPUTATION_TYPE_MONTH_BAG30 REPUTATION_TYPE = 880
	//881~890一些hotfix预留功能
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX1  REPUTATION_TYPE = 881
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX2  REPUTATION_TYPE = 882
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX3  REPUTATION_TYPE = 883
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX4  REPUTATION_TYPE = 884
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX5  REPUTATION_TYPE = 885
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX6  REPUTATION_TYPE = 886
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX7  REPUTATION_TYPE = 887
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX8  REPUTATION_TYPE = 888
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX9  REPUTATION_TYPE = 889
	REPUTATION_TYPE_REPUTATION_TYPE_HOTFIX10 REPUTATION_TYPE = 890
	//1000->代币
	REPUTATION_TYPE_REPUTATION_TYPE_ZHENGDAOTIEBI            REPUTATION_TYPE = 1000
	REPUTATION_TYPE_REPUTATION_TYPE_MOYIN                    REPUTATION_TYPE = 1001
	REPUTATION_TYPE_REPUTATION_TYPE_JINSEJINGSUI             REPUTATION_TYPE = 1002
	REPUTATION_TYPE_REPUTATION_TYPE_WANMOZUITI               REPUTATION_TYPE = 1003
	REPUTATION_TYPE_REPUTATION_TYPE_CHUNJIE_REWARD           REPUTATION_TYPE = 1004
	REPUTATION_TYPE_REPUTATION_TYPE_SHILIANTIEBI             REPUTATION_TYPE = 1005
	REPUTATION_TYPE_REPUTATION_TYPE_BIYULIUYE                REPUTATION_TYPE = 1006
	REPUTATION_TYPE_REPUTATION_TYPE_BENXINYIN                REPUTATION_TYPE = 1007
	REPUTATION_TYPE_REPUTATION_TYPE_LONGBI                   REPUTATION_TYPE = 1008
	REPUTATION_TYPE_REPUTATION_TYPE_DUANZUIBI                REPUTATION_TYPE = 1009
	REPUTATION_TYPE_REPUTATION_TYPE_XUANSHANGPROCESS         REPUTATION_TYPE = 1010
	REPUTATION_TYPE_REPUTATION_TYPE_XIANFENGLINGPAI          REPUTATION_TYPE = 1011
	REPUTATION_TYPE_REPUTATION_TYPE_CHIHEIHUAFUQUAN          REPUTATION_TYPE = 1012
	REPUTATION_TYPE_REPUTATION_TYPE_QINGZHILEI               REPUTATION_TYPE = 1013
	REPUTATION_TYPE_REPUTATION_TYPE_JIANLING                 REPUTATION_TYPE = 1014
	REPUTATION_TYPE_REPUTATION_TYPE_LUANZHANLING             REPUTATION_TYPE = 1015
	REPUTATION_TYPE_REPUTATION_TYPE_ZONGZI                   REPUTATION_TYPE = 1016
	REPUTATION_TYPE_REPUTATION_TYPE_YAOHU                    REPUTATION_TYPE = 1017
	REPUTATION_TYPE_REPUTATION_TYPE_QIYULING                 REPUTATION_TYPE = 1018
	REPUTATION_TYPE_REPUTATION_TYPE_MIANJUCANPIAN            REPUTATION_TYPE = 1019
	REPUTATION_TYPE_REPUTATION_TYPE_HAIBEIBI                 REPUTATION_TYPE = 1020
	REPUTATION_TYPE_REPUTATION_TYPE_XIECHENGYINJI            REPUTATION_TYPE = 1021
	REPUTATION_TYPE_REPUTATION_TYPE_XINMOLING                REPUTATION_TYPE = 1022
	REPUTATION_TYPE_REPUTATION_TYPE_YINGSHALING              REPUTATION_TYPE = 1023
	REPUTATION_TYPE_REPUTATION_TYPE_BINGXUE                  REPUTATION_TYPE = 1024
	REPUTATION_TYPE_REPUTATION_TYPE_MOLONGLING               REPUTATION_TYPE = 1025
	REPUTATION_TYPE_REPUTATION_TYPE_XUANTIEBI                REPUTATION_TYPE = 1026
	REPUTATION_TYPE_REPUTATION_TYPE_YOUHUNLING               REPUTATION_TYPE = 1027
	REPUTATION_TYPE_REPUTATION_TYPE_MIJINMOYIN               REPUTATION_TYPE = 1028
	REPUTATION_TYPE_REPUTATION_TYPE_MOYINGBI                 REPUTATION_TYPE = 1029
	REPUTATION_TYPE_REPUTATION_TYPE_CHUEBI                   REPUTATION_TYPE = 1030
	REPUTATION_TYPE_REPUTATION_TYPE_GUIMILING                REPUTATION_TYPE = 1031
	REPUTATION_TYPE_REPUTATION_TYPE_BAIGUIBI                 REPUTATION_TYPE = 1032
	REPUTATION_TYPE_REPUTATION_TYPE_XUEJINGMILING            REPUTATION_TYPE = 1033
	REPUTATION_TYPE_REPUTATION_TYPE_HUANGYEYIN               REPUTATION_TYPE = 1034
	REPUTATION_TYPE_REPUTATION_TYPE_GUIYUEBI                 REPUTATION_TYPE = 1035
	REPUTATION_TYPE_REPUTATION_TYPE_1036                     REPUTATION_TYPE = 1036
	REPUTATION_TYPE_REPUTATION_TYPE_JIANYINGLING             REPUTATION_TYPE = 1037
	REPUTATION_TYPE_REPUTATION_TYPE_YUEBING                  REPUTATION_TYPE = 1038
	REPUTATION_TYPE_REPUTATION_TYPE_SHENGSHIYIN              REPUTATION_TYPE = 1039
	REPUTATION_TYPE_REPUTATION_TYPE_YIMENGHUAXU              REPUTATION_TYPE = 1040
	REPUTATION_TYPE_REPUTATION_TYPE_FANGHUABI                REPUTATION_TYPE = 1041
	REPUTATION_TYPE_REPUTATION_TYPE_YINGQIUBI                REPUTATION_TYPE = 1042
	REPUTATION_TYPE_REPUTATION_TYPE_FEISHABI                 REPUTATION_TYPE = 1043
	REPUTATION_TYPE_REPUTATION_TYPE_HANSHUANGLING            REPUTATION_TYPE = 1044
	REPUTATION_TYPE_REPUTATION_TYPE_HUNYAN                   REPUTATION_TYPE = 1045
	REPUTATION_TYPE_REPUTATION_TYPE_LEIYUBINGJING            REPUTATION_TYPE = 1046
	REPUTATION_TYPE_REPUTATION_TYPE_BINGJINGCANPO            REPUTATION_TYPE = 1047
	REPUTATION_TYPE_REPUTATION_TYPE_BINGLINGBI               REPUTATION_TYPE = 1048
	REPUTATION_TYPE_REPUTATION_TYPE_TUOLING                  REPUTATION_TYPE = 1049
	REPUTATION_TYPE_REPUTATION_TYPE_QIANLONGBI               REPUTATION_TYPE = 1050
	REPUTATION_TYPE_REPUTATION_TYPE_QIONGYUBI                REPUTATION_TYPE = 1051
	REPUTATION_TYPE_REPUTATION_TYPE_XUEYINGBI                REPUTATION_TYPE = 1052
	REPUTATION_TYPE_REPUTATION_TYPE_XUANYUBI                 REPUTATION_TYPE = 1053
	REPUTATION_TYPE_REPUTATION_TYPE_HUANYINGLING             REPUTATION_TYPE = 1054
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI1                   REPUTATION_TYPE = 1055
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI2                   REPUTATION_TYPE = 1056
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI3                   REPUTATION_TYPE = 1057
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI4                   REPUTATION_TYPE = 1058
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI5                   REPUTATION_TYPE = 1059
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI6                   REPUTATION_TYPE = 1060
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI7                   REPUTATION_TYPE = 1061
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI8                   REPUTATION_TYPE = 1062
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI9                   REPUTATION_TYPE = 1063
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI10                  REPUTATION_TYPE = 1064
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI11                  REPUTATION_TYPE = 1065
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI12                  REPUTATION_TYPE = 1066
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI13                  REPUTATION_TYPE = 1067
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI14                  REPUTATION_TYPE = 1068
	REPUTATION_TYPE_REPUTATION_TYPE_DAIBI15                  REPUTATION_TYPE = 1069
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_ONE_DAY    REPUTATION_TYPE = 2001
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_TWO_DAYS   REPUTATION_TYPE = 2002
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_THREE_DAYS REPUTATION_TYPE = 2003
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_FOUR_DAYS  REPUTATION_TYPE = 2004
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_FIVE_DAYS  REPUTATION_TYPE = 2005
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_SIX_DAYS   REPUTATION_TYPE = 2006
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_SEVEN_DAYS REPUTATION_TYPE = 2007
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_EIGHT_DAYS REPUTATION_TYPE = 2008
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_NINE_DAYS  REPUTATION_TYPE = 2009
	REPUTATION_TYPE_REPUTATION_TYPE_WEIBO_SIGN_IN_TEN_DAYS   REPUTATION_TYPE = 2010
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY1           REPUTATION_TYPE = 3508
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY2           REPUTATION_TYPE = 3509
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY3           REPUTATION_TYPE = 3510
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY4           REPUTATION_TYPE = 3511
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY5           REPUTATION_TYPE = 3512
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY6           REPUTATION_TYPE = 3513
	REPUTATION_TYPE_REPUTATION_TYPE_2021_MAIL_DAY7           REPUTATION_TYPE = 3514
	REPUTATION_TYPE_REPUTATION_TYPE_ACCOUNT_NULL             REPUTATION_TYPE = 5000
	REPUTATION_TYPE_REPUTATION_TYPE_ACCOUNT_YUYUE            REPUTATION_TYPE = 5001
	REPUTATION_TYPE_REPUTATION_TYPE_ACCOUNT_XIAOSI           REPUTATION_TYPE = 5002
	REPUTATION_TYPE_REPUTATION_TYPE_XIAOSI_CREATE            REPUTATION_TYPE = 5003
	REPUTATION_TYPE_REPUTATION_TYPE_ACCOUNT_XUKONG           REPUTATION_TYPE = 5004
	REPUTATION_TYPE_REPUTATION_TYPE_XUKONG_CREATE            REPUTATION_TYPE = 5005
	REPUTATION_TYPE_REPUTATION_TYPE_LONGYIN_SUM              REPUTATION_TYPE = 5006
	REPUTATION_TYPE_REPUTATION_TYPE_COST_LONGYIN_SUM         REPUTATION_TYPE = 5007
	REPUTATION_TYPE_REPUTATION_TYPE_ACCOUNT_COUNT            REPUTATION_TYPE = 10000
	REPUTATION_TYPE_REPUTATION_TYPE_DS_BEGIN                 REPUTATION_TYPE = 1000000
)

var REPUTATION_TYPE_name = map[int32]string{
	0:       "REPUTATION_TYPE_NULL",
	1:       "REPUTATION_TYPE_FIRST_RECHARGE_YUANBAO",
	2:       "REPUTATION_TYPE_RECHARGE_ACCUMULATE",
	3:       "REPUTATION_TYPE_RECHARGE_LIBAO",
	4:       "REPUTATION_TYPE_CORPS_SIGNIN",
	5:       "REPUTATION_TYPE_CORPS_CONTRIBUTE_LOW",
	6:       "REPUTATION_TYPE_CORPS_CONTRIBUTE_MIDDLE",
	7:       "REPUTATION_TYPE_CORPS_CONTRIBUTE_HIGH",
	8:       "REPUTATION_TYPE_CORPS_APPLY",
	9:       "REPUTATION_TYPE_CORPS_EXP",
	10:      "REPUTATION_TYPE_CORPS_CONTRI",
	11:      "REPUTATION_TYPE_LongYin",
	14:      "REPUTATION_TYPE_VIP",
	15:      "REPUTATION_TYPE_VIP_EXPERIENCE",
	16:      "REPUTATION_TYPE_FRIEND_GET_GIFT_COUNT",
	17:      "REPUTATION_TYPE_FRIEND_GIVE_GIFT_COUNT",
	20:      "REPUTATION_TYPE_LOGIN_ACCUMULATE",
	27:      "REPUTATION_TYPE_RECHARGE_DIAMOND_ACCUMULATE",
	87:      "REPUTATION_TYPE_FREE_DIAMOND",
	88:      "REPUTATION_TYPE_DONATE_DIAMOND",
	89:      "REPUTATION_TYPE_SINSOUL",
	90:      "REPUTATION_TYPE_SIN",
	91:      "REPUTATION_TYPE_1_6SIN",
	92:      "REPUTATION_TYPE_4_1SIN",
	93:      "REPUTATION_TYPE_YOUQINGDIAN",
	96:      "REPUTATION_TYPE_SCROLLTICKET",
	97:      "REPUTATION_TYPE_SKILL_REFINE_POINT",
	98:      "REPUTATION_TYPE_ENDLESS_SINGLE",
	99:      "REPUTATION_TYPE_ENDLESS_MULTI",
	100:     "REPUTATION_TYPE_BLUESOUL",
	101:     "REPUTATION_TYPE_SHARE_PIC_COUNT",
	102:     "REPUTATION_TYPE_BUY_SKIN_COUNT",
	103:     "REPUTATION_TYPE_TEMP_SKILL_POINT",
	104:     "REPUTATION_TYPE_BLACK_STONE",
	105:     "REPUTATION_TYPE_GACHA_COUNT",
	106:     "REPUTATION_TYPE_GACHA_COUNT1",
	107:     "REPUTATION_TYPE_GACHA_COUNT2",
	108:     "REPUTATION_TYPE_GACHA_COUNT3",
	109:     "REPUTATION_TYPE_GACHA_COUNT4",
	110:     "REPUTATION_TYPE_HUAFU_TICKET",
	111:     "REPUTATION_TYPE_HUAFU_PURPLE_TICKET",
	112:     "REPUTATION_TYPE_HUANTI",
	113:     "REPUTATION_TYPE_CORPS_BATTLE_TIMES",
	114:     "REPUTATION_TYPE_CORPS_BATTLE_COIN",
	115:     "REPUTATION_TYPE_CORPS_TECH_POINT",
	116:     "REPUTATION_TYPE_TECH_POINT",
	117:     "REPUTATION_TYPE_XIAOSIZUITI",
	118:     "REPUTATION_TYPE_WORLD_BOSS_TICKET",
	119:     "REPUTATION_TYPE_XINGBIAO_HUAFU_TICKET",
	120:     "REPUTATION_TYPE_RENWANG_OPEN_WEB_SITE",
	121:     "REPUTATION_TYPE_ZHANLING_FIX",
	122:     "REPUTATION_TYPE_FIX_C9",
	123:     "REPUTATION_TYPE_SECRET_FILE_REWARD_TIMES",
	124:     "REPUTATION_TYPE_WUHUN_FIX",
	125:     "REPUTATION_TYPE_SHARE_PIC_COUNT_RENWANG",
	126:     "REPUTATION_TYPE_GUSHANG_COIN",
	127:     "REPUTATION_TYPE_SECRET_FILE_SHEET",
	128:     "REPUTATION_TYPE_LOGIN_CONTINUOUS",
	129:     "REPUTATION_TYPE_TOTAL_GACHA_COUNT",
	130:     "REPUTATION_TYPE_FIRST_ENHANCE_SCROLL",
	131:     "REPUTATION_TYPE_FIX_XIULUO",
	132:     "REPUTATION_TYPE_FIX_SIN_RANK",
	201:     "REPUTATION_TYPE_ACTIVITY_BEGIN",
	202:     "REPUTATION_TYPE_ACTIVITY_202",
	400:     "REPUTATION_TYPE_ACTIVITY_END",
	553:     "REPUTATION_TYPE_RANK_SIN",
	554:     "REPUTATION_TYPE_RANK_POWER",
	555:     "REPUTATION_TYPE_RANK_DAZHUANG",
	556:     "REPUTATION_TYPE_RANK_POWER_SIN",
	557:     "REPUTATION_TYPE_RANK_PVP",
	601:     "REPUTATION_TYPE_CHOUKA_ONE",
	602:     "REPUTATION_TYPE_CHOUKA_TEN",
	603:     "REPUTATION_TYPE_RECHARGE_NUM",
	604:     "REPUTATION_TYPE_ROLE_COST_LONGYIN_SUM",
	701:     "REPUTATION_TYPE_SCROLL_LI_MAIL",
	702:     "REPUTATION_TYPE_WJJJ_MULTI_MAIL",
	703:     "REPUTATION_TYPE_HEIANXUKONGZ_RESET",
	704:     "REPUTATION_TYPE_TIMETRAVEL_QUEST",
	705:     "REPUTATION_TYPE_SCROLL_EQUIP",
	706:     "REPUTATION_TYPE_ANJIN_QUEST",
	707:     "REPUTATION_TYPE_LOST_SKIN",
	708:     "REPUTATION_TYPE_RUNE_REFUND",
	709:     "REPUTATION_TYPE_RUNE_SLOT_RESET",
	710:     "REPUTATION_TYPE_SKIN_PROP_SELECT",
	711:     "REPUTATION_TYPE_EVENT_PARAM",
	712:     "REPUTATION_TYPE_FIX_EVENT_QUEST",
	713:     "REPUTATION_TYPE_ZIYANHUAFU",
	714:     "REPUTATION_TYPE_DUPLI_SKILL",
	715:     "REPUTATION_TYPE_FIX_ATTRIBUTE",
	716:     "REPUTATION_TYPE_SYNC_SHOP_4300",
	717:     "REPUTATION_TYPE_LIUPAI_CHECK",
	718:     "REPUTATION_TYPE_DUPLI_SECSCROLL",
	719:     "REPUTATION_TYPE_KUANGLONG_EQUIP",
	720:     "REPUTATION_TYPE_REMOVE_SIN_GENRE",
	721:     "REPUTATION_TYPE_ZHAOHUI_CHECK",
	722:     "REPUTATION_TYPE_TESTSERVER_INVITE",
	723:     "REPUTATION_TYPE_WUYI_ZHAOHUI_MAIL",
	725:     "REPUTATION_TYPE_QUEST_90931",
	726:     "REPUTATION_TYPE_UNAME_RELATION_CHAIN",
	727:     "REPUTATION_TYPE_TRANSFER",
	728:     "REPUTATION_TYPE_SIN_GENRE_SCROLL",
	729:     "REPUTATION_TYPE_BUY_SHOPITEM",
	730:     "REPUTATION_TYPE_CLEAR_TEAM_ENDLESS",
	731:     "REPUTATION_TYPE_TESTSERVER_INVITE_2",
	732:     "REPUTATION_TYPE_LOST_UNITHANDBOOK",
	733:     "REPUTATION_TYPE_SET_QUEST_STATE",
	734:     "REPUTATION_TYPE_SIN_NUM",
	735:     "REPUTATION_TYPE_XIAOSI_EVENT",
	736:     "REPUTATION_TYPE_FIX_SIN_OPEN",
	737:     "REPUTATION_TYPE_TESTSERVER_INVITE_3",
	738:     "REPUTATION_TYPE_FOOD_COUNT",
	739:     "REPUTATION_TYPE_FIX_TUANKEY",
	740:     "REPUTATION_TYPE_FIX_APPLYLIST",
	741:     "REPUTATION_TYPE_FIX_WEEK_UPDATE",
	742:     "REPUTATION_TYPE_PVP_RECEIVE_REWARD_SEASON",
	743:     "REPUTATION_TYPE_CLEAN_PVP_INFO",
	744:     "REPUTATION_TYPE_YOUYA_FIX",
	745:     "REPUTATION_TYPE_XIEHOU_FIX",
	746:     "REPUTATION_TYPE_CLEAN_PVP_INFO_SEASON",
	747:     "REPUTATION_TYPE_TESTSERVER_INVITE_4_1",
	750:     "REPUTATION_TYPE_TESTSERVER_INVITE_4",
	751:     "REPUTATION_TYPE_FIXEQUIPUSKILL",
	801:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU",
	802:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU1",
	803:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU2",
	804:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU3",
	805:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU4",
	806:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU5",
	807:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU6",
	808:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU7",
	809:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU8",
	810:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU9",
	811:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU10",
	812:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU12",
	813:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU13",
	814:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU14",
	815:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU15",
	816:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU16",
	817:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU17",
	818:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU18",
	819:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU19",
	820:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU20",
	821:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU21",
	822:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU22",
	823:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU23",
	824:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU24",
	825:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU25",
	826:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU26",
	827:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU27",
	828:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU28",
	829:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU29",
	830:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU30",
	831:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU31",
	832:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU32",
	833:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU33",
	834:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU34",
	835:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU35",
	836:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU36",
	837:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU37",
	838:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU38",
	839:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU39",
	840:     "REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU40",
	851:     "REPUTATION_TYPE_MONTH_BAG1",
	852:     "REPUTATION_TYPE_MONTH_BAG2",
	853:     "REPUTATION_TYPE_MONTH_BAG3",
	854:     "REPUTATION_TYPE_MONTH_BAG4",
	855:     "REPUTATION_TYPE_MONTH_BAG5",
	856:     "REPUTATION_TYPE_MONTH_BAG6",
	857:     "REPUTATION_TYPE_MONTH_BAG7",
	858:     "REPUTATION_TYPE_MONTH_BAG8",
	859:     "REPUTATION_TYPE_MONTH_BAG9",
	860:     "REPUTATION_TYPE_MONTH_BAG10",
	861:     "REPUTATION_TYPE_MONTH_BAG11",
	862:     "REPUTATION_TYPE_MONTH_BAG12",
	863:     "REPUTATION_TYPE_MONTH_BAG13",
	864:     "REPUTATION_TYPE_MONTH_BAG14",
	865:     "REPUTATION_TYPE_MONTH_BAG15",
	866:     "REPUTATION_TYPE_MONTH_BAG16",
	867:     "REPUTATION_TYPE_MONTH_BAG17",
	868:     "REPUTATION_TYPE_MONTH_BAG18",
	869:     "REPUTATION_TYPE_MONTH_BAG19",
	870:     "REPUTATION_TYPE_MONTH_BAG20",
	871:     "REPUTATION_TYPE_MONTH_BAG21",
	872:     "REPUTATION_TYPE_MONTH_BAG22",
	873:     "REPUTATION_TYPE_MONTH_BAG23",
	874:     "REPUTATION_TYPE_MONTH_BAG24",
	875:     "REPUTATION_TYPE_MONTH_BAG25",
	876:     "REPUTATION_TYPE_MONTH_BAG26",
	877:     "REPUTATION_TYPE_MONTH_BAG27",
	878:     "REPUTATION_TYPE_MONTH_BAG28",
	879:     "REPUTATION_TYPE_MONTH_BAG29",
	880:     "REPUTATION_TYPE_MONTH_BAG30",
	881:     "REPUTATION_TYPE_HOTFIX1",
	882:     "REPUTATION_TYPE_HOTFIX2",
	883:     "REPUTATION_TYPE_HOTFIX3",
	884:     "REPUTATION_TYPE_HOTFIX4",
	885:     "REPUTATION_TYPE_HOTFIX5",
	886:     "REPUTATION_TYPE_HOTFIX6",
	887:     "REPUTATION_TYPE_HOTFIX7",
	888:     "REPUTATION_TYPE_HOTFIX8",
	889:     "REPUTATION_TYPE_HOTFIX9",
	890:     "REPUTATION_TYPE_HOTFIX10",
	1000:    "REPUTATION_TYPE_ZHENGDAOTIEBI",
	1001:    "REPUTATION_TYPE_MOYIN",
	1002:    "REPUTATION_TYPE_JINSEJINGSUI",
	1003:    "REPUTATION_TYPE_WANMOZUITI",
	1004:    "REPUTATION_TYPE_CHUNJIE_REWARD",
	1005:    "REPUTATION_TYPE_SHILIANTIEBI",
	1006:    "REPUTATION_TYPE_BIYULIUYE",
	1007:    "REPUTATION_TYPE_BENXINYIN",
	1008:    "REPUTATION_TYPE_LONGBI",
	1009:    "REPUTATION_TYPE_DUANZUIBI",
	1010:    "REPUTATION_TYPE_XUANSHANGPROCESS",
	1011:    "REPUTATION_TYPE_XIANFENGLINGPAI",
	1012:    "REPUTATION_TYPE_CHIHEIHUAFUQUAN",
	1013:    "REPUTATION_TYPE_QINGZHILEI",
	1014:    "REPUTATION_TYPE_JIANLING",
	1015:    "REPUTATION_TYPE_LUANZHANLING",
	1016:    "REPUTATION_TYPE_ZONGZI",
	1017:    "REPUTATION_TYPE_YAOHU",
	1018:    "REPUTATION_TYPE_QIYULING",
	1019:    "REPUTATION_TYPE_MIANJUCANPIAN",
	1020:    "REPUTATION_TYPE_HAIBEIBI",
	1021:    "REPUTATION_TYPE_XIECHENGYINJI",
	1022:    "REPUTATION_TYPE_XINMOLING",
	1023:    "REPUTATION_TYPE_YINGSHALING",
	1024:    "REPUTATION_TYPE_BINGXUE",
	1025:    "REPUTATION_TYPE_MOLONGLING",
	1026:    "REPUTATION_TYPE_XUANTIEBI",
	1027:    "REPUTATION_TYPE_YOUHUNLING",
	1028:    "REPUTATION_TYPE_MIJINMOYIN",
	1029:    "REPUTATION_TYPE_MOYINGBI",
	1030:    "REPUTATION_TYPE_CHUEBI",
	1031:    "REPUTATION_TYPE_GUIMILING",
	1032:    "REPUTATION_TYPE_BAIGUIBI",
	1033:    "REPUTATION_TYPE_XUEJINGMILING",
	1034:    "REPUTATION_TYPE_HUANGYEYIN",
	1035:    "REPUTATION_TYPE_GUIYUEBI",
	1036:    "REPUTATION_TYPE_1036",
	1037:    "REPUTATION_TYPE_JIANYINGLING",
	1038:    "REPUTATION_TYPE_YUEBING",
	1039:    "REPUTATION_TYPE_SHENGSHIYIN",
	1040:    "REPUTATION_TYPE_YIMENGHUAXU",
	1041:    "REPUTATION_TYPE_FANGHUABI",
	1042:    "REPUTATION_TYPE_YINGQIUBI",
	1043:    "REPUTATION_TYPE_FEISHABI",
	1044:    "REPUTATION_TYPE_HANSHUANGLING",
	1045:    "REPUTATION_TYPE_HUNYAN",
	1046:    "REPUTATION_TYPE_LEIYUBINGJING",
	1047:    "REPUTATION_TYPE_BINGJINGCANPO",
	1048:    "REPUTATION_TYPE_BINGLINGBI",
	1049:    "REPUTATION_TYPE_TUOLING",
	1050:    "REPUTATION_TYPE_QIANLONGBI",
	1051:    "REPUTATION_TYPE_QIONGYUBI",
	1052:    "REPUTATION_TYPE_XUEYINGBI",
	1053:    "REPUTATION_TYPE_XUANYUBI",
	1054:    "REPUTATION_TYPE_HUANYINGLING",
	1055:    "REPUTATION_TYPE_DAIBI1",
	1056:    "REPUTATION_TYPE_DAIBI2",
	1057:    "REPUTATION_TYPE_DAIBI3",
	1058:    "REPUTATION_TYPE_DAIBI4",
	1059:    "REPUTATION_TYPE_DAIBI5",
	1060:    "REPUTATION_TYPE_DAIBI6",
	1061:    "REPUTATION_TYPE_DAIBI7",
	1062:    "REPUTATION_TYPE_DAIBI8",
	1063:    "REPUTATION_TYPE_DAIBI9",
	1064:    "REPUTATION_TYPE_DAIBI10",
	1065:    "REPUTATION_TYPE_DAIBI11",
	1066:    "REPUTATION_TYPE_DAIBI12",
	1067:    "REPUTATION_TYPE_DAIBI13",
	1068:    "REPUTATION_TYPE_DAIBI14",
	1069:    "REPUTATION_TYPE_DAIBI15",
	2001:    "REPUTATION_TYPE_WEIBO_SIGN_IN_ONE_DAY",
	2002:    "REPUTATION_TYPE_WEIBO_SIGN_IN_TWO_DAYS",
	2003:    "REPUTATION_TYPE_WEIBO_SIGN_IN_THREE_DAYS",
	2004:    "REPUTATION_TYPE_WEIBO_SIGN_IN_FOUR_DAYS",
	2005:    "REPUTATION_TYPE_WEIBO_SIGN_IN_FIVE_DAYS",
	2006:    "REPUTATION_TYPE_WEIBO_SIGN_IN_SIX_DAYS",
	2007:    "REPUTATION_TYPE_WEIBO_SIGN_IN_SEVEN_DAYS",
	2008:    "REPUTATION_TYPE_WEIBO_SIGN_IN_EIGHT_DAYS",
	2009:    "REPUTATION_TYPE_WEIBO_SIGN_IN_NINE_DAYS",
	2010:    "REPUTATION_TYPE_WEIBO_SIGN_IN_TEN_DAYS",
	3508:    "REPUTATION_TYPE_2021_MAIL_DAY1",
	3509:    "REPUTATION_TYPE_2021_MAIL_DAY2",
	3510:    "REPUTATION_TYPE_2021_MAIL_DAY3",
	3511:    "REPUTATION_TYPE_2021_MAIL_DAY4",
	3512:    "REPUTATION_TYPE_2021_MAIL_DAY5",
	3513:    "REPUTATION_TYPE_2021_MAIL_DAY6",
	3514:    "REPUTATION_TYPE_2021_MAIL_DAY7",
	5000:    "REPUTATION_TYPE_ACCOUNT_NULL",
	5001:    "REPUTATION_TYPE_ACCOUNT_YUYUE",
	5002:    "REPUTATION_TYPE_ACCOUNT_XIAOSI",
	5003:    "REPUTATION_TYPE_XIAOSI_CREATE",
	5004:    "REPUTATION_TYPE_ACCOUNT_XUKONG",
	5005:    "REPUTATION_TYPE_XUKONG_CREATE",
	5006:    "REPUTATION_TYPE_LONGYIN_SUM",
	5007:    "REPUTATION_TYPE_COST_LONGYIN_SUM",
	10000:   "REPUTATION_TYPE_ACCOUNT_COUNT",
	1000000: "REPUTATION_TYPE_DS_BEGIN",
}

var REPUTATION_TYPE_value = map[string]int32{
	"REPUTATION_TYPE_NULL":                           0,
	"REPUTATION_TYPE_FIRST_RECHARGE_YUANBAO":         1,
	"REPUTATION_TYPE_RECHARGE_ACCUMULATE":            2,
	"REPUTATION_TYPE_RECHARGE_LIBAO":                 3,
	"REPUTATION_TYPE_CORPS_SIGNIN":                   4,
	"REPUTATION_TYPE_CORPS_CONTRIBUTE_LOW":           5,
	"REPUTATION_TYPE_CORPS_CONTRIBUTE_MIDDLE":        6,
	"REPUTATION_TYPE_CORPS_CONTRIBUTE_HIGH":          7,
	"REPUTATION_TYPE_CORPS_APPLY":                    8,
	"REPUTATION_TYPE_CORPS_EXP":                      9,
	"REPUTATION_TYPE_CORPS_CONTRI":                   10,
	"REPUTATION_TYPE_LongYin":                        11,
	"REPUTATION_TYPE_VIP":                            14,
	"REPUTATION_TYPE_VIP_EXPERIENCE":                 15,
	"REPUTATION_TYPE_FRIEND_GET_GIFT_COUNT":          16,
	"REPUTATION_TYPE_FRIEND_GIVE_GIFT_COUNT":         17,
	"REPUTATION_TYPE_LOGIN_ACCUMULATE":               20,
	"REPUTATION_TYPE_RECHARGE_DIAMOND_ACCUMULATE":    27,
	"REPUTATION_TYPE_FREE_DIAMOND":                   87,
	"REPUTATION_TYPE_DONATE_DIAMOND":                 88,
	"REPUTATION_TYPE_SINSOUL":                        89,
	"REPUTATION_TYPE_SIN":                            90,
	"REPUTATION_TYPE_1_6SIN":                         91,
	"REPUTATION_TYPE_4_1SIN":                         92,
	"REPUTATION_TYPE_YOUQINGDIAN":                    93,
	"REPUTATION_TYPE_SCROLLTICKET":                   96,
	"REPUTATION_TYPE_SKILL_REFINE_POINT":             97,
	"REPUTATION_TYPE_ENDLESS_SINGLE":                 98,
	"REPUTATION_TYPE_ENDLESS_MULTI":                  99,
	"REPUTATION_TYPE_BLUESOUL":                       100,
	"REPUTATION_TYPE_SHARE_PIC_COUNT":                101,
	"REPUTATION_TYPE_BUY_SKIN_COUNT":                 102,
	"REPUTATION_TYPE_TEMP_SKILL_POINT":               103,
	"REPUTATION_TYPE_BLACK_STONE":                    104,
	"REPUTATION_TYPE_GACHA_COUNT":                    105,
	"REPUTATION_TYPE_GACHA_COUNT1":                   106,
	"REPUTATION_TYPE_GACHA_COUNT2":                   107,
	"REPUTATION_TYPE_GACHA_COUNT3":                   108,
	"REPUTATION_TYPE_GACHA_COUNT4":                   109,
	"REPUTATION_TYPE_HUAFU_TICKET":                   110,
	"REPUTATION_TYPE_HUAFU_PURPLE_TICKET":            111,
	"REPUTATION_TYPE_HUANTI":                         112,
	"REPUTATION_TYPE_CORPS_BATTLE_TIMES":             113,
	"REPUTATION_TYPE_CORPS_BATTLE_COIN":              114,
	"REPUTATION_TYPE_CORPS_TECH_POINT":               115,
	"REPUTATION_TYPE_TECH_POINT":                     116,
	"REPUTATION_TYPE_XIAOSIZUITI":                    117,
	"REPUTATION_TYPE_WORLD_BOSS_TICKET":              118,
	"REPUTATION_TYPE_XINGBIAO_HUAFU_TICKET":          119,
	"REPUTATION_TYPE_RENWANG_OPEN_WEB_SITE":          120,
	"REPUTATION_TYPE_ZHANLING_FIX":                   121,
	"REPUTATION_TYPE_FIX_C9":                         122,
	"REPUTATION_TYPE_SECRET_FILE_REWARD_TIMES":       123,
	"REPUTATION_TYPE_WUHUN_FIX":                      124,
	"REPUTATION_TYPE_SHARE_PIC_COUNT_RENWANG":        125,
	"REPUTATION_TYPE_GUSHANG_COIN":                   126,
	"REPUTATION_TYPE_SECRET_FILE_SHEET":              127,
	"REPUTATION_TYPE_LOGIN_CONTINUOUS":               128,
	"REPUTATION_TYPE_TOTAL_GACHA_COUNT":              129,
	"REPUTATION_TYPE_FIRST_ENHANCE_SCROLL":           130,
	"REPUTATION_TYPE_FIX_XIULUO":                     131,
	"REPUTATION_TYPE_FIX_SIN_RANK":                   132,
	"REPUTATION_TYPE_ACTIVITY_BEGIN":                 201,
	"REPUTATION_TYPE_ACTIVITY_202":                   202,
	"REPUTATION_TYPE_ACTIVITY_END":                   400,
	"REPUTATION_TYPE_RANK_SIN":                       553,
	"REPUTATION_TYPE_RANK_POWER":                     554,
	"REPUTATION_TYPE_RANK_DAZHUANG":                  555,
	"REPUTATION_TYPE_RANK_POWER_SIN":                 556,
	"REPUTATION_TYPE_RANK_PVP":                       557,
	"REPUTATION_TYPE_CHOUKA_ONE":                     601,
	"REPUTATION_TYPE_CHOUKA_TEN":                     602,
	"REPUTATION_TYPE_RECHARGE_NUM":                   603,
	"REPUTATION_TYPE_ROLE_COST_LONGYIN_SUM":          604,
	"REPUTATION_TYPE_SCROLL_LI_MAIL":                 701,
	"REPUTATION_TYPE_WJJJ_MULTI_MAIL":                702,
	"REPUTATION_TYPE_HEIANXUKONGZ_RESET":             703,
	"REPUTATION_TYPE_TIMETRAVEL_QUEST":               704,
	"REPUTATION_TYPE_SCROLL_EQUIP":                   705,
	"REPUTATION_TYPE_ANJIN_QUEST":                    706,
	"REPUTATION_TYPE_LOST_SKIN":                      707,
	"REPUTATION_TYPE_RUNE_REFUND":                    708,
	"REPUTATION_TYPE_RUNE_SLOT_RESET":                709,
	"REPUTATION_TYPE_SKIN_PROP_SELECT":               710,
	"REPUTATION_TYPE_EVENT_PARAM":                    711,
	"REPUTATION_TYPE_FIX_EVENT_QUEST":                712,
	"REPUTATION_TYPE_ZIYANHUAFU":                     713,
	"REPUTATION_TYPE_DUPLI_SKILL":                    714,
	"REPUTATION_TYPE_FIX_ATTRIBUTE":                  715,
	"REPUTATION_TYPE_SYNC_SHOP_4300":                 716,
	"REPUTATION_TYPE_LIUPAI_CHECK":                   717,
	"REPUTATION_TYPE_DUPLI_SECSCROLL":                718,
	"REPUTATION_TYPE_KUANGLONG_EQUIP":                719,
	"REPUTATION_TYPE_REMOVE_SIN_GENRE":               720,
	"REPUTATION_TYPE_ZHAOHUI_CHECK":                  721,
	"REPUTATION_TYPE_TESTSERVER_INVITE":              722,
	"REPUTATION_TYPE_WUYI_ZHAOHUI_MAIL":              723,
	"REPUTATION_TYPE_QUEST_90931":                    725,
	"REPUTATION_TYPE_UNAME_RELATION_CHAIN":           726,
	"REPUTATION_TYPE_TRANSFER":                       727,
	"REPUTATION_TYPE_SIN_GENRE_SCROLL":               728,
	"REPUTATION_TYPE_BUY_SHOPITEM":                   729,
	"REPUTATION_TYPE_CLEAR_TEAM_ENDLESS":             730,
	"REPUTATION_TYPE_TESTSERVER_INVITE_2":            731,
	"REPUTATION_TYPE_LOST_UNITHANDBOOK":              732,
	"REPUTATION_TYPE_SET_QUEST_STATE":                733,
	"REPUTATION_TYPE_SIN_NUM":                        734,
	"REPUTATION_TYPE_XIAOSI_EVENT":                   735,
	"REPUTATION_TYPE_FIX_SIN_OPEN":                   736,
	"REPUTATION_TYPE_TESTSERVER_INVITE_3":            737,
	"REPUTATION_TYPE_FOOD_COUNT":                     738,
	"REPUTATION_TYPE_FIX_TUANKEY":                    739,
	"REPUTATION_TYPE_FIX_APPLYLIST":                  740,
	"REPUTATION_TYPE_FIX_WEEK_UPDATE":                741,
	"REPUTATION_TYPE_PVP_RECEIVE_REWARD_SEASON":      742,
	"REPUTATION_TYPE_CLEAN_PVP_INFO":                 743,
	"REPUTATION_TYPE_YOUYA_FIX":                      744,
	"REPUTATION_TYPE_XIEHOU_FIX":                     745,
	"REPUTATION_TYPE_CLEAN_PVP_INFO_SEASON":          746,
	"REPUTATION_TYPE_TESTSERVER_INVITE_4_1":          747,
	"REPUTATION_TYPE_TESTSERVER_INVITE_4":            750,
	"REPUTATION_TYPE_FIXEQUIPUSKILL":                 751,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU":   801,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU1":  802,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU2":  803,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU3":  804,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU4":  805,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU5":  806,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU6":  807,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU7":  808,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU8":  809,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU9":  810,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU10": 811,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU12": 812,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU13": 813,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU14": 814,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU15": 815,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU16": 816,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU17": 817,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU18": 818,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU19": 819,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU20": 820,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU21": 821,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU22": 822,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU23": 823,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU24": 824,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU25": 825,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU26": 826,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU27": 827,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU28": 828,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU29": 829,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU30": 830,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU31": 831,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU32": 832,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU33": 833,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU34": 834,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU35": 835,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU36": 836,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU37": 837,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU38": 838,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU39": 839,
	"REPUTATION_TYPE_BATTLEPASS_EXP_ZHENHONGHUAFU40": 840,
	"REPUTATION_TYPE_MONTH_BAG1":                     851,
	"REPUTATION_TYPE_MONTH_BAG2":                     852,
	"REPUTATION_TYPE_MONTH_BAG3":                     853,
	"REPUTATION_TYPE_MONTH_BAG4":                     854,
	"REPUTATION_TYPE_MONTH_BAG5":                     855,
	"REPUTATION_TYPE_MONTH_BAG6":                     856,
	"REPUTATION_TYPE_MONTH_BAG7":                     857,
	"REPUTATION_TYPE_MONTH_BAG8":                     858,
	"REPUTATION_TYPE_MONTH_BAG9":                     859,
	"REPUTATION_TYPE_MONTH_BAG10":                    860,
	"REPUTATION_TYPE_MONTH_BAG11":                    861,
	"REPUTATION_TYPE_MONTH_BAG12":                    862,
	"REPUTATION_TYPE_MONTH_BAG13":                    863,
	"REPUTATION_TYPE_MONTH_BAG14":                    864,
	"REPUTATION_TYPE_MONTH_BAG15":                    865,
	"REPUTATION_TYPE_MONTH_BAG16":                    866,
	"REPUTATION_TYPE_MONTH_BAG17":                    867,
	"REPUTATION_TYPE_MONTH_BAG18":                    868,
	"REPUTATION_TYPE_MONTH_BAG19":                    869,
	"REPUTATION_TYPE_MONTH_BAG20":                    870,
	"REPUTATION_TYPE_MONTH_BAG21":                    871,
	"REPUTATION_TYPE_MONTH_BAG22":                    872,
	"REPUTATION_TYPE_MONTH_BAG23":                    873,
	"REPUTATION_TYPE_MONTH_BAG24":                    874,
	"REPUTATION_TYPE_MONTH_BAG25":                    875,
	"REPUTATION_TYPE_MONTH_BAG26":                    876,
	"REPUTATION_TYPE_MONTH_BAG27":                    877,
	"REPUTATION_TYPE_MONTH_BAG28":                    878,
	"REPUTATION_TYPE_MONTH_BAG29":                    879,
	"REPUTATION_TYPE_MONTH_BAG30":                    880,
	"REPUTATION_TYPE_HOTFIX1":                        881,
	"REPUTATION_TYPE_HOTFIX2":                        882,
	"REPUTATION_TYPE_HOTFIX3":                        883,
	"REPUTATION_TYPE_HOTFIX4":                        884,
	"REPUTATION_TYPE_HOTFIX5":                        885,
	"REPUTATION_TYPE_HOTFIX6":                        886,
	"REPUTATION_TYPE_HOTFIX7":                        887,
	"REPUTATION_TYPE_HOTFIX8":                        888,
	"REPUTATION_TYPE_HOTFIX9":                        889,
	"REPUTATION_TYPE_HOTFIX10":                       890,
	"REPUTATION_TYPE_ZHENGDAOTIEBI":                  1000,
	"REPUTATION_TYPE_MOYIN":                          1001,
	"REPUTATION_TYPE_JINSEJINGSUI":                   1002,
	"REPUTATION_TYPE_WANMOZUITI":                     1003,
	"REPUTATION_TYPE_CHUNJIE_REWARD":                 1004,
	"REPUTATION_TYPE_SHILIANTIEBI":                   1005,
	"REPUTATION_TYPE_BIYULIUYE":                      1006,
	"REPUTATION_TYPE_BENXINYIN":                      1007,
	"REPUTATION_TYPE_LONGBI":                         1008,
	"REPUTATION_TYPE_DUANZUIBI":                      1009,
	"REPUTATION_TYPE_XUANSHANGPROCESS":               1010,
	"REPUTATION_TYPE_XIANFENGLINGPAI":                1011,
	"REPUTATION_TYPE_CHIHEIHUAFUQUAN":                1012,
	"REPUTATION_TYPE_QINGZHILEI":                     1013,
	"REPUTATION_TYPE_JIANLING":                       1014,
	"REPUTATION_TYPE_LUANZHANLING":                   1015,
	"REPUTATION_TYPE_ZONGZI":                         1016,
	"REPUTATION_TYPE_YAOHU":                          1017,
	"REPUTATION_TYPE_QIYULING":                       1018,
	"REPUTATION_TYPE_MIANJUCANPIAN":                  1019,
	"REPUTATION_TYPE_HAIBEIBI":                       1020,
	"REPUTATION_TYPE_XIECHENGYINJI":                  1021,
	"REPUTATION_TYPE_XINMOLING":                      1022,
	"REPUTATION_TYPE_YINGSHALING":                    1023,
	"REPUTATION_TYPE_BINGXUE":                        1024,
	"REPUTATION_TYPE_MOLONGLING":                     1025,
	"REPUTATION_TYPE_XUANTIEBI":                      1026,
	"REPUTATION_TYPE_YOUHUNLING":                     1027,
	"REPUTATION_TYPE_MIJINMOYIN":                     1028,
	"REPUTATION_TYPE_MOYINGBI":                       1029,
	"REPUTATION_TYPE_CHUEBI":                         1030,
	"REPUTATION_TYPE_GUIMILING":                      1031,
	"REPUTATION_TYPE_BAIGUIBI":                       1032,
	"REPUTATION_TYPE_XUEJINGMILING":                  1033,
	"REPUTATION_TYPE_HUANGYEYIN":                     1034,
	"REPUTATION_TYPE_GUIYUEBI":                       1035,
	"REPUTATION_TYPE_1036":                           1036,
	"REPUTATION_TYPE_JIANYINGLING":                   1037,
	"REPUTATION_TYPE_YUEBING":                        1038,
	"REPUTATION_TYPE_SHENGSHIYIN":                    1039,
	"REPUTATION_TYPE_YIMENGHUAXU":                    1040,
	"REPUTATION_TYPE_FANGHUABI":                      1041,
	"REPUTATION_TYPE_YINGQIUBI":                      1042,
	"REPUTATION_TYPE_FEISHABI":                       1043,
	"REPUTATION_TYPE_HANSHUANGLING":                  1044,
	"REPUTATION_TYPE_HUNYAN":                         1045,
	"REPUTATION_TYPE_LEIYUBINGJING":                  1046,
	"REPUTATION_TYPE_BINGJINGCANPO":                  1047,
	"REPUTATION_TYPE_BINGLINGBI":                     1048,
	"REPUTATION_TYPE_TUOLING":                        1049,
	"REPUTATION_TYPE_QIANLONGBI":                     1050,
	"REPUTATION_TYPE_QIONGYUBI":                      1051,
	"REPUTATION_TYPE_XUEYINGBI":                      1052,
	"REPUTATION_TYPE_XUANYUBI":                       1053,
	"REPUTATION_TYPE_HUANYINGLING":                   1054,
	"REPUTATION_TYPE_DAIBI1":                         1055,
	"REPUTATION_TYPE_DAIBI2":                         1056,
	"REPUTATION_TYPE_DAIBI3":                         1057,
	"REPUTATION_TYPE_DAIBI4":                         1058,
	"REPUTATION_TYPE_DAIBI5":                         1059,
	"REPUTATION_TYPE_DAIBI6":                         1060,
	"REPUTATION_TYPE_DAIBI7":                         1061,
	"REPUTATION_TYPE_DAIBI8":                         1062,
	"REPUTATION_TYPE_DAIBI9":                         1063,
	"REPUTATION_TYPE_DAIBI10":                        1064,
	"REPUTATION_TYPE_DAIBI11":                        1065,
	"REPUTATION_TYPE_DAIBI12":                        1066,
	"REPUTATION_TYPE_DAIBI13":                        1067,
	"REPUTATION_TYPE_DAIBI14":                        1068,
	"REPUTATION_TYPE_DAIBI15":                        1069,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_ONE_DAY":          2001,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_TWO_DAYS":         2002,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_THREE_DAYS":       2003,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_FOUR_DAYS":        2004,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_FIVE_DAYS":        2005,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_SIX_DAYS":         2006,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_SEVEN_DAYS":       2007,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_EIGHT_DAYS":       2008,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_NINE_DAYS":        2009,
	"REPUTATION_TYPE_WEIBO_SIGN_IN_TEN_DAYS":         2010,
	"REPUTATION_TYPE_2021_MAIL_DAY1":                 3508,
	"REPUTATION_TYPE_2021_MAIL_DAY2":                 3509,
	"REPUTATION_TYPE_2021_MAIL_DAY3":                 3510,
	"REPUTATION_TYPE_2021_MAIL_DAY4":                 3511,
	"REPUTATION_TYPE_2021_MAIL_DAY5":                 3512,
	"REPUTATION_TYPE_2021_MAIL_DAY6":                 3513,
	"REPUTATION_TYPE_2021_MAIL_DAY7":                 3514,
	"REPUTATION_TYPE_ACCOUNT_NULL":                   5000,
	"REPUTATION_TYPE_ACCOUNT_YUYUE":                  5001,
	"REPUTATION_TYPE_ACCOUNT_XIAOSI":                 5002,
	"REPUTATION_TYPE_XIAOSI_CREATE":                  5003,
	"REPUTATION_TYPE_ACCOUNT_XUKONG":                 5004,
	"REPUTATION_TYPE_XUKONG_CREATE":                  5005,
	"REPUTATION_TYPE_LONGYIN_SUM":                    5006,
	"REPUTATION_TYPE_COST_LONGYIN_SUM":               5007,
	"REPUTATION_TYPE_ACCOUNT_COUNT":                  10000,
	"REPUTATION_TYPE_DS_BEGIN":                       1000000,
}

func (x REPUTATION_TYPE) String() string {
	return proto.EnumName(REPUTATION_TYPE_name, int32(x))
}

func (REPUTATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{37}
}

//邮件类型
type MAIL_TYPE int32

const (
	MAIL_TYPE_MAIL_TYPE_NULL                 MAIL_TYPE = 0
	MAIL_TYPE_MAIL_TYPE_HELP                 MAIL_TYPE = 1
	MAIL_TYPE_MAIL_TYPE_ANNOUCEMENT          MAIL_TYPE = 2
	MAIL_TYPE_MAIL_TYPE_LIXINGWEIHU          MAIL_TYPE = 3
	MAIL_TYPE_MAIL_TYPE_GMT_SEND             MAIL_TYPE = 4
	MAIL_TYPE_MAIL_TYPE_CLAN_BATTLE          MAIL_TYPE = 5
	MAIL_TYPE_MAIL_TYPE_CLAN_DISMISS_KICKOUT MAIL_TYPE = 6
	MAIL_TYPE_MAIL_TYPE_RANK_REWARD          MAIL_TYPE = 7
	MAIL_TYPE_MAIL_TYPE_VOTE_REWARD          MAIL_TYPE = 8
	MAIL_TYPE_MAIL_TYPE_CLAN_BATTLE_BEATTACK MAIL_TYPE = 9
	MAIL_TYPE_MAIL_TYPE_MERGE_SERVER         MAIL_TYPE = 10
	MAIL_TYPE_MAIL_TYPE_SHOP                 MAIL_TYPE = 11
	MAIL_TYPE_MAIL_TYPE_GOLD_APPLE           MAIL_TYPE = 12
	MAIL_TYPE_MAIL_TYPE_MOBAOHUAFU           MAIL_TYPE = 13
	MAIL_TYPE_MAIL_TYPE_OPENSYSTEMREWARD     MAIL_TYPE = 14
	MAIL_TYPE_MAIL_TYPE_SCROLL_LI            MAIL_TYPE = 15
	MAIL_TYPE_MAIL_TYPE_2021_NEWYEAR         MAIL_TYPE = 16
	MAIL_TYPE_MAIL_TYPE_DAR_RECHARGE         MAIL_TYPE = 17
	MAIL_TYPE_MAIL_TYPE_RUNE_REFUND          MAIL_TYPE = 18
	MAIL_TYPE_MAIL_TYPE_TASK_REWARD          MAIL_TYPE = 19
	MAIL_TYPE_MAIL_TYPE_ZHAOHUI              MAIL_TYPE = 20
	MAIL_TYPE_MAIL_TYPE_RENAME               MAIL_TYPE = 21
	MAIL_TYPE_MAIL_TYPE_TRANSFER             MAIL_TYPE = 22
	MAIL_TYPE_MAIL_TYPE_FREECHOICE           MAIL_TYPE = 23
	MAIL_TYPE_MAIL_TYPE_CORPS                MAIL_TYPE = 24
	MAIL_TYPE_MAIL_TYPE_BATTLEPASS           MAIL_TYPE = 25
	MAIL_TYPE_MAIL_TYPE_SETFOEID             MAIL_TYPE = 26
	MAIL_TYPE_MAIL_TYPE_CORPSRANK            MAIL_TYPE = 27
	MAIL_TYPE_MAIL_TYPE_MEMBERRANK           MAIL_TYPE = 28
	MAIL_TYPE_MAIL_TYPE_CORPSBOSS            MAIL_TYPE = 29
	MAIL_TYPE_MAIL_TYPE_WUHUN                MAIL_TYPE = 30
	MAIL_TYPE_MAIL_TYPE_REGULAR              MAIL_TYPE = 31
	MAIL_TYPE_MAIL_TYPE_PVP_RANK_REWARD      MAIL_TYPE = 32
	MAIL_TYPE_MAIL_TYPE_PVP_REWARD           MAIL_TYPE = 33
	MAIL_TYPE_MAIL_TYPE_XIEHOU               MAIL_TYPE = 34
)

var MAIL_TYPE_name = map[int32]string{
	0:  "MAIL_TYPE_NULL",
	1:  "MAIL_TYPE_HELP",
	2:  "MAIL_TYPE_ANNOUCEMENT",
	3:  "MAIL_TYPE_LIXINGWEIHU",
	4:  "MAIL_TYPE_GMT_SEND",
	5:  "MAIL_TYPE_CLAN_BATTLE",
	6:  "MAIL_TYPE_CLAN_DISMISS_KICKOUT",
	7:  "MAIL_TYPE_RANK_REWARD",
	8:  "MAIL_TYPE_VOTE_REWARD",
	9:  "MAIL_TYPE_CLAN_BATTLE_BEATTACK",
	10: "MAIL_TYPE_MERGE_SERVER",
	11: "MAIL_TYPE_SHOP",
	12: "MAIL_TYPE_GOLD_APPLE",
	13: "MAIL_TYPE_MOBAOHUAFU",
	14: "MAIL_TYPE_OPENSYSTEMREWARD",
	15: "MAIL_TYPE_SCROLL_LI",
	16: "MAIL_TYPE_2021_NEWYEAR",
	17: "MAIL_TYPE_DAR_RECHARGE",
	18: "MAIL_TYPE_RUNE_REFUND",
	19: "MAIL_TYPE_TASK_REWARD",
	20: "MAIL_TYPE_ZHAOHUI",
	21: "MAIL_TYPE_RENAME",
	22: "MAIL_TYPE_TRANSFER",
	23: "MAIL_TYPE_FREECHOICE",
	24: "MAIL_TYPE_CORPS",
	25: "MAIL_TYPE_BATTLEPASS",
	26: "MAIL_TYPE_SETFOEID",
	27: "MAIL_TYPE_CORPSRANK",
	28: "MAIL_TYPE_MEMBERRANK",
	29: "MAIL_TYPE_CORPSBOSS",
	30: "MAIL_TYPE_WUHUN",
	31: "MAIL_TYPE_REGULAR",
	32: "MAIL_TYPE_PVP_RANK_REWARD",
	33: "MAIL_TYPE_PVP_REWARD",
	34: "MAIL_TYPE_XIEHOU",
}

var MAIL_TYPE_value = map[string]int32{
	"MAIL_TYPE_NULL":                 0,
	"MAIL_TYPE_HELP":                 1,
	"MAIL_TYPE_ANNOUCEMENT":          2,
	"MAIL_TYPE_LIXINGWEIHU":          3,
	"MAIL_TYPE_GMT_SEND":             4,
	"MAIL_TYPE_CLAN_BATTLE":          5,
	"MAIL_TYPE_CLAN_DISMISS_KICKOUT": 6,
	"MAIL_TYPE_RANK_REWARD":          7,
	"MAIL_TYPE_VOTE_REWARD":          8,
	"MAIL_TYPE_CLAN_BATTLE_BEATTACK": 9,
	"MAIL_TYPE_MERGE_SERVER":         10,
	"MAIL_TYPE_SHOP":                 11,
	"MAIL_TYPE_GOLD_APPLE":           12,
	"MAIL_TYPE_MOBAOHUAFU":           13,
	"MAIL_TYPE_OPENSYSTEMREWARD":     14,
	"MAIL_TYPE_SCROLL_LI":            15,
	"MAIL_TYPE_2021_NEWYEAR":         16,
	"MAIL_TYPE_DAR_RECHARGE":         17,
	"MAIL_TYPE_RUNE_REFUND":          18,
	"MAIL_TYPE_TASK_REWARD":          19,
	"MAIL_TYPE_ZHAOHUI":              20,
	"MAIL_TYPE_RENAME":               21,
	"MAIL_TYPE_TRANSFER":             22,
	"MAIL_TYPE_FREECHOICE":           23,
	"MAIL_TYPE_CORPS":                24,
	"MAIL_TYPE_BATTLEPASS":           25,
	"MAIL_TYPE_SETFOEID":             26,
	"MAIL_TYPE_CORPSRANK":            27,
	"MAIL_TYPE_MEMBERRANK":           28,
	"MAIL_TYPE_CORPSBOSS":            29,
	"MAIL_TYPE_WUHUN":                30,
	"MAIL_TYPE_REGULAR":              31,
	"MAIL_TYPE_PVP_RANK_REWARD":      32,
	"MAIL_TYPE_PVP_REWARD":           33,
	"MAIL_TYPE_XIEHOU":               34,
}

func (x MAIL_TYPE) String() string {
	return proto.EnumName(MAIL_TYPE_name, int32(x))
}

func (MAIL_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{38}
}

//PVP奖励类型
type PVP_REWARD_TYPE int32

const (
	PVP_REWARD_TYPE_PVP_REWARD_NULL   PVP_REWARD_TYPE = 0
	PVP_REWARD_TYPE_PVP_REWARD_WEEK   PVP_REWARD_TYPE = 1
	PVP_REWARD_TYPE_PVP_REWARD_SEASON PVP_REWARD_TYPE = 2
)

var PVP_REWARD_TYPE_name = map[int32]string{
	0: "PVP_REWARD_NULL",
	1: "PVP_REWARD_WEEK",
	2: "PVP_REWARD_SEASON",
}

var PVP_REWARD_TYPE_value = map[string]int32{
	"PVP_REWARD_NULL":   0,
	"PVP_REWARD_WEEK":   1,
	"PVP_REWARD_SEASON": 2,
}

func (x PVP_REWARD_TYPE) String() string {
	return proto.EnumName(PVP_REWARD_TYPE_name, int32(x))
}

func (PVP_REWARD_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{39}
}

//特殊卡标识
type MONTH_CARD_TYPE int32

const (
	MONTH_CARD_TYPE_MONTH_CARD_TYPE_NULL  MONTH_CARD_TYPE = 0
	MONTH_CARD_TYPE_MONTH_CARD_TYPE_WEEK  MONTH_CARD_TYPE = 1
	MONTH_CARD_TYPE_MONTH_CARD_TYPE_MONTH MONTH_CARD_TYPE = 2
	MONTH_CARD_TYPE_MONTH_CARD_TYPE_YEAR  MONTH_CARD_TYPE = 3
	MONTH_CARD_TYPE_MONTH_CARD_TYPE_LIBAO MONTH_CARD_TYPE = 4
)

var MONTH_CARD_TYPE_name = map[int32]string{
	0: "MONTH_CARD_TYPE_NULL",
	1: "MONTH_CARD_TYPE_WEEK",
	2: "MONTH_CARD_TYPE_MONTH",
	3: "MONTH_CARD_TYPE_YEAR",
	4: "MONTH_CARD_TYPE_LIBAO",
}

var MONTH_CARD_TYPE_value = map[string]int32{
	"MONTH_CARD_TYPE_NULL":  0,
	"MONTH_CARD_TYPE_WEEK":  1,
	"MONTH_CARD_TYPE_MONTH": 2,
	"MONTH_CARD_TYPE_YEAR":  3,
	"MONTH_CARD_TYPE_LIBAO": 4,
}

func (x MONTH_CARD_TYPE) String() string {
	return proto.EnumName(MONTH_CARD_TYPE_name, int32(x))
}

func (MONTH_CARD_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{40}
}

//联盟成员职位
type CLAN_POS int32

const (
	CLAN_POS_CLAN_POS_NULL        CLAN_POS = 0
	CLAN_POS_CLAN_POS_NORMAL      CLAN_POS = 1
	CLAN_POS_CLAN_POS_MASTER      CLAN_POS = 2
	CLAN_POS_CLAN_POS_VICE_MASTER CLAN_POS = 3
	CLAN_POS_CLAN_POS_ZHANGLAO    CLAN_POS = 4
)

var CLAN_POS_name = map[int32]string{
	0: "CLAN_POS_NULL",
	1: "CLAN_POS_NORMAL",
	2: "CLAN_POS_MASTER",
	3: "CLAN_POS_VICE_MASTER",
	4: "CLAN_POS_ZHANGLAO",
}

var CLAN_POS_value = map[string]int32{
	"CLAN_POS_NULL":        0,
	"CLAN_POS_NORMAL":      1,
	"CLAN_POS_MASTER":      2,
	"CLAN_POS_VICE_MASTER": 3,
	"CLAN_POS_ZHANGLAO":    4,
}

func (x CLAN_POS) String() string {
	return proto.EnumName(CLAN_POS_name, int32(x))
}

func (CLAN_POS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{41}
}

//帮派操作
type CLAN_OPER_TYPE int32

const (
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_NULL               CLAN_OPER_TYPE = 0
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_CREATE             CLAN_OPER_TYPE = 1
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_JOIN               CLAN_OPER_TYPE = 2
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_EDIT               CLAN_OPER_TYPE = 3
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_SEARCH             CLAN_OPER_TYPE = 4
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_DISMISS            CLAN_OPER_TYPE = 5
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_MEMEBER_AGREE      CLAN_OPER_TYPE = 6
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_MEMEBER_DISAGREE   CLAN_OPER_TYPE = 7
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_MEMEBER_DELETE     CLAN_OPER_TYPE = 8
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_MEMEBER_QUIT       CLAN_OPER_TYPE = 9
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_MEMEBER_APPOINT    CLAN_OPER_TYPE = 10
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_TRANSFER           CLAN_OPER_TYPE = 11
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_CONTRIBUTE         CLAN_OPER_TYPE = 12
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_ATTACK             CLAN_OPER_TYPE = 13
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_BE_ATTACK          CLAN_OPER_TYPE = 14
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_ZHENCHA            CLAN_OPER_TYPE = 15
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_SEARCH_MEMBER_LIST CLAN_OPER_TYPE = 16
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_SEARCH_APPLY_LIST  CLAN_OPER_TYPE = 17
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_SEARCH_LOG_LIST    CLAN_OPER_TYPE = 18
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_ONE_KEY_APPLY      CLAN_OPER_TYPE = 19
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_ONE_KEY_REFUSE     CLAN_OPER_TYPE = 20
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_UPDATE_FLAG        CLAN_OPER_TYPE = 21
	CLAN_OPER_TYPE_CLAN_OPER_TYPE_NEED_APPLICATION   CLAN_OPER_TYPE = 22
)

var CLAN_OPER_TYPE_name = map[int32]string{
	0:  "CLAN_OPER_TYPE_NULL",
	1:  "CLAN_OPER_TYPE_CREATE",
	2:  "CLAN_OPER_TYPE_JOIN",
	3:  "CLAN_OPER_TYPE_EDIT",
	4:  "CLAN_OPER_TYPE_SEARCH",
	5:  "CLAN_OPER_TYPE_DISMISS",
	6:  "CLAN_OPER_TYPE_MEMEBER_AGREE",
	7:  "CLAN_OPER_TYPE_MEMEBER_DISAGREE",
	8:  "CLAN_OPER_TYPE_MEMEBER_DELETE",
	9:  "CLAN_OPER_TYPE_MEMEBER_QUIT",
	10: "CLAN_OPER_TYPE_MEMEBER_APPOINT",
	11: "CLAN_OPER_TYPE_TRANSFER",
	12: "CLAN_OPER_TYPE_CONTRIBUTE",
	13: "CLAN_OPER_TYPE_ATTACK",
	14: "CLAN_OPER_TYPE_BE_ATTACK",
	15: "CLAN_OPER_TYPE_ZHENCHA",
	16: "CLAN_OPER_TYPE_SEARCH_MEMBER_LIST",
	17: "CLAN_OPER_TYPE_SEARCH_APPLY_LIST",
	18: "CLAN_OPER_TYPE_SEARCH_LOG_LIST",
	19: "CLAN_OPER_TYPE_ONE_KEY_APPLY",
	20: "CLAN_OPER_TYPE_ONE_KEY_REFUSE",
	21: "CLAN_OPER_TYPE_UPDATE_FLAG",
	22: "CLAN_OPER_TYPE_NEED_APPLICATION",
}

var CLAN_OPER_TYPE_value = map[string]int32{
	"CLAN_OPER_TYPE_NULL":               0,
	"CLAN_OPER_TYPE_CREATE":             1,
	"CLAN_OPER_TYPE_JOIN":               2,
	"CLAN_OPER_TYPE_EDIT":               3,
	"CLAN_OPER_TYPE_SEARCH":             4,
	"CLAN_OPER_TYPE_DISMISS":            5,
	"CLAN_OPER_TYPE_MEMEBER_AGREE":      6,
	"CLAN_OPER_TYPE_MEMEBER_DISAGREE":   7,
	"CLAN_OPER_TYPE_MEMEBER_DELETE":     8,
	"CLAN_OPER_TYPE_MEMEBER_QUIT":       9,
	"CLAN_OPER_TYPE_MEMEBER_APPOINT":    10,
	"CLAN_OPER_TYPE_TRANSFER":           11,
	"CLAN_OPER_TYPE_CONTRIBUTE":         12,
	"CLAN_OPER_TYPE_ATTACK":             13,
	"CLAN_OPER_TYPE_BE_ATTACK":          14,
	"CLAN_OPER_TYPE_ZHENCHA":            15,
	"CLAN_OPER_TYPE_SEARCH_MEMBER_LIST": 16,
	"CLAN_OPER_TYPE_SEARCH_APPLY_LIST":  17,
	"CLAN_OPER_TYPE_SEARCH_LOG_LIST":    18,
	"CLAN_OPER_TYPE_ONE_KEY_APPLY":      19,
	"CLAN_OPER_TYPE_ONE_KEY_REFUSE":     20,
	"CLAN_OPER_TYPE_UPDATE_FLAG":        21,
	"CLAN_OPER_TYPE_NEED_APPLICATION":   22,
}

func (x CLAN_OPER_TYPE) String() string {
	return proto.EnumName(CLAN_OPER_TYPE_name, int32(x))
}

func (CLAN_OPER_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{42}
}

type META_DATA_TYPE int32

const (
	META_DATA_TYPE_META_DATA_TYPE_NULL                  META_DATA_TYPE = 0
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_UPGRADE        META_DATA_TYPE = 1
	META_DATA_TYPE_META_DATA_TYPE_SCROLL                META_DATA_TYPE = 2
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_ATTRIBUTE      META_DATA_TYPE = 3
	META_DATA_TYPE_META_DATA_TYPE_SCENE                 META_DATA_TYPE = 4
	META_DATA_TYPE_META_DATA_TYPE_QUEST                 META_DATA_TYPE = 5
	META_DATA_TYPE_META_DATA_TYPE_PARTY                 META_DATA_TYPE = 6
	META_DATA_TYPE_META_DATA_TYPE_REWARD                META_DATA_TYPE = 7
	META_DATA_TYPE_META_DATA_TYPE_RANK_LEVEL_ASYNC_MODE META_DATA_TYPE = 8
	META_DATA_TYPE_META_DATA_TYPE_SKILL_UPGRADE         META_DATA_TYPE = 9
	META_DATA_TYPE_META_DATA_TYPE_UNIT                  META_DATA_TYPE = 10
	META_DATA_TYPE_META_DATA_TYPE_UNIT_ATTR             META_DATA_TYPE = 11
	META_DATA_TYPE_META_DATA_TYPE_STORAGE_UPGRADE       META_DATA_TYPE = 12
	META_DATA_TYPE_META_DATA_TYPE_SHOP_ITEM             META_DATA_TYPE = 13
	META_DATA_TYPE_META_DATA_TYPE_SHOP                  META_DATA_TYPE = 14
	META_DATA_TYPE_META_DATA_TYPE_SKILL_CHAIN           META_DATA_TYPE = 15
	META_DATA_TYPE_META_DATA_TYPE_SKILL                 META_DATA_TYPE = 16
	META_DATA_TYPE_META_DATA_TYPE_ADVANCE_SKILL         META_DATA_TYPE = 17
	META_DATA_TYPE_META_DATA_TYPE_EQUIPMENT             META_DATA_TYPE = 18
	META_DATA_TYPE_META_DATA_TYPE_EQUIPMENT_SUIT        META_DATA_TYPE = 19
	META_DATA_TYPE_META_DATA_TYPE_EQUIPMENT_ENHANCE     META_DATA_TYPE = 20
	META_DATA_TYPE_META_DATA_TYPE_EQUIPMENT_ATTRIBUTE   META_DATA_TYPE = 21
	META_DATA_TYPE_META_DATA_TYPE_DROP_GROUP            META_DATA_TYPE = 22
	META_DATA_TYPE_META_DATA_TYPE_BUFF                  META_DATA_TYPE = 23
	META_DATA_TYPE_META_DATA_TYPE_AVATAR                META_DATA_TYPE = 24
	META_DATA_TYPE_META_DATA_TYPE_LEVEL                 META_DATA_TYPE = 25
	META_DATA_TYPE_META_DATA_TYPE_ILLEGALE_WROD         META_DATA_TYPE = 26
	META_DATA_TYPE_META_DATA_TYPE_MAIL                  META_DATA_TYPE = 27
	META_DATA_TYPE_META_DATA_TYPE_LOCATION              META_DATA_TYPE = 28
	META_DATA_TYPE_META_DATA_TYPE_ITEM                  META_DATA_TYPE = 29
	META_DATA_TYPE_META_DATA_TYPE_HERO_EXP              META_DATA_TYPE = 30
	META_DATA_TYPE_META_DATA_TYPE_EVENT                 META_DATA_TYPE = 31
	META_DATA_TYPE_META_DATA_TYPE_HERO_UPGRADE          META_DATA_TYPE = 32
	META_DATA_TYPE_META_DATA_TYPE_HERO                  META_DATA_TYPE = 33
	META_DATA_TYPE_META_DATA_TYPE_CONST                 META_DATA_TYPE = 34
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_SET            META_DATA_TYPE = 35
	META_DATA_TYPE_META_DATA_TYPE_MAP_DOOR              META_DATA_TYPE = 36
	META_DATA_TYPE_META_DATA_TYPE_DISTRIBUTION          META_DATA_TYPE = 37
	META_DATA_TYPE_META_DATA_TYPE_FRIEND_HAOGANDU       META_DATA_TYPE = 38
	META_DATA_TYPE_META_DATA_TYPE_RUNE                  META_DATA_TYPE = 39
	META_DATA_TYPE_META_DATA_TYPE_RUNEATTRIBUTE         META_DATA_TYPE = 40
	META_DATA_TYPE_META_DATA_TYPE_RUNESLOT              META_DATA_TYPE = 41
	META_DATA_TYPE_META_DATA_TYPE_RUNESET               META_DATA_TYPE = 42
	META_DATA_TYPE_META_DATA_TYPE_RUNESETUPGRADE        META_DATA_TYPE = 43
	META_DATA_TYPE_META_DATA_TYPE_RANKING               META_DATA_TYPE = 44
	META_DATA_TYPE_META_DATA_TYPE_ACTIVITY              META_DATA_TYPE = 45
	META_DATA_TYPE_META_DATA_TYPE_UNLOCK                META_DATA_TYPE = 46
	META_DATA_TYPE_META_DATA_TYPE_LEVEL_SUP             META_DATA_TYPE = 47
	META_DATA_TYPE_META_DATA_TYPE_FOOD                  META_DATA_TYPE = 48
	META_DATA_TYPE_META_DATA_TYPE_QUEST_SIDE            META_DATA_TYPE = 49
	META_DATA_TYPE_META_DATA_TYPE_SKIN                  META_DATA_TYPE = 50
	META_DATA_TYPE_META_DATA_TYPE_SKINATTRIBUTE         META_DATA_TYPE = 51
	META_DATA_TYPE_META_DATA_TYPE_UNIT_AVATAR_SWITCH    META_DATA_TYPE = 52
	//META_DATA_TYPE_DATA_VERSION = 53; //数据版本号
	META_DATA_TYPE_META_DATA_TYPE_RECHARGE             META_DATA_TYPE = 54
	META_DATA_TYPE_META_DATA_TYPE_RMB_SHOP_ITEM        META_DATA_TYPE = 55
	META_DATA_TYPE_META_DATA_TYPE_RMB_SHOP             META_DATA_TYPE = 56
	META_DATA_TYPE_META_DATA_TYPE_SPECIFY_ITEM         META_DATA_TYPE = 57
	META_DATA_TYPE_META_DATA_TYPE_TIME_TRAVEL          META_DATA_TYPE = 58
	META_DATA_TYPE_META_DATA_TYPE_SKILL_REFINE         META_DATA_TYPE = 59
	META_DATA_TYPE_META_DATA_TYPE_SKILL_REFINE_UPGRADE META_DATA_TYPE = 60
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_REINFORCE     META_DATA_TYPE = 61
	META_DATA_TYPE_META_DATA_TYPE_ENDLESS_RANGE        META_DATA_TYPE = 62
	META_DATA_TYPE_META_DATA_TYPE_ENDLESS_BLESS        META_DATA_TYPE = 63
	META_DATA_TYPE_META_DATA_TYPE_OG_UPGRADE           META_DATA_TYPE = 64
	META_DATA_TYPE_META_DATA_TYPE_ENDLESS_BLESS_DROP   META_DATA_TYPE = 65
	META_DATA_TYPE_META_DATA_TYPE_ENDLESS_ATTRIBUTES   META_DATA_TYPE = 66
	META_DATA_TYPE_META_DATA_TYPE_ENDLESS_SHOP         META_DATA_TYPE = 67
	META_DATA_TYPE_META_DATA_TYPE_HEAD_FRAME           META_DATA_TYPE = 68
	META_DATA_TYPE_META_DATA_TYPE_HAND_BOOK_ENEMY      META_DATA_TYPE = 69
	//META_DATA_TYPE_CHANNEL_NEWBIE_REWARD = 70;//渠道奖励
	//META_DATA_TYPE_HUAFUREFUND_REWARD = 71;//华服心法返利
	//META_DATA_TYPE_FIRSTTIME_TO_LEVEL_REWARD = 72;//首角色到达等级奖励(40级奖励白衣留情心法)
	//META_DATA_TYPE_HISTORYTEST_ACHIVE_REWARD = 73;//历测成就奖励
	//META_DATA_TYPE_CHARGE_RECORD = 74;//首充记录表
	//META_DATA_TYPE_REFUND_RECORD = 75;//退款记录表
	//META_DATA_TYPE_CHARGE_MISSING_RECORD = 76;//充值统计缺失部分记录
	//META_DATA_TYPE_RUNE_REFUND = 77;//刻印返还
	META_DATA_TYPE_META_DATA_TYPE_LEVEL_LAYER META_DATA_TYPE = 78
	//META_DATA_TYPE_FIX_EVENT_QUEST = 79;//修复支线任务补发道具
	META_DATA_TYPE_META_DATA_TYPE_ZUITI_REFINE             META_DATA_TYPE = 80
	META_DATA_TYPE_META_DATA_TYPE_ZUITI_REFINE_COST        META_DATA_TYPE = 81
	META_DATA_TYPE_META_DATA_TYPE_DEEP_SINNER_FIGHT        META_DATA_TYPE = 82
	META_DATA_TYPE_META_DATA_TYPE_LEVEL_CHALLENGE_QUEST    META_DATA_TYPE = 83
	META_DATA_TYPE_META_DATA_TYPE_LEVEL_CHALLENGE_EXTRA    META_DATA_TYPE = 84
	META_DATA_TYPE_META_DATA_TYPE_FACTION                  META_DATA_TYPE = 85
	META_DATA_TYPE_META_DATA_TYPE_GUARD_UPGRADE            META_DATA_TYPE = 86
	META_DATA_TYPE_META_DATA_TYPE_GUARD                    META_DATA_TYPE = 87
	META_DATA_TYPE_META_DATA_TYPE_FACTION_LEVEL            META_DATA_TYPE = 88
	META_DATA_TYPE_META_DATA_TYPE_FACTION_TECHNOLOGY       META_DATA_TYPE = 89
	META_DATA_TYPE_META_DATA_TYPE_FACTION_TECHNOLOGY_GROUP META_DATA_TYPE = 90
	META_DATA_TYPE_META_DATA_TYPE_BATTLE_PASS              META_DATA_TYPE = 91
	META_DATA_TYPE_META_DATA_TYPE_BATTLE_PASS_REWARD       META_DATA_TYPE = 92
	META_DATA_TYPE_META_DATA_TYPE_FACTION_WAR              META_DATA_TYPE = 93
	META_DATA_TYPE_META_DATA_TYPE_FACTION_HEAD_FRAME       META_DATA_TYPE = 94
	//META_DATA_TYPE_ERROR_EVENT = 95;//小厮错误事件纠正
	META_DATA_TYPE_META_DATA_TYPE_STICKER               META_DATA_TYPE = 96
	META_DATA_TYPE_META_DATA_TYPE_FACTION_BOSS          META_DATA_TYPE = 97
	META_DATA_TYPE_META_DATA_TYPE_RAID                  META_DATA_TYPE = 98
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_NODE           META_DATA_TYPE = 99
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_NODE_UPGRADE   META_DATA_TYPE = 100
	META_DATA_TYPE_META_DATA_TYPE_PVP_RANK              META_DATA_TYPE = 101
	META_DATA_TYPE_META_DATA_TYPE_SECRETFILE            META_DATA_TYPE = 102
	META_DATA_TYPE_META_DATA_TYPE_SECRETFILE_ATTRIBUTE  META_DATA_TYPE = 103
	META_DATA_TYPE_META_DATA_TYPE_SECRETFILE_MAP        META_DATA_TYPE = 104
	META_DATA_TYPE_META_DATA_TYPE_SECRETFILE_TECHNOLOGY META_DATA_TYPE = 105
	//META_DATA_TYPE_ZHANGLINGBUCHANG = 106; //战令补偿
	META_DATA_TYPE_META_DATA_TYPE_HOMELAND            META_DATA_TYPE = 107
	META_DATA_TYPE_META_DATA_TYPE_SEED                META_DATA_TYPE = 108
	META_DATA_TYPE_META_DATA_TYPE_FURNITURE           META_DATA_TYPE = 109
	META_DATA_TYPE_META_DATA_TYPE_HOMELAND_COORDINATE META_DATA_TYPE = 110
	META_DATA_TYPE_META_DATA_TYPE_ROULETTE            META_DATA_TYPE = 111
	META_DATA_TYPE_META_DATA_TYPE_ROOM                META_DATA_TYPE = 112
	META_DATA_TYPE_META_DATA_TYPE_LEVEL_ROOM_MAP      META_DATA_TYPE = 113
	META_DATA_TYPE_META_DATA_TYPE_ROOM_SUP            META_DATA_TYPE = 114
	META_DATA_TYPE_META_DATA_TYPE_SIN_RANK            META_DATA_TYPE = 115
	META_DATA_TYPE_META_DATA_TYPE_SCROLL_SUMMON       META_DATA_TYPE = 116
	META_DATA_TYPE_META_DATA_TYPE_GIFT_BOX            META_DATA_TYPE = 117
	META_DATA_TYPE_META_DATA_TYPE_ACC_RECHARGE        META_DATA_TYPE = 118
)

var META_DATA_TYPE_name = map[int32]string{
	0:   "META_DATA_TYPE_NULL",
	1:   "META_DATA_TYPE_SCROLL_UPGRADE",
	2:   "META_DATA_TYPE_SCROLL",
	3:   "META_DATA_TYPE_SCROLL_ATTRIBUTE",
	4:   "META_DATA_TYPE_SCENE",
	5:   "META_DATA_TYPE_QUEST",
	6:   "META_DATA_TYPE_PARTY",
	7:   "META_DATA_TYPE_REWARD",
	8:   "META_DATA_TYPE_RANK_LEVEL_ASYNC_MODE",
	9:   "META_DATA_TYPE_SKILL_UPGRADE",
	10:  "META_DATA_TYPE_UNIT",
	11:  "META_DATA_TYPE_UNIT_ATTR",
	12:  "META_DATA_TYPE_STORAGE_UPGRADE",
	13:  "META_DATA_TYPE_SHOP_ITEM",
	14:  "META_DATA_TYPE_SHOP",
	15:  "META_DATA_TYPE_SKILL_CHAIN",
	16:  "META_DATA_TYPE_SKILL",
	17:  "META_DATA_TYPE_ADVANCE_SKILL",
	18:  "META_DATA_TYPE_EQUIPMENT",
	19:  "META_DATA_TYPE_EQUIPMENT_SUIT",
	20:  "META_DATA_TYPE_EQUIPMENT_ENHANCE",
	21:  "META_DATA_TYPE_EQUIPMENT_ATTRIBUTE",
	22:  "META_DATA_TYPE_DROP_GROUP",
	23:  "META_DATA_TYPE_BUFF",
	24:  "META_DATA_TYPE_AVATAR",
	25:  "META_DATA_TYPE_LEVEL",
	26:  "META_DATA_TYPE_ILLEGALE_WROD",
	27:  "META_DATA_TYPE_MAIL",
	28:  "META_DATA_TYPE_LOCATION",
	29:  "META_DATA_TYPE_ITEM",
	30:  "META_DATA_TYPE_HERO_EXP",
	31:  "META_DATA_TYPE_EVENT",
	32:  "META_DATA_TYPE_HERO_UPGRADE",
	33:  "META_DATA_TYPE_HERO",
	34:  "META_DATA_TYPE_CONST",
	35:  "META_DATA_TYPE_SCROLL_SET",
	36:  "META_DATA_TYPE_MAP_DOOR",
	37:  "META_DATA_TYPE_DISTRIBUTION",
	38:  "META_DATA_TYPE_FRIEND_HAOGANDU",
	39:  "META_DATA_TYPE_RUNE",
	40:  "META_DATA_TYPE_RUNEATTRIBUTE",
	41:  "META_DATA_TYPE_RUNESLOT",
	42:  "META_DATA_TYPE_RUNESET",
	43:  "META_DATA_TYPE_RUNESETUPGRADE",
	44:  "META_DATA_TYPE_RANKING",
	45:  "META_DATA_TYPE_ACTIVITY",
	46:  "META_DATA_TYPE_UNLOCK",
	47:  "META_DATA_TYPE_LEVEL_SUP",
	48:  "META_DATA_TYPE_FOOD",
	49:  "META_DATA_TYPE_QUEST_SIDE",
	50:  "META_DATA_TYPE_SKIN",
	51:  "META_DATA_TYPE_SKINATTRIBUTE",
	52:  "META_DATA_TYPE_UNIT_AVATAR_SWITCH",
	54:  "META_DATA_TYPE_RECHARGE",
	55:  "META_DATA_TYPE_RMB_SHOP_ITEM",
	56:  "META_DATA_TYPE_RMB_SHOP",
	57:  "META_DATA_TYPE_SPECIFY_ITEM",
	58:  "META_DATA_TYPE_TIME_TRAVEL",
	59:  "META_DATA_TYPE_SKILL_REFINE",
	60:  "META_DATA_TYPE_SKILL_REFINE_UPGRADE",
	61:  "META_DATA_TYPE_SCROLL_REINFORCE",
	62:  "META_DATA_TYPE_ENDLESS_RANGE",
	63:  "META_DATA_TYPE_ENDLESS_BLESS",
	64:  "META_DATA_TYPE_OG_UPGRADE",
	65:  "META_DATA_TYPE_ENDLESS_BLESS_DROP",
	66:  "META_DATA_TYPE_ENDLESS_ATTRIBUTES",
	67:  "META_DATA_TYPE_ENDLESS_SHOP",
	68:  "META_DATA_TYPE_HEAD_FRAME",
	69:  "META_DATA_TYPE_HAND_BOOK_ENEMY",
	78:  "META_DATA_TYPE_LEVEL_LAYER",
	80:  "META_DATA_TYPE_ZUITI_REFINE",
	81:  "META_DATA_TYPE_ZUITI_REFINE_COST",
	82:  "META_DATA_TYPE_DEEP_SINNER_FIGHT",
	83:  "META_DATA_TYPE_LEVEL_CHALLENGE_QUEST",
	84:  "META_DATA_TYPE_LEVEL_CHALLENGE_EXTRA",
	85:  "META_DATA_TYPE_FACTION",
	86:  "META_DATA_TYPE_GUARD_UPGRADE",
	87:  "META_DATA_TYPE_GUARD",
	88:  "META_DATA_TYPE_FACTION_LEVEL",
	89:  "META_DATA_TYPE_FACTION_TECHNOLOGY",
	90:  "META_DATA_TYPE_FACTION_TECHNOLOGY_GROUP",
	91:  "META_DATA_TYPE_BATTLE_PASS",
	92:  "META_DATA_TYPE_BATTLE_PASS_REWARD",
	93:  "META_DATA_TYPE_FACTION_WAR",
	94:  "META_DATA_TYPE_FACTION_HEAD_FRAME",
	96:  "META_DATA_TYPE_STICKER",
	97:  "META_DATA_TYPE_FACTION_BOSS",
	98:  "META_DATA_TYPE_RAID",
	99:  "META_DATA_TYPE_SCROLL_NODE",
	100: "META_DATA_TYPE_SCROLL_NODE_UPGRADE",
	101: "META_DATA_TYPE_PVP_RANK",
	102: "META_DATA_TYPE_SECRETFILE",
	103: "META_DATA_TYPE_SECRETFILE_ATTRIBUTE",
	104: "META_DATA_TYPE_SECRETFILE_MAP",
	105: "META_DATA_TYPE_SECRETFILE_TECHNOLOGY",
	107: "META_DATA_TYPE_HOMELAND",
	108: "META_DATA_TYPE_SEED",
	109: "META_DATA_TYPE_FURNITURE",
	110: "META_DATA_TYPE_HOMELAND_COORDINATE",
	111: "META_DATA_TYPE_ROULETTE",
	112: "META_DATA_TYPE_ROOM",
	113: "META_DATA_TYPE_LEVEL_ROOM_MAP",
	114: "META_DATA_TYPE_ROOM_SUP",
	115: "META_DATA_TYPE_SIN_RANK",
	116: "META_DATA_TYPE_SCROLL_SUMMON",
	117: "META_DATA_TYPE_GIFT_BOX",
	118: "META_DATA_TYPE_ACC_RECHARGE",
}

var META_DATA_TYPE_value = map[string]int32{
	"META_DATA_TYPE_NULL":                     0,
	"META_DATA_TYPE_SCROLL_UPGRADE":           1,
	"META_DATA_TYPE_SCROLL":                   2,
	"META_DATA_TYPE_SCROLL_ATTRIBUTE":         3,
	"META_DATA_TYPE_SCENE":                    4,
	"META_DATA_TYPE_QUEST":                    5,
	"META_DATA_TYPE_PARTY":                    6,
	"META_DATA_TYPE_REWARD":                   7,
	"META_DATA_TYPE_RANK_LEVEL_ASYNC_MODE":    8,
	"META_DATA_TYPE_SKILL_UPGRADE":            9,
	"META_DATA_TYPE_UNIT":                     10,
	"META_DATA_TYPE_UNIT_ATTR":                11,
	"META_DATA_TYPE_STORAGE_UPGRADE":          12,
	"META_DATA_TYPE_SHOP_ITEM":                13,
	"META_DATA_TYPE_SHOP":                     14,
	"META_DATA_TYPE_SKILL_CHAIN":              15,
	"META_DATA_TYPE_SKILL":                    16,
	"META_DATA_TYPE_ADVANCE_SKILL":            17,
	"META_DATA_TYPE_EQUIPMENT":                18,
	"META_DATA_TYPE_EQUIPMENT_SUIT":           19,
	"META_DATA_TYPE_EQUIPMENT_ENHANCE":        20,
	"META_DATA_TYPE_EQUIPMENT_ATTRIBUTE":      21,
	"META_DATA_TYPE_DROP_GROUP":               22,
	"META_DATA_TYPE_BUFF":                     23,
	"META_DATA_TYPE_AVATAR":                   24,
	"META_DATA_TYPE_LEVEL":                    25,
	"META_DATA_TYPE_ILLEGALE_WROD":            26,
	"META_DATA_TYPE_MAIL":                     27,
	"META_DATA_TYPE_LOCATION":                 28,
	"META_DATA_TYPE_ITEM":                     29,
	"META_DATA_TYPE_HERO_EXP":                 30,
	"META_DATA_TYPE_EVENT":                    31,
	"META_DATA_TYPE_HERO_UPGRADE":             32,
	"META_DATA_TYPE_HERO":                     33,
	"META_DATA_TYPE_CONST":                    34,
	"META_DATA_TYPE_SCROLL_SET":               35,
	"META_DATA_TYPE_MAP_DOOR":                 36,
	"META_DATA_TYPE_DISTRIBUTION":             37,
	"META_DATA_TYPE_FRIEND_HAOGANDU":          38,
	"META_DATA_TYPE_RUNE":                     39,
	"META_DATA_TYPE_RUNEATTRIBUTE":            40,
	"META_DATA_TYPE_RUNESLOT":                 41,
	"META_DATA_TYPE_RUNESET":                  42,
	"META_DATA_TYPE_RUNESETUPGRADE":           43,
	"META_DATA_TYPE_RANKING":                  44,
	"META_DATA_TYPE_ACTIVITY":                 45,
	"META_DATA_TYPE_UNLOCK":                   46,
	"META_DATA_TYPE_LEVEL_SUP":                47,
	"META_DATA_TYPE_FOOD":                     48,
	"META_DATA_TYPE_QUEST_SIDE":               49,
	"META_DATA_TYPE_SKIN":                     50,
	"META_DATA_TYPE_SKINATTRIBUTE":            51,
	"META_DATA_TYPE_UNIT_AVATAR_SWITCH":       52,
	"META_DATA_TYPE_RECHARGE":                 54,
	"META_DATA_TYPE_RMB_SHOP_ITEM":            55,
	"META_DATA_TYPE_RMB_SHOP":                 56,
	"META_DATA_TYPE_SPECIFY_ITEM":             57,
	"META_DATA_TYPE_TIME_TRAVEL":              58,
	"META_DATA_TYPE_SKILL_REFINE":             59,
	"META_DATA_TYPE_SKILL_REFINE_UPGRADE":     60,
	"META_DATA_TYPE_SCROLL_REINFORCE":         61,
	"META_DATA_TYPE_ENDLESS_RANGE":            62,
	"META_DATA_TYPE_ENDLESS_BLESS":            63,
	"META_DATA_TYPE_OG_UPGRADE":               64,
	"META_DATA_TYPE_ENDLESS_BLESS_DROP":       65,
	"META_DATA_TYPE_ENDLESS_ATTRIBUTES":       66,
	"META_DATA_TYPE_ENDLESS_SHOP":             67,
	"META_DATA_TYPE_HEAD_FRAME":               68,
	"META_DATA_TYPE_HAND_BOOK_ENEMY":          69,
	"META_DATA_TYPE_LEVEL_LAYER":              78,
	"META_DATA_TYPE_ZUITI_REFINE":             80,
	"META_DATA_TYPE_ZUITI_REFINE_COST":        81,
	"META_DATA_TYPE_DEEP_SINNER_FIGHT":        82,
	"META_DATA_TYPE_LEVEL_CHALLENGE_QUEST":    83,
	"META_DATA_TYPE_LEVEL_CHALLENGE_EXTRA":    84,
	"META_DATA_TYPE_FACTION":                  85,
	"META_DATA_TYPE_GUARD_UPGRADE":            86,
	"META_DATA_TYPE_GUARD":                    87,
	"META_DATA_TYPE_FACTION_LEVEL":            88,
	"META_DATA_TYPE_FACTION_TECHNOLOGY":       89,
	"META_DATA_TYPE_FACTION_TECHNOLOGY_GROUP": 90,
	"META_DATA_TYPE_BATTLE_PASS":              91,
	"META_DATA_TYPE_BATTLE_PASS_REWARD":       92,
	"META_DATA_TYPE_FACTION_WAR":              93,
	"META_DATA_TYPE_FACTION_HEAD_FRAME":       94,
	"META_DATA_TYPE_STICKER":                  96,
	"META_DATA_TYPE_FACTION_BOSS":             97,
	"META_DATA_TYPE_RAID":                     98,
	"META_DATA_TYPE_SCROLL_NODE":              99,
	"META_DATA_TYPE_SCROLL_NODE_UPGRADE":      100,
	"META_DATA_TYPE_PVP_RANK":                 101,
	"META_DATA_TYPE_SECRETFILE":               102,
	"META_DATA_TYPE_SECRETFILE_ATTRIBUTE":     103,
	"META_DATA_TYPE_SECRETFILE_MAP":           104,
	"META_DATA_TYPE_SECRETFILE_TECHNOLOGY":    105,
	"META_DATA_TYPE_HOMELAND":                 107,
	"META_DATA_TYPE_SEED":                     108,
	"META_DATA_TYPE_FURNITURE":                109,
	"META_DATA_TYPE_HOMELAND_COORDINATE":      110,
	"META_DATA_TYPE_ROULETTE":                 111,
	"META_DATA_TYPE_ROOM":                     112,
	"META_DATA_TYPE_LEVEL_ROOM_MAP":           113,
	"META_DATA_TYPE_ROOM_SUP":                 114,
	"META_DATA_TYPE_SIN_RANK":                 115,
	"META_DATA_TYPE_SCROLL_SUMMON":            116,
	"META_DATA_TYPE_GIFT_BOX":                 117,
	"META_DATA_TYPE_ACC_RECHARGE":             118,
}

func (x META_DATA_TYPE) String() string {
	return proto.EnumName(META_DATA_TYPE_name, int32(x))
}

func (META_DATA_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{43}
}

//帮派声望列表
type CLAN_REPUTATION_TYPE int32

const (
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_NULL               CLAN_REPUTATION_TYPE = 0
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_MONEY              CLAN_REPUTATION_TYPE = 1
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_EXPERIENCE         CLAN_REPUTATION_TYPE = 2
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_FIGHTING_CAPACITY  CLAN_REPUTATION_TYPE = 3
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_SHILI              CLAN_REPUTATION_TYPE = 4
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_ARMY_NORMAL        CLAN_REPUTATION_TYPE = 5
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_ARMY_SEA           CLAN_REPUTATION_TYPE = 6
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_ARMY_LAND          CLAN_REPUTATION_TYPE = 7
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_ARMY_AIR           CLAN_REPUTATION_TYPE = 8
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_CONTRIBUTE_MONEY   CLAN_REPUTATION_TYPE = 9
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_CONTRIBUTE_FOOD    CLAN_REPUTATION_TYPE = 10
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_RESOURCE_SCORE     CLAN_REPUTATION_TYPE = 11
	CLAN_REPUTATION_TYPE_CLAN_REPUTATION_TYPE_EVENT_XIUZHUFANGYU CLAN_REPUTATION_TYPE = 12
)

var CLAN_REPUTATION_TYPE_name = map[int32]string{
	0:  "CLAN_REPUTATION_TYPE_NULL",
	1:  "CLAN_REPUTATION_TYPE_MONEY",
	2:  "CLAN_REPUTATION_TYPE_EXPERIENCE",
	3:  "CLAN_REPUTATION_TYPE_FIGHTING_CAPACITY",
	4:  "CLAN_REPUTATION_TYPE_SHILI",
	5:  "CLAN_REPUTATION_TYPE_ARMY_NORMAL",
	6:  "CLAN_REPUTATION_TYPE_ARMY_SEA",
	7:  "CLAN_REPUTATION_TYPE_ARMY_LAND",
	8:  "CLAN_REPUTATION_TYPE_ARMY_AIR",
	9:  "CLAN_REPUTATION_TYPE_CONTRIBUTE_MONEY",
	10: "CLAN_REPUTATION_TYPE_CONTRIBUTE_FOOD",
	11: "CLAN_REPUTATION_TYPE_RESOURCE_SCORE",
	12: "CLAN_REPUTATION_TYPE_EVENT_XIUZHUFANGYU",
}

var CLAN_REPUTATION_TYPE_value = map[string]int32{
	"CLAN_REPUTATION_TYPE_NULL":               0,
	"CLAN_REPUTATION_TYPE_MONEY":              1,
	"CLAN_REPUTATION_TYPE_EXPERIENCE":         2,
	"CLAN_REPUTATION_TYPE_FIGHTING_CAPACITY":  3,
	"CLAN_REPUTATION_TYPE_SHILI":              4,
	"CLAN_REPUTATION_TYPE_ARMY_NORMAL":        5,
	"CLAN_REPUTATION_TYPE_ARMY_SEA":           6,
	"CLAN_REPUTATION_TYPE_ARMY_LAND":          7,
	"CLAN_REPUTATION_TYPE_ARMY_AIR":           8,
	"CLAN_REPUTATION_TYPE_CONTRIBUTE_MONEY":   9,
	"CLAN_REPUTATION_TYPE_CONTRIBUTE_FOOD":    10,
	"CLAN_REPUTATION_TYPE_RESOURCE_SCORE":     11,
	"CLAN_REPUTATION_TYPE_EVENT_XIUZHUFANGYU": 12,
}

func (x CLAN_REPUTATION_TYPE) String() string {
	return proto.EnumName(CLAN_REPUTATION_TYPE_name, int32(x))
}

func (CLAN_REPUTATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{44}
}

//全服声望列表
type SERVER_REPUTATION_TYPE int32

const (
	SERVER_REPUTATION_TYPE_SERVER_REPUTATION_TYPE_NULL              SERVER_REPUTATION_TYPE = 0
	SERVER_REPUTATION_TYPE_SERVER_REPUTATION_TYPE_PARTY_STAR        SERVER_REPUTATION_TYPE = 1
	SERVER_REPUTATION_TYPE_SERVER_REPUTATION_TYPE_CLAN_BATTLE_ROUND SERVER_REPUTATION_TYPE = 2
	SERVER_REPUTATION_TYPE_SERVER_REPUTATION_TYPE_OPEN_SERVER_DAYS  SERVER_REPUTATION_TYPE = 3
	SERVER_REPUTATION_TYPE_SERVER_REPUTATION_TYPE_RECHARGE_COUNT    SERVER_REPUTATION_TYPE = 4
)

var SERVER_REPUTATION_TYPE_name = map[int32]string{
	0: "SERVER_REPUTATION_TYPE_NULL",
	1: "SERVER_REPUTATION_TYPE_PARTY_STAR",
	2: "SERVER_REPUTATION_TYPE_CLAN_BATTLE_ROUND",
	3: "SERVER_REPUTATION_TYPE_OPEN_SERVER_DAYS",
	4: "SERVER_REPUTATION_TYPE_RECHARGE_COUNT",
}

var SERVER_REPUTATION_TYPE_value = map[string]int32{
	"SERVER_REPUTATION_TYPE_NULL":              0,
	"SERVER_REPUTATION_TYPE_PARTY_STAR":        1,
	"SERVER_REPUTATION_TYPE_CLAN_BATTLE_ROUND": 2,
	"SERVER_REPUTATION_TYPE_OPEN_SERVER_DAYS":  3,
	"SERVER_REPUTATION_TYPE_RECHARGE_COUNT":    4,
}

func (x SERVER_REPUTATION_TYPE) String() string {
	return proto.EnumName(SERVER_REPUTATION_TYPE_name, int32(x))
}

func (SERVER_REPUTATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{45}
}

//包裹类型：必须按照顺序添加
type INVENTORY_TYPE int32

const (
	INVENTORY_TYPE_INVENTORY_TYPE_NULL                INVENTORY_TYPE = 0
	INVENTORY_TYPE_INVENTORY_TYPE_BACKPACKAGE         INVENTORY_TYPE = 1
	INVENTORY_TYPE_INVENTORY_TYPE_EQUIPMENT           INVENTORY_TYPE = 2
	INVENTORY_TYPE_INVENTORY_TYPE_SKIN                INVENTORY_TYPE = 3
	INVENTORY_TYPE_INVENTORY_TYPE_TEMPORARY           INVENTORY_TYPE = 4
	INVENTORY_TYPE_INVENTORY_TYPE_EVENT               INVENTORY_TYPE = 5
	INVENTORY_TYPE_INVENTORY_TYPE_SCROLL              INVENTORY_TYPE = 6
	INVENTORY_TYPE_INVENTORY_TYPE_RUNE                INVENTORY_TYPE = 7
	INVENTORY_TYPE_INVENTORY_TYPE_STORAGE_BACKPACKAGE INVENTORY_TYPE = 8
	INVENTORY_TYPE_INVENTORY_TYPE_STORAGE_EQUIPMENT   INVENTORY_TYPE = 9
	INVENTORY_TYPE_INVENTORY_TYPE_STORAGE_SCROLL      INVENTORY_TYPE = 10
	INVENTORY_TYPE_INVENTORY_TYPE_STORAGE_RUNE        INVENTORY_TYPE = 11
	INVENTORY_TYPE_INVENTORY_TYPE_FRAME               INVENTORY_TYPE = 12
	INVENTORY_TYPE_INVENTORY_TYPE_HUANTI              INVENTORY_TYPE = 13
	INVENTORY_TYPE_INVENTORY_TYPE_STICKER             INVENTORY_TYPE = 14
	INVENTORY_TYPE_INVENTORY_TYPE_SECRETFILE          INVENTORY_TYPE = 15
	INVENTORY_TYPE_INVENTORY_TYPE_FURNITURE           INVENTORY_TYPE = 16
	INVENTORY_TYPE_INVENTORY_TYPE_COUNT               INVENTORY_TYPE = 17
)

var INVENTORY_TYPE_name = map[int32]string{
	0:  "INVENTORY_TYPE_NULL",
	1:  "INVENTORY_TYPE_BACKPACKAGE",
	2:  "INVENTORY_TYPE_EQUIPMENT",
	3:  "INVENTORY_TYPE_SKIN",
	4:  "INVENTORY_TYPE_TEMPORARY",
	5:  "INVENTORY_TYPE_EVENT",
	6:  "INVENTORY_TYPE_SCROLL",
	7:  "INVENTORY_TYPE_RUNE",
	8:  "INVENTORY_TYPE_STORAGE_BACKPACKAGE",
	9:  "INVENTORY_TYPE_STORAGE_EQUIPMENT",
	10: "INVENTORY_TYPE_STORAGE_SCROLL",
	11: "INVENTORY_TYPE_STORAGE_RUNE",
	12: "INVENTORY_TYPE_FRAME",
	13: "INVENTORY_TYPE_HUANTI",
	14: "INVENTORY_TYPE_STICKER",
	15: "INVENTORY_TYPE_SECRETFILE",
	16: "INVENTORY_TYPE_FURNITURE",
	17: "INVENTORY_TYPE_COUNT",
}

var INVENTORY_TYPE_value = map[string]int32{
	"INVENTORY_TYPE_NULL":                0,
	"INVENTORY_TYPE_BACKPACKAGE":         1,
	"INVENTORY_TYPE_EQUIPMENT":           2,
	"INVENTORY_TYPE_SKIN":                3,
	"INVENTORY_TYPE_TEMPORARY":           4,
	"INVENTORY_TYPE_EVENT":               5,
	"INVENTORY_TYPE_SCROLL":              6,
	"INVENTORY_TYPE_RUNE":                7,
	"INVENTORY_TYPE_STORAGE_BACKPACKAGE": 8,
	"INVENTORY_TYPE_STORAGE_EQUIPMENT":   9,
	"INVENTORY_TYPE_STORAGE_SCROLL":      10,
	"INVENTORY_TYPE_STORAGE_RUNE":        11,
	"INVENTORY_TYPE_FRAME":               12,
	"INVENTORY_TYPE_HUANTI":              13,
	"INVENTORY_TYPE_STICKER":             14,
	"INVENTORY_TYPE_SECRETFILE":          15,
	"INVENTORY_TYPE_FURNITURE":           16,
	"INVENTORY_TYPE_COUNT":               17,
}

func (x INVENTORY_TYPE) String() string {
	return proto.EnumName(INVENTORY_TYPE_name, int32(x))
}

func (INVENTORY_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{46}
}

type STICKER_TYPE int32

const (
	STICKER_TYPE_STICKER_TYPE_EQUIP   STICKER_TYPE = 0
	STICKER_TYPE_STICKER_TYPE_START   STICKER_TYPE = 1
	STICKER_TYPE_STICKER_TYPE_DIED    STICKER_TYPE = 2
	STICKER_TYPE_STICKER_TYPE_VICTORY STICKER_TYPE = 3
)

var STICKER_TYPE_name = map[int32]string{
	0: "STICKER_TYPE_EQUIP",
	1: "STICKER_TYPE_START",
	2: "STICKER_TYPE_DIED",
	3: "STICKER_TYPE_VICTORY",
}

var STICKER_TYPE_value = map[string]int32{
	"STICKER_TYPE_EQUIP":   0,
	"STICKER_TYPE_START":   1,
	"STICKER_TYPE_DIED":    2,
	"STICKER_TYPE_VICTORY": 3,
}

func (x STICKER_TYPE) String() string {
	return proto.EnumName(STICKER_TYPE_name, int32(x))
}

func (STICKER_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{47}
}

type SYSTEM_MESSAGE_TYPE int32

const (
	SYSTEM_MESSAGE_TYPE_ENHANCE_EQUIPMENT SYSTEM_MESSAGE_TYPE = 0
	SYSTEM_MESSAGE_TYPE_ENHANCE_SCROLL    SYSTEM_MESSAGE_TYPE = 1
	SYSTEM_MESSAGE_TYPE_GET_EQUIPMENT     SYSTEM_MESSAGE_TYPE = 2
	SYSTEM_MESSAGE_TYPE_GET_GOLD_SCROLL   SYSTEM_MESSAGE_TYPE = 3
	SYSTEM_MESSAGE_TYPE_GET_ITEM          SYSTEM_MESSAGE_TYPE = 4
)

var SYSTEM_MESSAGE_TYPE_name = map[int32]string{
	0: "ENHANCE_EQUIPMENT",
	1: "ENHANCE_SCROLL",
	2: "GET_EQUIPMENT",
	3: "GET_GOLD_SCROLL",
	4: "GET_ITEM",
}

var SYSTEM_MESSAGE_TYPE_value = map[string]int32{
	"ENHANCE_EQUIPMENT": 0,
	"ENHANCE_SCROLL":    1,
	"GET_EQUIPMENT":     2,
	"GET_GOLD_SCROLL":   3,
	"GET_ITEM":          4,
}

func (x SYSTEM_MESSAGE_TYPE) String() string {
	return proto.EnumName(SYSTEM_MESSAGE_TYPE_name, int32(x))
}

func (SYSTEM_MESSAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{48}
}

type BATTLE_BI_TYPE int32

const (
	BATTLE_BI_TYPE_BATTLE_BI_NULL  BATTLE_BI_TYPE = 0
	BATTLE_BI_TYPE_ENTER_PVE       BATTLE_BI_TYPE = 1
	BATTLE_BI_TYPE_LEVEL_PVE       BATTLE_BI_TYPE = 2
	BATTLE_BI_TYPE_BATTLE_INSTANCE BATTLE_BI_TYPE = 3
	BATTLE_BI_TYPE_PVP_PLAYER_INFO BATTLE_BI_TYPE = 4
)

var BATTLE_BI_TYPE_name = map[int32]string{
	0: "BATTLE_BI_NULL",
	1: "ENTER_PVE",
	2: "LEVEL_PVE",
	3: "BATTLE_INSTANCE",
	4: "PVP_PLAYER_INFO",
}

var BATTLE_BI_TYPE_value = map[string]int32{
	"BATTLE_BI_NULL":  0,
	"ENTER_PVE":       1,
	"LEVEL_PVE":       2,
	"BATTLE_INSTANCE": 3,
	"PVP_PLAYER_INFO": 4,
}

func (x BATTLE_BI_TYPE) String() string {
	return proto.EnumName(BATTLE_BI_TYPE_name, int32(x))
}

func (BATTLE_BI_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{49}
}

type PartyType int32

const (
	PartyType_PartyType_None          PartyType = 0
	PartyType_PartyType_Normal        PartyType = 1
	PartyType_PartyType_FakeSin       PartyType = 2
	PartyType_PartyType_Danger        PartyType = 3
	PartyType_PartyType_Sin           PartyType = 4
	PartyType_PartyType_Black         PartyType = 5
	PartyType_PartyType_CorpsBattle   PartyType = 6
	PartyType_PartyType_BattleMonster PartyType = 7
)

var PartyType_name = map[int32]string{
	0: "PartyType_None",
	1: "PartyType_Normal",
	2: "PartyType_FakeSin",
	3: "PartyType_Danger",
	4: "PartyType_Sin",
	5: "PartyType_Black",
	6: "PartyType_CorpsBattle",
	7: "PartyType_BattleMonster",
}

var PartyType_value = map[string]int32{
	"PartyType_None":          0,
	"PartyType_Normal":        1,
	"PartyType_FakeSin":       2,
	"PartyType_Danger":        3,
	"PartyType_Sin":           4,
	"PartyType_Black":         5,
	"PartyType_CorpsBattle":   6,
	"PartyType_BattleMonster": 7,
}

func (x PartyType) String() string {
	return proto.EnumName(PartyType_name, int32(x))
}

func (PartyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{50}
}

type PartyLocation int32

const (
	PartyLocation_PartyLocation_None      PartyLocation = 0
	PartyLocation_PartyLocation_Trunk     PartyLocation = 1
	PartyLocation_PartyLocation_Branch    PartyLocation = 2
	PartyLocation_PartyLocation_Boss      PartyLocation = 3
	PartyLocation_PartyLocation_Prepare   PartyLocation = 4
	PartyLocation_PartyLocation_BlessShop PartyLocation = 5
	PartyLocation_PartyLocation_Black     PartyLocation = 6
)

var PartyLocation_name = map[int32]string{
	0: "PartyLocation_None",
	1: "PartyLocation_Trunk",
	2: "PartyLocation_Branch",
	3: "PartyLocation_Boss",
	4: "PartyLocation_Prepare",
	5: "PartyLocation_BlessShop",
	6: "PartyLocation_Black",
}

var PartyLocation_value = map[string]int32{
	"PartyLocation_None":      0,
	"PartyLocation_Trunk":     1,
	"PartyLocation_Branch":    2,
	"PartyLocation_Boss":      3,
	"PartyLocation_Prepare":   4,
	"PartyLocation_BlessShop": 5,
	"PartyLocation_Black":     6,
}

func (x PartyLocation) String() string {
	return proto.EnumName(PartyLocation_name, int32(x))
}

func (PartyLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{51}
}

type FUNCTION_UNLOCK int32

const (
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_NONE                       FUNCTION_UNLOCK = 0
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_ENHANCE               FUNCTION_UNLOCK = 1
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_ENHANCE             FUNCTION_UNLOCK = 2
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_REFINE                FUNCTION_UNLOCK = 3
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_REFINE              FUNCTION_UNLOCK = 4
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_STORE                 FUNCTION_UNLOCK = 5
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_STORE               FUNCTION_UNLOCK = 6
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_MARKET                FUNCTION_UNLOCK = 7
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_MARKET              FUNCTION_UNLOCK = 8
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_MINIMAP               FUNCTION_UNLOCK = 9
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_HANDBOOK              FUNCTION_UNLOCK = 10
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_HANDBOOK            FUNCTION_UNLOCK = 11
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_LIWULIN_ADDTIMES           FUNCTION_UNLOCK = 12
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SSR_ADDRATE                FUNCTION_UNLOCK = 13
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SCROLL              FUNCTION_UNLOCK = 14
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_JINGHUA_ZUITI              FUNCTION_UNLOCK = 15
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ZHENXIE_ZUITI              FUNCTION_UNLOCK = 16
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_RUNE                FUNCTION_UNLOCK = 17
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_RESET_RUNESLOT             FUNCTION_UNLOCK = 18
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_BATTLE_FIELD_EMERGENCY     FUNCTION_UNLOCK = 19
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_EVOLUTION_FORGE            FUNCTION_UNLOCK = 20
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_EXCHANGE_FORGE             FUNCTION_UNLOCK = 21
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_BLUEPRINT_FORGE            FUNCTION_UNLOCK = 22
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_FORGE               FUNCTION_UNLOCK = 23
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_RUNE                  FUNCTION_UNLOCK = 24
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_FOOD                FUNCTION_UNLOCK = 25
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_UR_SCROLL                  FUNCTION_UNLOCK = 26
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_GRAND_MASTER_FORGE  FUNCTION_UNLOCK = 27
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SKILL_REFINE        FUNCTION_UNLOCK = 28
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_ZAHUO_SHOP          FUNCTION_UNLOCK = 29
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SCROLL_STRONG       FUNCTION_UNLOCK = 30
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_ZUITI_REFINE        FUNCTION_UNLOCK = 31
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SINNER_DEEP_BATTLE  FUNCTION_UNLOCK = 32
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_HUANTI              FUNCTION_UNLOCK = 33
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_CORPS               FUNCTION_UNLOCK = 34
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_ACTIVITY            FUNCTION_UNLOCK = 35
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_RMBSHOP             FUNCTION_UNLOCK = 36
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_GEZILONG            FUNCTION_UNLOCK = 37
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SHOW_COMBO_BTN      FUNCTION_UNLOCK = 38
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SCROLL_UPGRADE      FUNCTION_UNLOCK = 39
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_EXIT_LEVEL          FUNCTION_UNLOCK = 40
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SKINSHOP            FUNCTION_UNLOCK = 41
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_YUANBAOSHOP         FUNCTION_UNLOCK = 42
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_LONGYINSHOP         FUNCTION_UNLOCK = 43
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_FISTRECHARGEBOX       FUNCTION_UNLOCK = 44
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_SKINSHOP              FUNCTION_UNLOCK = 45
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_YUANBAOSHOP           FUNCTION_UNLOCK = 46
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_LONGYINSHOP           FUNCTION_UNLOCK = 47
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_SHOW_SCROLL_SUMMON_VIDEO   FUNCTION_UNLOCK = 48
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_EMPTYSKILLSCROLL    FUNCTION_UNLOCK = 49
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP0 FUNCTION_UNLOCK = 50
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP1 FUNCTION_UNLOCK = 51
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP3 FUNCTION_UNLOCK = 52
	FUNCTION_UNLOCK_FUNCTION_UNLOCK_ENHANCE_MAX_LEVEL_ADD      FUNCTION_UNLOCK = 1000
)

var FUNCTION_UNLOCK_name = map[int32]string{
	0:    "FUNCTION_UNLOCK_NONE",
	1:    "FUNCTION_UNLOCK_SHOW_ENHANCE",
	2:    "FUNCTION_UNLOCK_ENABLE_ENHANCE",
	3:    "FUNCTION_UNLOCK_SHOW_REFINE",
	4:    "FUNCTION_UNLOCK_ENABLE_REFINE",
	5:    "FUNCTION_UNLOCK_SHOW_STORE",
	6:    "FUNCTION_UNLOCK_ENABLE_STORE",
	7:    "FUNCTION_UNLOCK_SHOW_MARKET",
	8:    "FUNCTION_UNLOCK_ENABLE_MARKET",
	9:    "FUNCTION_UNLOCK_SHOW_MINIMAP",
	10:   "FUNCTION_UNLOCK_SHOW_HANDBOOK",
	11:   "FUNCTION_UNLOCK_ENABLE_HANDBOOK",
	12:   "FUNCTION_UNLOCK_LIWULIN_ADDTIMES",
	13:   "FUNCTION_UNLOCK_SSR_ADDRATE",
	14:   "FUNCTION_UNLOCK_ENABLE_SCROLL",
	15:   "FUNCTION_UNLOCK_JINGHUA_ZUITI",
	16:   "FUNCTION_UNLOCK_ZHENXIE_ZUITI",
	17:   "FUNCTION_UNLOCK_ENABLE_RUNE",
	18:   "FUNCTION_UNLOCK_RESET_RUNESLOT",
	19:   "FUNCTION_UNLOCK_BATTLE_FIELD_EMERGENCY",
	20:   "FUNCTION_UNLOCK_EVOLUTION_FORGE",
	21:   "FUNCTION_UNLOCK_EXCHANGE_FORGE",
	22:   "FUNCTION_UNLOCK_BLUEPRINT_FORGE",
	23:   "FUNCTION_UNLOCK_ENABLE_FORGE",
	24:   "FUNCTION_UNLOCK_SHOW_RUNE",
	25:   "FUNCTION_UNLOCK_ENABLE_FOOD",
	26:   "FUNCTION_UNLOCK_UR_SCROLL",
	27:   "FUNCTION_UNLOCK_ENABLE_GRAND_MASTER_FORGE",
	28:   "FUNCTION_UNLOCK_ENABLE_SKILL_REFINE",
	29:   "FUNCTION_UNLOCK_ENABLE_ZAHUO_SHOP",
	30:   "FUNCTION_UNLOCK_ENABLE_SCROLL_STRONG",
	31:   "FUNCTION_UNLOCK_ENABLE_ZUITI_REFINE",
	32:   "FUNCTION_UNLOCK_ENABLE_SINNER_DEEP_BATTLE",
	33:   "FUNCTION_UNLOCK_ENABLE_HUANTI",
	34:   "FUNCTION_UNLOCK_ENABLE_CORPS",
	35:   "FUNCTION_UNLOCK_ENABLE_ACTIVITY",
	36:   "FUNCTION_UNLOCK_ENABLE_RMBSHOP",
	37:   "FUNCTION_UNLOCK_ENABLE_GEZILONG",
	38:   "FUNCTION_UNLOCK_ENABLE_SHOW_COMBO_BTN",
	39:   "FUNCTION_UNLOCK_ENABLE_SCROLL_UPGRADE",
	40:   "FUNCTION_UNLOCK_ENABLE_EXIT_LEVEL",
	41:   "FUNCTION_UNLOCK_ENABLE_SKINSHOP",
	42:   "FUNCTION_UNLOCK_ENABLE_YUANBAOSHOP",
	43:   "FUNCTION_UNLOCK_ENABLE_LONGYINSHOP",
	44:   "FUNCTION_UNLOCK_SHOW_FISTRECHARGEBOX",
	45:   "FUNCTION_UNLOCK_SHOW_SKINSHOP",
	46:   "FUNCTION_UNLOCK_SHOW_YUANBAOSHOP",
	47:   "FUNCTION_UNLOCK_SHOW_LONGYINSHOP",
	48:   "FUNCTION_UNLOCK_SHOW_SCROLL_SUMMON_VIDEO",
	49:   "FUNCTION_UNLOCK_ENABLE_EMPTYSKILLSCROLL",
	50:   "FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP0",
	51:   "FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP1",
	52:   "FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP3",
	1000: "FUNCTION_UNLOCK_ENHANCE_MAX_LEVEL_ADD",
}

var FUNCTION_UNLOCK_value = map[string]int32{
	"FUNCTION_UNLOCK_NONE":                       0,
	"FUNCTION_UNLOCK_SHOW_ENHANCE":               1,
	"FUNCTION_UNLOCK_ENABLE_ENHANCE":             2,
	"FUNCTION_UNLOCK_SHOW_REFINE":                3,
	"FUNCTION_UNLOCK_ENABLE_REFINE":              4,
	"FUNCTION_UNLOCK_SHOW_STORE":                 5,
	"FUNCTION_UNLOCK_ENABLE_STORE":               6,
	"FUNCTION_UNLOCK_SHOW_MARKET":                7,
	"FUNCTION_UNLOCK_ENABLE_MARKET":              8,
	"FUNCTION_UNLOCK_SHOW_MINIMAP":               9,
	"FUNCTION_UNLOCK_SHOW_HANDBOOK":              10,
	"FUNCTION_UNLOCK_ENABLE_HANDBOOK":            11,
	"FUNCTION_UNLOCK_LIWULIN_ADDTIMES":           12,
	"FUNCTION_UNLOCK_SSR_ADDRATE":                13,
	"FUNCTION_UNLOCK_ENABLE_SCROLL":              14,
	"FUNCTION_UNLOCK_JINGHUA_ZUITI":              15,
	"FUNCTION_UNLOCK_ZHENXIE_ZUITI":              16,
	"FUNCTION_UNLOCK_ENABLE_RUNE":                17,
	"FUNCTION_UNLOCK_RESET_RUNESLOT":             18,
	"FUNCTION_UNLOCK_BATTLE_FIELD_EMERGENCY":     19,
	"FUNCTION_UNLOCK_EVOLUTION_FORGE":            20,
	"FUNCTION_UNLOCK_EXCHANGE_FORGE":             21,
	"FUNCTION_UNLOCK_BLUEPRINT_FORGE":            22,
	"FUNCTION_UNLOCK_ENABLE_FORGE":               23,
	"FUNCTION_UNLOCK_SHOW_RUNE":                  24,
	"FUNCTION_UNLOCK_ENABLE_FOOD":                25,
	"FUNCTION_UNLOCK_UR_SCROLL":                  26,
	"FUNCTION_UNLOCK_ENABLE_GRAND_MASTER_FORGE":  27,
	"FUNCTION_UNLOCK_ENABLE_SKILL_REFINE":        28,
	"FUNCTION_UNLOCK_ENABLE_ZAHUO_SHOP":          29,
	"FUNCTION_UNLOCK_ENABLE_SCROLL_STRONG":       30,
	"FUNCTION_UNLOCK_ENABLE_ZUITI_REFINE":        31,
	"FUNCTION_UNLOCK_ENABLE_SINNER_DEEP_BATTLE":  32,
	"FUNCTION_UNLOCK_ENABLE_HUANTI":              33,
	"FUNCTION_UNLOCK_ENABLE_CORPS":               34,
	"FUNCTION_UNLOCK_ENABLE_ACTIVITY":            35,
	"FUNCTION_UNLOCK_ENABLE_RMBSHOP":             36,
	"FUNCTION_UNLOCK_ENABLE_GEZILONG":            37,
	"FUNCTION_UNLOCK_ENABLE_SHOW_COMBO_BTN":      38,
	"FUNCTION_UNLOCK_ENABLE_SCROLL_UPGRADE":      39,
	"FUNCTION_UNLOCK_ENABLE_EXIT_LEVEL":          40,
	"FUNCTION_UNLOCK_ENABLE_SKINSHOP":            41,
	"FUNCTION_UNLOCK_ENABLE_YUANBAOSHOP":         42,
	"FUNCTION_UNLOCK_ENABLE_LONGYINSHOP":         43,
	"FUNCTION_UNLOCK_SHOW_FISTRECHARGEBOX":       44,
	"FUNCTION_UNLOCK_SHOW_SKINSHOP":              45,
	"FUNCTION_UNLOCK_SHOW_YUANBAOSHOP":           46,
	"FUNCTION_UNLOCK_SHOW_LONGYINSHOP":           47,
	"FUNCTION_UNLOCK_SHOW_SCROLL_SUMMON_VIDEO":   48,
	"FUNCTION_UNLOCK_ENABLE_EMPTYSKILLSCROLL":    49,
	"FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP0": 50,
	"FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP1": 51,
	"FUNCTION_UNLOCK_ENABLE_SCROLL_TICKET_SHOP3": 52,
	"FUNCTION_UNLOCK_ENHANCE_MAX_LEVEL_ADD":      1000,
}

func (x FUNCTION_UNLOCK) String() string {
	return proto.EnumName(FUNCTION_UNLOCK_name, int32(x))
}

func (FUNCTION_UNLOCK) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{52}
}

type LocationType int32

const (
	LocationType_LocationType_None           LocationType = 0
	LocationType_LocationType_Normal         LocationType = 1
	LocationType_LocationType_Crack          LocationType = 2
	LocationType_LocationType_DayNight       LocationType = 3
	LocationType_LocationType_Tower          LocationType = 4
	LocationType_LocationType_Team           LocationType = 5
	LocationType_LocationType_TeamAsync      LocationType = 6
	LocationType_LocationType_Boss           LocationType = 7
	LocationType_LocationType_SubLocation    LocationType = 8
	LocationType_LocationType_City           LocationType = 9
	LocationType_LocationType_Test           LocationType = 10
	LocationType_LocationType_Branch         LocationType = 11
	LocationType_LocationType_Training       LocationType = 12
	LocationType_LocationType_ActivitySingle LocationType = 13
	LocationType_LocationType_MultiSin       LocationType = 14
	LocationType_LocationType_ActivityMulti  LocationType = 15
	LocationType_LocationType_WJJJSingle     LocationType = 16
	LocationType_LocationType_WJJJMulti      LocationType = 17
	LocationType_LocationType_TrainingRank   LocationType = 18
	LocationType_LocationType_CorpsBattle    LocationType = 19
	LocationType_LocationType_ElevenBoss     LocationType = 20
	LocationType_LocationType_CorpsBoss      LocationType = 21
	LocationType_LocationType_RealPVP        LocationType = 22
	LocationType_LocationType_SecretFile     LocationType = 23
	LocationType_LocationType_Home           LocationType = 24
)

var LocationType_name = map[int32]string{
	0:  "LocationType_None",
	1:  "LocationType_Normal",
	2:  "LocationType_Crack",
	3:  "LocationType_DayNight",
	4:  "LocationType_Tower",
	5:  "LocationType_Team",
	6:  "LocationType_TeamAsync",
	7:  "LocationType_Boss",
	8:  "LocationType_SubLocation",
	9:  "LocationType_City",
	10: "LocationType_Test",
	11: "LocationType_Branch",
	12: "LocationType_Training",
	13: "LocationType_ActivitySingle",
	14: "LocationType_MultiSin",
	15: "LocationType_ActivityMulti",
	16: "LocationType_WJJJSingle",
	17: "LocationType_WJJJMulti",
	18: "LocationType_TrainingRank",
	19: "LocationType_CorpsBattle",
	20: "LocationType_ElevenBoss",
	21: "LocationType_CorpsBoss",
	22: "LocationType_RealPVP",
	23: "LocationType_SecretFile",
	24: "LocationType_Home",
}

var LocationType_value = map[string]int32{
	"LocationType_None":           0,
	"LocationType_Normal":         1,
	"LocationType_Crack":          2,
	"LocationType_DayNight":       3,
	"LocationType_Tower":          4,
	"LocationType_Team":           5,
	"LocationType_TeamAsync":      6,
	"LocationType_Boss":           7,
	"LocationType_SubLocation":    8,
	"LocationType_City":           9,
	"LocationType_Test":           10,
	"LocationType_Branch":         11,
	"LocationType_Training":       12,
	"LocationType_ActivitySingle": 13,
	"LocationType_MultiSin":       14,
	"LocationType_ActivityMulti":  15,
	"LocationType_WJJJSingle":     16,
	"LocationType_WJJJMulti":      17,
	"LocationType_TrainingRank":   18,
	"LocationType_CorpsBattle":    19,
	"LocationType_ElevenBoss":     20,
	"LocationType_CorpsBoss":      21,
	"LocationType_RealPVP":        22,
	"LocationType_SecretFile":     23,
	"LocationType_Home":           24,
}

func (x LocationType) String() string {
	return proto.EnumName(LocationType_name, int32(x))
}

func (LocationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{53}
}

type PartyGenType int32

const (
	PartyGenType_PartyGenType_None       PartyGenType = 0
	PartyGenType_PartyGenType_FirstPass  PartyGenType = 1
	PartyGenType_PartyGenType_Quest      PartyGenType = 2
	PartyGenType_PartyGenType_Reputation PartyGenType = 3
	PartyGenType_PartyGenType_Random     PartyGenType = 4
)

var PartyGenType_name = map[int32]string{
	0: "PartyGenType_None",
	1: "PartyGenType_FirstPass",
	2: "PartyGenType_Quest",
	3: "PartyGenType_Reputation",
	4: "PartyGenType_Random",
}

var PartyGenType_value = map[string]int32{
	"PartyGenType_None":       0,
	"PartyGenType_FirstPass":  1,
	"PartyGenType_Quest":      2,
	"PartyGenType_Reputation": 3,
	"PartyGenType_Random":     4,
}

func (x PartyGenType) String() string {
	return proto.EnumName(PartyGenType_name, int32(x))
}

func (PartyGenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{54}
}

type SkillEnum int32

const (
	SkillEnum_SkillEnum_None         SkillEnum = 0
	SkillEnum_SkillEnum_Jump         SkillEnum = 1
	SkillEnum_SkillEnum_Dash         SkillEnum = 2
	SkillEnum_SkillEnum_Block        SkillEnum = 3
	SkillEnum_SkillEnum_Attack       SkillEnum = 4
	SkillEnum_SkillEnum_Skill        SkillEnum = 5
	SkillEnum_SkillEnum_PassiveSkill SkillEnum = 6
	SkillEnum_SkillEnum_USkill       SkillEnum = 7
	SkillEnum_SkillEnum_AwakenSkill  SkillEnum = 8
)

var SkillEnum_name = map[int32]string{
	0: "SkillEnum_None",
	1: "SkillEnum_Jump",
	2: "SkillEnum_Dash",
	3: "SkillEnum_Block",
	4: "SkillEnum_Attack",
	5: "SkillEnum_Skill",
	6: "SkillEnum_PassiveSkill",
	7: "SkillEnum_USkill",
	8: "SkillEnum_AwakenSkill",
}

var SkillEnum_value = map[string]int32{
	"SkillEnum_None":         0,
	"SkillEnum_Jump":         1,
	"SkillEnum_Dash":         2,
	"SkillEnum_Block":        3,
	"SkillEnum_Attack":       4,
	"SkillEnum_Skill":        5,
	"SkillEnum_PassiveSkill": 6,
	"SkillEnum_USkill":       7,
	"SkillEnum_AwakenSkill":  8,
}

func (x SkillEnum) String() string {
	return proto.EnumName(SkillEnum_name, int32(x))
}

func (SkillEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{55}
}

type NPCEventType int32

const (
	NPCEventType_NPCEventType_None               NPCEventType = 0
	NPCEventType_NPCEventType_Chat               NPCEventType = 1
	NPCEventType_NPCEventType_Battle             NPCEventType = 2
	NPCEventType_NPCEventType_Shop               NPCEventType = 3
	NPCEventType_NPCEventType_Equipment          NPCEventType = 4
	NPCEventType_NPCEventType_Skill              NPCEventType = 5
	NPCEventType_NPCEventType_Map                NPCEventType = 6
	NPCEventType_NPCEventType_Character          NPCEventType = 7
	NPCEventType_NPCEventType_TrainRoom          NPCEventType = 8
	NPCEventType_NPCEventType_AssignItem         NPCEventType = 9
	NPCEventType_NPCEventType_SubmiteItem        NPCEventType = 10
	NPCEventType_NPCEventType_Quest              NPCEventType = 11
	NPCEventType_NPCEventType_Mail               NPCEventType = 12
	NPCEventType_NPCEventType_Handbook           NPCEventType = 13
	NPCEventType_NPCEventType_Friend             NPCEventType = 14
	NPCEventType_NPCEventType_CrimeRank          NPCEventType = 15
	NPCEventType_NPCEventType_TeamCreate         NPCEventType = 16
	NPCEventType_NPCEventType_TeamJoin           NPCEventType = 17
	NPCEventType_NPCEventType_TeamExit           NPCEventType = 18
	NPCEventType_NPCEventType_TeamDismiss        NPCEventType = 19
	NPCEventType_NPCEventType_TeamStart          NPCEventType = 20
	NPCEventType_NPCEventType_TeamInvite         NPCEventType = 21
	NPCEventType_NPCEventType_TeamAttention      NPCEventType = 22
	NPCEventType_NPCEventType_TeamWaitCaptain    NPCEventType = 23
	NPCEventType_NPCEventType_Storage            NPCEventType = 24
	NPCEventType_NPCEventType_liwulinmojing      NPCEventType = 25
	NPCEventType_NPCEventType_zhenmojing         NPCEventType = 26
	NPCEventType_NPCEventType_Genre              NPCEventType = 27
	NPCEventType_NPCEventType_GameDialog         NPCEventType = 28
	NPCEventType_NPCEventType_DestroyNpc         NPCEventType = 29
	NPCEventType_NPCEventType_Event              NPCEventType = 30
	NPCEventType_NPCEventType_EnterLevel         NPCEventType = 31
	NPCEventType_NPCEventType_Food               NPCEventType = 32
	NPCEventType_NPCEventType_PlayerGuide        NPCEventType = 33
	NPCEventType_NPCEventType_StoryVideo         NPCEventType = 34
	NPCEventType_NPCEventType_ItemManager        NPCEventType = 35
	NPCEventType_NPCEventType_AvatarSwitch       NPCEventType = 36
	NPCEventType_NPCEventType_Forge              NPCEventType = 37
	NPCEventType_NPCEventType_PlayAnim           NPCEventType = 38
	NPCEventType_NPCEventType_ReturnMainCity     NPCEventType = 39
	NPCEventType_NPCEventType_RandomChat         NPCEventType = 40
	NPCEventType_NPCEventType_RandomFoodChat     NPCEventType = 41
	NPCEventType_NPCEventType_Fashion            NPCEventType = 42
	NPCEventType_NPCEventType_ExchangeItem       NPCEventType = 43
	NPCEventType_NPCEventType_Activity           NPCEventType = 44
	NPCEventType_NPCEventType_Recharge           NPCEventType = 45
	NPCEventType_NPCEventType_ActivityLevel      NPCEventType = 46
	NPCEventType_NPCEventType_EndlessLevel       NPCEventType = 47
	NPCEventType_NPCEventType_Leaderboard        NPCEventType = 48
	NPCEventType_NPCEventType_XukongBless        NPCEventType = 49
	NPCEventType_NPCEventType_EndlessShop        NPCEventType = 50
	NPCEventType_NPCEventType_EndlessLevelUpShop NPCEventType = 51
	NPCEventType_NPCEventType_OpenUI             NPCEventType = 52
	NPCEventType_NPCEventType_NewBattlePass      NPCEventType = 53
	NPCEventType_NPCEventType_BattleElevenCourt  NPCEventType = 54
	NPCEventType_NPCEventType_PlayVideo          NPCEventType = 55
	NPCEventType_NPCEventType_ElementSkin        NPCEventType = 56
	NPCEventType_NPCEventType_Plant              NPCEventType = 57
	NPCEventType_NPCEventType_Guide              NPCEventType = 58
	NPCEventType_NPCEventType_TimeLimitActivity  NPCEventType = 59
)

var NPCEventType_name = map[int32]string{
	0:  "NPCEventType_None",
	1:  "NPCEventType_Chat",
	2:  "NPCEventType_Battle",
	3:  "NPCEventType_Shop",
	4:  "NPCEventType_Equipment",
	5:  "NPCEventType_Skill",
	6:  "NPCEventType_Map",
	7:  "NPCEventType_Character",
	8:  "NPCEventType_TrainRoom",
	9:  "NPCEventType_AssignItem",
	10: "NPCEventType_SubmiteItem",
	11: "NPCEventType_Quest",
	12: "NPCEventType_Mail",
	13: "NPCEventType_Handbook",
	14: "NPCEventType_Friend",
	15: "NPCEventType_CrimeRank",
	16: "NPCEventType_TeamCreate",
	17: "NPCEventType_TeamJoin",
	18: "NPCEventType_TeamExit",
	19: "NPCEventType_TeamDismiss",
	20: "NPCEventType_TeamStart",
	21: "NPCEventType_TeamInvite",
	22: "NPCEventType_TeamAttention",
	23: "NPCEventType_TeamWaitCaptain",
	24: "NPCEventType_Storage",
	25: "NPCEventType_liwulinmojing",
	26: "NPCEventType_zhenmojing",
	27: "NPCEventType_Genre",
	28: "NPCEventType_GameDialog",
	29: "NPCEventType_DestroyNpc",
	30: "NPCEventType_Event",
	31: "NPCEventType_EnterLevel",
	32: "NPCEventType_Food",
	33: "NPCEventType_PlayerGuide",
	34: "NPCEventType_StoryVideo",
	35: "NPCEventType_ItemManager",
	36: "NPCEventType_AvatarSwitch",
	37: "NPCEventType_Forge",
	38: "NPCEventType_PlayAnim",
	39: "NPCEventType_ReturnMainCity",
	40: "NPCEventType_RandomChat",
	41: "NPCEventType_RandomFoodChat",
	42: "NPCEventType_Fashion",
	43: "NPCEventType_ExchangeItem",
	44: "NPCEventType_Activity",
	45: "NPCEventType_Recharge",
	46: "NPCEventType_ActivityLevel",
	47: "NPCEventType_EndlessLevel",
	48: "NPCEventType_Leaderboard",
	49: "NPCEventType_XukongBless",
	50: "NPCEventType_EndlessShop",
	51: "NPCEventType_EndlessLevelUpShop",
	52: "NPCEventType_OpenUI",
	53: "NPCEventType_NewBattlePass",
	54: "NPCEventType_BattleElevenCourt",
	55: "NPCEventType_PlayVideo",
	56: "NPCEventType_ElementSkin",
	57: "NPCEventType_Plant",
	58: "NPCEventType_Guide",
	59: "NPCEventType_TimeLimitActivity",
}

var NPCEventType_value = map[string]int32{
	"NPCEventType_None":               0,
	"NPCEventType_Chat":               1,
	"NPCEventType_Battle":             2,
	"NPCEventType_Shop":               3,
	"NPCEventType_Equipment":          4,
	"NPCEventType_Skill":              5,
	"NPCEventType_Map":                6,
	"NPCEventType_Character":          7,
	"NPCEventType_TrainRoom":          8,
	"NPCEventType_AssignItem":         9,
	"NPCEventType_SubmiteItem":        10,
	"NPCEventType_Quest":              11,
	"NPCEventType_Mail":               12,
	"NPCEventType_Handbook":           13,
	"NPCEventType_Friend":             14,
	"NPCEventType_CrimeRank":          15,
	"NPCEventType_TeamCreate":         16,
	"NPCEventType_TeamJoin":           17,
	"NPCEventType_TeamExit":           18,
	"NPCEventType_TeamDismiss":        19,
	"NPCEventType_TeamStart":          20,
	"NPCEventType_TeamInvite":         21,
	"NPCEventType_TeamAttention":      22,
	"NPCEventType_TeamWaitCaptain":    23,
	"NPCEventType_Storage":            24,
	"NPCEventType_liwulinmojing":      25,
	"NPCEventType_zhenmojing":         26,
	"NPCEventType_Genre":              27,
	"NPCEventType_GameDialog":         28,
	"NPCEventType_DestroyNpc":         29,
	"NPCEventType_Event":              30,
	"NPCEventType_EnterLevel":         31,
	"NPCEventType_Food":               32,
	"NPCEventType_PlayerGuide":        33,
	"NPCEventType_StoryVideo":         34,
	"NPCEventType_ItemManager":        35,
	"NPCEventType_AvatarSwitch":       36,
	"NPCEventType_Forge":              37,
	"NPCEventType_PlayAnim":           38,
	"NPCEventType_ReturnMainCity":     39,
	"NPCEventType_RandomChat":         40,
	"NPCEventType_RandomFoodChat":     41,
	"NPCEventType_Fashion":            42,
	"NPCEventType_ExchangeItem":       43,
	"NPCEventType_Activity":           44,
	"NPCEventType_Recharge":           45,
	"NPCEventType_ActivityLevel":      46,
	"NPCEventType_EndlessLevel":       47,
	"NPCEventType_Leaderboard":        48,
	"NPCEventType_XukongBless":        49,
	"NPCEventType_EndlessShop":        50,
	"NPCEventType_EndlessLevelUpShop": 51,
	"NPCEventType_OpenUI":             52,
	"NPCEventType_NewBattlePass":      53,
	"NPCEventType_BattleElevenCourt":  54,
	"NPCEventType_PlayVideo":          55,
	"NPCEventType_ElementSkin":        56,
	"NPCEventType_Plant":              57,
	"NPCEventType_Guide":              58,
	"NPCEventType_TimeLimitActivity":  59,
}

func (x NPCEventType) String() string {
	return proto.EnumName(NPCEventType_name, int32(x))
}

func (NPCEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{56}
}

type RechargeType int32

const (
	RechargeType_RechargeType_Normal  RechargeType = 0
	RechargeType_RechargeType_Yuanbao RechargeType = 1
)

var RechargeType_name = map[int32]string{
	0: "RechargeType_Normal",
	1: "RechargeType_Yuanbao",
}

var RechargeType_value = map[string]int32{
	"RechargeType_Normal":  0,
	"RechargeType_Yuanbao": 1,
}

func (x RechargeType) String() string {
	return proto.EnumName(RechargeType_name, int32(x))
}

func (RechargeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{57}
}

//商店类型
type ShopDisplayType int32

const (
	ShopDisplayType_ShopDisplayType_Normal        ShopDisplayType = 0
	ShopDisplayType_ShopDisplayType_Trade         ShopDisplayType = 1
	ShopDisplayType_ShopDisplayType_TradeXukong   ShopDisplayType = 2
	ShopDisplayType_ShopDisplayType_ScrollSummon  ShopDisplayType = 3
	ShopDisplayType_ShopDisplayType_Forge         ShopDisplayType = 4
	ShopDisplayType_ShopDisplayType_Crime         ShopDisplayType = 5
	ShopDisplayType_ShopDisplayType_Corp          ShopDisplayType = 6
	ShopDisplayType_ShopDisplayType_Count         ShopDisplayType = 50
	ShopDisplayType_ShopDisplayType_FirstCharge   ShopDisplayType = 51
	ShopDisplayType_ShopDisplayType_YuanBao       ShopDisplayType = 52
	ShopDisplayType_ShopDisplayType_MySkin        ShopDisplayType = 53
	ShopDisplayType_ShopDisplayType_OrtherSkin    ShopDisplayType = 54
	ShopDisplayType_ShopDisplayType_DayBundle     ShopDisplayType = 55
	ShopDisplayType_ShopDisplayType_WeeklyBundle  ShopDisplayType = 56
	ShopDisplayType_ShopDisplayType_MonthlyBundle ShopDisplayType = 57
	ShopDisplayType_ShopDisplayType_LifeBundle    ShopDisplayType = 58
	ShopDisplayType_ShopDisplayType_BattlePass    ShopDisplayType = 59
	ShopDisplayType_ShopDisplayType_MonthCard     ShopDisplayType = 60
	ShopDisplayType_ShopDisplayType_NewBattlePass ShopDisplayType = 61
	ShopDisplayType_ShopDisplayType_Sticker       ShopDisplayType = 62
	ShopDisplayType_ShopDisplayType_LongYin       ShopDisplayType = 63
	ShopDisplayType_ShopDisplayType_TimeLimit     ShopDisplayType = 64
)

var ShopDisplayType_name = map[int32]string{
	0:  "ShopDisplayType_Normal",
	1:  "ShopDisplayType_Trade",
	2:  "ShopDisplayType_TradeXukong",
	3:  "ShopDisplayType_ScrollSummon",
	4:  "ShopDisplayType_Forge",
	5:  "ShopDisplayType_Crime",
	6:  "ShopDisplayType_Corp",
	50: "ShopDisplayType_Count",
	51: "ShopDisplayType_FirstCharge",
	52: "ShopDisplayType_YuanBao",
	53: "ShopDisplayType_MySkin",
	54: "ShopDisplayType_OrtherSkin",
	55: "ShopDisplayType_DayBundle",
	56: "ShopDisplayType_WeeklyBundle",
	57: "ShopDisplayType_MonthlyBundle",
	58: "ShopDisplayType_LifeBundle",
	59: "ShopDisplayType_BattlePass",
	60: "ShopDisplayType_MonthCard",
	61: "ShopDisplayType_NewBattlePass",
	62: "ShopDisplayType_Sticker",
	63: "ShopDisplayType_LongYin",
	64: "ShopDisplayType_TimeLimit",
}

var ShopDisplayType_value = map[string]int32{
	"ShopDisplayType_Normal":        0,
	"ShopDisplayType_Trade":         1,
	"ShopDisplayType_TradeXukong":   2,
	"ShopDisplayType_ScrollSummon":  3,
	"ShopDisplayType_Forge":         4,
	"ShopDisplayType_Crime":         5,
	"ShopDisplayType_Corp":          6,
	"ShopDisplayType_Count":         50,
	"ShopDisplayType_FirstCharge":   51,
	"ShopDisplayType_YuanBao":       52,
	"ShopDisplayType_MySkin":        53,
	"ShopDisplayType_OrtherSkin":    54,
	"ShopDisplayType_DayBundle":     55,
	"ShopDisplayType_WeeklyBundle":  56,
	"ShopDisplayType_MonthlyBundle": 57,
	"ShopDisplayType_LifeBundle":    58,
	"ShopDisplayType_BattlePass":    59,
	"ShopDisplayType_MonthCard":     60,
	"ShopDisplayType_NewBattlePass": 61,
	"ShopDisplayType_Sticker":       62,
	"ShopDisplayType_LongYin":       63,
	"ShopDisplayType_TimeLimit":     64,
}

func (x ShopDisplayType) String() string {
	return proto.EnumName(ShopDisplayType_name, int32(x))
}

func (ShopDisplayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{58}
}

type DeliverType int32

const (
	DeliverType_DeliverType_Normal DeliverType = 0
	DeliverType_DeliverType_Mail   DeliverType = 1
)

var DeliverType_name = map[int32]string{
	0: "DeliverType_Normal",
	1: "DeliverType_Mail",
}

var DeliverType_value = map[string]int32{
	"DeliverType_Normal": 0,
	"DeliverType_Mail":   1,
}

func (x DeliverType) String() string {
	return proto.EnumName(DeliverType_name, int32(x))
}

func (DeliverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{59}
}

type ScrollFunctionType int32

const (
	ScrollFunctionType_ScrollFunctionType_None          ScrollFunctionType = 0
	ScrollFunctionType_ScrollFunctionType_ChenSiZhe     ScrollFunctionType = 1
	ScrollFunctionType_ScrollFunctionType_ZhiYiZhe      ScrollFunctionType = 2
	ScrollFunctionType_ScrollFunctionType_ChuanSuoZhe   ScrollFunctionType = 3
	ScrollFunctionType_ScrollFunctionType_JingYanBB     ScrollFunctionType = 4
	ScrollFunctionType_ScrollFunctionType_JueJiBB       ScrollFunctionType = 5
	ScrollFunctionType_ScrollFunctionType_HuantiJueJiBB ScrollFunctionType = 6
)

var ScrollFunctionType_name = map[int32]string{
	0: "ScrollFunctionType_None",
	1: "ScrollFunctionType_ChenSiZhe",
	2: "ScrollFunctionType_ZhiYiZhe",
	3: "ScrollFunctionType_ChuanSuoZhe",
	4: "ScrollFunctionType_JingYanBB",
	5: "ScrollFunctionType_JueJiBB",
	6: "ScrollFunctionType_HuantiJueJiBB",
}

var ScrollFunctionType_value = map[string]int32{
	"ScrollFunctionType_None":          0,
	"ScrollFunctionType_ChenSiZhe":     1,
	"ScrollFunctionType_ZhiYiZhe":      2,
	"ScrollFunctionType_ChuanSuoZhe":   3,
	"ScrollFunctionType_JingYanBB":     4,
	"ScrollFunctionType_JueJiBB":       5,
	"ScrollFunctionType_HuantiJueJiBB": 6,
}

func (x ScrollFunctionType) String() string {
	return proto.EnumName(ScrollFunctionType_name, int32(x))
}

func (ScrollFunctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{60}
}

type PlayMode1 int32

const (
	PlayMode1_PlayMode1_None PlayMode1 = 0
	PlayMode1_PlayMode1_Free PlayMode1 = 1
	PlayMode1_PlayMode1_Cost PlayMode1 = 2
)

var PlayMode1_name = map[int32]string{
	0: "PlayMode1_None",
	1: "PlayMode1_Free",
	2: "PlayMode1_Cost",
}

var PlayMode1_value = map[string]int32{
	"PlayMode1_None": 0,
	"PlayMode1_Free": 1,
	"PlayMode1_Cost": 2,
}

func (x PlayMode1) String() string {
	return proto.EnumName(PlayMode1_name, int32(x))
}

func (PlayMode1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{61}
}

type EndlessShopType int32

const (
	EndlessShopType_EndlessShopType_None    EndlessShopType = 0
	EndlessShopType_EndlessShopType_New     EndlessShopType = 1
	EndlessShopType_EndlessShopType_Upgrade EndlessShopType = 2
)

var EndlessShopType_name = map[int32]string{
	0: "EndlessShopType_None",
	1: "EndlessShopType_New",
	2: "EndlessShopType_Upgrade",
}

var EndlessShopType_value = map[string]int32{
	"EndlessShopType_None":    0,
	"EndlessShopType_New":     1,
	"EndlessShopType_Upgrade": 2,
}

func (x EndlessShopType) String() string {
	return proto.EnumName(EndlessShopType_name, int32(x))
}

func (EndlessShopType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{62}
}

//渠道
type ChannelType int32

const (
	ChannelType_ChannelType_All     ChannelType = 0
	ChannelType_ChannelType_Ios     ChannelType = 1
	ChannelType_ChannelType_Android ChannelType = 2
	ChannelType_ChannelType_Huawei  ChannelType = 3
	ChannelType_ChannelType_Bzhan   ChannelType = 4
	ChannelType_ChannelType_Other   ChannelType = 5
)

var ChannelType_name = map[int32]string{
	0: "ChannelType_All",
	1: "ChannelType_Ios",
	2: "ChannelType_Android",
	3: "ChannelType_Huawei",
	4: "ChannelType_Bzhan",
	5: "ChannelType_Other",
}

var ChannelType_value = map[string]int32{
	"ChannelType_All":     0,
	"ChannelType_Ios":     1,
	"ChannelType_Android": 2,
	"ChannelType_Huawei":  3,
	"ChannelType_Bzhan":   4,
	"ChannelType_Other":   5,
}

func (x ChannelType) String() string {
	return proto.EnumName(ChannelType_name, int32(x))
}

func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{63}
}

type LevelChallengeType int32

const (
	LevelChallengeType_LevelChallengeType_NULL                     LevelChallengeType = 0
	LevelChallengeType_LevelChallengeType_EquipEquipments          LevelChallengeType = 101
	LevelChallengeType_LevelChallengeType_NotEquipEquipments       LevelChallengeType = 102
	LevelChallengeType_LevelChallengeType_EqpQualityEqpments       LevelChallengeType = 103
	LevelChallengeType_LevelChallengeType_NotEqpQualityEqpments    LevelChallengeType = 104
	LevelChallengeType_LevelChallengeType_NotEqpSuitEqpments       LevelChallengeType = 105
	LevelChallengeType_LevelChallengeType_MainScoll_EquipScolls    LevelChallengeType = 106
	LevelChallengeType_LevelChallengeType_MainScoll_NotEquipScolls LevelChallengeType = 107
	LevelChallengeType_LevelChallengeType_AllScroll_NotEquipScolls LevelChallengeType = 108
	LevelChallengeType_LevelChallengeType_SingleModel              LevelChallengeType = 109
	LevelChallengeType_LevelChallengeType_ManuallySelect           LevelChallengeType = 200
	LevelChallengeType_LevelChallengeType_PassTimeLimit            LevelChallengeType = 201
	LevelChallengeType_LevelChallengeType_Finish_Count             LevelChallengeType = 999
)

var LevelChallengeType_name = map[int32]string{
	0:   "LevelChallengeType_NULL",
	101: "LevelChallengeType_EquipEquipments",
	102: "LevelChallengeType_NotEquipEquipments",
	103: "LevelChallengeType_EqpQualityEqpments",
	104: "LevelChallengeType_NotEqpQualityEqpments",
	105: "LevelChallengeType_NotEqpSuitEqpments",
	106: "LevelChallengeType_MainScoll_EquipScolls",
	107: "LevelChallengeType_MainScoll_NotEquipScolls",
	108: "LevelChallengeType_AllScroll_NotEquipScolls",
	109: "LevelChallengeType_SingleModel",
	200: "LevelChallengeType_ManuallySelect",
	201: "LevelChallengeType_PassTimeLimit",
	999: "LevelChallengeType_Finish_Count",
}

var LevelChallengeType_value = map[string]int32{
	"LevelChallengeType_NULL":                     0,
	"LevelChallengeType_EquipEquipments":          101,
	"LevelChallengeType_NotEquipEquipments":       102,
	"LevelChallengeType_EqpQualityEqpments":       103,
	"LevelChallengeType_NotEqpQualityEqpments":    104,
	"LevelChallengeType_NotEqpSuitEqpments":       105,
	"LevelChallengeType_MainScoll_EquipScolls":    106,
	"LevelChallengeType_MainScoll_NotEquipScolls": 107,
	"LevelChallengeType_AllScroll_NotEquipScolls": 108,
	"LevelChallengeType_SingleModel":              109,
	"LevelChallengeType_ManuallySelect":           200,
	"LevelChallengeType_PassTimeLimit":            201,
	"LevelChallengeType_Finish_Count":             999,
}

func (x LevelChallengeType) String() string {
	return proto.EnumName(LevelChallengeType_name, int32(x))
}

func (LevelChallengeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{64}
}

type BlessNumType int32

const (
	BlessNumType_Bless_None    BlessNumType = 0
	BlessNumType_AddTotalLevel BlessNumType = 1
)

var BlessNumType_name = map[int32]string{
	0: "Bless_None",
	1: "AddTotalLevel",
}

var BlessNumType_value = map[string]int32{
	"Bless_None":    0,
	"AddTotalLevel": 1,
}

func (x BlessNumType) String() string {
	return proto.EnumName(BlessNumType_name, int32(x))
}

func (BlessNumType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{65}
}

//活动类型
type FunType int32

const (
	FunType_FunType_Null               FunType = 0
	FunType_FunType_GoldApple          FunType = 1
	FunType_FunType_MobaoHuafu         FunType = 2
	FunType_FunType_ChannelAppointment FunType = 3
	FunType_FunType_HistoryTestAchive  FunType = 4
	FunType_FunType_ShopItemReset      FunType = 5
	FunType_FunType_ZhaoHui            FunType = 6
	FunType_FunType_NewBattlePass      FunType = 9
	FunType_FunType_AccLoginDays       FunType = 10
	FunType_FunType_MultiDrop          FunType = 11
	FunType_FunType_NewPlayerMultiDrop FunType = 12
	FunType_FunType_ZhaoHuiMultiDrop   FunType = 13
	FunType_FunType_PVPSeason          FunType = 14
	FunType_FunType_AccRecharge        FunType = 15
)

var FunType_name = map[int32]string{
	0:  "FunType_Null",
	1:  "FunType_GoldApple",
	2:  "FunType_MobaoHuafu",
	3:  "FunType_ChannelAppointment",
	4:  "FunType_HistoryTestAchive",
	5:  "FunType_ShopItemReset",
	6:  "FunType_ZhaoHui",
	9:  "FunType_NewBattlePass",
	10: "FunType_AccLoginDays",
	11: "FunType_MultiDrop",
	12: "FunType_NewPlayerMultiDrop",
	13: "FunType_ZhaoHuiMultiDrop",
	14: "FunType_PVPSeason",
	15: "FunType_AccRecharge",
}

var FunType_value = map[string]int32{
	"FunType_Null":               0,
	"FunType_GoldApple":          1,
	"FunType_MobaoHuafu":         2,
	"FunType_ChannelAppointment": 3,
	"FunType_HistoryTestAchive":  4,
	"FunType_ShopItemReset":      5,
	"FunType_ZhaoHui":            6,
	"FunType_NewBattlePass":      9,
	"FunType_AccLoginDays":       10,
	"FunType_MultiDrop":          11,
	"FunType_NewPlayerMultiDrop": 12,
	"FunType_ZhaoHuiMultiDrop":   13,
	"FunType_PVPSeason":          14,
	"FunType_AccRecharge":        15,
}

func (x FunType) String() string {
	return proto.EnumName(FunType_name, int32(x))
}

func (FunType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{66}
}

//掉落类型
type DropExtendType int32

const (
	DropExtendType_DropExtendType_Null            DropExtendType = 0
	DropExtendType_DropExtendType_ShopItem        DropExtendType = 1
	DropExtendType_DropExtendType_Scroll          DropExtendType = 2
	DropExtendType_DropExtendType_Equipment       DropExtendType = 3
	DropExtendType_DropExtendType_Mail            DropExtendType = 4
	DropExtendType_DropExtendType_CreateRole      DropExtendType = 5
	DropExtendType_DropExtendType_DropSave        DropExtendType = 6
	DropExtendType_DropExtendType_ShopItemReset   DropExtendType = 7
	DropExtendType_DropExtendType_ZhaoHui         DropExtendType = 8
	DropExtendType_DropExtendType_NewBattlePass   DropExtendType = 9
	DropExtendType_DropExtendType_GlobalChallenge DropExtendType = 10
)

var DropExtendType_name = map[int32]string{
	0:  "DropExtendType_Null",
	1:  "DropExtendType_ShopItem",
	2:  "DropExtendType_Scroll",
	3:  "DropExtendType_Equipment",
	4:  "DropExtendType_Mail",
	5:  "DropExtendType_CreateRole",
	6:  "DropExtendType_DropSave",
	7:  "DropExtendType_ShopItemReset",
	8:  "DropExtendType_ZhaoHui",
	9:  "DropExtendType_NewBattlePass",
	10: "DropExtendType_GlobalChallenge",
}

var DropExtendType_value = map[string]int32{
	"DropExtendType_Null":            0,
	"DropExtendType_ShopItem":        1,
	"DropExtendType_Scroll":          2,
	"DropExtendType_Equipment":       3,
	"DropExtendType_Mail":            4,
	"DropExtendType_CreateRole":      5,
	"DropExtendType_DropSave":        6,
	"DropExtendType_ShopItemReset":   7,
	"DropExtendType_ZhaoHui":         8,
	"DropExtendType_NewBattlePass":   9,
	"DropExtendType_GlobalChallenge": 10,
}

func (x DropExtendType) String() string {
	return proto.EnumName(DropExtendType_name, int32(x))
}

func (DropExtendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{67}
}

type SkinSelectType int32

const (
	SkinSelectType_SkinSelectType_Null  SkinSelectType = 0
	SkinSelectType_SkinSelectType_Equip SkinSelectType = 1
	SkinSelectType_SkinSelectType_Stack SkinSelectType = 2
)

var SkinSelectType_name = map[int32]string{
	0: "SkinSelectType_Null",
	1: "SkinSelectType_Equip",
	2: "SkinSelectType_Stack",
}

var SkinSelectType_value = map[string]int32{
	"SkinSelectType_Null":  0,
	"SkinSelectType_Equip": 1,
	"SkinSelectType_Stack": 2,
}

func (x SkinSelectType) String() string {
	return proto.EnumName(SkinSelectType_name, int32(x))
}

func (SkinSelectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{68}
}

type CorpsMemberType int32

const (
	CorpsMemberType_CorpsMemberType_Mem          CorpsMemberType = 0
	CorpsMemberType_CorpsMemberType_ZhangLao     CorpsMemberType = 1
	CorpsMemberType_CorpsMemberType_ViceHuiZhang CorpsMemberType = 2
	CorpsMemberType_CorpsMemberType_HuiZhang     CorpsMemberType = 3
)

var CorpsMemberType_name = map[int32]string{
	0: "CorpsMemberType_Mem",
	1: "CorpsMemberType_ZhangLao",
	2: "CorpsMemberType_ViceHuiZhang",
	3: "CorpsMemberType_HuiZhang",
}

var CorpsMemberType_value = map[string]int32{
	"CorpsMemberType_Mem":          0,
	"CorpsMemberType_ZhangLao":     1,
	"CorpsMemberType_ViceHuiZhang": 2,
	"CorpsMemberType_HuiZhang":     3,
}

func (x CorpsMemberType) String() string {
	return proto.EnumName(CorpsMemberType_name, int32(x))
}

func (CorpsMemberType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{69}
}

type CORPS_REPU_TYPE int32

const (
	CORPS_REPU_TYPE_CORPS_REPU_TYPE_NULL       CORPS_REPU_TYPE = 0
	CORPS_REPU_TYPE_CORPS_REPU_TYPE_EXP        CORPS_REPU_TYPE = 1
	CORPS_REPU_TYPE_CORPS_REPU_TYPE_INVITE     CORPS_REPU_TYPE = 2
	CORPS_REPU_TYPE_CORPS_REPU_TYPE_CONTRI     CORPS_REPU_TYPE = 3
	CORPS_REPU_TYPE_CORPS_REPU_TYPE_TECH_POINT CORPS_REPU_TYPE = 115
)

var CORPS_REPU_TYPE_name = map[int32]string{
	0:   "CORPS_REPU_TYPE_NULL",
	1:   "CORPS_REPU_TYPE_EXP",
	2:   "CORPS_REPU_TYPE_INVITE",
	3:   "CORPS_REPU_TYPE_CONTRI",
	115: "CORPS_REPU_TYPE_TECH_POINT",
}

var CORPS_REPU_TYPE_value = map[string]int32{
	"CORPS_REPU_TYPE_NULL":       0,
	"CORPS_REPU_TYPE_EXP":        1,
	"CORPS_REPU_TYPE_INVITE":     2,
	"CORPS_REPU_TYPE_CONTRI":     3,
	"CORPS_REPU_TYPE_TECH_POINT": 115,
}

func (x CORPS_REPU_TYPE) String() string {
	return proto.EnumName(CORPS_REPU_TYPE_name, int32(x))
}

func (CORPS_REPU_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{70}
}

type HuantiAssistOperType int32

const (
	HuantiAssistOperType_HuantiOperType_Null   HuantiAssistOperType = 0
	HuantiAssistOperType_HuantiOperType_Set    HuantiAssistOperType = 1
	HuantiAssistOperType_HuantiOperType_Cancle HuantiAssistOperType = 2
)

var HuantiAssistOperType_name = map[int32]string{
	0: "HuantiOperType_Null",
	1: "HuantiOperType_Set",
	2: "HuantiOperType_Cancle",
}

var HuantiAssistOperType_value = map[string]int32{
	"HuantiOperType_Null":   0,
	"HuantiOperType_Set":    1,
	"HuantiOperType_Cancle": 2,
}

func (x HuantiAssistOperType) String() string {
	return proto.EnumName(HuantiAssistOperType_name, int32(x))
}

func (HuantiAssistOperType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{71}
}

type QuestGroup int32

const (
	QuestGroup_QuestGroup_None            QuestGroup = 0
	QuestGroup_QuestGroup_Daily           QuestGroup = 1
	QuestGroup_QuestGroup_GrowthPassLevel QuestGroup = 2
	QuestGroup_QuestGroup_GrowthTraining  QuestGroup = 3
	QuestGroup_QuestGroup_Side            QuestGroup = 4
	QuestGroup_QuestGroup_Switch          QuestGroup = 5
	QuestGroup_QuestGroup_GrowthTech      QuestGroup = 6
	QuestGroup_QuestGroup_Activity        QuestGroup = 7
	QuestGroup_QuestGroup_BattlePass      QuestGroup = 8
	QuestGroup_QuestGroup_Chest           QuestGroup = 9
	QuestGroup_QuestGroup_HandBook        QuestGroup = 10
	QuestGroup_QuestGroup_BPDaily         QuestGroup = 11
	QuestGroup_QuestGroup_BPWeek          QuestGroup = 12
	QuestGroup_QuestGroup_BPTheme         QuestGroup = 13
)

var QuestGroup_name = map[int32]string{
	0:  "QuestGroup_None",
	1:  "QuestGroup_Daily",
	2:  "QuestGroup_GrowthPassLevel",
	3:  "QuestGroup_GrowthTraining",
	4:  "QuestGroup_Side",
	5:  "QuestGroup_Switch",
	6:  "QuestGroup_GrowthTech",
	7:  "QuestGroup_Activity",
	8:  "QuestGroup_BattlePass",
	9:  "QuestGroup_Chest",
	10: "QuestGroup_HandBook",
	11: "QuestGroup_BPDaily",
	12: "QuestGroup_BPWeek",
	13: "QuestGroup_BPTheme",
}

var QuestGroup_value = map[string]int32{
	"QuestGroup_None":            0,
	"QuestGroup_Daily":           1,
	"QuestGroup_GrowthPassLevel": 2,
	"QuestGroup_GrowthTraining":  3,
	"QuestGroup_Side":            4,
	"QuestGroup_Switch":          5,
	"QuestGroup_GrowthTech":      6,
	"QuestGroup_Activity":        7,
	"QuestGroup_BattlePass":      8,
	"QuestGroup_Chest":           9,
	"QuestGroup_HandBook":        10,
	"QuestGroup_BPDaily":         11,
	"QuestGroup_BPWeek":          12,
	"QuestGroup_BPTheme":         13,
}

func (x QuestGroup) String() string {
	return proto.EnumName(QuestGroup_name, int32(x))
}

func (QuestGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{72}
}

type PVPStatus int32

const (
	PVPStatus_PVPStatus_NULL       PVPStatus = 0
	PVPStatus_PVPStatus_LEVEL_UP   PVPStatus = 1
	PVPStatus_PVPStatus_LEVEL_DOWN PVPStatus = 2
)

var PVPStatus_name = map[int32]string{
	0: "PVPStatus_NULL",
	1: "PVPStatus_LEVEL_UP",
	2: "PVPStatus_LEVEL_DOWN",
}

var PVPStatus_value = map[string]int32{
	"PVPStatus_NULL":       0,
	"PVPStatus_LEVEL_UP":   1,
	"PVPStatus_LEVEL_DOWN": 2,
}

func (x PVPStatus) String() string {
	return proto.EnumName(PVPStatus_name, int32(x))
}

func (PVPStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{73}
}

type PVPLJCurrencyStatus int32

const (
	PVPLJCurrencyStatus_PVPLJCS_NULL     PVPLJCurrencyStatus = 0
	PVPLJCurrencyStatus_PVPLJCS_CRITICAL PVPLJCurrencyStatus = 1
	PVPLJCurrencyStatus_PVPLJCS_LIMIT    PVPLJCurrencyStatus = 2
)

var PVPLJCurrencyStatus_name = map[int32]string{
	0: "PVPLJCS_NULL",
	1: "PVPLJCS_CRITICAL",
	2: "PVPLJCS_LIMIT",
}

var PVPLJCurrencyStatus_value = map[string]int32{
	"PVPLJCS_NULL":     0,
	"PVPLJCS_CRITICAL": 1,
	"PVPLJCS_LIMIT":    2,
}

func (x PVPLJCurrencyStatus) String() string {
	return proto.EnumName(PVPLJCurrencyStatus_name, int32(x))
}

func (PVPLJCurrencyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{74}
}

type PVPFightType int32

const (
	PVPFightType_PVPFightType_NULL       PVPFightType = 0
	PVPFightType_PVPFightType_LEVEL_UP   PVPFightType = 1
	PVPFightType_PVPFightType_LEVEL_DOWN PVPFightType = 2
)

var PVPFightType_name = map[int32]string{
	0: "PVPFightType_NULL",
	1: "PVPFightType_LEVEL_UP",
	2: "PVPFightType_LEVEL_DOWN",
}

var PVPFightType_value = map[string]int32{
	"PVPFightType_NULL":       0,
	"PVPFightType_LEVEL_UP":   1,
	"PVPFightType_LEVEL_DOWN": 2,
}

func (x PVPFightType) String() string {
	return proto.EnumName(PVPFightType_name, int32(x))
}

func (PVPFightType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{75}
}

type ACTIVITY_STATE int32

const (
	ACTIVITY_STATE_ACTIVITY_STATE_NULL          ACTIVITY_STATE = 0
	ACTIVITY_STATE_ACTIVITY_STATE_CLOSE         ACTIVITY_STATE = 1
	ACTIVITY_STATE_ACTIVITY_STATE_OPEN          ACTIVITY_STATE = 2
	ACTIVITY_STATE_ACTIVITY_STATE_COMMAND_CLOSE ACTIVITY_STATE = 3
	ACTIVITY_STATE_ACTIVITY_STATE_COMMAND_OPEN  ACTIVITY_STATE = 4
)

var ACTIVITY_STATE_name = map[int32]string{
	0: "ACTIVITY_STATE_NULL",
	1: "ACTIVITY_STATE_CLOSE",
	2: "ACTIVITY_STATE_OPEN",
	3: "ACTIVITY_STATE_COMMAND_CLOSE",
	4: "ACTIVITY_STATE_COMMAND_OPEN",
}

var ACTIVITY_STATE_value = map[string]int32{
	"ACTIVITY_STATE_NULL":          0,
	"ACTIVITY_STATE_CLOSE":         1,
	"ACTIVITY_STATE_OPEN":          2,
	"ACTIVITY_STATE_COMMAND_CLOSE": 3,
	"ACTIVITY_STATE_COMMAND_OPEN":  4,
}

func (x ACTIVITY_STATE) String() string {
	return proto.EnumName(ACTIVITY_STATE_name, int32(x))
}

func (ACTIVITY_STATE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{76}
}

//每周或者每月、每年的活动可通过时间段的活动进行套用
//
//比如，限时奖励，可配置好几个相同的成就和活动，只是时间不一样
//
//活动类型
type ACTIVITY_TYPE int32

const (
	ACTIVITY_TYPE_ACTIVITY_CYCLE_TYPE_CUSTOM          ACTIVITY_TYPE = 0
	ACTIVITY_TYPE_ACTIVITY_CYCLE_TYPE_CYCLE           ACTIVITY_TYPE = 1
	ACTIVITY_TYPE_ACTIVITY_CYCLE_TYPE_DURATION        ACTIVITY_TYPE = 2
	ACTIVITY_TYPE_ACTIVITY_CYCLE_TYPE_WEEK            ACTIVITY_TYPE = 3
	ACTIVITY_TYPE_ACTIVITY_CYCLE_TYPE_WITH_OPENSERVER ACTIVITY_TYPE = 4
	ACTIVITY_TYPE_ACTIVITY_CYCLE_TYPE_DAILY           ACTIVITY_TYPE = 5
)

var ACTIVITY_TYPE_name = map[int32]string{
	0: "ACTIVITY_CYCLE_TYPE_CUSTOM",
	1: "ACTIVITY_CYCLE_TYPE_CYCLE",
	2: "ACTIVITY_CYCLE_TYPE_DURATION",
	3: "ACTIVITY_CYCLE_TYPE_WEEK",
	4: "ACTIVITY_CYCLE_TYPE_WITH_OPENSERVER",
	5: "ACTIVITY_CYCLE_TYPE_DAILY",
}

var ACTIVITY_TYPE_value = map[string]int32{
	"ACTIVITY_CYCLE_TYPE_CUSTOM":          0,
	"ACTIVITY_CYCLE_TYPE_CYCLE":           1,
	"ACTIVITY_CYCLE_TYPE_DURATION":        2,
	"ACTIVITY_CYCLE_TYPE_WEEK":            3,
	"ACTIVITY_CYCLE_TYPE_WITH_OPENSERVER": 4,
	"ACTIVITY_CYCLE_TYPE_DAILY":           5,
}

func (x ACTIVITY_TYPE) String() string {
	return proto.EnumName(ACTIVITY_TYPE_name, int32(x))
}

func (ACTIVITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{77}
}

type NodeType int32

const (
	NodeType_NodeType_None   NodeType = 0
	NodeType_NodeType_Normal NodeType = 1
	NodeType_NodeType_Skilld NodeType = 2
)

var NodeType_name = map[int32]string{
	0: "NodeType_None",
	1: "NodeType_Normal",
	2: "NodeType_Skilld",
}

var NodeType_value = map[string]int32{
	"NodeType_None":   0,
	"NodeType_Normal": 1,
	"NodeType_Skilld": 2,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{78}
}

type CropsOperType int32

const (
	CropsOperType_CropsOper_None           CropsOperType = 0
	CropsOperType_CropsOper_SowSeedS       CropsOperType = 1
	CropsOperType_CropsOper_WateringCrops  CropsOperType = 2
	CropsOperType_CropsOper_FertilizeField CropsOperType = 3
	CropsOperType_CropsOper_HarvestCrops   CropsOperType = 4
)

var CropsOperType_name = map[int32]string{
	0: "CropsOper_None",
	1: "CropsOper_SowSeedS",
	2: "CropsOper_WateringCrops",
	3: "CropsOper_FertilizeField",
	4: "CropsOper_HarvestCrops",
}

var CropsOperType_value = map[string]int32{
	"CropsOper_None":           0,
	"CropsOper_SowSeedS":       1,
	"CropsOper_WateringCrops":  2,
	"CropsOper_FertilizeField": 3,
	"CropsOper_HarvestCrops":   4,
}

func (x CropsOperType) String() string {
	return proto.EnumName(CropsOperType_name, int32(x))
}

func (CropsOperType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{79}
}

type FurnitureOperType int32

const (
	FurnitureOperType_FurnitureOper_None        FurnitureOperType = 0
	FurnitureOperType_FurnitureOper_SaveLayOut  FurnitureOperType = 1
	FurnitureOperType_FurnitureOper_ClearLayOut FurnitureOperType = 2
	FurnitureOperType_FurnitureOper_Set         FurnitureOperType = 3
	FurnitureOperType_FurnitureOper_Remove      FurnitureOperType = 4
	FurnitureOperType_FurnitureOper_Move        FurnitureOperType = 5
)

var FurnitureOperType_name = map[int32]string{
	0: "FurnitureOper_None",
	1: "FurnitureOper_SaveLayOut",
	2: "FurnitureOper_ClearLayOut",
	3: "FurnitureOper_Set",
	4: "FurnitureOper_Remove",
	5: "FurnitureOper_Move",
}

var FurnitureOperType_value = map[string]int32{
	"FurnitureOper_None":        0,
	"FurnitureOper_SaveLayOut":  1,
	"FurnitureOper_ClearLayOut": 2,
	"FurnitureOper_Set":         3,
	"FurnitureOper_Remove":      4,
	"FurnitureOper_Move":        5,
}

func (x FurnitureOperType) String() string {
	return proto.EnumName(FurnitureOperType_name, int32(x))
}

func (FurnitureOperType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{80}
}

type BossType int32

const (
	BossType_BossType_None      BossType = 0
	BossType_BossType_XueNv     BossType = 1
	BossType_BossType_XinChang  BossType = 2
	BossType_BossType_HeiXuKong BossType = 3
)

var BossType_name = map[int32]string{
	0: "BossType_None",
	1: "BossType_XueNv",
	2: "BossType_XinChang",
	3: "BossType_HeiXuKong",
}

var BossType_value = map[string]int32{
	"BossType_None":      0,
	"BossType_XueNv":     1,
	"BossType_XinChang":  2,
	"BossType_HeiXuKong": 3,
}

func (x BossType) String() string {
	return proto.EnumName(BossType_name, int32(x))
}

func (BossType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{81}
}

type HomelandOperType int32

const (
	HomelandOperType_HomelandOperType_None    HomelandOperType = 0
	HomelandOperType_HomelandOperType_Upgrade HomelandOperType = 1
)

var HomelandOperType_name = map[int32]string{
	0: "HomelandOperType_None",
	1: "HomelandOperType_Upgrade",
}

var HomelandOperType_value = map[string]int32{
	"HomelandOperType_None":    0,
	"HomelandOperType_Upgrade": 1,
}

func (x HomelandOperType) String() string {
	return proto.EnumName(HomelandOperType_name, int32(x))
}

func (HomelandOperType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{82}
}

type RoomUnitDirType int32

const (
	RoomUnitDirType_RoomUnitDirType_Right RoomUnitDirType = 0
	RoomUnitDirType_RoomUnitDirType_Left  RoomUnitDirType = 1
)

var RoomUnitDirType_name = map[int32]string{
	0: "RoomUnitDirType_Right",
	1: "RoomUnitDirType_Left",
}

var RoomUnitDirType_value = map[string]int32{
	"RoomUnitDirType_Right": 0,
	"RoomUnitDirType_Left":  1,
}

func (x RoomUnitDirType) String() string {
	return proto.EnumName(RoomUnitDirType_name, int32(x))
}

func (RoomUnitDirType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{83}
}

type RoomUnitShowType int32

const (
	RoomUnitShowType_RoomUnitShowType_None        RoomUnitShowType = 0
	RoomUnitShowType_RoomUnitShowType_Immediately RoomUnitShowType = 1
	RoomUnitShowType_RoomUnitShowType_Trigger     RoomUnitShowType = 2
)

var RoomUnitShowType_name = map[int32]string{
	0: "RoomUnitShowType_None",
	1: "RoomUnitShowType_Immediately",
	2: "RoomUnitShowType_Trigger",
}

var RoomUnitShowType_value = map[string]int32{
	"RoomUnitShowType_None":        0,
	"RoomUnitShowType_Immediately": 1,
	"RoomUnitShowType_Trigger":     2,
}

func (x RoomUnitShowType) String() string {
	return proto.EnumName(RoomUnitShowType_name, int32(x))
}

func (RoomUnitShowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{84}
}

type UnitTag int32

const (
	UnitTag_UnitTag_None   UnitTag = 0
	UnitTag_UnitTag_NChest UnitTag = 1
	UnitTag_UnitTag_Veg    UnitTag = 2
	UnitTag_UnitTag_RChest UnitTag = 3
	UnitTag_UnitTag_Stead1 UnitTag = 4
	UnitTag_UnitTag_Stead2 UnitTag = 5
	UnitTag_UnitTag_Stead3 UnitTag = 6
	UnitTag_UnitTag_Stead4 UnitTag = 7
	UnitTag_UnitTag_Stead5 UnitTag = 8
)

var UnitTag_name = map[int32]string{
	0: "UnitTag_None",
	1: "UnitTag_NChest",
	2: "UnitTag_Veg",
	3: "UnitTag_RChest",
	4: "UnitTag_Stead1",
	5: "UnitTag_Stead2",
	6: "UnitTag_Stead3",
	7: "UnitTag_Stead4",
	8: "UnitTag_Stead5",
}

var UnitTag_value = map[string]int32{
	"UnitTag_None":   0,
	"UnitTag_NChest": 1,
	"UnitTag_Veg":    2,
	"UnitTag_RChest": 3,
	"UnitTag_Stead1": 4,
	"UnitTag_Stead2": 5,
	"UnitTag_Stead3": 6,
	"UnitTag_Stead4": 7,
	"UnitTag_Stead5": 8,
}

func (x UnitTag) String() string {
	return proto.EnumName(UnitTag_name, int32(x))
}

func (UnitTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{85}
}

type LanguageType int32

const (
	LanguageType_Language_None               LanguageType = 0
	LanguageType_Language_SimplifiedChinese  LanguageType = 1
	LanguageType_Language_TraditionalChinese LanguageType = 2
	LanguageType_Language_English            LanguageType = 3
	LanguageType_Language_Japanese           LanguageType = 4
	LanguageType_Language_Korean             LanguageType = 5
)

var LanguageType_name = map[int32]string{
	0: "Language_None",
	1: "Language_SimplifiedChinese",
	2: "Language_TraditionalChinese",
	3: "Language_English",
	4: "Language_Japanese",
	5: "Language_Korean",
}

var LanguageType_value = map[string]int32{
	"Language_None":               0,
	"Language_SimplifiedChinese":  1,
	"Language_TraditionalChinese": 2,
	"Language_English":            3,
	"Language_Japanese":           4,
	"Language_Korean":             5,
}

func (x LanguageType) String() string {
	return proto.EnumName(LanguageType_name, int32(x))
}

func (LanguageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{86}
}

type AccRechargeOpType int32

const (
	AccRechargeOpType_AccRechargeOp_None       AccRechargeOpType = 0
	AccRechargeOpType_AccRechargeOp_Sync       AccRechargeOpType = 1
	AccRechargeOpType_AccRechargeOp_GainReward AccRechargeOpType = 2
)

var AccRechargeOpType_name = map[int32]string{
	0: "AccRechargeOp_None",
	1: "AccRechargeOp_Sync",
	2: "AccRechargeOp_GainReward",
}

var AccRechargeOpType_value = map[string]int32{
	"AccRechargeOp_None":       0,
	"AccRechargeOp_Sync":       1,
	"AccRechargeOp_GainReward": 2,
}

func (x AccRechargeOpType) String() string {
	return proto.EnumName(AccRechargeOpType_name, int32(x))
}

func (AccRechargeOpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{87}
}

type GlobalDeductLongYinOpType int32

const (
	GlobalDeductLongYinOpType_GlobalDeductLongYinOp_None   GlobalDeductLongYinOpType = 0
	GlobalDeductLongYinOpType_GlobalDeductLongYinOp_Deduct GlobalDeductLongYinOpType = 1
	GlobalDeductLongYinOpType_GlobalDeductLongYinOp_Cancle GlobalDeductLongYinOpType = 2
)

var GlobalDeductLongYinOpType_name = map[int32]string{
	0: "GlobalDeductLongYinOp_None",
	1: "GlobalDeductLongYinOp_Deduct",
	2: "GlobalDeductLongYinOp_Cancle",
}

var GlobalDeductLongYinOpType_value = map[string]int32{
	"GlobalDeductLongYinOp_None":   0,
	"GlobalDeductLongYinOp_Deduct": 1,
	"GlobalDeductLongYinOp_Cancle": 2,
}

func (x GlobalDeductLongYinOpType) String() string {
	return proto.EnumName(GlobalDeductLongYinOpType_name, int32(x))
}

func (GlobalDeductLongYinOpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{88}
}

type PBAppearInfo struct {
	Guid                 uint64    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Position             *Vector3D `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PBAppearInfo) Reset()         { *m = PBAppearInfo{} }
func (m *PBAppearInfo) String() string { return proto.CompactTextString(m) }
func (*PBAppearInfo) ProtoMessage()    {}
func (*PBAppearInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{0}
}

func (m *PBAppearInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBAppearInfo.Unmarshal(m, b)
}
func (m *PBAppearInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBAppearInfo.Marshal(b, m, deterministic)
}
func (m *PBAppearInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBAppearInfo.Merge(m, src)
}
func (m *PBAppearInfo) XXX_Size() int {
	return xxx_messageInfo_PBAppearInfo.Size(m)
}
func (m *PBAppearInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PBAppearInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PBAppearInfo proto.InternalMessageInfo

func (m *PBAppearInfo) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *PBAppearInfo) GetPosition() *Vector3D {
	if m != nil {
		return m.Position
	}
	return nil
}

type Vector3D struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float32  `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector3D) Reset()         { *m = Vector3D{} }
func (m *Vector3D) String() string { return proto.CompactTextString(m) }
func (*Vector3D) ProtoMessage()    {}
func (*Vector3D) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{1}
}

func (m *Vector3D) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector3D.Unmarshal(m, b)
}
func (m *Vector3D) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector3D.Marshal(b, m, deterministic)
}
func (m *Vector3D) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector3D.Merge(m, src)
}
func (m *Vector3D) XXX_Size() int {
	return xxx_messageInfo_Vector3D.Size(m)
}
func (m *Vector3D) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector3D.DiscardUnknown(m)
}

var xxx_messageInfo_Vector3D proto.InternalMessageInfo

func (m *Vector3D) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector3D) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector3D) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type WeightSlot struct {
	Weight               float32  `protobuf:"fixed32,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	MinLevel             uint32   `protobuf:"varint,3,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	MaxLevel             uint32   `protobuf:"varint,4,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	Threat               uint32   `protobuf:"varint,5,opt,name=threat,proto3" json:"threat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeightSlot) Reset()         { *m = WeightSlot{} }
func (m *WeightSlot) String() string { return proto.CompactTextString(m) }
func (*WeightSlot) ProtoMessage()    {}
func (*WeightSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{2}
}

func (m *WeightSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightSlot.Unmarshal(m, b)
}
func (m *WeightSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightSlot.Marshal(b, m, deterministic)
}
func (m *WeightSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightSlot.Merge(m, src)
}
func (m *WeightSlot) XXX_Size() int {
	return xxx_messageInfo_WeightSlot.Size(m)
}
func (m *WeightSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightSlot.DiscardUnknown(m)
}

var xxx_messageInfo_WeightSlot proto.InternalMessageInfo

func (m *WeightSlot) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *WeightSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeightSlot) GetMinLevel() uint32 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *WeightSlot) GetMaxLevel() uint32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *WeightSlot) GetThreat() uint32 {
	if m != nil {
		return m.Threat
	}
	return 0
}

type MultiWeightSlot struct {
	Slots                []*WeightSlot `protobuf:"bytes,1,rep,name=slots,proto3" json:"slots,omitempty"`
	HeroId               int32         `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MultiWeightSlot) Reset()         { *m = MultiWeightSlot{} }
func (m *MultiWeightSlot) String() string { return proto.CompactTextString(m) }
func (*MultiWeightSlot) ProtoMessage()    {}
func (*MultiWeightSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{3}
}

func (m *MultiWeightSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiWeightSlot.Unmarshal(m, b)
}
func (m *MultiWeightSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiWeightSlot.Marshal(b, m, deterministic)
}
func (m *MultiWeightSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiWeightSlot.Merge(m, src)
}
func (m *MultiWeightSlot) XXX_Size() int {
	return xxx_messageInfo_MultiWeightSlot.Size(m)
}
func (m *MultiWeightSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiWeightSlot.DiscardUnknown(m)
}

var xxx_messageInfo_MultiWeightSlot proto.InternalMessageInfo

func (m *MultiWeightSlot) GetSlots() []*WeightSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *MultiWeightSlot) GetHeroId() int32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

type DifficultyDropWeightSlot struct {
	DropId               int32    `protobuf:"varint,1,opt,name=drop_id,json=dropId,proto3" json:"drop_id,omitempty"`
	Weight               int32    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DifficultyDropWeightSlot) Reset()         { *m = DifficultyDropWeightSlot{} }
func (m *DifficultyDropWeightSlot) String() string { return proto.CompactTextString(m) }
func (*DifficultyDropWeightSlot) ProtoMessage()    {}
func (*DifficultyDropWeightSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{4}
}

func (m *DifficultyDropWeightSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DifficultyDropWeightSlot.Unmarshal(m, b)
}
func (m *DifficultyDropWeightSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DifficultyDropWeightSlot.Marshal(b, m, deterministic)
}
func (m *DifficultyDropWeightSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DifficultyDropWeightSlot.Merge(m, src)
}
func (m *DifficultyDropWeightSlot) XXX_Size() int {
	return xxx_messageInfo_DifficultyDropWeightSlot.Size(m)
}
func (m *DifficultyDropWeightSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_DifficultyDropWeightSlot.DiscardUnknown(m)
}

var xxx_messageInfo_DifficultyDropWeightSlot proto.InternalMessageInfo

func (m *DifficultyDropWeightSlot) GetDropId() int32 {
	if m != nil {
		return m.DropId
	}
	return 0
}

func (m *DifficultyDropWeightSlot) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type DifficultyItemSlot struct {
	Index                int32                       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Slots                []*DifficultyDropWeightSlot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DifficultyItemSlot) Reset()         { *m = DifficultyItemSlot{} }
func (m *DifficultyItemSlot) String() string { return proto.CompactTextString(m) }
func (*DifficultyItemSlot) ProtoMessage()    {}
func (*DifficultyItemSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{5}
}

func (m *DifficultyItemSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DifficultyItemSlot.Unmarshal(m, b)
}
func (m *DifficultyItemSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DifficultyItemSlot.Marshal(b, m, deterministic)
}
func (m *DifficultyItemSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DifficultyItemSlot.Merge(m, src)
}
func (m *DifficultyItemSlot) XXX_Size() int {
	return xxx_messageInfo_DifficultyItemSlot.Size(m)
}
func (m *DifficultyItemSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_DifficultyItemSlot.DiscardUnknown(m)
}

var xxx_messageInfo_DifficultyItemSlot proto.InternalMessageInfo

func (m *DifficultyItemSlot) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DifficultyItemSlot) GetSlots() []*DifficultyDropWeightSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type PBMoneyAmount struct {
	MoneyType            EMoneyType `protobuf:"varint,1,opt,name=money_type,json=moneyType,proto3,enum=Adoter.Asset.EMoneyType" json:"money_type,omitempty"`
	Amount               int64      `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PBMoneyAmount) Reset()         { *m = PBMoneyAmount{} }
func (m *PBMoneyAmount) String() string { return proto.CompactTextString(m) }
func (*PBMoneyAmount) ProtoMessage()    {}
func (*PBMoneyAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{6}
}

func (m *PBMoneyAmount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBMoneyAmount.Unmarshal(m, b)
}
func (m *PBMoneyAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBMoneyAmount.Marshal(b, m, deterministic)
}
func (m *PBMoneyAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBMoneyAmount.Merge(m, src)
}
func (m *PBMoneyAmount) XXX_Size() int {
	return xxx_messageInfo_PBMoneyAmount.Size(m)
}
func (m *PBMoneyAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_PBMoneyAmount.DiscardUnknown(m)
}

var xxx_messageInfo_PBMoneyAmount proto.InternalMessageInfo

func (m *PBMoneyAmount) GetMoneyType() EMoneyType {
	if m != nil {
		return m.MoneyType
	}
	return EMoneyType_Money_None
}

func (m *PBMoneyAmount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type PBMessageHeader struct {
	PlayerId             uint64   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	HeroId               uint64   `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	MailAccountId        uint64   `protobuf:"varint,3,opt,name=mail_account_id,json=mailAccountId,proto3" json:"mail_account_id,omitempty"`
	StepCode             int32    `protobuf:"varint,4,opt,name=step_code,json=stepCode,proto3" json:"step_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBMessageHeader) Reset()         { *m = PBMessageHeader{} }
func (m *PBMessageHeader) String() string { return proto.CompactTextString(m) }
func (*PBMessageHeader) ProtoMessage()    {}
func (*PBMessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{7}
}

func (m *PBMessageHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBMessageHeader.Unmarshal(m, b)
}
func (m *PBMessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBMessageHeader.Marshal(b, m, deterministic)
}
func (m *PBMessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBMessageHeader.Merge(m, src)
}
func (m *PBMessageHeader) XXX_Size() int {
	return xxx_messageInfo_PBMessageHeader.Size(m)
}
func (m *PBMessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PBMessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PBMessageHeader proto.InternalMessageInfo

func (m *PBMessageHeader) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PBMessageHeader) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *PBMessageHeader) GetMailAccountId() uint64 {
	if m != nil {
		return m.MailAccountId
	}
	return 0
}

func (m *PBMessageHeader) GetStepCode() int32 {
	if m != nil {
		return m.StepCode
	}
	return 0
}

type GameEquipment struct {
	Guid                  uint64                    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	EquipHeroGuid         uint64                    `protobuf:"varint,2,opt,name=equip_hero_guid,json=equipHeroGuid,proto3" json:"equip_hero_guid,omitempty"`
	EquipmentId           uint32                    `protobuf:"varint,3,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	MainAttributes        []*GameEquipmentAttribute `protobuf:"bytes,4,rep,name=main_attributes,json=mainAttributes,proto3" json:"main_attributes,omitempty"`
	FixedAttributes       []*GameEquipmentAttribute `protobuf:"bytes,5,rep,name=fixed_attributes,json=fixedAttributes,proto3" json:"fixed_attributes,omitempty"`
	PreAttributes         []*GameEquipmentAttribute `protobuf:"bytes,6,rep,name=pre_attributes,json=preAttributes,proto3" json:"pre_attributes,omitempty"`
	SufAttributes         []*GameEquipmentAttribute `protobuf:"bytes,7,rep,name=suf_attributes,json=sufAttributes,proto3" json:"suf_attributes,omitempty"`
	RefinedAttrId         []uint32                  `protobuf:"varint,8,rep,packed,name=refined_attr_id,json=refinedAttrId,proto3" json:"refined_attr_id,omitempty"`
	EnhanceGrade          int32                     `protobuf:"varint,9,opt,name=enhance_grade,json=enhanceGrade,proto3" json:"enhance_grade,omitempty"`
	EnhanceCount          int32                     `protobuf:"varint,10,opt,name=enhance_count,json=enhanceCount,proto3" json:"enhance_count,omitempty"`
	EnhanceId             int32                     `protobuf:"varint,11,opt,name=enhance_id,json=enhanceId,proto3" json:"enhance_id,omitempty"`
	EquipedSuitCount      int32                     `protobuf:"varint,12,opt,name=equiped_suit_count,json=equipedSuitCount,proto3" json:"equiped_suit_count,omitempty"`
	EquipedSuitId         []uint32                  `protobuf:"varint,13,rep,packed,name=equiped_suit_id,json=equipedSuitId,proto3" json:"equiped_suit_id,omitempty"`
	IsLock                bool                      `protobuf:"varint,14,opt,name=is_lock,json=isLock,proto3" json:"is_lock,omitempty"`
	HeroGuid              uint64                    `protobuf:"varint,15,opt,name=hero_guid,json=heroGuid,proto3" json:"hero_guid,omitempty"`
	MasterFixedAttributes []*GameEquipmentAttribute `protobuf:"bytes,16,rep,name=master_fixed_attributes,json=masterFixedAttributes,proto3" json:"master_fixed_attributes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *GameEquipment) Reset()         { *m = GameEquipment{} }
func (m *GameEquipment) String() string { return proto.CompactTextString(m) }
func (*GameEquipment) ProtoMessage()    {}
func (*GameEquipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{8}
}

func (m *GameEquipment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEquipment.Unmarshal(m, b)
}
func (m *GameEquipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEquipment.Marshal(b, m, deterministic)
}
func (m *GameEquipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEquipment.Merge(m, src)
}
func (m *GameEquipment) XXX_Size() int {
	return xxx_messageInfo_GameEquipment.Size(m)
}
func (m *GameEquipment) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEquipment.DiscardUnknown(m)
}

var xxx_messageInfo_GameEquipment proto.InternalMessageInfo

func (m *GameEquipment) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GameEquipment) GetEquipHeroGuid() uint64 {
	if m != nil {
		return m.EquipHeroGuid
	}
	return 0
}

func (m *GameEquipment) GetEquipmentId() uint32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *GameEquipment) GetMainAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.MainAttributes
	}
	return nil
}

func (m *GameEquipment) GetFixedAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.FixedAttributes
	}
	return nil
}

func (m *GameEquipment) GetPreAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.PreAttributes
	}
	return nil
}

func (m *GameEquipment) GetSufAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.SufAttributes
	}
	return nil
}

func (m *GameEquipment) GetRefinedAttrId() []uint32 {
	if m != nil {
		return m.RefinedAttrId
	}
	return nil
}

func (m *GameEquipment) GetEnhanceGrade() int32 {
	if m != nil {
		return m.EnhanceGrade
	}
	return 0
}

func (m *GameEquipment) GetEnhanceCount() int32 {
	if m != nil {
		return m.EnhanceCount
	}
	return 0
}

func (m *GameEquipment) GetEnhanceId() int32 {
	if m != nil {
		return m.EnhanceId
	}
	return 0
}

func (m *GameEquipment) GetEquipedSuitCount() int32 {
	if m != nil {
		return m.EquipedSuitCount
	}
	return 0
}

func (m *GameEquipment) GetEquipedSuitId() []uint32 {
	if m != nil {
		return m.EquipedSuitId
	}
	return nil
}

func (m *GameEquipment) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (m *GameEquipment) GetHeroGuid() uint64 {
	if m != nil {
		return m.HeroGuid
	}
	return 0
}

func (m *GameEquipment) GetMasterFixedAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.MasterFixedAttributes
	}
	return nil
}

type GameRandomRangeAttributeSlot struct {
	Property             NumericType `protobuf:"varint,1,opt,name=property,proto3,enum=Adoter.Asset.NumericType" json:"property,omitempty"`
	Value                float32     `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GameRandomRangeAttributeSlot) Reset()         { *m = GameRandomRangeAttributeSlot{} }
func (m *GameRandomRangeAttributeSlot) String() string { return proto.CompactTextString(m) }
func (*GameRandomRangeAttributeSlot) ProtoMessage()    {}
func (*GameRandomRangeAttributeSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{9}
}

func (m *GameRandomRangeAttributeSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameRandomRangeAttributeSlot.Unmarshal(m, b)
}
func (m *GameRandomRangeAttributeSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameRandomRangeAttributeSlot.Marshal(b, m, deterministic)
}
func (m *GameRandomRangeAttributeSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRandomRangeAttributeSlot.Merge(m, src)
}
func (m *GameRandomRangeAttributeSlot) XXX_Size() int {
	return xxx_messageInfo_GameRandomRangeAttributeSlot.Size(m)
}
func (m *GameRandomRangeAttributeSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRandomRangeAttributeSlot.DiscardUnknown(m)
}

var xxx_messageInfo_GameRandomRangeAttributeSlot proto.InternalMessageInfo

func (m *GameRandomRangeAttributeSlot) GetProperty() NumericType {
	if m != nil {
		return m.Property
	}
	return NumericType_Numeric_None
}

func (m *GameRandomRangeAttributeSlot) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GameScroll struct {
	Guid                 uint64           `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	ScrollId             uint32           `protobuf:"varint,2,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
	EnhanceCount         uint32           `protobuf:"varint,3,opt,name=enhance_count,json=enhanceCount,proto3" json:"enhance_count,omitempty"`
	BasicAttributes      []NumericType    `protobuf:"varint,4,rep,packed,name=basic_attributes,json=basicAttributes,proto3,enum=Adoter.Asset.NumericType" json:"basic_attributes,omitempty"`
	SkilldAttributes     map[uint32]int32 `protobuf:"bytes,5,rep,name=skilld_attributes,json=skilldAttributes,proto3" json:"skilld_attributes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Exp                  uint32           `protobuf:"varint,6,opt,name=exp,proto3" json:"exp,omitempty"`
	Advanced             uint32           `protobuf:"varint,7,opt,name=advanced,proto3" json:"advanced,omitempty"`
	CreateTime           int64            `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	HeroGuid             uint64           `protobuf:"varint,9,opt,name=hero_guid,json=heroGuid,proto3" json:"hero_guid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GameScroll) Reset()         { *m = GameScroll{} }
func (m *GameScroll) String() string { return proto.CompactTextString(m) }
func (*GameScroll) ProtoMessage()    {}
func (*GameScroll) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{10}
}

func (m *GameScroll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameScroll.Unmarshal(m, b)
}
func (m *GameScroll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameScroll.Marshal(b, m, deterministic)
}
func (m *GameScroll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameScroll.Merge(m, src)
}
func (m *GameScroll) XXX_Size() int {
	return xxx_messageInfo_GameScroll.Size(m)
}
func (m *GameScroll) XXX_DiscardUnknown() {
	xxx_messageInfo_GameScroll.DiscardUnknown(m)
}

var xxx_messageInfo_GameScroll proto.InternalMessageInfo

func (m *GameScroll) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GameScroll) GetScrollId() uint32 {
	if m != nil {
		return m.ScrollId
	}
	return 0
}

func (m *GameScroll) GetEnhanceCount() uint32 {
	if m != nil {
		return m.EnhanceCount
	}
	return 0
}

func (m *GameScroll) GetBasicAttributes() []NumericType {
	if m != nil {
		return m.BasicAttributes
	}
	return nil
}

func (m *GameScroll) GetSkilldAttributes() map[uint32]int32 {
	if m != nil {
		return m.SkilldAttributes
	}
	return nil
}

func (m *GameScroll) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *GameScroll) GetAdvanced() uint32 {
	if m != nil {
		return m.Advanced
	}
	return 0
}

func (m *GameScroll) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GameScroll) GetHeroGuid() uint64 {
	if m != nil {
		return m.HeroGuid
	}
	return 0
}

type QuestFinishInfo struct {
	Data                 []uint32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuestFinishInfo) Reset()         { *m = QuestFinishInfo{} }
func (m *QuestFinishInfo) String() string { return proto.CompactTextString(m) }
func (*QuestFinishInfo) ProtoMessage()    {}
func (*QuestFinishInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{11}
}

func (m *QuestFinishInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuestFinishInfo.Unmarshal(m, b)
}
func (m *QuestFinishInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuestFinishInfo.Marshal(b, m, deterministic)
}
func (m *QuestFinishInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestFinishInfo.Merge(m, src)
}
func (m *QuestFinishInfo) XXX_Size() int {
	return xxx_messageInfo_QuestFinishInfo.Size(m)
}
func (m *QuestFinishInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestFinishInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QuestFinishInfo proto.InternalMessageInfo

func (m *QuestFinishInfo) GetData() []uint32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type GameQuestPair struct {
	Key                  uint32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameQuestPair) Reset()         { *m = GameQuestPair{} }
func (m *GameQuestPair) String() string { return proto.CompactTextString(m) }
func (*GameQuestPair) ProtoMessage()    {}
func (*GameQuestPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{12}
}

func (m *GameQuestPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameQuestPair.Unmarshal(m, b)
}
func (m *GameQuestPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameQuestPair.Marshal(b, m, deterministic)
}
func (m *GameQuestPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameQuestPair.Merge(m, src)
}
func (m *GameQuestPair) XXX_Size() int {
	return xxx_messageInfo_GameQuestPair.Size(m)
}
func (m *GameQuestPair) XXX_DiscardUnknown() {
	xxx_messageInfo_GameQuestPair.DiscardUnknown(m)
}

var xxx_messageInfo_GameQuestPair proto.InternalMessageInfo

func (m *GameQuestPair) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *GameQuestPair) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GameConditionDataGroup struct {
	Op                   GameConditionOperator      `protobuf:"varint,1,opt,name=op,proto3,enum=Adoter.Asset.GameConditionOperator" json:"op,omitempty"`
	Conditions           []*GameConditionDataWrapEx `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GameConditionDataGroup) Reset()         { *m = GameConditionDataGroup{} }
func (m *GameConditionDataGroup) String() string { return proto.CompactTextString(m) }
func (*GameConditionDataGroup) ProtoMessage()    {}
func (*GameConditionDataGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{13}
}

func (m *GameConditionDataGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameConditionDataGroup.Unmarshal(m, b)
}
func (m *GameConditionDataGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameConditionDataGroup.Marshal(b, m, deterministic)
}
func (m *GameConditionDataGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConditionDataGroup.Merge(m, src)
}
func (m *GameConditionDataGroup) XXX_Size() int {
	return xxx_messageInfo_GameConditionDataGroup.Size(m)
}
func (m *GameConditionDataGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConditionDataGroup.DiscardUnknown(m)
}

var xxx_messageInfo_GameConditionDataGroup proto.InternalMessageInfo

func (m *GameConditionDataGroup) GetOp() GameConditionOperator {
	if m != nil {
		return m.Op
	}
	return GameConditionOperator_GameConditionOperator_And
}

func (m *GameConditionDataGroup) GetConditions() []*GameConditionDataWrapEx {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type GameQuestInfo struct {
	Guid                  uint64           `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	QuestId               uint32           `protobuf:"varint,2,opt,name=quest_id,json=questId,proto3" json:"quest_id,omitempty"`
	Status                QuestStatus      `protobuf:"varint,3,opt,name=status,proto3,enum=Adoter.Asset.QuestStatus" json:"status,omitempty"`
	Progress              uint32           `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
	SubProgress           []*GameQuestPair `protobuf:"bytes,5,rep,name=sub_progress,json=subProgress,proto3" json:"sub_progress,omitempty"`
	FinishedSlots         []uint32         `protobuf:"varint,6,rep,packed,name=finished_slots,json=finishedSlots,proto3" json:"finished_slots,omitempty"`
	Param                 int32            `protobuf:"varint,7,opt,name=param,proto3" json:"param,omitempty"`
	AcceptTime            int32            `protobuf:"varint,8,opt,name=accept_time,json=acceptTime,proto3" json:"accept_time,omitempty"`
	FinishTime            int32            `protobuf:"varint,9,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	UpdateTime            int32            `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ParamStatus           uint32           `protobuf:"varint,11,opt,name=param_status,json=paramStatus,proto3" json:"param_status,omitempty"`
	Records               *QuestRecord     `protobuf:"bytes,12,opt,name=records,proto3" json:"records,omitempty"`
	BattlePassActive      int32            `protobuf:"varint,13,opt,name=battle_pass_active,json=battlePassActive,proto3" json:"battle_pass_active,omitempty"`
	BattlePassSubProgress []*GameQuestPair `protobuf:"bytes,14,rep,name=battle_pass_sub_progress,json=battlePassSubProgress,proto3" json:"battle_pass_sub_progress,omitempty"`
	BattlePassStatus      QuestStatus      `protobuf:"varint,15,opt,name=battle_pass_status,json=battlePassStatus,proto3,enum=Adoter.Asset.QuestStatus" json:"battle_pass_status,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *GameQuestInfo) Reset()         { *m = GameQuestInfo{} }
func (m *GameQuestInfo) String() string { return proto.CompactTextString(m) }
func (*GameQuestInfo) ProtoMessage()    {}
func (*GameQuestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{14}
}

func (m *GameQuestInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameQuestInfo.Unmarshal(m, b)
}
func (m *GameQuestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameQuestInfo.Marshal(b, m, deterministic)
}
func (m *GameQuestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameQuestInfo.Merge(m, src)
}
func (m *GameQuestInfo) XXX_Size() int {
	return xxx_messageInfo_GameQuestInfo.Size(m)
}
func (m *GameQuestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameQuestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameQuestInfo proto.InternalMessageInfo

func (m *GameQuestInfo) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GameQuestInfo) GetQuestId() uint32 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *GameQuestInfo) GetStatus() QuestStatus {
	if m != nil {
		return m.Status
	}
	return QuestStatus_QuestStatus_Inactive
}

func (m *GameQuestInfo) GetProgress() uint32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *GameQuestInfo) GetSubProgress() []*GameQuestPair {
	if m != nil {
		return m.SubProgress
	}
	return nil
}

func (m *GameQuestInfo) GetFinishedSlots() []uint32 {
	if m != nil {
		return m.FinishedSlots
	}
	return nil
}

func (m *GameQuestInfo) GetParam() int32 {
	if m != nil {
		return m.Param
	}
	return 0
}

func (m *GameQuestInfo) GetAcceptTime() int32 {
	if m != nil {
		return m.AcceptTime
	}
	return 0
}

func (m *GameQuestInfo) GetFinishTime() int32 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *GameQuestInfo) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *GameQuestInfo) GetParamStatus() uint32 {
	if m != nil {
		return m.ParamStatus
	}
	return 0
}

func (m *GameQuestInfo) GetRecords() *QuestRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *GameQuestInfo) GetBattlePassActive() int32 {
	if m != nil {
		return m.BattlePassActive
	}
	return 0
}

func (m *GameQuestInfo) GetBattlePassSubProgress() []*GameQuestPair {
	if m != nil {
		return m.BattlePassSubProgress
	}
	return nil
}

func (m *GameQuestInfo) GetBattlePassStatus() QuestStatus {
	if m != nil {
		return m.BattlePassStatus
	}
	return QuestStatus_QuestStatus_Inactive
}

type QuestRecord struct {
	MapRecords           []*GameQuestPair `protobuf:"bytes,1,rep,name=map_records,json=mapRecords,proto3" json:"map_records,omitempty"`
	ListRecords          []int32          `protobuf:"varint,2,rep,packed,name=list_records,json=listRecords,proto3" json:"list_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QuestRecord) Reset()         { *m = QuestRecord{} }
func (m *QuestRecord) String() string { return proto.CompactTextString(m) }
func (*QuestRecord) ProtoMessage()    {}
func (*QuestRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{15}
}

func (m *QuestRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuestRecord.Unmarshal(m, b)
}
func (m *QuestRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuestRecord.Marshal(b, m, deterministic)
}
func (m *QuestRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestRecord.Merge(m, src)
}
func (m *QuestRecord) XXX_Size() int {
	return xxx_messageInfo_QuestRecord.Size(m)
}
func (m *QuestRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestRecord.DiscardUnknown(m)
}

var xxx_messageInfo_QuestRecord proto.InternalMessageInfo

func (m *QuestRecord) GetMapRecords() []*GameQuestPair {
	if m != nil {
		return m.MapRecords
	}
	return nil
}

func (m *QuestRecord) GetListRecords() []int32 {
	if m != nil {
		return m.ListRecords
	}
	return nil
}

type GameConditionDataWrapEx struct {
	Op                   GameConditionOperator `protobuf:"varint,1,opt,name=op,proto3,enum=Adoter.Asset.GameConditionOperator" json:"op,omitempty"`
	Condition            *GameConditionData    `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GameConditionDataWrapEx) Reset()         { *m = GameConditionDataWrapEx{} }
func (m *GameConditionDataWrapEx) String() string { return proto.CompactTextString(m) }
func (*GameConditionDataWrapEx) ProtoMessage()    {}
func (*GameConditionDataWrapEx) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{16}
}

func (m *GameConditionDataWrapEx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameConditionDataWrapEx.Unmarshal(m, b)
}
func (m *GameConditionDataWrapEx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameConditionDataWrapEx.Marshal(b, m, deterministic)
}
func (m *GameConditionDataWrapEx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConditionDataWrapEx.Merge(m, src)
}
func (m *GameConditionDataWrapEx) XXX_Size() int {
	return xxx_messageInfo_GameConditionDataWrapEx.Size(m)
}
func (m *GameConditionDataWrapEx) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConditionDataWrapEx.DiscardUnknown(m)
}

var xxx_messageInfo_GameConditionDataWrapEx proto.InternalMessageInfo

func (m *GameConditionDataWrapEx) GetOp() GameConditionOperator {
	if m != nil {
		return m.Op
	}
	return GameConditionOperator_GameConditionOperator_And
}

func (m *GameConditionDataWrapEx) GetCondition() *GameConditionData {
	if m != nil {
		return m.Condition
	}
	return nil
}

type GameEquipmentAttributeSet struct {
	Data                 []*GameEquipmentAttribute `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	RefinedAttrId        []uint32                  `protobuf:"varint,2,rep,packed,name=refined_attr_id,json=refinedAttrId,proto3" json:"refined_attr_id,omitempty"`
	EhGrade              int32                     `protobuf:"varint,3,opt,name=eh_grade,json=ehGrade,proto3" json:"eh_grade,omitempty"`
	EhCount              int32                     `protobuf:"varint,4,opt,name=eh_count,json=ehCount,proto3" json:"eh_count,omitempty"`
	EhId                 int32                     `protobuf:"varint,5,opt,name=eh_id,json=ehId,proto3" json:"eh_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GameEquipmentAttributeSet) Reset()         { *m = GameEquipmentAttributeSet{} }
func (m *GameEquipmentAttributeSet) String() string { return proto.CompactTextString(m) }
func (*GameEquipmentAttributeSet) ProtoMessage()    {}
func (*GameEquipmentAttributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{17}
}

func (m *GameEquipmentAttributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEquipmentAttributeSet.Unmarshal(m, b)
}
func (m *GameEquipmentAttributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEquipmentAttributeSet.Marshal(b, m, deterministic)
}
func (m *GameEquipmentAttributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEquipmentAttributeSet.Merge(m, src)
}
func (m *GameEquipmentAttributeSet) XXX_Size() int {
	return xxx_messageInfo_GameEquipmentAttributeSet.Size(m)
}
func (m *GameEquipmentAttributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEquipmentAttributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_GameEquipmentAttributeSet proto.InternalMessageInfo

func (m *GameEquipmentAttributeSet) GetData() []*GameEquipmentAttribute {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GameEquipmentAttributeSet) GetRefinedAttrId() []uint32 {
	if m != nil {
		return m.RefinedAttrId
	}
	return nil
}

func (m *GameEquipmentAttributeSet) GetEhGrade() int32 {
	if m != nil {
		return m.EhGrade
	}
	return 0
}

func (m *GameEquipmentAttributeSet) GetEhCount() int32 {
	if m != nil {
		return m.EhCount
	}
	return 0
}

func (m *GameEquipmentAttributeSet) GetEhId() int32 {
	if m != nil {
		return m.EhId
	}
	return 0
}

type GameShopItem struct {
	Id                   uint32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Icon                 string                    `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Ui                   string                    `protobuf:"bytes,5,opt,name=ui,proto3" json:"ui,omitempty"`
	Quality              int32                     `protobuf:"varint,6,opt,name=quality,proto3" json:"quality,omitempty"`
	Onsale               string                    `protobuf:"bytes,7,opt,name=onsale,proto3" json:"onsale,omitempty"`
	Conditions           []*GameConditionDataGroup `protobuf:"bytes,8,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Costs                []*ItemSlot               `protobuf:"bytes,9,rep,name=costs,proto3" json:"costs,omitempty"`
	OriginalCosts        []*ItemSlot               `protobuf:"bytes,10,rep,name=original_costs,json=originalCosts,proto3" json:"original_costs,omitempty"`
	PurchaseTimes        uint32                    `protobuf:"varint,11,opt,name=purchase_times,json=purchaseTimes,proto3" json:"purchase_times,omitempty"`
	PurchaseTimesUsed    uint32                    `protobuf:"varint,12,opt,name=purchase_times_used,json=purchaseTimesUsed,proto3" json:"purchase_times_used,omitempty"`
	Items                uint32                    `protobuf:"varint,13,opt,name=items,proto3" json:"items,omitempty"`
	Version              uint32                    `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	ExpireTime           uint32                    `protobuf:"varint,15,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GameShopItem) Reset()         { *m = GameShopItem{} }
func (m *GameShopItem) String() string { return proto.CompactTextString(m) }
func (*GameShopItem) ProtoMessage()    {}
func (*GameShopItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{18}
}

func (m *GameShopItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameShopItem.Unmarshal(m, b)
}
func (m *GameShopItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameShopItem.Marshal(b, m, deterministic)
}
func (m *GameShopItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameShopItem.Merge(m, src)
}
func (m *GameShopItem) XXX_Size() int {
	return xxx_messageInfo_GameShopItem.Size(m)
}
func (m *GameShopItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GameShopItem.DiscardUnknown(m)
}

var xxx_messageInfo_GameShopItem proto.InternalMessageInfo

func (m *GameShopItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameShopItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameShopItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GameShopItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GameShopItem) GetUi() string {
	if m != nil {
		return m.Ui
	}
	return ""
}

func (m *GameShopItem) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *GameShopItem) GetOnsale() string {
	if m != nil {
		return m.Onsale
	}
	return ""
}

func (m *GameShopItem) GetConditions() []*GameConditionDataGroup {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *GameShopItem) GetCosts() []*ItemSlot {
	if m != nil {
		return m.Costs
	}
	return nil
}

func (m *GameShopItem) GetOriginalCosts() []*ItemSlot {
	if m != nil {
		return m.OriginalCosts
	}
	return nil
}

func (m *GameShopItem) GetPurchaseTimes() uint32 {
	if m != nil {
		return m.PurchaseTimes
	}
	return 0
}

func (m *GameShopItem) GetPurchaseTimesUsed() uint32 {
	if m != nil {
		return m.PurchaseTimesUsed
	}
	return 0
}

func (m *GameShopItem) GetItems() uint32 {
	if m != nil {
		return m.Items
	}
	return 0
}

func (m *GameShopItem) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GameShopItem) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type UnitPropertyWeightSlot struct {
	Weight               float32     `protobuf:"fixed32,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Type                 NumericType `protobuf:"varint,2,opt,name=type,proto3,enum=Adoter.Asset.NumericType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UnitPropertyWeightSlot) Reset()         { *m = UnitPropertyWeightSlot{} }
func (m *UnitPropertyWeightSlot) String() string { return proto.CompactTextString(m) }
func (*UnitPropertyWeightSlot) ProtoMessage()    {}
func (*UnitPropertyWeightSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{19}
}

func (m *UnitPropertyWeightSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnitPropertyWeightSlot.Unmarshal(m, b)
}
func (m *UnitPropertyWeightSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnitPropertyWeightSlot.Marshal(b, m, deterministic)
}
func (m *UnitPropertyWeightSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitPropertyWeightSlot.Merge(m, src)
}
func (m *UnitPropertyWeightSlot) XXX_Size() int {
	return xxx_messageInfo_UnitPropertyWeightSlot.Size(m)
}
func (m *UnitPropertyWeightSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitPropertyWeightSlot.DiscardUnknown(m)
}

var xxx_messageInfo_UnitPropertyWeightSlot proto.InternalMessageInfo

func (m *UnitPropertyWeightSlot) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *UnitPropertyWeightSlot) GetType() NumericType {
	if m != nil {
		return m.Type
	}
	return NumericType_Numeric_None
}

type GameConditionData struct {
	Type                 GameConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=Adoter.Asset.GameConditionType" json:"type,omitempty"`
	Key                  uint32            `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                uint32            `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Item                 *ItemSlot         `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GameConditionData) Reset()         { *m = GameConditionData{} }
func (m *GameConditionData) String() string { return proto.CompactTextString(m) }
func (*GameConditionData) ProtoMessage()    {}
func (*GameConditionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{20}
}

func (m *GameConditionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameConditionData.Unmarshal(m, b)
}
func (m *GameConditionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameConditionData.Marshal(b, m, deterministic)
}
func (m *GameConditionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConditionData.Merge(m, src)
}
func (m *GameConditionData) XXX_Size() int {
	return xxx_messageInfo_GameConditionData.Size(m)
}
func (m *GameConditionData) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConditionData.DiscardUnknown(m)
}

var xxx_messageInfo_GameConditionData proto.InternalMessageInfo

func (m *GameConditionData) GetType() GameConditionType {
	if m != nil {
		return m.Type
	}
	return GameConditionType_GameConditionType_Stamina
}

func (m *GameConditionData) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *GameConditionData) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GameConditionData) GetItem() *ItemSlot {
	if m != nil {
		return m.Item
	}
	return nil
}

type GenreEquipment struct {
	EquipmentGuid        uint64      `protobuf:"varint,1,opt,name=equipment_guid,json=equipmentGuid,proto3" json:"equipment_guid,omitempty"`
	EquipmentId          uint32      `protobuf:"varint,2,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	RuneSlots            []*RuneSlot `protobuf:"bytes,3,rep,name=rune_slots,json=runeSlots,proto3" json:"rune_slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenreEquipment) Reset()         { *m = GenreEquipment{} }
func (m *GenreEquipment) String() string { return proto.CompactTextString(m) }
func (*GenreEquipment) ProtoMessage()    {}
func (*GenreEquipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{21}
}

func (m *GenreEquipment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenreEquipment.Unmarshal(m, b)
}
func (m *GenreEquipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenreEquipment.Marshal(b, m, deterministic)
}
func (m *GenreEquipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenreEquipment.Merge(m, src)
}
func (m *GenreEquipment) XXX_Size() int {
	return xxx_messageInfo_GenreEquipment.Size(m)
}
func (m *GenreEquipment) XXX_DiscardUnknown() {
	xxx_messageInfo_GenreEquipment.DiscardUnknown(m)
}

var xxx_messageInfo_GenreEquipment proto.InternalMessageInfo

func (m *GenreEquipment) GetEquipmentGuid() uint64 {
	if m != nil {
		return m.EquipmentGuid
	}
	return 0
}

func (m *GenreEquipment) GetEquipmentId() uint32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *GenreEquipment) GetRuneSlots() []*RuneSlot {
	if m != nil {
		return m.RuneSlots
	}
	return nil
}

type GenreScroll struct {
	ScrollGuid           uint64                  `protobuf:"varint,1,opt,name=scroll_guid,json=scrollGuid,proto3" json:"scroll_guid,omitempty"`
	ScrollId             int32                   `protobuf:"varint,2,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
	LocationSlot         int32                   `protobuf:"varint,3,opt,name=location_slot,json=locationSlot,proto3" json:"location_slot,omitempty"`
	SecondaryScrolls     []*GenreSecondaryScroll `protobuf:"bytes,4,rep,name=secondary_scrolls,json=secondaryScrolls,proto3" json:"secondary_scrolls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GenreScroll) Reset()         { *m = GenreScroll{} }
func (m *GenreScroll) String() string { return proto.CompactTextString(m) }
func (*GenreScroll) ProtoMessage()    {}
func (*GenreScroll) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{22}
}

func (m *GenreScroll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenreScroll.Unmarshal(m, b)
}
func (m *GenreScroll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenreScroll.Marshal(b, m, deterministic)
}
func (m *GenreScroll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenreScroll.Merge(m, src)
}
func (m *GenreScroll) XXX_Size() int {
	return xxx_messageInfo_GenreScroll.Size(m)
}
func (m *GenreScroll) XXX_DiscardUnknown() {
	xxx_messageInfo_GenreScroll.DiscardUnknown(m)
}

var xxx_messageInfo_GenreScroll proto.InternalMessageInfo

func (m *GenreScroll) GetScrollGuid() uint64 {
	if m != nil {
		return m.ScrollGuid
	}
	return 0
}

func (m *GenreScroll) GetScrollId() int32 {
	if m != nil {
		return m.ScrollId
	}
	return 0
}

func (m *GenreScroll) GetLocationSlot() int32 {
	if m != nil {
		return m.LocationSlot
	}
	return 0
}

func (m *GenreScroll) GetSecondaryScrolls() []*GenreSecondaryScroll {
	if m != nil {
		return m.SecondaryScrolls
	}
	return nil
}

type GenreSecondaryScroll struct {
	ScrollGuid           uint64   `protobuf:"varint,1,opt,name=scroll_guid,json=scrollGuid,proto3" json:"scroll_guid,omitempty"`
	ScrollId             int32    `protobuf:"varint,2,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenreSecondaryScroll) Reset()         { *m = GenreSecondaryScroll{} }
func (m *GenreSecondaryScroll) String() string { return proto.CompactTextString(m) }
func (*GenreSecondaryScroll) ProtoMessage()    {}
func (*GenreSecondaryScroll) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{23}
}

func (m *GenreSecondaryScroll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenreSecondaryScroll.Unmarshal(m, b)
}
func (m *GenreSecondaryScroll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenreSecondaryScroll.Marshal(b, m, deterministic)
}
func (m *GenreSecondaryScroll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenreSecondaryScroll.Merge(m, src)
}
func (m *GenreSecondaryScroll) XXX_Size() int {
	return xxx_messageInfo_GenreSecondaryScroll.Size(m)
}
func (m *GenreSecondaryScroll) XXX_DiscardUnknown() {
	xxx_messageInfo_GenreSecondaryScroll.DiscardUnknown(m)
}

var xxx_messageInfo_GenreSecondaryScroll proto.InternalMessageInfo

func (m *GenreSecondaryScroll) GetScrollGuid() uint64 {
	if m != nil {
		return m.ScrollGuid
	}
	return 0
}

func (m *GenreSecondaryScroll) GetScrollId() int32 {
	if m != nil {
		return m.ScrollId
	}
	return 0
}

type GenreSkill struct {
	SkillId              int32    `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillLevel           int32    `protobuf:"varint,2,opt,name=skill_level,json=skillLevel,proto3" json:"skill_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenreSkill) Reset()         { *m = GenreSkill{} }
func (m *GenreSkill) String() string { return proto.CompactTextString(m) }
func (*GenreSkill) ProtoMessage()    {}
func (*GenreSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{24}
}

func (m *GenreSkill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenreSkill.Unmarshal(m, b)
}
func (m *GenreSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenreSkill.Marshal(b, m, deterministic)
}
func (m *GenreSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenreSkill.Merge(m, src)
}
func (m *GenreSkill) XXX_Size() int {
	return xxx_messageInfo_GenreSkill.Size(m)
}
func (m *GenreSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_GenreSkill.DiscardUnknown(m)
}

var xxx_messageInfo_GenreSkill proto.InternalMessageInfo

func (m *GenreSkill) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *GenreSkill) GetSkillLevel() int32 {
	if m != nil {
		return m.SkillLevel
	}
	return 0
}

type GenreSkin struct {
	SkinGuid             uint64   `protobuf:"varint,1,opt,name=skin_guid,json=skinGuid,proto3" json:"skin_guid,omitempty"`
	SkinId               uint32   `protobuf:"varint,2,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenreSkin) Reset()         { *m = GenreSkin{} }
func (m *GenreSkin) String() string { return proto.CompactTextString(m) }
func (*GenreSkin) ProtoMessage()    {}
func (*GenreSkin) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{25}
}

func (m *GenreSkin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenreSkin.Unmarshal(m, b)
}
func (m *GenreSkin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenreSkin.Marshal(b, m, deterministic)
}
func (m *GenreSkin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenreSkin.Merge(m, src)
}
func (m *GenreSkin) XXX_Size() int {
	return xxx_messageInfo_GenreSkin.Size(m)
}
func (m *GenreSkin) XXX_DiscardUnknown() {
	xxx_messageInfo_GenreSkin.DiscardUnknown(m)
}

var xxx_messageInfo_GenreSkin proto.InternalMessageInfo

func (m *GenreSkin) GetSkinGuid() uint64 {
	if m != nil {
		return m.SkinGuid
	}
	return 0
}

func (m *GenreSkin) GetSkinId() uint32 {
	if m != nil {
		return m.SkinId
	}
	return 0
}

type GameGenre struct {
	GenreId              uint32                     `protobuf:"varint,1,opt,name=genre_id,json=genreId,proto3" json:"genre_id,omitempty"`
	GenreName            string                     `protobuf:"bytes,2,opt,name=genre_name,json=genreName,proto3" json:"genre_name,omitempty"`
	Equipment            []*GenreEquipment          `protobuf:"bytes,3,rep,name=equipment,proto3" json:"equipment,omitempty"`
	ScrollChain1         []*GenreScroll             `protobuf:"bytes,4,rep,name=scroll_chain1,json=scrollChain1,proto3" json:"scroll_chain1,omitempty"`
	ScrollChain2         []*GenreScroll             `protobuf:"bytes,5,rep,name=scroll_chain2,json=scrollChain2,proto3" json:"scroll_chain2,omitempty"`
	SkillChain1          []*GenreSkill              `protobuf:"bytes,6,rep,name=skill_chain1,json=skillChain1,proto3" json:"skill_chain1,omitempty"`
	SkillChain2          []*GenreSkill              `protobuf:"bytes,7,rep,name=skill_chain2,json=skillChain2,proto3" json:"skill_chain2,omitempty"`
	UltraSkill           *GenreSkill                `protobuf:"bytes,8,opt,name=ultra_skill,json=ultraSkill,proto3" json:"ultra_skill,omitempty"`
	RefineSkill          []*PlayerSkill             `protobuf:"bytes,9,rep,name=refine_skill,json=refineSkill,proto3" json:"refine_skill,omitempty"`
	Skin                 *GenreSkin                 `protobuf:"bytes,10,opt,name=skin,proto3" json:"skin,omitempty"`
	SkinPropSelect       map[uint32]*SkinPropSelect `protobuf:"bytes,11,rep,name=skin_prop_select,json=skinPropSelect,proto3" json:"skin_prop_select,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsKuanglongActive    int32                      `protobuf:"varint,12,opt,name=is_kuanglong_active,json=isKuanglongActive,proto3" json:"is_kuanglong_active,omitempty"`
	GenrePower           int32                      `protobuf:"varint,13,opt,name=genre_power,json=genrePower,proto3" json:"genre_power,omitempty"`
	HuantiInfo           *HuantiInfo                `protobuf:"bytes,14,opt,name=huanti_info,json=huantiInfo,proto3" json:"huanti_info,omitempty"`
	ReplaceSuitId        int32                      `protobuf:"varint,15,opt,name=replace_suit_id,json=replaceSuitId,proto3" json:"replace_suit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GameGenre) Reset()         { *m = GameGenre{} }
func (m *GameGenre) String() string { return proto.CompactTextString(m) }
func (*GameGenre) ProtoMessage()    {}
func (*GameGenre) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{26}
}

func (m *GameGenre) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameGenre.Unmarshal(m, b)
}
func (m *GameGenre) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameGenre.Marshal(b, m, deterministic)
}
func (m *GameGenre) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameGenre.Merge(m, src)
}
func (m *GameGenre) XXX_Size() int {
	return xxx_messageInfo_GameGenre.Size(m)
}
func (m *GameGenre) XXX_DiscardUnknown() {
	xxx_messageInfo_GameGenre.DiscardUnknown(m)
}

var xxx_messageInfo_GameGenre proto.InternalMessageInfo

func (m *GameGenre) GetGenreId() uint32 {
	if m != nil {
		return m.GenreId
	}
	return 0
}

func (m *GameGenre) GetGenreName() string {
	if m != nil {
		return m.GenreName
	}
	return ""
}

func (m *GameGenre) GetEquipment() []*GenreEquipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *GameGenre) GetScrollChain1() []*GenreScroll {
	if m != nil {
		return m.ScrollChain1
	}
	return nil
}

func (m *GameGenre) GetScrollChain2() []*GenreScroll {
	if m != nil {
		return m.ScrollChain2
	}
	return nil
}

func (m *GameGenre) GetSkillChain1() []*GenreSkill {
	if m != nil {
		return m.SkillChain1
	}
	return nil
}

func (m *GameGenre) GetSkillChain2() []*GenreSkill {
	if m != nil {
		return m.SkillChain2
	}
	return nil
}

func (m *GameGenre) GetUltraSkill() *GenreSkill {
	if m != nil {
		return m.UltraSkill
	}
	return nil
}

func (m *GameGenre) GetRefineSkill() []*PlayerSkill {
	if m != nil {
		return m.RefineSkill
	}
	return nil
}

func (m *GameGenre) GetSkin() *GenreSkin {
	if m != nil {
		return m.Skin
	}
	return nil
}

func (m *GameGenre) GetSkinPropSelect() map[uint32]*SkinPropSelect {
	if m != nil {
		return m.SkinPropSelect
	}
	return nil
}

func (m *GameGenre) GetIsKuanglongActive() int32 {
	if m != nil {
		return m.IsKuanglongActive
	}
	return 0
}

func (m *GameGenre) GetGenrePower() int32 {
	if m != nil {
		return m.GenrePower
	}
	return 0
}

func (m *GameGenre) GetHuantiInfo() *HuantiInfo {
	if m != nil {
		return m.HuantiInfo
	}
	return nil
}

func (m *GameGenre) GetReplaceSuitId() int32 {
	if m != nil {
		return m.ReplaceSuitId
	}
	return 0
}

type GameEquipmentAttribute struct {
	Id                   uint32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slots                []*GameRandomRangeAttributeSlot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GameEquipmentAttribute) Reset()         { *m = GameEquipmentAttribute{} }
func (m *GameEquipmentAttribute) String() string { return proto.CompactTextString(m) }
func (*GameEquipmentAttribute) ProtoMessage()    {}
func (*GameEquipmentAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{27}
}

func (m *GameEquipmentAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEquipmentAttribute.Unmarshal(m, b)
}
func (m *GameEquipmentAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEquipmentAttribute.Marshal(b, m, deterministic)
}
func (m *GameEquipmentAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEquipmentAttribute.Merge(m, src)
}
func (m *GameEquipmentAttribute) XXX_Size() int {
	return xxx_messageInfo_GameEquipmentAttribute.Size(m)
}
func (m *GameEquipmentAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEquipmentAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_GameEquipmentAttribute proto.InternalMessageInfo

func (m *GameEquipmentAttribute) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameEquipmentAttribute) GetSlots() []*GameRandomRangeAttributeSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type GameItemList struct {
	Items                []*GameItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GameItemList) Reset()         { *m = GameItemList{} }
func (m *GameItemList) String() string { return proto.CompactTextString(m) }
func (*GameItemList) ProtoMessage()    {}
func (*GameItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{28}
}

func (m *GameItemList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameItemList.Unmarshal(m, b)
}
func (m *GameItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameItemList.Marshal(b, m, deterministic)
}
func (m *GameItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameItemList.Merge(m, src)
}
func (m *GameItemList) XXX_Size() int {
	return xxx_messageInfo_GameItemList.Size(m)
}
func (m *GameItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_GameItemList.DiscardUnknown(m)
}

var xxx_messageInfo_GameItemList proto.InternalMessageInfo

func (m *GameItemList) GetItems() []*GameItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type GameItem struct {
	ItemGuid             uint64    `protobuf:"varint,1,opt,name=item_guid,json=itemGuid,proto3" json:"item_guid,omitempty"`
	ItemMetaId           uint32    `protobuf:"varint,2,opt,name=item_meta_id,json=itemMetaId,proto3" json:"item_meta_id,omitempty"`
	Num                  int32     `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	ItemType             ETypeItem `protobuf:"varint,4,opt,name=item_type,json=itemType,proto3,enum=Adoter.Asset.ETypeItem" json:"item_type,omitempty"`
	HeroGuid             uint64    `protobuf:"varint,5,opt,name=hero_guid,json=heroGuid,proto3" json:"hero_guid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameItem) Reset()         { *m = GameItem{} }
func (m *GameItem) String() string { return proto.CompactTextString(m) }
func (*GameItem) ProtoMessage()    {}
func (*GameItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{29}
}

func (m *GameItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameItem.Unmarshal(m, b)
}
func (m *GameItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameItem.Marshal(b, m, deterministic)
}
func (m *GameItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameItem.Merge(m, src)
}
func (m *GameItem) XXX_Size() int {
	return xxx_messageInfo_GameItem.Size(m)
}
func (m *GameItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GameItem.DiscardUnknown(m)
}

var xxx_messageInfo_GameItem proto.InternalMessageInfo

func (m *GameItem) GetItemGuid() uint64 {
	if m != nil {
		return m.ItemGuid
	}
	return 0
}

func (m *GameItem) GetItemMetaId() uint32 {
	if m != nil {
		return m.ItemMetaId
	}
	return 0
}

func (m *GameItem) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *GameItem) GetItemType() ETypeItem {
	if m != nil {
		return m.ItemType
	}
	return ETypeItem_TItem_None
}

func (m *GameItem) GetHeroGuid() uint64 {
	if m != nil {
		return m.HeroGuid
	}
	return 0
}

type PBItemData struct {
	Brife                *GameItem      `protobuf:"bytes,1,opt,name=brife,proto3" json:"brife,omitempty"`
	EquipData            *GameEquipment `protobuf:"bytes,2,opt,name=equip_data,json=equipData,proto3" json:"equip_data,omitempty"`
	ScrollData           *GameScroll    `protobuf:"bytes,3,opt,name=scroll_data,json=scrollData,proto3" json:"scroll_data,omitempty"`
	SortWeight           int32          `protobuf:"varint,4,opt,name=sort_weight,json=sortWeight,proto3" json:"sort_weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PBItemData) Reset()         { *m = PBItemData{} }
func (m *PBItemData) String() string { return proto.CompactTextString(m) }
func (*PBItemData) ProtoMessage()    {}
func (*PBItemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{30}
}

func (m *PBItemData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBItemData.Unmarshal(m, b)
}
func (m *PBItemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBItemData.Marshal(b, m, deterministic)
}
func (m *PBItemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBItemData.Merge(m, src)
}
func (m *PBItemData) XXX_Size() int {
	return xxx_messageInfo_PBItemData.Size(m)
}
func (m *PBItemData) XXX_DiscardUnknown() {
	xxx_messageInfo_PBItemData.DiscardUnknown(m)
}

var xxx_messageInfo_PBItemData proto.InternalMessageInfo

func (m *PBItemData) GetBrife() *GameItem {
	if m != nil {
		return m.Brife
	}
	return nil
}

func (m *PBItemData) GetEquipData() *GameEquipment {
	if m != nil {
		return m.EquipData
	}
	return nil
}

func (m *PBItemData) GetScrollData() *GameScroll {
	if m != nil {
		return m.ScrollData
	}
	return nil
}

func (m *PBItemData) GetSortWeight() int32 {
	if m != nil {
		return m.SortWeight
	}
	return 0
}

type ItemSlot struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ItemType `protobuf:"varint,2,opt,name=type,proto3,enum=Adoter.Asset.ItemType" json:"type,omitempty"`
	Num                  uint32   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemSlot) Reset()         { *m = ItemSlot{} }
func (m *ItemSlot) String() string { return proto.CompactTextString(m) }
func (*ItemSlot) ProtoMessage()    {}
func (*ItemSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{31}
}

func (m *ItemSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemSlot.Unmarshal(m, b)
}
func (m *ItemSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemSlot.Marshal(b, m, deterministic)
}
func (m *ItemSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemSlot.Merge(m, src)
}
func (m *ItemSlot) XXX_Size() int {
	return xxx_messageInfo_ItemSlot.Size(m)
}
func (m *ItemSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemSlot.DiscardUnknown(m)
}

var xxx_messageInfo_ItemSlot proto.InternalMessageInfo

func (m *ItemSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemSlot) GetType() ItemType {
	if m != nil {
		return m.Type
	}
	return ItemType_ItemType_Null
}

func (m *ItemSlot) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type GUIDItemSlot struct {
	Guid                 uint64         `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Id                   uint32         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ItemType       `protobuf:"varint,3,opt,name=type,proto3,enum=Adoter.Asset.ItemType" json:"type,omitempty"`
	Num                  uint32         `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	HeroGuid             uint64         `protobuf:"varint,5,opt,name=hero_guid,json=heroGuid,proto3" json:"hero_guid,omitempty"`
	InventoryType        INVENTORY_TYPE `protobuf:"varint,6,opt,name=inventory_type,json=inventoryType,proto3,enum=Adoter.Asset.INVENTORY_TYPE" json:"inventory_type,omitempty"`
	ItemIndex            uint32         `protobuf:"varint,7,opt,name=item_index,json=itemIndex,proto3" json:"item_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GUIDItemSlot) Reset()         { *m = GUIDItemSlot{} }
func (m *GUIDItemSlot) String() string { return proto.CompactTextString(m) }
func (*GUIDItemSlot) ProtoMessage()    {}
func (*GUIDItemSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{32}
}

func (m *GUIDItemSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GUIDItemSlot.Unmarshal(m, b)
}
func (m *GUIDItemSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GUIDItemSlot.Marshal(b, m, deterministic)
}
func (m *GUIDItemSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GUIDItemSlot.Merge(m, src)
}
func (m *GUIDItemSlot) XXX_Size() int {
	return xxx_messageInfo_GUIDItemSlot.Size(m)
}
func (m *GUIDItemSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_GUIDItemSlot.DiscardUnknown(m)
}

var xxx_messageInfo_GUIDItemSlot proto.InternalMessageInfo

func (m *GUIDItemSlot) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GUIDItemSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GUIDItemSlot) GetType() ItemType {
	if m != nil {
		return m.Type
	}
	return ItemType_ItemType_Null
}

func (m *GUIDItemSlot) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *GUIDItemSlot) GetHeroGuid() uint64 {
	if m != nil {
		return m.HeroGuid
	}
	return 0
}

func (m *GUIDItemSlot) GetInventoryType() INVENTORY_TYPE {
	if m != nil {
		return m.InventoryType
	}
	return INVENTORY_TYPE_INVENTORY_TYPE_NULL
}

func (m *GUIDItemSlot) GetItemIndex() uint32 {
	if m != nil {
		return m.ItemIndex
	}
	return 0
}

type PBGuidList struct {
	Guid                 []uint64 `protobuf:"varint,1,rep,packed,name=guid,proto3" json:"guid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBGuidList) Reset()         { *m = PBGuidList{} }
func (m *PBGuidList) String() string { return proto.CompactTextString(m) }
func (*PBGuidList) ProtoMessage()    {}
func (*PBGuidList) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{33}
}

func (m *PBGuidList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBGuidList.Unmarshal(m, b)
}
func (m *PBGuidList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBGuidList.Marshal(b, m, deterministic)
}
func (m *PBGuidList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBGuidList.Merge(m, src)
}
func (m *PBGuidList) XXX_Size() int {
	return xxx_messageInfo_PBGuidList.Size(m)
}
func (m *PBGuidList) XXX_DiscardUnknown() {
	xxx_messageInfo_PBGuidList.DiscardUnknown(m)
}

var xxx_messageInfo_PBGuidList proto.InternalMessageInfo

func (m *PBGuidList) GetGuid() []uint64 {
	if m != nil {
		return m.Guid
	}
	return nil
}

//包裹
type PlayerInventory struct {
	InventoryType        INVENTORY_TYPE `protobuf:"varint,1,opt,name=inventory_type,json=inventoryType,proto3,enum=Adoter.Asset.INVENTORY_TYPE" json:"inventory_type,omitempty"`
	Items                []*Item_Item   `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayerInventory) Reset()         { *m = PlayerInventory{} }
func (m *PlayerInventory) String() string { return proto.CompactTextString(m) }
func (*PlayerInventory) ProtoMessage()    {}
func (*PlayerInventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{34}
}

func (m *PlayerInventory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInventory.Unmarshal(m, b)
}
func (m *PlayerInventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInventory.Marshal(b, m, deterministic)
}
func (m *PlayerInventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInventory.Merge(m, src)
}
func (m *PlayerInventory) XXX_Size() int {
	return xxx_messageInfo_PlayerInventory.Size(m)
}
func (m *PlayerInventory) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInventory.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInventory proto.InternalMessageInfo

func (m *PlayerInventory) GetInventoryType() INVENTORY_TYPE {
	if m != nil {
		return m.InventoryType
	}
	return INVENTORY_TYPE_INVENTORY_TYPE_NULL
}

func (m *PlayerInventory) GetItems() []*Item_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

//通用使用限制：存盘数据
type PlayerCommonLimit struct {
	CommonLimitId        int64    `protobuf:"varint,1,opt,name=common_limit_id,json=commonLimitId,proto3" json:"common_limit_id,omitempty"`
	TimeStamp            int32    `protobuf:"varint,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerCommonLimit) Reset()         { *m = PlayerCommonLimit{} }
func (m *PlayerCommonLimit) String() string { return proto.CompactTextString(m) }
func (*PlayerCommonLimit) ProtoMessage()    {}
func (*PlayerCommonLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{35}
}

func (m *PlayerCommonLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerCommonLimit.Unmarshal(m, b)
}
func (m *PlayerCommonLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerCommonLimit.Marshal(b, m, deterministic)
}
func (m *PlayerCommonLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCommonLimit.Merge(m, src)
}
func (m *PlayerCommonLimit) XXX_Size() int {
	return xxx_messageInfo_PlayerCommonLimit.Size(m)
}
func (m *PlayerCommonLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCommonLimit.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCommonLimit proto.InternalMessageInfo

func (m *PlayerCommonLimit) GetCommonLimitId() int64 {
	if m != nil {
		return m.CommonLimitId
	}
	return 0
}

func (m *PlayerCommonLimit) GetTimeStamp() int32 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *PlayerCommonLimit) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//冷却：存盘数据
type PlayerCoolDown struct {
	CoolDownId           int64    `protobuf:"varint,1,opt,name=cool_down_id,json=coolDownId,proto3" json:"cool_down_id,omitempty"`
	TimeStamp            int32    `protobuf:"varint,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerCoolDown) Reset()         { *m = PlayerCoolDown{} }
func (m *PlayerCoolDown) String() string { return proto.CompactTextString(m) }
func (*PlayerCoolDown) ProtoMessage()    {}
func (*PlayerCoolDown) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{36}
}

func (m *PlayerCoolDown) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerCoolDown.Unmarshal(m, b)
}
func (m *PlayerCoolDown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerCoolDown.Marshal(b, m, deterministic)
}
func (m *PlayerCoolDown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCoolDown.Merge(m, src)
}
func (m *PlayerCoolDown) XXX_Size() int {
	return xxx_messageInfo_PlayerCoolDown.Size(m)
}
func (m *PlayerCoolDown) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCoolDown.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCoolDown proto.InternalMessageInfo

func (m *PlayerCoolDown) GetCoolDownId() int64 {
	if m != nil {
		return m.CoolDownId
	}
	return 0
}

func (m *PlayerCoolDown) GetTimeStamp() int32 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

//
//成就系统不再区分是事件还是状态
//
//如果是事件成就则记录count，即事件次数，场景的事件成就有：玩家杀怪10个
//
//如果是状态成就则不必记录count，即无用，常见的状态成就有：玩家等级达到xx级
//
type PlayerAchievement struct {
	AchievementId int64 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	//int32 count = 2; //事件次数//废弃，都使用progress_value进行进度保存
	UpdateTime           int32    `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	RewardId             int64    `protobuf:"varint,4,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Timeout              int32    `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ProgressRewardTimes  int32    `protobuf:"varint,6,opt,name=progress_reward_times,json=progressRewardTimes,proto3" json:"progress_reward_times,omitempty"`
	ProgressValue        int64    `protobuf:"varint,7,opt,name=progress_value,json=progressValue,proto3" json:"progress_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerAchievement) Reset()         { *m = PlayerAchievement{} }
func (m *PlayerAchievement) String() string { return proto.CompactTextString(m) }
func (*PlayerAchievement) ProtoMessage()    {}
func (*PlayerAchievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{37}
}

func (m *PlayerAchievement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerAchievement.Unmarshal(m, b)
}
func (m *PlayerAchievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerAchievement.Marshal(b, m, deterministic)
}
func (m *PlayerAchievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAchievement.Merge(m, src)
}
func (m *PlayerAchievement) XXX_Size() int {
	return xxx_messageInfo_PlayerAchievement.Size(m)
}
func (m *PlayerAchievement) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAchievement.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAchievement proto.InternalMessageInfo

func (m *PlayerAchievement) GetAchievementId() int64 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func (m *PlayerAchievement) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *PlayerAchievement) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *PlayerAchievement) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *PlayerAchievement) GetProgressRewardTimes() int32 {
	if m != nil {
		return m.ProgressRewardTimes
	}
	return 0
}

func (m *PlayerAchievement) GetProgressValue() int64 {
	if m != nil {
		return m.ProgressValue
	}
	return 0
}

//玩家声望数据
type PlayerReputation struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	UpdateTime           int32    `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	LastResumeTime       int32    `protobuf:"varint,4,opt,name=last_resume_time,json=lastResumeTime,proto3" json:"last_resume_time,omitempty"`
	TotalValue           int64    `protobuf:"varint,5,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	TotalCostValue       int64    `protobuf:"varint,6,opt,name=total_cost_value,json=totalCostValue,proto3" json:"total_cost_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerReputation) Reset()         { *m = PlayerReputation{} }
func (m *PlayerReputation) String() string { return proto.CompactTextString(m) }
func (*PlayerReputation) ProtoMessage()    {}
func (*PlayerReputation) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{38}
}

func (m *PlayerReputation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerReputation.Unmarshal(m, b)
}
func (m *PlayerReputation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerReputation.Marshal(b, m, deterministic)
}
func (m *PlayerReputation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerReputation.Merge(m, src)
}
func (m *PlayerReputation) XXX_Size() int {
	return xxx_messageInfo_PlayerReputation.Size(m)
}
func (m *PlayerReputation) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerReputation.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerReputation proto.InternalMessageInfo

func (m *PlayerReputation) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PlayerReputation) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PlayerReputation) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *PlayerReputation) GetLastResumeTime() int32 {
	if m != nil {
		return m.LastResumeTime
	}
	return 0
}

func (m *PlayerReputation) GetTotalValue() int64 {
	if m != nil {
		return m.TotalValue
	}
	return 0
}

func (m *PlayerReputation) GetTotalCostValue() int64 {
	if m != nil {
		return m.TotalCostValue
	}
	return 0
}

//声望自动奖励
type PlayerAutoReward struct {
	RepuType             REPUTATION_TYPE `protobuf:"varint,1,opt,name=repu_type,json=repuType,proto3,enum=Adoter.Asset.REPUTATION_TYPE" json:"repu_type,omitempty"`
	ActivityId           int64           `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RewardList           []int64         `protobuf:"varint,3,rep,packed,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PlayerAutoReward) Reset()         { *m = PlayerAutoReward{} }
func (m *PlayerAutoReward) String() string { return proto.CompactTextString(m) }
func (*PlayerAutoReward) ProtoMessage()    {}
func (*PlayerAutoReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{39}
}

func (m *PlayerAutoReward) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerAutoReward.Unmarshal(m, b)
}
func (m *PlayerAutoReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerAutoReward.Marshal(b, m, deterministic)
}
func (m *PlayerAutoReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAutoReward.Merge(m, src)
}
func (m *PlayerAutoReward) XXX_Size() int {
	return xxx_messageInfo_PlayerAutoReward.Size(m)
}
func (m *PlayerAutoReward) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAutoReward.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAutoReward proto.InternalMessageInfo

func (m *PlayerAutoReward) GetRepuType() REPUTATION_TYPE {
	if m != nil {
		return m.RepuType
	}
	return REPUTATION_TYPE_REPUTATION_TYPE_NULL
}

func (m *PlayerAutoReward) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *PlayerAutoReward) GetRewardList() []int64 {
	if m != nil {
		return m.RewardList
	}
	return nil
}

//商店商品
type ShopItem struct {
	ItemId               uint32   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	BuyCount             uint32   `protobuf:"varint,2,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	UnlockTime           uint32   `protobuf:"varint,3,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
	Version              uint32   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ExpireTime           uint32   `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShopItem) Reset()         { *m = ShopItem{} }
func (m *ShopItem) String() string { return proto.CompactTextString(m) }
func (*ShopItem) ProtoMessage()    {}
func (*ShopItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{40}
}

func (m *ShopItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShopItem.Unmarshal(m, b)
}
func (m *ShopItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShopItem.Marshal(b, m, deterministic)
}
func (m *ShopItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopItem.Merge(m, src)
}
func (m *ShopItem) XXX_Size() int {
	return xxx_messageInfo_ShopItem.Size(m)
}
func (m *ShopItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopItem.DiscardUnknown(m)
}

var xxx_messageInfo_ShopItem proto.InternalMessageInfo

func (m *ShopItem) GetItemId() uint32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ShopItem) GetBuyCount() uint32 {
	if m != nil {
		return m.BuyCount
	}
	return 0
}

func (m *ShopItem) GetUnlockTime() uint32 {
	if m != nil {
		return m.UnlockTime
	}
	return 0
}

func (m *ShopItem) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ShopItem) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

//商店
type Shop struct {
	ShopId               uint32      `protobuf:"varint,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	ShopVersion          uint32      `protobuf:"varint,2,opt,name=shop_version,json=shopVersion,proto3" json:"shop_version,omitempty"`
	ItemInfo             []*ShopItem `protobuf:"bytes,3,rep,name=item_info,json=itemInfo,proto3" json:"item_info,omitempty"`
	RefreshTime          uint32      `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	RefreshCount         uint32      `protobuf:"varint,5,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
	RefreshCost          *ItemSlot   `protobuf:"bytes,6,opt,name=refresh_cost,json=refreshCost,proto3" json:"refresh_cost,omitempty"`
	TodaySystemRefresh   bool        `protobuf:"varint,7,opt,name=today_system_refresh,json=todaySystemRefresh,proto3" json:"today_system_refresh,omitempty"`
	LastRefreshTime      uint32      `protobuf:"varint,8,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	UnlockTime           uint32      `protobuf:"varint,9,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
	FirstRechargeVersion uint32      `protobuf:"varint,10,opt,name=first_recharge_version,json=firstRechargeVersion,proto3" json:"first_recharge_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Shop) Reset()         { *m = Shop{} }
func (m *Shop) String() string { return proto.CompactTextString(m) }
func (*Shop) ProtoMessage()    {}
func (*Shop) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{41}
}

func (m *Shop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shop.Unmarshal(m, b)
}
func (m *Shop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shop.Marshal(b, m, deterministic)
}
func (m *Shop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shop.Merge(m, src)
}
func (m *Shop) XXX_Size() int {
	return xxx_messageInfo_Shop.Size(m)
}
func (m *Shop) XXX_DiscardUnknown() {
	xxx_messageInfo_Shop.DiscardUnknown(m)
}

var xxx_messageInfo_Shop proto.InternalMessageInfo

func (m *Shop) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *Shop) GetShopVersion() uint32 {
	if m != nil {
		return m.ShopVersion
	}
	return 0
}

func (m *Shop) GetItemInfo() []*ShopItem {
	if m != nil {
		return m.ItemInfo
	}
	return nil
}

func (m *Shop) GetRefreshTime() uint32 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *Shop) GetRefreshCount() uint32 {
	if m != nil {
		return m.RefreshCount
	}
	return 0
}

func (m *Shop) GetRefreshCost() *ItemSlot {
	if m != nil {
		return m.RefreshCost
	}
	return nil
}

func (m *Shop) GetTodaySystemRefresh() bool {
	if m != nil {
		return m.TodaySystemRefresh
	}
	return false
}

func (m *Shop) GetLastRefreshTime() uint32 {
	if m != nil {
		return m.LastRefreshTime
	}
	return 0
}

func (m *Shop) GetUnlockTime() uint32 {
	if m != nil {
		return m.UnlockTime
	}
	return 0
}

func (m *Shop) GetFirstRechargeVersion() uint32 {
	if m != nil {
		return m.FirstRechargeVersion
	}
	return 0
}

//邮件
type PlayerMail struct {
	MailId        int64  `protobuf:"varint,1,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	SendTime      int32  `protobuf:"varint,2,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	ReadedTime    int32  `protobuf:"varint,3,opt,name=readed_time,json=readedTime,proto3" json:"readed_time,omitempty"`
	GetRewardTime int32  `protobuf:"varint,4,opt,name=get_reward_time,json=getRewardTime,proto3" json:"get_reward_time,omitempty"`
	DeleteTime    int32  `protobuf:"varint,5,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	Title         []byte `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Content       []byte `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	RewardId      int64  `protobuf:"varint,8,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	ItemId        int64  `protobuf:"varint,9,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemCount     int64  `protobuf:"varint,10,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	//PlayerRankReward rank_reward = 11; //排行榜奖励附件
	RepuType  REPUTATION_TYPE `protobuf:"varint,12,opt,name=repu_type,json=repuType,proto3,enum=Adoter.Asset.REPUTATION_TYPE" json:"repu_type,omitempty"`
	RepuCount int32           `protobuf:"varint,13,opt,name=repu_count,json=repuCount,proto3" json:"repu_count,omitempty"`
	//PlayerVoteReward vote_reward = 14; //投票奖励附件
	//PlayerClanDismiss dismiss_data = 15; //解散缘由
	MailType             MAIL_TYPE `protobuf:"varint,16,opt,name=mail_type,json=mailType,proto3,enum=Adoter.Asset.MAIL_TYPE" json:"mail_type,omitempty"`
	AttackName           []byte    `protobuf:"bytes,17,opt,name=attack_name,json=attackName,proto3" json:"attack_name,omitempty"`
	ResourceX            int64     `protobuf:"varint,18,opt,name=resource_x,json=resourceX,proto3" json:"resource_x,omitempty"`
	ResourceZ            int64     `protobuf:"varint,19,opt,name=resource_z,json=resourceZ,proto3" json:"resource_z,omitempty"`
	ResourceId           int64     `protobuf:"varint,20,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	AttackWinRst         bool      `protobuf:"varint,21,opt,name=attack_win_rst,json=attackWinRst,proto3" json:"attack_win_rst,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayerMail) Reset()         { *m = PlayerMail{} }
func (m *PlayerMail) String() string { return proto.CompactTextString(m) }
func (*PlayerMail) ProtoMessage()    {}
func (*PlayerMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{42}
}

func (m *PlayerMail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMail.Unmarshal(m, b)
}
func (m *PlayerMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMail.Marshal(b, m, deterministic)
}
func (m *PlayerMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMail.Merge(m, src)
}
func (m *PlayerMail) XXX_Size() int {
	return xxx_messageInfo_PlayerMail.Size(m)
}
func (m *PlayerMail) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMail.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMail proto.InternalMessageInfo

func (m *PlayerMail) GetMailId() int64 {
	if m != nil {
		return m.MailId
	}
	return 0
}

func (m *PlayerMail) GetSendTime() int32 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *PlayerMail) GetReadedTime() int32 {
	if m != nil {
		return m.ReadedTime
	}
	return 0
}

func (m *PlayerMail) GetGetRewardTime() int32 {
	if m != nil {
		return m.GetRewardTime
	}
	return 0
}

func (m *PlayerMail) GetDeleteTime() int32 {
	if m != nil {
		return m.DeleteTime
	}
	return 0
}

func (m *PlayerMail) GetTitle() []byte {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *PlayerMail) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PlayerMail) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *PlayerMail) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *PlayerMail) GetItemCount() int64 {
	if m != nil {
		return m.ItemCount
	}
	return 0
}

func (m *PlayerMail) GetRepuType() REPUTATION_TYPE {
	if m != nil {
		return m.RepuType
	}
	return REPUTATION_TYPE_REPUTATION_TYPE_NULL
}

func (m *PlayerMail) GetRepuCount() int32 {
	if m != nil {
		return m.RepuCount
	}
	return 0
}

func (m *PlayerMail) GetMailType() MAIL_TYPE {
	if m != nil {
		return m.MailType
	}
	return MAIL_TYPE_MAIL_TYPE_NULL
}

func (m *PlayerMail) GetAttackName() []byte {
	if m != nil {
		return m.AttackName
	}
	return nil
}

func (m *PlayerMail) GetResourceX() int64 {
	if m != nil {
		return m.ResourceX
	}
	return 0
}

func (m *PlayerMail) GetResourceZ() int64 {
	if m != nil {
		return m.ResourceZ
	}
	return 0
}

func (m *PlayerMail) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *PlayerMail) GetAttackWinRst() bool {
	if m != nil {
		return m.AttackWinRst
	}
	return false
}

//好友
type PlayerFriend struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName           []byte   `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerFriend) Reset()         { *m = PlayerFriend{} }
func (m *PlayerFriend) String() string { return proto.CompactTextString(m) }
func (*PlayerFriend) ProtoMessage()    {}
func (*PlayerFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{43}
}

func (m *PlayerFriend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerFriend.Unmarshal(m, b)
}
func (m *PlayerFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerFriend.Marshal(b, m, deterministic)
}
func (m *PlayerFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerFriend.Merge(m, src)
}
func (m *PlayerFriend) XXX_Size() int {
	return xxx_messageInfo_PlayerFriend.Size(m)
}
func (m *PlayerFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerFriend.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerFriend proto.InternalMessageInfo

func (m *PlayerFriend) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerFriend) GetPlayerName() []byte {
	if m != nil {
		return m.PlayerName
	}
	return nil
}

//黑名单
type PlayerBlack struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName           []byte   `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBlack) Reset()         { *m = PlayerBlack{} }
func (m *PlayerBlack) String() string { return proto.CompactTextString(m) }
func (*PlayerBlack) ProtoMessage()    {}
func (*PlayerBlack) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{44}
}

func (m *PlayerBlack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBlack.Unmarshal(m, b)
}
func (m *PlayerBlack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBlack.Marshal(b, m, deterministic)
}
func (m *PlayerBlack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBlack.Merge(m, src)
}
func (m *PlayerBlack) XXX_Size() int {
	return xxx_messageInfo_PlayerBlack.Size(m)
}
func (m *PlayerBlack) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBlack.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBlack proto.InternalMessageInfo

func (m *PlayerBlack) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerBlack) GetPlayerName() []byte {
	if m != nil {
		return m.PlayerName
	}
	return nil
}

//物品
type ItemElement struct {
	InventoryType        INVENTORY_TYPE `protobuf:"varint,1,opt,name=inventory_type,json=inventoryType,proto3,enum=Adoter.Asset.INVENTORY_TYPE" json:"inventory_type,omitempty"`
	ItemIndex            int32          `protobuf:"varint,2,opt,name=item_index,json=itemIndex,proto3" json:"item_index,omitempty"`
	ItemId               int64          `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemCount            int64          `protobuf:"varint,4,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	ItemSlot             int32          `protobuf:"varint,5,opt,name=item_slot,json=itemSlot,proto3" json:"item_slot,omitempty"`
	ItemGuid             uint64         `protobuf:"varint,6,opt,name=item_guid,json=itemGuid,proto3" json:"item_guid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ItemElement) Reset()         { *m = ItemElement{} }
func (m *ItemElement) String() string { return proto.CompactTextString(m) }
func (*ItemElement) ProtoMessage()    {}
func (*ItemElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{45}
}

func (m *ItemElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemElement.Unmarshal(m, b)
}
func (m *ItemElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemElement.Marshal(b, m, deterministic)
}
func (m *ItemElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemElement.Merge(m, src)
}
func (m *ItemElement) XXX_Size() int {
	return xxx_messageInfo_ItemElement.Size(m)
}
func (m *ItemElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemElement.DiscardUnknown(m)
}

var xxx_messageInfo_ItemElement proto.InternalMessageInfo

func (m *ItemElement) GetInventoryType() INVENTORY_TYPE {
	if m != nil {
		return m.InventoryType
	}
	return INVENTORY_TYPE_INVENTORY_TYPE_NULL
}

func (m *ItemElement) GetItemIndex() int32 {
	if m != nil {
		return m.ItemIndex
	}
	return 0
}

func (m *ItemElement) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ItemElement) GetItemCount() int64 {
	if m != nil {
		return m.ItemCount
	}
	return 0
}

func (m *ItemElement) GetItemSlot() int32 {
	if m != nil {
		return m.ItemSlot
	}
	return 0
}

func (m *ItemElement) GetItemGuid() uint64 {
	if m != nil {
		return m.ItemGuid
	}
	return 0
}

//定期更新数据结构
type PlayerUpdate struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LastTimestamp        int32    `protobuf:"varint,2,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerUpdate) Reset()         { *m = PlayerUpdate{} }
func (m *PlayerUpdate) String() string { return proto.CompactTextString(m) }
func (*PlayerUpdate) ProtoMessage()    {}
func (*PlayerUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{46}
}

func (m *PlayerUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerUpdate.Unmarshal(m, b)
}
func (m *PlayerUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerUpdate.Marshal(b, m, deterministic)
}
func (m *PlayerUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerUpdate.Merge(m, src)
}
func (m *PlayerUpdate) XXX_Size() int {
	return xxx_messageInfo_PlayerUpdate.Size(m)
}
func (m *PlayerUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerUpdate proto.InternalMessageInfo

func (m *PlayerUpdate) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerUpdate) GetLastTimestamp() int32 {
	if m != nil {
		return m.LastTimestamp
	}
	return 0
}

type TXN struct {
	TxnId                int32    `protobuf:"varint,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	RstCode              int32    `protobuf:"varint,2,opt,name=rst_code,json=rstCode,proto3" json:"rst_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TXN) Reset()         { *m = TXN{} }
func (m *TXN) String() string { return proto.CompactTextString(m) }
func (*TXN) ProtoMessage()    {}
func (*TXN) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{47}
}

func (m *TXN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TXN.Unmarshal(m, b)
}
func (m *TXN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TXN.Marshal(b, m, deterministic)
}
func (m *TXN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TXN.Merge(m, src)
}
func (m *TXN) XXX_Size() int {
	return xxx_messageInfo_TXN.Size(m)
}
func (m *TXN) XXX_DiscardUnknown() {
	xxx_messageInfo_TXN.DiscardUnknown(m)
}

var xxx_messageInfo_TXN proto.InternalMessageInfo

func (m *TXN) GetTxnId() int32 {
	if m != nil {
		return m.TxnId
	}
	return 0
}

func (m *TXN) GetRstCode() int32 {
	if m != nil {
		return m.RstCode
	}
	return 0
}

//TXN(未决事务)
type PlayerTxn struct {
	TxnId                int32          `protobuf:"varint,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	TxnType              TXN_TYPE       `protobuf:"varint,2,opt,name=txn_type,json=txnType,proto3,enum=Adoter.Asset.TXN_TYPE" json:"txn_type,omitempty"`
	Result               TXN_RESULT     `protobuf:"varint,3,opt,name=result,proto3,enum=Adoter.Asset.TXN_RESULT" json:"result,omitempty"`
	Time                 int32          `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	DiamondCost          int64          `protobuf:"varint,5,opt,name=diamond_cost,json=diamondCost,proto3" json:"diamond_cost,omitempty"`
	MoneyCost            int64          `protobuf:"varint,6,opt,name=money_cost,json=moneyCost,proto3" json:"money_cost,omitempty"`
	ItemList             []*ItemElement `protobuf:"bytes,7,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayerTxn) Reset()         { *m = PlayerTxn{} }
func (m *PlayerTxn) String() string { return proto.CompactTextString(m) }
func (*PlayerTxn) ProtoMessage()    {}
func (*PlayerTxn) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{48}
}

func (m *PlayerTxn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerTxn.Unmarshal(m, b)
}
func (m *PlayerTxn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerTxn.Marshal(b, m, deterministic)
}
func (m *PlayerTxn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTxn.Merge(m, src)
}
func (m *PlayerTxn) XXX_Size() int {
	return xxx_messageInfo_PlayerTxn.Size(m)
}
func (m *PlayerTxn) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTxn.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTxn proto.InternalMessageInfo

func (m *PlayerTxn) GetTxnId() int32 {
	if m != nil {
		return m.TxnId
	}
	return 0
}

func (m *PlayerTxn) GetTxnType() TXN_TYPE {
	if m != nil {
		return m.TxnType
	}
	return TXN_TYPE_TXN_TYPE_NULL
}

func (m *PlayerTxn) GetResult() TXN_RESULT {
	if m != nil {
		return m.Result
	}
	return TXN_RESULT_TXN_RESULT_NULL
}

func (m *PlayerTxn) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PlayerTxn) GetDiamondCost() int64 {
	if m != nil {
		return m.DiamondCost
	}
	return 0
}

func (m *PlayerTxn) GetMoneyCost() int64 {
	if m != nil {
		return m.MoneyCost
	}
	return 0
}

func (m *PlayerTxn) GetItemList() []*ItemElement {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type PlayerTxnTimeOut struct {
	TxnId                int32    `protobuf:"varint,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	Timeout              int32    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerTxnTimeOut) Reset()         { *m = PlayerTxnTimeOut{} }
func (m *PlayerTxnTimeOut) String() string { return proto.CompactTextString(m) }
func (*PlayerTxnTimeOut) ProtoMessage()    {}
func (*PlayerTxnTimeOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{49}
}

func (m *PlayerTxnTimeOut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerTxnTimeOut.Unmarshal(m, b)
}
func (m *PlayerTxnTimeOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerTxnTimeOut.Marshal(b, m, deterministic)
}
func (m *PlayerTxnTimeOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTxnTimeOut.Merge(m, src)
}
func (m *PlayerTxnTimeOut) XXX_Size() int {
	return xxx_messageInfo_PlayerTxnTimeOut.Size(m)
}
func (m *PlayerTxnTimeOut) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTxnTimeOut.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTxnTimeOut proto.InternalMessageInfo

func (m *PlayerTxnTimeOut) GetTxnId() int32 {
	if m != nil {
		return m.TxnId
	}
	return 0
}

func (m *PlayerTxnTimeOut) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

//排行榜奖励缓存
type PlayerRankReward struct {
	RankId               int64    `protobuf:"varint,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	TopNum               int32    `protobuf:"varint,2,opt,name=top_num,json=topNum,proto3" json:"top_num,omitempty"`
	RewardId             int64    `protobuf:"varint,3,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Timeout              int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	RewardTime           int32    `protobuf:"varint,5,opt,name=reward_time,json=rewardTime,proto3" json:"reward_time,omitempty"`
	ExtraRewardId        int64    `protobuf:"varint,6,opt,name=extra_reward_id,json=extraRewardId,proto3" json:"extra_reward_id,omitempty"`
	UpdateTime           int32    `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRankReward) Reset()         { *m = PlayerRankReward{} }
func (m *PlayerRankReward) String() string { return proto.CompactTextString(m) }
func (*PlayerRankReward) ProtoMessage()    {}
func (*PlayerRankReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{50}
}

func (m *PlayerRankReward) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerRankReward.Unmarshal(m, b)
}
func (m *PlayerRankReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerRankReward.Marshal(b, m, deterministic)
}
func (m *PlayerRankReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRankReward.Merge(m, src)
}
func (m *PlayerRankReward) XXX_Size() int {
	return xxx_messageInfo_PlayerRankReward.Size(m)
}
func (m *PlayerRankReward) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRankReward.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRankReward proto.InternalMessageInfo

func (m *PlayerRankReward) GetRankId() int64 {
	if m != nil {
		return m.RankId
	}
	return 0
}

func (m *PlayerRankReward) GetTopNum() int32 {
	if m != nil {
		return m.TopNum
	}
	return 0
}

func (m *PlayerRankReward) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *PlayerRankReward) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *PlayerRankReward) GetRewardTime() int32 {
	if m != nil {
		return m.RewardTime
	}
	return 0
}

func (m *PlayerRankReward) GetExtraRewardId() int64 {
	if m != nil {
		return m.ExtraRewardId
	}
	return 0
}

func (m *PlayerRankReward) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

//玩家属性map
type PropMap struct {
	Prop                 map[string]float32 `protobuf:"bytes,1,rep,name=prop,proto3" json:"prop,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PropMap) Reset()         { *m = PropMap{} }
func (m *PropMap) String() string { return proto.CompactTextString(m) }
func (*PropMap) ProtoMessage()    {}
func (*PropMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{51}
}

func (m *PropMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropMap.Unmarshal(m, b)
}
func (m *PropMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropMap.Marshal(b, m, deterministic)
}
func (m *PropMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropMap.Merge(m, src)
}
func (m *PropMap) XXX_Size() int {
	return xxx_messageInfo_PropMap.Size(m)
}
func (m *PropMap) XXX_DiscardUnknown() {
	xxx_messageInfo_PropMap.DiscardUnknown(m)
}

var xxx_messageInfo_PropMap proto.InternalMessageInfo

func (m *PropMap) GetProp() map[string]float32 {
	if m != nil {
		return m.Prop
	}
	return nil
}

type PlayerSkill struct {
	SkillId              int32    `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillLevel           int32    `protobuf:"varint,2,opt,name=skill_level,json=skillLevel,proto3" json:"skill_level,omitempty"`
	SkillRefineId        int32    `protobuf:"varint,3,opt,name=skill_refine_id,json=skillRefineId,proto3" json:"skill_refine_id,omitempty"`
	SkillRefineLevel     int32    `protobuf:"varint,4,opt,name=skill_refine_level,json=skillRefineLevel,proto3" json:"skill_refine_level,omitempty"`
	AttrId               []int32  `protobuf:"varint,5,rep,packed,name=attr_id,json=attrId,proto3" json:"attr_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerSkill) Reset()         { *m = PlayerSkill{} }
func (m *PlayerSkill) String() string { return proto.CompactTextString(m) }
func (*PlayerSkill) ProtoMessage()    {}
func (*PlayerSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{52}
}

func (m *PlayerSkill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerSkill.Unmarshal(m, b)
}
func (m *PlayerSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerSkill.Marshal(b, m, deterministic)
}
func (m *PlayerSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSkill.Merge(m, src)
}
func (m *PlayerSkill) XXX_Size() int {
	return xxx_messageInfo_PlayerSkill.Size(m)
}
func (m *PlayerSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSkill.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSkill proto.InternalMessageInfo

func (m *PlayerSkill) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *PlayerSkill) GetSkillLevel() int32 {
	if m != nil {
		return m.SkillLevel
	}
	return 0
}

func (m *PlayerSkill) GetSkillRefineId() int32 {
	if m != nil {
		return m.SkillRefineId
	}
	return 0
}

func (m *PlayerSkill) GetSkillRefineLevel() int32 {
	if m != nil {
		return m.SkillRefineLevel
	}
	return 0
}

func (m *PlayerSkill) GetAttrId() []int32 {
	if m != nil {
		return m.AttrId
	}
	return nil
}

type PlayerProperty struct {
	ScoreList            map[uint32]int64    `protobuf:"bytes,1,rep,name=score_list,json=scoreList,proto3" json:"score_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PropList             map[uint32]*PropMap `protobuf:"bytes,2,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PlayerProperty) Reset()         { *m = PlayerProperty{} }
func (m *PlayerProperty) String() string { return proto.CompactTextString(m) }
func (*PlayerProperty) ProtoMessage()    {}
func (*PlayerProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{53}
}

func (m *PlayerProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerProperty.Unmarshal(m, b)
}
func (m *PlayerProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerProperty.Marshal(b, m, deterministic)
}
func (m *PlayerProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerProperty.Merge(m, src)
}
func (m *PlayerProperty) XXX_Size() int {
	return xxx_messageInfo_PlayerProperty.Size(m)
}
func (m *PlayerProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerProperty.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerProperty proto.InternalMessageInfo

func (m *PlayerProperty) GetScoreList() map[uint32]int64 {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *PlayerProperty) GetPropList() map[uint32]*PropMap {
	if m != nil {
		return m.PropList
	}
	return nil
}

//充值存盘
type PlayerRecharge struct {
	Count                uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Timestamp            uint32   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Timeout              uint32   `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	RewardedTime         uint32   `protobuf:"varint,4,opt,name=rewarded_time,json=rewardedTime,proto3" json:"rewarded_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRecharge) Reset()         { *m = PlayerRecharge{} }
func (m *PlayerRecharge) String() string { return proto.CompactTextString(m) }
func (*PlayerRecharge) ProtoMessage()    {}
func (*PlayerRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{54}
}

func (m *PlayerRecharge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerRecharge.Unmarshal(m, b)
}
func (m *PlayerRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerRecharge.Marshal(b, m, deterministic)
}
func (m *PlayerRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRecharge.Merge(m, src)
}
func (m *PlayerRecharge) XXX_Size() int {
	return xxx_messageInfo_PlayerRecharge.Size(m)
}
func (m *PlayerRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRecharge proto.InternalMessageInfo

func (m *PlayerRecharge) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PlayerRecharge) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PlayerRecharge) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *PlayerRecharge) GetRewardedTime() uint32 {
	if m != nil {
		return m.RewardedTime
	}
	return 0
}

//购买商品历史购买记录
type PlayerShopItem struct {
	ShopItemId           uint32   `protobuf:"varint,1,opt,name=shop_item_id,json=shopItemId,proto3" json:"shop_item_id,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerShopItem) Reset()         { *m = PlayerShopItem{} }
func (m *PlayerShopItem) String() string { return proto.CompactTextString(m) }
func (*PlayerShopItem) ProtoMessage()    {}
func (*PlayerShopItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{55}
}

func (m *PlayerShopItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerShopItem.Unmarshal(m, b)
}
func (m *PlayerShopItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerShopItem.Marshal(b, m, deterministic)
}
func (m *PlayerShopItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerShopItem.Merge(m, src)
}
func (m *PlayerShopItem) XXX_Size() int {
	return xxx_messageInfo_PlayerShopItem.Size(m)
}
func (m *PlayerShopItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerShopItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerShopItem proto.InternalMessageInfo

func (m *PlayerShopItem) GetShopItemId() uint32 {
	if m != nil {
		return m.ShopItemId
	}
	return 0
}

func (m *PlayerShopItem) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SkinProp struct {
	Guid                 uint64   `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	PropId               uint32   `protobuf:"varint,2,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	SkinId               uint32   `protobuf:"varint,3,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkinProp) Reset()         { *m = SkinProp{} }
func (m *SkinProp) String() string { return proto.CompactTextString(m) }
func (*SkinProp) ProtoMessage()    {}
func (*SkinProp) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{56}
}

func (m *SkinProp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkinProp.Unmarshal(m, b)
}
func (m *SkinProp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkinProp.Marshal(b, m, deterministic)
}
func (m *SkinProp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinProp.Merge(m, src)
}
func (m *SkinProp) XXX_Size() int {
	return xxx_messageInfo_SkinProp.Size(m)
}
func (m *SkinProp) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinProp.DiscardUnknown(m)
}

var xxx_messageInfo_SkinProp proto.InternalMessageInfo

func (m *SkinProp) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *SkinProp) GetPropId() uint32 {
	if m != nil {
		return m.PropId
	}
	return 0
}

func (m *SkinProp) GetSkinId() uint32 {
	if m != nil {
		return m.SkinId
	}
	return 0
}

//选择的时装属性列表
type SkinPropSelect struct {
	SkinProps            []*SkinProp `protobuf:"bytes,1,rep,name=skin_props,json=skinProps,proto3" json:"skin_props,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SkinPropSelect) Reset()         { *m = SkinPropSelect{} }
func (m *SkinPropSelect) String() string { return proto.CompactTextString(m) }
func (*SkinPropSelect) ProtoMessage()    {}
func (*SkinPropSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{57}
}

func (m *SkinPropSelect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkinPropSelect.Unmarshal(m, b)
}
func (m *SkinPropSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkinPropSelect.Marshal(b, m, deterministic)
}
func (m *SkinPropSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinPropSelect.Merge(m, src)
}
func (m *SkinPropSelect) XXX_Size() int {
	return xxx_messageInfo_SkinPropSelect.Size(m)
}
func (m *SkinPropSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinPropSelect.DiscardUnknown(m)
}

var xxx_messageInfo_SkinPropSelect proto.InternalMessageInfo

func (m *SkinPropSelect) GetSkinProps() []*SkinProp {
	if m != nil {
		return m.SkinProps
	}
	return nil
}

//无尽劫境持续时间
type PlayerEndlessTime struct {
	Level                int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	TimeLast             int32    `protobuf:"varint,2,opt,name=time_last,json=timeLast,proto3" json:"time_last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerEndlessTime) Reset()         { *m = PlayerEndlessTime{} }
func (m *PlayerEndlessTime) String() string { return proto.CompactTextString(m) }
func (*PlayerEndlessTime) ProtoMessage()    {}
func (*PlayerEndlessTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{58}
}

func (m *PlayerEndlessTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerEndlessTime.Unmarshal(m, b)
}
func (m *PlayerEndlessTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerEndlessTime.Marshal(b, m, deterministic)
}
func (m *PlayerEndlessTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerEndlessTime.Merge(m, src)
}
func (m *PlayerEndlessTime) XXX_Size() int {
	return xxx_messageInfo_PlayerEndlessTime.Size(m)
}
func (m *PlayerEndlessTime) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerEndlessTime.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerEndlessTime proto.InternalMessageInfo

func (m *PlayerEndlessTime) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerEndlessTime) GetTimeLast() int32 {
	if m != nil {
		return m.TimeLast
	}
	return 0
}

type PlayerBattlePassElement struct {
	RewardLevel          int32    `protobuf:"varint,1,opt,name=reward_level,json=rewardLevel,proto3" json:"reward_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBattlePassElement) Reset()         { *m = PlayerBattlePassElement{} }
func (m *PlayerBattlePassElement) String() string { return proto.CompactTextString(m) }
func (*PlayerBattlePassElement) ProtoMessage()    {}
func (*PlayerBattlePassElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{59}
}

func (m *PlayerBattlePassElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBattlePassElement.Unmarshal(m, b)
}
func (m *PlayerBattlePassElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBattlePassElement.Marshal(b, m, deterministic)
}
func (m *PlayerBattlePassElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBattlePassElement.Merge(m, src)
}
func (m *PlayerBattlePassElement) XXX_Size() int {
	return xxx_messageInfo_PlayerBattlePassElement.Size(m)
}
func (m *PlayerBattlePassElement) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBattlePassElement.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBattlePassElement proto.InternalMessageInfo

func (m *PlayerBattlePassElement) GetRewardLevel() int32 {
	if m != nil {
		return m.RewardLevel
	}
	return 0
}

type PlayerBattlePass struct {
	Id                   int32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                int32                      `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp                  int32                      `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	ExpUpdateTime        int32                      `protobuf:"varint,4,opt,name=exp_update_time,json=expUpdateTime,proto3" json:"exp_update_time,omitempty"`
	PassLevel            int32                      `protobuf:"varint,5,opt,name=pass_level,json=passLevel,proto3" json:"pass_level,omitempty"`
	FreeRewardList       []*PlayerBattlePassElement `protobuf:"bytes,6,rep,name=free_reward_list,json=freeRewardList,proto3" json:"free_reward_list,omitempty"`
	AdvanceRewardList    []*PlayerBattlePassElement `protobuf:"bytes,7,rep,name=advance_reward_list,json=advanceRewardList,proto3" json:"advance_reward_list,omitempty"`
	ExpireTime           int32                      `protobuf:"varint,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	WeekExp              int32                      `protobuf:"varint,9,opt,name=week_exp,json=weekExp,proto3" json:"week_exp,omitempty"`
	RewardTime           int32                      `protobuf:"varint,10,opt,name=reward_time,json=rewardTime,proto3" json:"reward_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PlayerBattlePass) Reset()         { *m = PlayerBattlePass{} }
func (m *PlayerBattlePass) String() string { return proto.CompactTextString(m) }
func (*PlayerBattlePass) ProtoMessage()    {}
func (*PlayerBattlePass) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{60}
}

func (m *PlayerBattlePass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBattlePass.Unmarshal(m, b)
}
func (m *PlayerBattlePass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBattlePass.Marshal(b, m, deterministic)
}
func (m *PlayerBattlePass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBattlePass.Merge(m, src)
}
func (m *PlayerBattlePass) XXX_Size() int {
	return xxx_messageInfo_PlayerBattlePass.Size(m)
}
func (m *PlayerBattlePass) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBattlePass.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBattlePass proto.InternalMessageInfo

func (m *PlayerBattlePass) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerBattlePass) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerBattlePass) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *PlayerBattlePass) GetExpUpdateTime() int32 {
	if m != nil {
		return m.ExpUpdateTime
	}
	return 0
}

func (m *PlayerBattlePass) GetPassLevel() int32 {
	if m != nil {
		return m.PassLevel
	}
	return 0
}

func (m *PlayerBattlePass) GetFreeRewardList() []*PlayerBattlePassElement {
	if m != nil {
		return m.FreeRewardList
	}
	return nil
}

func (m *PlayerBattlePass) GetAdvanceRewardList() []*PlayerBattlePassElement {
	if m != nil {
		return m.AdvanceRewardList
	}
	return nil
}

func (m *PlayerBattlePass) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *PlayerBattlePass) GetWeekExp() int32 {
	if m != nil {
		return m.WeekExp
	}
	return 0
}

func (m *PlayerBattlePass) GetRewardTime() int32 {
	if m != nil {
		return m.RewardTime
	}
	return 0
}

type BattleStatistics struct {
	MaxDamage            float32  `protobuf:"fixed32,1,opt,name=max_damage,json=maxDamage,proto3" json:"max_damage,omitempty"`
	MinDamage            float32  `protobuf:"fixed32,2,opt,name=min_damage,json=minDamage,proto3" json:"min_damage,omitempty"`
	PassCount            int32    `protobuf:"varint,3,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BattleStatistics) Reset()         { *m = BattleStatistics{} }
func (m *BattleStatistics) String() string { return proto.CompactTextString(m) }
func (*BattleStatistics) ProtoMessage()    {}
func (*BattleStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{61}
}

func (m *BattleStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BattleStatistics.Unmarshal(m, b)
}
func (m *BattleStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BattleStatistics.Marshal(b, m, deterministic)
}
func (m *BattleStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStatistics.Merge(m, src)
}
func (m *BattleStatistics) XXX_Size() int {
	return xxx_messageInfo_BattleStatistics.Size(m)
}
func (m *BattleStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStatistics proto.InternalMessageInfo

func (m *BattleStatistics) GetMaxDamage() float32 {
	if m != nil {
		return m.MaxDamage
	}
	return 0
}

func (m *BattleStatistics) GetMinDamage() float32 {
	if m != nil {
		return m.MinDamage
	}
	return 0
}

func (m *BattleStatistics) GetPassCount() int32 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

type PlayerFood struct {
	FoodId               int32    `protobuf:"varint,1,opt,name=food_id,json=foodId,proto3" json:"food_id,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerFood) Reset()         { *m = PlayerFood{} }
func (m *PlayerFood) String() string { return proto.CompactTextString(m) }
func (*PlayerFood) ProtoMessage()    {}
func (*PlayerFood) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{62}
}

func (m *PlayerFood) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerFood.Unmarshal(m, b)
}
func (m *PlayerFood) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerFood.Marshal(b, m, deterministic)
}
func (m *PlayerFood) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerFood.Merge(m, src)
}
func (m *PlayerFood) XXX_Size() int {
	return xxx_messageInfo_PlayerFood.Size(m)
}
func (m *PlayerFood) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerFood.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerFood proto.InternalMessageInfo

func (m *PlayerFood) GetFoodId() int32 {
	if m != nil {
		return m.FoodId
	}
	return 0
}

func (m *PlayerFood) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//英雄//玩家数据//角色数据
type GameHero struct {
	Guid                  uint64                      `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	HeroId                uint32                      `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Name                  string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Level                 int32                       `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Exp                   int32                       `protobuf:"varint,5,opt,name=exp,proto3" json:"exp,omitempty"`
	Stamina               int32                       `protobuf:"varint,6,opt,name=stamina,proto3" json:"stamina,omitempty"`
	StaminaRecoverTime    int64                       `protobuf:"varint,7,opt,name=stamina_recover_time,json=staminaRecoverTime,proto3" json:"stamina_recover_time,omitempty"`
	Career                int32                       `protobuf:"varint,8,opt,name=career,proto3" json:"career,omitempty"`
	SkillChain1           []int32                     `protobuf:"varint,9,rep,packed,name=skill_chain1,json=skillChain1,proto3" json:"skill_chain1,omitempty"`
	SkillChain2           []int32                     `protobuf:"varint,10,rep,packed,name=skill_chain2,json=skillChain2,proto3" json:"skill_chain2,omitempty"`
	NormalSkills          []int32                     `protobuf:"varint,11,rep,packed,name=normal_skills,json=normalSkills,proto3" json:"normal_skills,omitempty"`
	NormalSkySkills       []int32                     `protobuf:"varint,12,rep,packed,name=normal_sky_skills,json=normalSkySkills,proto3" json:"normal_sky_skills,omitempty"`
	CommonSkills          []int32                     `protobuf:"varint,13,rep,packed,name=common_skills,json=commonSkills,proto3" json:"common_skills,omitempty"`
	Skills                map[uint32]int32            `protobuf:"bytes,14,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UltraSkill            uint32                      `protobuf:"varint,15,opt,name=ultra_skill,json=ultraSkill,proto3" json:"ultra_skill,omitempty"`
	Health                float32                     `protobuf:"fixed32,16,opt,name=health,proto3" json:"health,omitempty"`
	Attack                float32                     `protobuf:"fixed32,17,opt,name=attack,proto3" json:"attack,omitempty"`
	Element               float32                     `protobuf:"fixed32,18,opt,name=element,proto3" json:"element,omitempty"`
	ElementType           uint32                      `protobuf:"varint,19,opt,name=element_type,json=elementType,proto3" json:"element_type,omitempty"`
	Defense               float32                     `protobuf:"fixed32,20,opt,name=defense,proto3" json:"defense,omitempty"`
	Shield                float32                     `protobuf:"fixed32,21,opt,name=shield,proto3" json:"shield,omitempty"`
	SkillPoint            int32                       `protobuf:"varint,22,opt,name=skill_point,json=skillPoint,proto3" json:"skill_point,omitempty"`
	Helpers               map[uint64]int32            `protobuf:"bytes,23,rep,name=helpers,proto3" json:"helpers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FinishedLevel         []uint32                    `protobuf:"varint,24,rep,packed,name=finished_level,json=finishedLevel,proto3" json:"finished_level,omitempty"`
	FinishedLevelTimes    map[uint32]*LevelRecord     `protobuf:"bytes,25,rep,name=finished_level_times,json=finishedLevelTimes,proto3" json:"finished_level_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FinishedLocationTimes map[uint32]*LevelRecord     `protobuf:"bytes,26,rep,name=finished_location_times,json=finishedLocationTimes,proto3" json:"finished_location_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FinishedQuest         []uint32                    `protobuf:"varint,27,rep,packed,name=finished_quest,json=finishedQuest,proto3" json:"finished_quest,omitempty"`
	LastMainCity          uint32                      `protobuf:"varint,28,opt,name=last_main_city,json=lastMainCity,proto3" json:"last_main_city,omitempty"`
	Comprehension         uint32                      `protobuf:"varint,29,opt,name=comprehension,proto3" json:"comprehension,omitempty"`
	ScrollChain1          []uint64                    `protobuf:"varint,30,rep,packed,name=scroll_chain1,json=scrollChain1,proto3" json:"scroll_chain1,omitempty"`
	ScrollChain2          []uint64                    `protobuf:"varint,31,rep,packed,name=scroll_chain2,json=scrollChain2,proto3" json:"scroll_chain2,omitempty"`
	Gold                  int64                       `protobuf:"varint,32,opt,name=gold,proto3" json:"gold,omitempty"`
	Sycee                 int64                       `protobuf:"varint,33,opt,name=sycee,proto3" json:"sycee,omitempty"`
	Satiation             int32                       `protobuf:"varint,34,opt,name=satiation,proto3" json:"satiation,omitempty"`
	Foods                 []*PlayerFood               `protobuf:"bytes,35,rep,name=foods,proto3" json:"foods,omitempty"`
	ReturnMainCity        uint32                      `protobuf:"varint,36,opt,name=return_main_city,json=returnMainCity,proto3" json:"return_main_city,omitempty"`
	FoodsUnlock           []uint32                    `protobuf:"varint,37,rep,packed,name=foods_unlock,json=foodsUnlock,proto3" json:"foods_unlock,omitempty"`
	SharePictureCount     uint32                      `protobuf:"varint,38,opt,name=share_picture_count,json=sharePictureCount,proto3" json:"share_picture_count,omitempty"`
	Yuanbao               int64                       `protobuf:"varint,40,opt,name=yuanbao,proto3" json:"yuanbao,omitempty"`
	RegisterZone          int32                       `protobuf:"varint,41,opt,name=register_zone,json=registerZone,proto3" json:"register_zone,omitempty"`
	ClanId                int64                       `protobuf:"varint,42,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	Account               []byte                      `protobuf:"bytes,43,opt,name=account,proto3" json:"account,omitempty"`
	ServerId              int64                       `protobuf:"varint,44,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Inventory             map[uint32]*PlayerInventory `protobuf:"bytes,45,rep,name=inventory,proto3" json:"inventory,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//repeated PlayerCommonLimit common_limit = 46; //通用使用限制
	CooldownList map[uint32]*PlayerCoolDown `protobuf:"bytes,47,rep,name=cooldown_list,json=cooldownList,proto3" json:"cooldown_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LoginTime    int32                      `protobuf:"varint,48,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	LogoutTime   int32                      `protobuf:"varint,49,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	ServerPower  int64                      `protobuf:"varint,50,opt,name=server_power,json=serverPower,proto3" json:"server_power,omitempty"`
	RegisterTime int32                      `protobuf:"varint,51,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	InitTime     int32                      `protobuf:"varint,52,opt,name=init_time,json=initTime,proto3" json:"init_time,omitempty"`
	//repeated PlayerAchievement complete_achievement_list = 53; //完成成就列表
	RepuList         map[uint32]*PlayerReputation `protobuf:"bytes,54,rep,name=repu_list,json=repuList,proto3" json:"repu_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TaskList         []*GameQuestInfo             `protobuf:"bytes,55,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	TaskCompleteList []*GameQuestInfo             `protobuf:"bytes,56,rep,name=task_complete_list,json=taskCompleteList,proto3" json:"task_complete_list,omitempty"`
	AutoRewardList   []*PlayerAutoReward          `protobuf:"bytes,57,rep,name=auto_reward_list,json=autoRewardList,proto3" json:"auto_reward_list,omitempty"`
	LocateZoneId     int32                        `protobuf:"varint,58,opt,name=locate_zone_id,json=locateZoneId,proto3" json:"locate_zone_id,omitempty"`
	MaxMailId        int64                        `protobuf:"varint,59,opt,name=max_mail_id,json=maxMailId,proto3" json:"max_mail_id,omitempty"`
	FirstBuySn       int32                        `protobuf:"varint,60,opt,name=first_buy_sn,json=firstBuySn,proto3" json:"first_buy_sn,omitempty"`
	GenreId          int32                        `protobuf:"varint,61,opt,name=genre_id,json=genreId,proto3" json:"genre_id,omitempty"`
	RoomId           int64                        `protobuf:"varint,63,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	//ROOM_TYPE room_type = 64; //玩家所在房间类型
	//ROOM_TYPE matching_room_type = 65; //正在匹配房间类型
	Iphoto               int64                    `protobuf:"varint,66,opt,name=iphoto,proto3" json:"iphoto,omitempty"`
	CityName             []byte                   `protobuf:"bytes,67,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	Gender               GENDER_TYPE              `protobuf:"varint,68,opt,name=gender,proto3,enum=Adoter.Asset.GENDER_TYPE" json:"gender,omitempty"`
	IphotoList           []int64                  `protobuf:"varint,69,rep,packed,name=iphoto_list,json=iphotoList,proto3" json:"iphoto_list,omitempty"`
	FrameList            []int64                  `protobuf:"varint,70,rep,packed,name=frame_list,json=frameList,proto3" json:"frame_list,omitempty"`
	RewardList           []int64                  `protobuf:"varint,71,rep,packed,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	PlayerGuid           uint64                   `protobuf:"varint,72,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	UltraSkillStatus     int32                    `protobuf:"varint,74,opt,name=ultra_skill_status,json=ultraSkillStatus,proto3" json:"ultra_skill_status,omitempty"`
	ShopInfo             map[int32]*Shop          `protobuf:"bytes,75,rep,name=shop_info,json=shopInfo,proto3" json:"shop_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EquipmentStorage     int32                    `protobuf:"varint,76,opt,name=equipment_storage,json=equipmentStorage,proto3" json:"equipment_storage,omitempty"`
	ItemStorage          int32                    `protobuf:"varint,77,opt,name=item_storage,json=itemStorage,proto3" json:"item_storage,omitempty"`
	ScrollStorage        int32                    `protobuf:"varint,78,opt,name=scroll_storage,json=scrollStorage,proto3" json:"scroll_storage,omitempty"`
	GenreInfo            []*GameGenre             `protobuf:"bytes,79,rep,name=genre_info,json=genreInfo,proto3" json:"genre_info,omitempty"`
	MailLists            map[uint64]*GameMailNode `protobuf:"bytes,80,rep,name=mail_lists,json=mailLists,proto3" json:"mail_lists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastGmmail           uint32                   `protobuf:"varint,81,opt,name=last_gmmail,json=lastGmmail,proto3" json:"last_gmmail,omitempty"`
	AddZhouyeLocationNum uint32                   `protobuf:"varint,82,opt,name=add_zhouye_location_num,json=addZhouyeLocationNum,proto3" json:"add_zhouye_location_num,omitempty"`
	Power                uint32                   `protobuf:"varint,83,opt,name=power,proto3" json:"power,omitempty"`
	SinCurNum            uint32                   `protobuf:"varint,84,opt,name=sin_cur_num,json=sinCurNum,proto3" json:"sin_cur_num,omitempty"`
	SinLevel             []uint32                 `protobuf:"varint,85,rep,packed,name=sin_level,json=sinLevel,proto3" json:"sin_level,omitempty"`
	SinMaxNum            uint32                   `protobuf:"varint,86,opt,name=sin_max_num,json=sinMaxNum,proto3" json:"sin_max_num,omitempty"`
	Prop                 *PlayerProperty          `protobuf:"bytes,87,opt,name=prop,proto3" json:"prop,omitempty"`
	SinLevelNum          uint32                   `protobuf:"varint,88,opt,name=sin_level_num,json=sinLevelNum,proto3" json:"sin_level_num,omitempty"`
	RuneStorage          uint32                   `protobuf:"varint,89,opt,name=rune_storage,json=runeStorage,proto3" json:"rune_storage,omitempty"`
	SinPlayers           map[uint64]int32         `protobuf:"bytes,90,rep,name=sin_players,json=sinPlayers,proto3" json:"sin_players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SinThreat            map[uint32]uint32        `protobuf:"bytes,91,rep,name=sin_threat,json=sinThreat,proto3" json:"sin_threat,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ClientPower          int64                    `protobuf:"varint,92,opt,name=client_power,json=clientPower,proto3" json:"client_power,omitempty"`
	//map<uint32, uint64> shop_statistics_gold = 93; //商店铜币消耗统计 key: shop_id value: count
	//map<uint32, uint64> shop_statistics_yuanbao = 94; //商店元宝消耗统计
	EquipZhenxie             bool                       `protobuf:"varint,95,opt,name=equip_zhenxie,json=equipZhenxie,proto3" json:"equip_zhenxie,omitempty"`
	FriendGiftCount          uint32                     `protobuf:"varint,96,opt,name=friend_gift_count,json=friendGiftCount,proto3" json:"friend_gift_count,omitempty"`
	RechargeList             map[uint32]*PlayerRecharge `protobuf:"bytes,97,rep,name=recharge_list,json=rechargeList,proto3" json:"recharge_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClLevel                  int32                      `protobuf:"varint,98,opt,name=cl_level,json=clLevel,proto3" json:"cl_level,omitempty"`
	ClExp                    int32                      `protobuf:"varint,99,opt,name=cl_exp,json=clExp,proto3" json:"cl_exp,omitempty"`
	TimeTravelId             int32                      `protobuf:"varint,100,opt,name=time_travel_id,json=timeTravelId,proto3" json:"time_travel_id,omitempty"`
	AihelperCost             int32                      `protobuf:"varint,101,opt,name=aihelper_cost,json=aihelperCost,proto3" json:"aihelper_cost,omitempty"`
	PlayerSkills             []*PlayerSkill             `protobuf:"bytes,102,rep,name=player_skills,json=playerSkills,proto3" json:"player_skills,omitempty"`
	EndlessState             bool                       `protobuf:"varint,103,opt,name=endless_state,json=endlessState,proto3" json:"endless_state,omitempty"`
	BeforeEndlessData        *GameGenre                 `protobuf:"bytes,104,opt,name=before_endless_data,json=beforeEndlessData,proto3" json:"before_endless_data,omitempty"`
	Frame                    int32                      `protobuf:"varint,105,opt,name=frame,proto3" json:"frame,omitempty"`
	Skin                     int32                      `protobuf:"varint,106,opt,name=skin,proto3" json:"skin,omitempty"`
	EnemyHandbookList        map[uint32]uint32          `protobuf:"bytes,107,rep,name=enemy_handbook_list,json=enemyHandbookList,proto3" json:"enemy_handbook_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EquipHandbook            map[uint64]*EquipHandBook  `protobuf:"bytes,108,rep,name=equip_handbook,json=equipHandbook,proto3" json:"equip_handbook,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScrollHandbook           map[uint64]*ScrollHandBook `protobuf:"bytes,109,rep,name=scroll_handbook,json=scrollHandbook,proto3" json:"scroll_handbook,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkillVersion             int32                      `protobuf:"varint,110,opt,name=skill_version,json=skillVersion,proto3" json:"skill_version,omitempty"`
	TempSkillPoint           int32                      `protobuf:"varint,111,opt,name=temp_skill_point,json=tempSkillPoint,proto3" json:"temp_skill_point,omitempty"`
	InitialState             bool                       `protobuf:"varint,112,opt,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"`
	Index                    int32                      `protobuf:"varint,113,opt,name=index,proto3" json:"index,omitempty"`
	BAcquireChargemission    bool                       `protobuf:"varint,114,opt,name=b_acquire_chargemission,json=bAcquireChargemission,proto3" json:"b_acquire_chargemission,omitempty"`
	SkinPropSelect           map[uint32]*SkinPropSelect `protobuf:"bytes,115,rep,name=skin_prop_select,json=skinPropSelect,proto3" json:"skin_prop_select,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EndlessTimeList          []*PlayerEndlessTime       `protobuf:"bytes,116,rep,name=endless_time_list,json=endlessTimeList,proto3" json:"endless_time_list,omitempty"`
	SinGenreId               uint32                     `protobuf:"varint,117,opt,name=sin_genre_id,json=sinGenreId,proto3" json:"sin_genre_id,omitempty"`
	KuangLongId              int32                      `protobuf:"varint,118,opt,name=kuang_long_id,json=kuangLongId,proto3" json:"kuang_long_id,omitempty"`
	ApplyCorpsList           map[int64]*CorpsApply      `protobuf:"bytes,119,rep,name=apply_corps_list,json=applyCorpsList,proto3" json:"apply_corps_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CorpsInviteList          map[int64]*CorpsApply      `protobuf:"bytes,120,rep,name=corps_invite_list,json=corpsInviteList,proto3" json:"corps_invite_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HuantiInfo               []*HuantiInfo              `protobuf:"bytes,121,rep,name=huanti_info,json=huantiInfo,proto3" json:"huanti_info,omitempty"`
	LastReadGonggaoTime      int32                      `protobuf:"varint,122,opt,name=last_read_gonggao_time,json=lastReadGonggaoTime,proto3" json:"last_read_gonggao_time,omitempty"`
	LastQuitCorpsTime        int32                      `protobuf:"varint,123,opt,name=last_quit_corps_time,json=lastQuitCorpsTime,proto3" json:"last_quit_corps_time,omitempty"`
	TeamEndlessTimeList      []*PlayerEndlessTime       `protobuf:"bytes,124,rep,name=team_endless_time_list,json=teamEndlessTimeList,proto3" json:"team_endless_time_list,omitempty"`
	CorpsBattleDefGenreId    int32                      `protobuf:"varint,125,opt,name=corps_battle_def_genre_id,json=corpsBattleDefGenreId,proto3" json:"corps_battle_def_genre_id,omitempty"`
	CorpsBattleDefGenrePower int32                      `protobuf:"varint,126,opt,name=corps_battle_def_genre_power,json=corpsBattleDefGenrePower,proto3" json:"corps_battle_def_genre_power,omitempty"`
	BeforeCorpsbattleData    *GameGenre                 `protobuf:"bytes,127,opt,name=before_corpsbattle_data,json=beforeCorpsbattleData,proto3" json:"before_corpsbattle_data,omitempty"`
	Technology               []*Technology              `protobuf:"bytes,128,rep,name=technology,proto3" json:"technology,omitempty"`
	BattlePassList           []*PlayerBattlePass        `protobuf:"bytes,129,rep,name=battle_pass_list,json=battlePassList,proto3" json:"battle_pass_list,omitempty"`
	SatiationLimit           int32                      `protobuf:"varint,130,opt,name=satiation_limit,json=satiationLimit,proto3" json:"satiation_limit,omitempty"`
	FoodCount                int32                      `protobuf:"varint,131,opt,name=food_count,json=foodCount,proto3" json:"food_count,omitempty"`
	FoodMax                  int32                      `protobuf:"varint,132,opt,name=food_max,json=foodMax,proto3" json:"food_max,omitempty"`
	ExActivityList           []*ActivityElement         `protobuf:"bytes,133,rep,name=ex_activity_list,json=exActivityList,proto3" json:"ex_activity_list,omitempty"`
	SecretfileTechnology     []*Technology              `protobuf:"bytes,134,rep,name=secretfile_technology,json=secretfileTechnology,proto3" json:"secretfile_technology,omitempty"`
	SecretfileMap            map[int32]*SecretFileMap   `protobuf:"bytes,135,rep,name=secretfile_map,json=secretfileMap,proto3" json:"secretfile_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RegularMail              map[int32]int64            `protobuf:"bytes,136,rep,name=regular_mail,json=regularMail,proto3" json:"regular_mail,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SkillsList               []*PlayerSkill             `protobuf:"bytes,137,rep,name=skills_list,json=skillsList,proto3" json:"skills_list,omitempty"`
	HomelandId               int32                      `protobuf:"varint,138,opt,name=homeland_id,json=homelandId,proto3" json:"homeland_id,omitempty"`
	RepuTotalValue           map[uint32]int64           `protobuf:"bytes,139,rep,name=repu_total_value,json=repuTotalValue,proto3" json:"repu_total_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EnterLevelTimes          map[uint32]int64           `protobuf:"bytes,140,rep,name=enter_level_times,json=enterLevelTimes,proto3" json:"enter_level_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MaxLevelId               int32                      `protobuf:"varint,141,opt,name=max_level_id,json=maxLevelId,proto3" json:"max_level_id,omitempty"`
	Guide                    string                     `protobuf:"bytes,142,opt,name=guide,proto3" json:"guide,omitempty"`
	SinRank                  int32                      `protobuf:"varint,143,opt,name=sin_rank,json=sinRank,proto3" json:"sin_rank,omitempty"`
	FrameExpireTime          int64                      `protobuf:"varint,144,opt,name=frame_expire_time,json=frameExpireTime,proto3" json:"frame_expire_time,omitempty"`
	////下面数据存储在ds中
	//PlayerChallenge challenge = 201; //挑战数据
	//repeated int64 reward_cache_list = 202; //通用奖励缓存(玩家离线奖励缓存)
	//PlayerParty party_opened = 203; //举办宴会
	//repeated PlayerHeroParty hero_list_partying = 204; //参加宴会英雄列表
	//repeated PlayerPartyHistory party_history = 205; //举办宴会历史记录
	//repeated PlayerFriend friend_list = 206; //好友列表
	//repeated PlayerBlack black_list = 207; //黑名单列表
	//repeated PlayerResource store_up_resource_list = 208; //收藏资源列表
	//repeated PlayerHeroAttack hero_attack_list = 209; //联盟资源战出战英雄列表
	//repeated PlayerHeroZhuShou hero_zhushou_list = 210; //联盟资源战驻守城池英雄列表
	//repeated int64 rank_clan_reward = 211; //全服帮派战力排行榜奖励(废弃)
	//repeated PlayerChallengeLog pvp_log_list = 212; //PVP对战日志(最新3条)
	//repeated PlayerRankReward rank_reward_list = 213; //排行榜奖励缓存
	//repeated PlayerVoteReward vote_reward_list = 214; //投票奖励缓存
	////服务器自行存盘使用
	UpdateList                map[int32]int32              `protobuf:"bytes,300,rep,name=update_list,json=updateList,proto3" json:"update_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WeekUpdateTime            int32                        `protobuf:"varint,301,opt,name=week_update_time,json=weekUpdateTime,proto3" json:"week_update_time,omitempty"`
	MonthUpdateTime           int32                        `protobuf:"varint,302,opt,name=month_update_time,json=monthUpdateTime,proto3" json:"month_update_time,omitempty"`
	Txn                       *PlayerTxn                   `protobuf:"bytes,303,opt,name=txn,proto3" json:"txn,omitempty"`
	TxnTimeout                *PlayerTxnTimeOut            `protobuf:"bytes,304,opt,name=txn_timeout,json=txnTimeout,proto3" json:"txn_timeout,omitempty"`
	EndlessLevel              uint32                       `protobuf:"varint,305,opt,name=endless_level,json=endlessLevel,proto3" json:"endless_level,omitempty"`
	RefundTimes               int32                        `protobuf:"varint,306,opt,name=refund_times,json=refundTimes,proto3" json:"refund_times,omitempty"`
	TotalRefund               int32                        `protobuf:"varint,307,opt,name=total_refund,json=totalRefund,proto3" json:"total_refund,omitempty"`
	ShopItemList              map[uint32]*PlayerShopItem   `protobuf:"bytes,308,rep,name=shop_item_list,json=shopItemList,proto3" json:"shop_item_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChannelType               int32                        `protobuf:"varint,309,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	AccumulateRmb             int64                        `protobuf:"varint,310,opt,name=accumulate_rmb,json=accumulateRmb,proto3" json:"accumulate_rmb,omitempty"`
	LevelBoss                 map[uint32]*DungeonCellData  `protobuf:"bytes,311,rep,name=level_boss,json=levelBoss,proto3" json:"level_boss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ZhaohuiMailList           map[uint32]*DynamicActivity  `protobuf:"bytes,312,rep,name=zhaohui_mail_list,json=zhaohuiMailList,proto3" json:"zhaohui_mail_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LevelChallengeList        []*LevelChallenge            `protobuf:"bytes,313,rep,name=level_challenge_list,json=levelChallengeList,proto3" json:"level_challenge_list,omitempty"`
	ZhaohuiMailListNew        map[uint32]*DynamicActivity  `protobuf:"bytes,314,rep,name=zhaohui_mail_list_new,json=zhaohuiMailListNew,proto3" json:"zhaohui_mail_list_new,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorldBossBattleStatistics map[uint32]*BattleStatistics `protobuf:"bytes,315,rep,name=world_boss_battle_statistics,json=worldBossBattleStatistics,proto3" json:"world_boss_battle_statistics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PvpInfo                   *PVPInfo                     `protobuf:"bytes,316,opt,name=pvp_info,json=pvpInfo,proto3" json:"pvp_info,omitempty"`
	//bi系统进行的一些缓存
	MainlineMaxLevelId   int32    `protobuf:"varint,401,opt,name=mainline_max_level_id,json=mainlineMaxLevelId,proto3" json:"mainline_max_level_id,omitempty"`
	GetDiamondSum        int64    `protobuf:"varint,402,opt,name=get_diamond_sum,json=getDiamondSum,proto3" json:"get_diamond_sum,omitempty"`
	UsedDiamondSum       int64    `protobuf:"varint,403,opt,name=used_diamond_sum,json=usedDiamondSum,proto3" json:"used_diamond_sum,omitempty"`
	UsedStaminaSum       int64    `protobuf:"varint,404,opt,name=used_stamina_sum,json=usedStaminaSum,proto3" json:"used_stamina_sum,omitempty"`
	EmptySkillScroll     bool     `protobuf:"varint,405,opt,name=empty_skill_scroll,json=emptySkillScroll,proto3" json:"empty_skill_scroll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameHero) Reset()         { *m = GameHero{} }
func (m *GameHero) String() string { return proto.CompactTextString(m) }
func (*GameHero) ProtoMessage()    {}
func (*GameHero) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{63}
}

func (m *GameHero) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameHero.Unmarshal(m, b)
}
func (m *GameHero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameHero.Marshal(b, m, deterministic)
}
func (m *GameHero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameHero.Merge(m, src)
}
func (m *GameHero) XXX_Size() int {
	return xxx_messageInfo_GameHero.Size(m)
}
func (m *GameHero) XXX_DiscardUnknown() {
	xxx_messageInfo_GameHero.DiscardUnknown(m)
}

var xxx_messageInfo_GameHero proto.InternalMessageInfo

func (m *GameHero) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GameHero) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *GameHero) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameHero) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GameHero) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *GameHero) GetStamina() int32 {
	if m != nil {
		return m.Stamina
	}
	return 0
}

func (m *GameHero) GetStaminaRecoverTime() int64 {
	if m != nil {
		return m.StaminaRecoverTime
	}
	return 0
}

func (m *GameHero) GetCareer() int32 {
	if m != nil {
		return m.Career
	}
	return 0
}

func (m *GameHero) GetSkillChain1() []int32 {
	if m != nil {
		return m.SkillChain1
	}
	return nil
}

func (m *GameHero) GetSkillChain2() []int32 {
	if m != nil {
		return m.SkillChain2
	}
	return nil
}

func (m *GameHero) GetNormalSkills() []int32 {
	if m != nil {
		return m.NormalSkills
	}
	return nil
}

func (m *GameHero) GetNormalSkySkills() []int32 {
	if m != nil {
		return m.NormalSkySkills
	}
	return nil
}

func (m *GameHero) GetCommonSkills() []int32 {
	if m != nil {
		return m.CommonSkills
	}
	return nil
}

func (m *GameHero) GetSkills() map[uint32]int32 {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *GameHero) GetUltraSkill() uint32 {
	if m != nil {
		return m.UltraSkill
	}
	return 0
}

func (m *GameHero) GetHealth() float32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *GameHero) GetAttack() float32 {
	if m != nil {
		return m.Attack
	}
	return 0
}

func (m *GameHero) GetElement() float32 {
	if m != nil {
		return m.Element
	}
	return 0
}

func (m *GameHero) GetElementType() uint32 {
	if m != nil {
		return m.ElementType
	}
	return 0
}

func (m *GameHero) GetDefense() float32 {
	if m != nil {
		return m.Defense
	}
	return 0
}

func (m *GameHero) GetShield() float32 {
	if m != nil {
		return m.Shield
	}
	return 0
}

func (m *GameHero) GetSkillPoint() int32 {
	if m != nil {
		return m.SkillPoint
	}
	return 0
}

func (m *GameHero) GetHelpers() map[uint64]int32 {
	if m != nil {
		return m.Helpers
	}
	return nil
}

func (m *GameHero) GetFinishedLevel() []uint32 {
	if m != nil {
		return m.FinishedLevel
	}
	return nil
}

func (m *GameHero) GetFinishedLevelTimes() map[uint32]*LevelRecord {
	if m != nil {
		return m.FinishedLevelTimes
	}
	return nil
}

func (m *GameHero) GetFinishedLocationTimes() map[uint32]*LevelRecord {
	if m != nil {
		return m.FinishedLocationTimes
	}
	return nil
}

func (m *GameHero) GetFinishedQuest() []uint32 {
	if m != nil {
		return m.FinishedQuest
	}
	return nil
}

func (m *GameHero) GetLastMainCity() uint32 {
	if m != nil {
		return m.LastMainCity
	}
	return 0
}

func (m *GameHero) GetComprehension() uint32 {
	if m != nil {
		return m.Comprehension
	}
	return 0
}

func (m *GameHero) GetScrollChain1() []uint64 {
	if m != nil {
		return m.ScrollChain1
	}
	return nil
}

func (m *GameHero) GetScrollChain2() []uint64 {
	if m != nil {
		return m.ScrollChain2
	}
	return nil
}

func (m *GameHero) GetGold() int64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *GameHero) GetSycee() int64 {
	if m != nil {
		return m.Sycee
	}
	return 0
}

func (m *GameHero) GetSatiation() int32 {
	if m != nil {
		return m.Satiation
	}
	return 0
}

func (m *GameHero) GetFoods() []*PlayerFood {
	if m != nil {
		return m.Foods
	}
	return nil
}

func (m *GameHero) GetReturnMainCity() uint32 {
	if m != nil {
		return m.ReturnMainCity
	}
	return 0
}

func (m *GameHero) GetFoodsUnlock() []uint32 {
	if m != nil {
		return m.FoodsUnlock
	}
	return nil
}

func (m *GameHero) GetSharePictureCount() uint32 {
	if m != nil {
		return m.SharePictureCount
	}
	return 0
}

func (m *GameHero) GetYuanbao() int64 {
	if m != nil {
		return m.Yuanbao
	}
	return 0
}

func (m *GameHero) GetRegisterZone() int32 {
	if m != nil {
		return m.RegisterZone
	}
	return 0
}

func (m *GameHero) GetClanId() int64 {
	if m != nil {
		return m.ClanId
	}
	return 0
}

func (m *GameHero) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *GameHero) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GameHero) GetInventory() map[uint32]*PlayerInventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *GameHero) GetCooldownList() map[uint32]*PlayerCoolDown {
	if m != nil {
		return m.CooldownList
	}
	return nil
}

func (m *GameHero) GetLoginTime() int32 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *GameHero) GetLogoutTime() int32 {
	if m != nil {
		return m.LogoutTime
	}
	return 0
}

func (m *GameHero) GetServerPower() int64 {
	if m != nil {
		return m.ServerPower
	}
	return 0
}

func (m *GameHero) GetRegisterTime() int32 {
	if m != nil {
		return m.RegisterTime
	}
	return 0
}

func (m *GameHero) GetInitTime() int32 {
	if m != nil {
		return m.InitTime
	}
	return 0
}

func (m *GameHero) GetRepuList() map[uint32]*PlayerReputation {
	if m != nil {
		return m.RepuList
	}
	return nil
}

func (m *GameHero) GetTaskList() []*GameQuestInfo {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *GameHero) GetTaskCompleteList() []*GameQuestInfo {
	if m != nil {
		return m.TaskCompleteList
	}
	return nil
}

func (m *GameHero) GetAutoRewardList() []*PlayerAutoReward {
	if m != nil {
		return m.AutoRewardList
	}
	return nil
}

func (m *GameHero) GetLocateZoneId() int32 {
	if m != nil {
		return m.LocateZoneId
	}
	return 0
}

func (m *GameHero) GetMaxMailId() int64 {
	if m != nil {
		return m.MaxMailId
	}
	return 0
}

func (m *GameHero) GetFirstBuySn() int32 {
	if m != nil {
		return m.FirstBuySn
	}
	return 0
}

func (m *GameHero) GetGenreId() int32 {
	if m != nil {
		return m.GenreId
	}
	return 0
}

func (m *GameHero) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GameHero) GetIphoto() int64 {
	if m != nil {
		return m.Iphoto
	}
	return 0
}

func (m *GameHero) GetCityName() []byte {
	if m != nil {
		return m.CityName
	}
	return nil
}

func (m *GameHero) GetGender() GENDER_TYPE {
	if m != nil {
		return m.Gender
	}
	return GENDER_TYPE_GENDER_TYPE_NULL
}

func (m *GameHero) GetIphotoList() []int64 {
	if m != nil {
		return m.IphotoList
	}
	return nil
}

func (m *GameHero) GetFrameList() []int64 {
	if m != nil {
		return m.FrameList
	}
	return nil
}

func (m *GameHero) GetRewardList() []int64 {
	if m != nil {
		return m.RewardList
	}
	return nil
}

func (m *GameHero) GetPlayerGuid() uint64 {
	if m != nil {
		return m.PlayerGuid
	}
	return 0
}

func (m *GameHero) GetUltraSkillStatus() int32 {
	if m != nil {
		return m.UltraSkillStatus
	}
	return 0
}

func (m *GameHero) GetShopInfo() map[int32]*Shop {
	if m != nil {
		return m.ShopInfo
	}
	return nil
}

func (m *GameHero) GetEquipmentStorage() int32 {
	if m != nil {
		return m.EquipmentStorage
	}
	return 0
}

func (m *GameHero) GetItemStorage() int32 {
	if m != nil {
		return m.ItemStorage
	}
	return 0
}

func (m *GameHero) GetScrollStorage() int32 {
	if m != nil {
		return m.ScrollStorage
	}
	return 0
}

func (m *GameHero) GetGenreInfo() []*GameGenre {
	if m != nil {
		return m.GenreInfo
	}
	return nil
}

func (m *GameHero) GetMailLists() map[uint64]*GameMailNode {
	if m != nil {
		return m.MailLists
	}
	return nil
}

func (m *GameHero) GetLastGmmail() uint32 {
	if m != nil {
		return m.LastGmmail
	}
	return 0
}

func (m *GameHero) GetAddZhouyeLocationNum() uint32 {
	if m != nil {
		return m.AddZhouyeLocationNum
	}
	return 0
}

func (m *GameHero) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GameHero) GetSinCurNum() uint32 {
	if m != nil {
		return m.SinCurNum
	}
	return 0
}

func (m *GameHero) GetSinLevel() []uint32 {
	if m != nil {
		return m.SinLevel
	}
	return nil
}

func (m *GameHero) GetSinMaxNum() uint32 {
	if m != nil {
		return m.SinMaxNum
	}
	return 0
}

func (m *GameHero) GetProp() *PlayerProperty {
	if m != nil {
		return m.Prop
	}
	return nil
}

func (m *GameHero) GetSinLevelNum() uint32 {
	if m != nil {
		return m.SinLevelNum
	}
	return 0
}

func (m *GameHero) GetRuneStorage() uint32 {
	if m != nil {
		return m.RuneStorage
	}
	return 0
}

func (m *GameHero) GetSinPlayers() map[uint64]int32 {
	if m != nil {
		return m.SinPlayers
	}
	return nil
}

func (m *GameHero) GetSinThreat() map[uint32]uint32 {
	if m != nil {
		return m.SinThreat
	}
	return nil
}

func (m *GameHero) GetClientPower() int64 {
	if m != nil {
		return m.ClientPower
	}
	return 0
}

func (m *GameHero) GetEquipZhenxie() bool {
	if m != nil {
		return m.EquipZhenxie
	}
	return false
}

func (m *GameHero) GetFriendGiftCount() uint32 {
	if m != nil {
		return m.FriendGiftCount
	}
	return 0
}

func (m *GameHero) GetRechargeList() map[uint32]*PlayerRecharge {
	if m != nil {
		return m.RechargeList
	}
	return nil
}

func (m *GameHero) GetClLevel() int32 {
	if m != nil {
		return m.ClLevel
	}
	return 0
}

func (m *GameHero) GetClExp() int32 {
	if m != nil {
		return m.ClExp
	}
	return 0
}

func (m *GameHero) GetTimeTravelId() int32 {
	if m != nil {
		return m.TimeTravelId
	}
	return 0
}

func (m *GameHero) GetAihelperCost() int32 {
	if m != nil {
		return m.AihelperCost
	}
	return 0
}

func (m *GameHero) GetPlayerSkills() []*PlayerSkill {
	if m != nil {
		return m.PlayerSkills
	}
	return nil
}

func (m *GameHero) GetEndlessState() bool {
	if m != nil {
		return m.EndlessState
	}
	return false
}

func (m *GameHero) GetBeforeEndlessData() *GameGenre {
	if m != nil {
		return m.BeforeEndlessData
	}
	return nil
}

func (m *GameHero) GetFrame() int32 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *GameHero) GetSkin() int32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

func (m *GameHero) GetEnemyHandbookList() map[uint32]uint32 {
	if m != nil {
		return m.EnemyHandbookList
	}
	return nil
}

func (m *GameHero) GetEquipHandbook() map[uint64]*EquipHandBook {
	if m != nil {
		return m.EquipHandbook
	}
	return nil
}

func (m *GameHero) GetScrollHandbook() map[uint64]*ScrollHandBook {
	if m != nil {
		return m.ScrollHandbook
	}
	return nil
}

func (m *GameHero) GetSkillVersion() int32 {
	if m != nil {
		return m.SkillVersion
	}
	return 0
}

func (m *GameHero) GetTempSkillPoint() int32 {
	if m != nil {
		return m.TempSkillPoint
	}
	return 0
}

func (m *GameHero) GetInitialState() bool {
	if m != nil {
		return m.InitialState
	}
	return false
}

func (m *GameHero) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GameHero) GetBAcquireChargemission() bool {
	if m != nil {
		return m.BAcquireChargemission
	}
	return false
}

func (m *GameHero) GetSkinPropSelect() map[uint32]*SkinPropSelect {
	if m != nil {
		return m.SkinPropSelect
	}
	return nil
}

func (m *GameHero) GetEndlessTimeList() []*PlayerEndlessTime {
	if m != nil {
		return m.EndlessTimeList
	}
	return nil
}

func (m *GameHero) GetSinGenreId() uint32 {
	if m != nil {
		return m.SinGenreId
	}
	return 0
}

func (m *GameHero) GetKuangLongId() int32 {
	if m != nil {
		return m.KuangLongId
	}
	return 0
}

func (m *GameHero) GetApplyCorpsList() map[int64]*CorpsApply {
	if m != nil {
		return m.ApplyCorpsList
	}
	return nil
}

func (m *GameHero) GetCorpsInviteList() map[int64]*CorpsApply {
	if m != nil {
		return m.CorpsInviteList
	}
	return nil
}

func (m *GameHero) GetHuantiInfo() []*HuantiInfo {
	if m != nil {
		return m.HuantiInfo
	}
	return nil
}

func (m *GameHero) GetLastReadGonggaoTime() int32 {
	if m != nil {
		return m.LastReadGonggaoTime
	}
	return 0
}

func (m *GameHero) GetLastQuitCorpsTime() int32 {
	if m != nil {
		return m.LastQuitCorpsTime
	}
	return 0
}

func (m *GameHero) GetTeamEndlessTimeList() []*PlayerEndlessTime {
	if m != nil {
		return m.TeamEndlessTimeList
	}
	return nil
}

func (m *GameHero) GetCorpsBattleDefGenreId() int32 {
	if m != nil {
		return m.CorpsBattleDefGenreId
	}
	return 0
}

func (m *GameHero) GetCorpsBattleDefGenrePower() int32 {
	if m != nil {
		return m.CorpsBattleDefGenrePower
	}
	return 0
}

func (m *GameHero) GetBeforeCorpsbattleData() *GameGenre {
	if m != nil {
		return m.BeforeCorpsbattleData
	}
	return nil
}

func (m *GameHero) GetTechnology() []*Technology {
	if m != nil {
		return m.Technology
	}
	return nil
}

func (m *GameHero) GetBattlePassList() []*PlayerBattlePass {
	if m != nil {
		return m.BattlePassList
	}
	return nil
}

func (m *GameHero) GetSatiationLimit() int32 {
	if m != nil {
		return m.SatiationLimit
	}
	return 0
}

func (m *GameHero) GetFoodCount() int32 {
	if m != nil {
		return m.FoodCount
	}
	return 0
}

func (m *GameHero) GetFoodMax() int32 {
	if m != nil {
		return m.FoodMax
	}
	return 0
}

func (m *GameHero) GetExActivityList() []*ActivityElement {
	if m != nil {
		return m.ExActivityList
	}
	return nil
}

func (m *GameHero) GetSecretfileTechnology() []*Technology {
	if m != nil {
		return m.SecretfileTechnology
	}
	return nil
}

func (m *GameHero) GetSecretfileMap() map[int32]*SecretFileMap {
	if m != nil {
		return m.SecretfileMap
	}
	return nil
}

func (m *GameHero) GetRegularMail() map[int32]int64 {
	if m != nil {
		return m.RegularMail
	}
	return nil
}

func (m *GameHero) GetSkillsList() []*PlayerSkill {
	if m != nil {
		return m.SkillsList
	}
	return nil
}

func (m *GameHero) GetHomelandId() int32 {
	if m != nil {
		return m.HomelandId
	}
	return 0
}

func (m *GameHero) GetRepuTotalValue() map[uint32]int64 {
	if m != nil {
		return m.RepuTotalValue
	}
	return nil
}

func (m *GameHero) GetEnterLevelTimes() map[uint32]int64 {
	if m != nil {
		return m.EnterLevelTimes
	}
	return nil
}

func (m *GameHero) GetMaxLevelId() int32 {
	if m != nil {
		return m.MaxLevelId
	}
	return 0
}

func (m *GameHero) GetGuide() string {
	if m != nil {
		return m.Guide
	}
	return ""
}

func (m *GameHero) GetSinRank() int32 {
	if m != nil {
		return m.SinRank
	}
	return 0
}

func (m *GameHero) GetFrameExpireTime() int64 {
	if m != nil {
		return m.FrameExpireTime
	}
	return 0
}

func (m *GameHero) GetUpdateList() map[int32]int32 {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *GameHero) GetWeekUpdateTime() int32 {
	if m != nil {
		return m.WeekUpdateTime
	}
	return 0
}

func (m *GameHero) GetMonthUpdateTime() int32 {
	if m != nil {
		return m.MonthUpdateTime
	}
	return 0
}

func (m *GameHero) GetTxn() *PlayerTxn {
	if m != nil {
		return m.Txn
	}
	return nil
}

func (m *GameHero) GetTxnTimeout() *PlayerTxnTimeOut {
	if m != nil {
		return m.TxnTimeout
	}
	return nil
}

func (m *GameHero) GetEndlessLevel() uint32 {
	if m != nil {
		return m.EndlessLevel
	}
	return 0
}

func (m *GameHero) GetRefundTimes() int32 {
	if m != nil {
		return m.RefundTimes
	}
	return 0
}

func (m *GameHero) GetTotalRefund() int32 {
	if m != nil {
		return m.TotalRefund
	}
	return 0
}

func (m *GameHero) GetShopItemList() map[uint32]*PlayerShopItem {
	if m != nil {
		return m.ShopItemList
	}
	return nil
}

func (m *GameHero) GetChannelType() int32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *GameHero) GetAccumulateRmb() int64 {
	if m != nil {
		return m.AccumulateRmb
	}
	return 0
}

func (m *GameHero) GetLevelBoss() map[uint32]*DungeonCellData {
	if m != nil {
		return m.LevelBoss
	}
	return nil
}

func (m *GameHero) GetZhaohuiMailList() map[uint32]*DynamicActivity {
	if m != nil {
		return m.ZhaohuiMailList
	}
	return nil
}

func (m *GameHero) GetLevelChallengeList() []*LevelChallenge {
	if m != nil {
		return m.LevelChallengeList
	}
	return nil
}

func (m *GameHero) GetZhaohuiMailListNew() map[uint32]*DynamicActivity {
	if m != nil {
		return m.ZhaohuiMailListNew
	}
	return nil
}

func (m *GameHero) GetWorldBossBattleStatistics() map[uint32]*BattleStatistics {
	if m != nil {
		return m.WorldBossBattleStatistics
	}
	return nil
}

func (m *GameHero) GetPvpInfo() *PVPInfo {
	if m != nil {
		return m.PvpInfo
	}
	return nil
}

func (m *GameHero) GetMainlineMaxLevelId() int32 {
	if m != nil {
		return m.MainlineMaxLevelId
	}
	return 0
}

func (m *GameHero) GetGetDiamondSum() int64 {
	if m != nil {
		return m.GetDiamondSum
	}
	return 0
}

func (m *GameHero) GetUsedDiamondSum() int64 {
	if m != nil {
		return m.UsedDiamondSum
	}
	return 0
}

func (m *GameHero) GetUsedStaminaSum() int64 {
	if m != nil {
		return m.UsedStaminaSum
	}
	return 0
}

func (m *GameHero) GetEmptySkillScroll() bool {
	if m != nil {
		return m.EmptySkillScroll
	}
	return false
}

type Endless_ExtendData struct {
	BloodValue           float32        `protobuf:"fixed32,1,opt,name=blood_value,json=bloodValue,proto3" json:"blood_value,omitempty"`
	ShayiValue           uint32         `protobuf:"varint,2,opt,name=shayi_value,json=shayiValue,proto3" json:"shayi_value,omitempty"`
	ZhufuList            []*EndlessBuff `protobuf:"bytes,3,rep,name=zhufu_list,json=zhufuList,proto3" json:"zhufu_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Endless_ExtendData) Reset()         { *m = Endless_ExtendData{} }
func (m *Endless_ExtendData) String() string { return proto.CompactTextString(m) }
func (*Endless_ExtendData) ProtoMessage()    {}
func (*Endless_ExtendData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{64}
}

func (m *Endless_ExtendData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endless_ExtendData.Unmarshal(m, b)
}
func (m *Endless_ExtendData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endless_ExtendData.Marshal(b, m, deterministic)
}
func (m *Endless_ExtendData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endless_ExtendData.Merge(m, src)
}
func (m *Endless_ExtendData) XXX_Size() int {
	return xxx_messageInfo_Endless_ExtendData.Size(m)
}
func (m *Endless_ExtendData) XXX_DiscardUnknown() {
	xxx_messageInfo_Endless_ExtendData.DiscardUnknown(m)
}

var xxx_messageInfo_Endless_ExtendData proto.InternalMessageInfo

func (m *Endless_ExtendData) GetBloodValue() float32 {
	if m != nil {
		return m.BloodValue
	}
	return 0
}

func (m *Endless_ExtendData) GetShayiValue() uint32 {
	if m != nil {
		return m.ShayiValue
	}
	return 0
}

func (m *Endless_ExtendData) GetZhufuList() []*EndlessBuff {
	if m != nil {
		return m.ZhufuList
	}
	return nil
}

type GameAiHelper struct {
	Guid              uint64                     `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	HeroId            uint32                     `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Level             uint32                     `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Career            uint32                     `protobuf:"varint,4,opt,name=career,proto3" json:"career,omitempty"`
	Equipments        []*Item_Item               `protobuf:"bytes,5,rep,name=equipments,proto3" json:"equipments,omitempty"`
	SkillChain1       []int32                    `protobuf:"varint,6,rep,packed,name=skill_chain1,json=skillChain1,proto3" json:"skill_chain1,omitempty"`
	SkillChain2       []int32                    `protobuf:"varint,7,rep,packed,name=skill_chain2,json=skillChain2,proto3" json:"skill_chain2,omitempty"`
	NormalSkills      []int32                    `protobuf:"varint,8,rep,packed,name=normal_skills,json=normalSkills,proto3" json:"normal_skills,omitempty"`
	NormalSkySkills   []int32                    `protobuf:"varint,9,rep,packed,name=normal_sky_skills,json=normalSkySkills,proto3" json:"normal_sky_skills,omitempty"`
	CommonSkills      []int32                    `protobuf:"varint,10,rep,packed,name=common_skills,json=commonSkills,proto3" json:"common_skills,omitempty"`
	Skills            map[uint32]int32           `protobuf:"bytes,11,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UltraSkill        uint32                     `protobuf:"varint,12,opt,name=ultra_skill,json=ultraSkill,proto3" json:"ultra_skill,omitempty"`
	ScrollChain1      []uint64                   `protobuf:"varint,13,rep,packed,name=scroll_chain1,json=scrollChain1,proto3" json:"scroll_chain1,omitempty"`
	ScrollChain2      []uint64                   `protobuf:"varint,14,rep,packed,name=scroll_chain2,json=scrollChain2,proto3" json:"scroll_chain2,omitempty"`
	Scrolls           []*Item_Item               `protobuf:"bytes,15,rep,name=scrolls,proto3" json:"scrolls,omitempty"`
	Name              string                     `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Iphoto            int64                      `protobuf:"varint,17,opt,name=iphoto,proto3" json:"iphoto,omitempty"`
	LogoutTime        int32                      `protobuf:"varint,18,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	Power             uint64                     `protobuf:"varint,19,opt,name=power,proto3" json:"power,omitempty"`
	Runes             []*Item_Item               `protobuf:"bytes,20,rep,name=runes,proto3" json:"runes,omitempty"`
	Skins             []*Item_Item               `protobuf:"bytes,21,rep,name=skins,proto3" json:"skins,omitempty"`
	Exp               int32                      `protobuf:"varint,22,opt,name=exp,proto3" json:"exp,omitempty"`
	ClLevel           uint32                     `protobuf:"varint,23,opt,name=cl_level,json=clLevel,proto3" json:"cl_level,omitempty"`
	ClExp             uint32                     `protobuf:"varint,24,opt,name=cl_exp,json=clExp,proto3" json:"cl_exp,omitempty"`
	OrgLevel          uint32                     `protobuf:"varint,25,opt,name=org_level,json=orgLevel,proto3" json:"org_level,omitempty"`
	PlayerSkills      []*PlayerSkill             `protobuf:"bytes,26,rep,name=player_skills,json=playerSkills,proto3" json:"player_skills,omitempty"`
	PlayerGuid        uint64                     `protobuf:"varint,27,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	Durable           []*MapLongF                `protobuf:"bytes,28,rep,name=durable,proto3" json:"durable,omitempty"`
	EndlessExtendData *Endless_ExtendData        `protobuf:"bytes,29,opt,name=endless_extend_data,json=endlessExtendData,proto3" json:"endless_extend_data,omitempty"`
	Frame             int32                      `protobuf:"varint,30,opt,name=frame,proto3" json:"frame,omitempty"`
	Skin              int32                      `protobuf:"varint,31,opt,name=skin,proto3" json:"skin,omitempty"`
	ChannelType       int32                      `protobuf:"varint,32,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	SkinPropSelect    map[uint32]*SkinPropSelect `protobuf:"bytes,33,rep,name=skin_prop_select,json=skinPropSelect,proto3" json:"skin_prop_select,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Huanti            *HuantiInfo                `protobuf:"bytes,34,opt,name=huanti,proto3" json:"huanti,omitempty"`
	CorpsId           int64                      `protobuf:"varint,35,opt,name=corps_id,json=corpsId,proto3" json:"corps_id,omitempty"`
	Technology        []*Technology              `protobuf:"bytes,36,rep,name=technology,proto3" json:"technology,omitempty"`
	PvpLevel          int32                      `protobuf:"varint,37,opt,name=pvp_level,json=pvpLevel,proto3" json:"pvp_level,omitempty"`
	//无尽劫境
	EndlessProgress      []byte             `protobuf:"bytes,38,opt,name=endless_progress,json=endlessProgress,proto3" json:"endless_progress,omitempty"`
	EndlessShopBuffs     []*EndlessShopBuff `protobuf:"bytes,39,rep,name=endless_shop_buffs,json=endlessShopBuffs,proto3" json:"endless_shop_buffs,omitempty"`
	EndlessDurable       []*MapLongF        `protobuf:"bytes,40,rep,name=endless_durable,json=endlessDurable,proto3" json:"endless_durable,omitempty"`
	SkillsList           []*PlayerSkill     `protobuf:"bytes,41,rep,name=skills_list,json=skillsList,proto3" json:"skills_list,omitempty"`
	SinRank              int32              `protobuf:"varint,42,opt,name=sin_rank,json=sinRank,proto3" json:"sin_rank,omitempty"`
	EmptySkillScroll     bool               `protobuf:"varint,43,opt,name=empty_skill_scroll,json=emptySkillScroll,proto3" json:"empty_skill_scroll,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GameAiHelper) Reset()         { *m = GameAiHelper{} }
func (m *GameAiHelper) String() string { return proto.CompactTextString(m) }
func (*GameAiHelper) ProtoMessage()    {}
func (*GameAiHelper) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{65}
}

func (m *GameAiHelper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameAiHelper.Unmarshal(m, b)
}
func (m *GameAiHelper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameAiHelper.Marshal(b, m, deterministic)
}
func (m *GameAiHelper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameAiHelper.Merge(m, src)
}
func (m *GameAiHelper) XXX_Size() int {
	return xxx_messageInfo_GameAiHelper.Size(m)
}
func (m *GameAiHelper) XXX_DiscardUnknown() {
	xxx_messageInfo_GameAiHelper.DiscardUnknown(m)
}

var xxx_messageInfo_GameAiHelper proto.InternalMessageInfo

func (m *GameAiHelper) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GameAiHelper) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *GameAiHelper) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GameAiHelper) GetCareer() uint32 {
	if m != nil {
		return m.Career
	}
	return 0
}

func (m *GameAiHelper) GetEquipments() []*Item_Item {
	if m != nil {
		return m.Equipments
	}
	return nil
}

func (m *GameAiHelper) GetSkillChain1() []int32 {
	if m != nil {
		return m.SkillChain1
	}
	return nil
}

func (m *GameAiHelper) GetSkillChain2() []int32 {
	if m != nil {
		return m.SkillChain2
	}
	return nil
}

func (m *GameAiHelper) GetNormalSkills() []int32 {
	if m != nil {
		return m.NormalSkills
	}
	return nil
}

func (m *GameAiHelper) GetNormalSkySkills() []int32 {
	if m != nil {
		return m.NormalSkySkills
	}
	return nil
}

func (m *GameAiHelper) GetCommonSkills() []int32 {
	if m != nil {
		return m.CommonSkills
	}
	return nil
}

func (m *GameAiHelper) GetSkills() map[uint32]int32 {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *GameAiHelper) GetUltraSkill() uint32 {
	if m != nil {
		return m.UltraSkill
	}
	return 0
}

func (m *GameAiHelper) GetScrollChain1() []uint64 {
	if m != nil {
		return m.ScrollChain1
	}
	return nil
}

func (m *GameAiHelper) GetScrollChain2() []uint64 {
	if m != nil {
		return m.ScrollChain2
	}
	return nil
}

func (m *GameAiHelper) GetScrolls() []*Item_Item {
	if m != nil {
		return m.Scrolls
	}
	return nil
}

func (m *GameAiHelper) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameAiHelper) GetIphoto() int64 {
	if m != nil {
		return m.Iphoto
	}
	return 0
}

func (m *GameAiHelper) GetLogoutTime() int32 {
	if m != nil {
		return m.LogoutTime
	}
	return 0
}

func (m *GameAiHelper) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GameAiHelper) GetRunes() []*Item_Item {
	if m != nil {
		return m.Runes
	}
	return nil
}

func (m *GameAiHelper) GetSkins() []*Item_Item {
	if m != nil {
		return m.Skins
	}
	return nil
}

func (m *GameAiHelper) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *GameAiHelper) GetClLevel() uint32 {
	if m != nil {
		return m.ClLevel
	}
	return 0
}

func (m *GameAiHelper) GetClExp() uint32 {
	if m != nil {
		return m.ClExp
	}
	return 0
}

func (m *GameAiHelper) GetOrgLevel() uint32 {
	if m != nil {
		return m.OrgLevel
	}
	return 0
}

func (m *GameAiHelper) GetPlayerSkills() []*PlayerSkill {
	if m != nil {
		return m.PlayerSkills
	}
	return nil
}

func (m *GameAiHelper) GetPlayerGuid() uint64 {
	if m != nil {
		return m.PlayerGuid
	}
	return 0
}

func (m *GameAiHelper) GetDurable() []*MapLongF {
	if m != nil {
		return m.Durable
	}
	return nil
}

func (m *GameAiHelper) GetEndlessExtendData() *Endless_ExtendData {
	if m != nil {
		return m.EndlessExtendData
	}
	return nil
}

func (m *GameAiHelper) GetFrame() int32 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *GameAiHelper) GetSkin() int32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

func (m *GameAiHelper) GetChannelType() int32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *GameAiHelper) GetSkinPropSelect() map[uint32]*SkinPropSelect {
	if m != nil {
		return m.SkinPropSelect
	}
	return nil
}

func (m *GameAiHelper) GetHuanti() *HuantiInfo {
	if m != nil {
		return m.Huanti
	}
	return nil
}

func (m *GameAiHelper) GetCorpsId() int64 {
	if m != nil {
		return m.CorpsId
	}
	return 0
}

func (m *GameAiHelper) GetTechnology() []*Technology {
	if m != nil {
		return m.Technology
	}
	return nil
}

func (m *GameAiHelper) GetPvpLevel() int32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *GameAiHelper) GetEndlessProgress() []byte {
	if m != nil {
		return m.EndlessProgress
	}
	return nil
}

func (m *GameAiHelper) GetEndlessShopBuffs() []*EndlessShopBuff {
	if m != nil {
		return m.EndlessShopBuffs
	}
	return nil
}

func (m *GameAiHelper) GetEndlessDurable() []*MapLongF {
	if m != nil {
		return m.EndlessDurable
	}
	return nil
}

func (m *GameAiHelper) GetSkillsList() []*PlayerSkill {
	if m != nil {
		return m.SkillsList
	}
	return nil
}

func (m *GameAiHelper) GetSinRank() int32 {
	if m != nil {
		return m.SinRank
	}
	return 0
}

func (m *GameAiHelper) GetEmptySkillScroll() bool {
	if m != nil {
		return m.EmptySkillScroll
	}
	return false
}

type HeroSelectionItem struct {
	Guid                 uint64   `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	HeroId               uint32   `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Level                uint32   `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	CreateTime           int32    `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ClLevel              uint32   `protobuf:"varint,6,opt,name=cl_level,json=clLevel,proto3" json:"cl_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeroSelectionItem) Reset()         { *m = HeroSelectionItem{} }
func (m *HeroSelectionItem) String() string { return proto.CompactTextString(m) }
func (*HeroSelectionItem) ProtoMessage()    {}
func (*HeroSelectionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{66}
}

func (m *HeroSelectionItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeroSelectionItem.Unmarshal(m, b)
}
func (m *HeroSelectionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeroSelectionItem.Marshal(b, m, deterministic)
}
func (m *HeroSelectionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroSelectionItem.Merge(m, src)
}
func (m *HeroSelectionItem) XXX_Size() int {
	return xxx_messageInfo_HeroSelectionItem.Size(m)
}
func (m *HeroSelectionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroSelectionItem.DiscardUnknown(m)
}

var xxx_messageInfo_HeroSelectionItem proto.InternalMessageInfo

func (m *HeroSelectionItem) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *HeroSelectionItem) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *HeroSelectionItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeroSelectionItem) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HeroSelectionItem) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *HeroSelectionItem) GetClLevel() uint32 {
	if m != nil {
		return m.ClLevel
	}
	return 0
}

type LevelRecord struct {
	PassTimes            uint32   `protobuf:"varint,1,opt,name=pass_times,json=passTimes,proto3" json:"pass_times,omitempty"`
	LastTime             uint32   `protobuf:"varint,2,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	DailyPassTimes       uint32   `protobuf:"varint,3,opt,name=daily_pass_times,json=dailyPassTimes,proto3" json:"daily_pass_times,omitempty"`
	CurrLayer            int32    `protobuf:"varint,4,opt,name=curr_layer,json=currLayer,proto3" json:"curr_layer,omitempty"`
	MaxLayer             int32    `protobuf:"varint,5,opt,name=max_layer,json=maxLayer,proto3" json:"max_layer,omitempty"`
	LuckyDropTimes       int32    `protobuf:"varint,6,opt,name=lucky_drop_times,json=luckyDropTimes,proto3" json:"lucky_drop_times,omitempty"`
	TreasureBox          []int32  `protobuf:"varint,7,rep,packed,name=treasure_box,json=treasureBox,proto3" json:"treasure_box,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LevelRecord) Reset()         { *m = LevelRecord{} }
func (m *LevelRecord) String() string { return proto.CompactTextString(m) }
func (*LevelRecord) ProtoMessage()    {}
func (*LevelRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{67}
}

func (m *LevelRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LevelRecord.Unmarshal(m, b)
}
func (m *LevelRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LevelRecord.Marshal(b, m, deterministic)
}
func (m *LevelRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelRecord.Merge(m, src)
}
func (m *LevelRecord) XXX_Size() int {
	return xxx_messageInfo_LevelRecord.Size(m)
}
func (m *LevelRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LevelRecord proto.InternalMessageInfo

func (m *LevelRecord) GetPassTimes() uint32 {
	if m != nil {
		return m.PassTimes
	}
	return 0
}

func (m *LevelRecord) GetLastTime() uint32 {
	if m != nil {
		return m.LastTime
	}
	return 0
}

func (m *LevelRecord) GetDailyPassTimes() uint32 {
	if m != nil {
		return m.DailyPassTimes
	}
	return 0
}

func (m *LevelRecord) GetCurrLayer() int32 {
	if m != nil {
		return m.CurrLayer
	}
	return 0
}

func (m *LevelRecord) GetMaxLayer() int32 {
	if m != nil {
		return m.MaxLayer
	}
	return 0
}

func (m *LevelRecord) GetLuckyDropTimes() int32 {
	if m != nil {
		return m.LuckyDropTimes
	}
	return 0
}

func (m *LevelRecord) GetTreasureBox() []int32 {
	if m != nil {
		return m.TreasureBox
	}
	return nil
}

type ServerWorld struct {
	Guid                 uint32        `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Platform             uint32        `protobuf:"varint,4,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel              uint32        `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Tag                  string        `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	Priority             uint32        `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	Servers              []*ServerItem `protobuf:"bytes,8,rep,name=servers,proto3" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServerWorld) Reset()         { *m = ServerWorld{} }
func (m *ServerWorld) String() string { return proto.CompactTextString(m) }
func (*ServerWorld) ProtoMessage()    {}
func (*ServerWorld) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{68}
}

func (m *ServerWorld) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerWorld.Unmarshal(m, b)
}
func (m *ServerWorld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerWorld.Marshal(b, m, deterministic)
}
func (m *ServerWorld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerWorld.Merge(m, src)
}
func (m *ServerWorld) XXX_Size() int {
	return xxx_messageInfo_ServerWorld.Size(m)
}
func (m *ServerWorld) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerWorld.DiscardUnknown(m)
}

var xxx_messageInfo_ServerWorld proto.InternalMessageInfo

func (m *ServerWorld) GetGuid() uint32 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *ServerWorld) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerWorld) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ServerWorld) GetPlatform() uint32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ServerWorld) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *ServerWorld) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ServerWorld) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *ServerWorld) GetServers() []*ServerItem {
	if m != nil {
		return m.Servers
	}
	return nil
}

type ServerItem struct {
	Guid                 uint32   `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	World                uint32   `protobuf:"varint,2,opt,name=world,proto3" json:"world,omitempty"`
	Server               uint32   `protobuf:"varint,3,opt,name=server,proto3" json:"server,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32   `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Status               uint32   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Authority            uint32   `protobuf:"varint,8,opt,name=authority,proto3" json:"authority,omitempty"`
	Recommend            uint32   `protobuf:"varint,9,opt,name=recommend,proto3" json:"recommend,omitempty"`
	IsNew                bool     `protobuf:"varint,10,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	Online               uint32   `protobuf:"varint,11,opt,name=online,proto3" json:"online,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerItem) Reset()         { *m = ServerItem{} }
func (m *ServerItem) String() string { return proto.CompactTextString(m) }
func (*ServerItem) ProtoMessage()    {}
func (*ServerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{69}
}

func (m *ServerItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerItem.Unmarshal(m, b)
}
func (m *ServerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerItem.Marshal(b, m, deterministic)
}
func (m *ServerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerItem.Merge(m, src)
}
func (m *ServerItem) XXX_Size() int {
	return xxx_messageInfo_ServerItem.Size(m)
}
func (m *ServerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerItem.DiscardUnknown(m)
}

var xxx_messageInfo_ServerItem proto.InternalMessageInfo

func (m *ServerItem) GetGuid() uint32 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *ServerItem) GetWorld() uint32 {
	if m != nil {
		return m.World
	}
	return 0
}

func (m *ServerItem) GetServer() uint32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *ServerItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerItem) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ServerItem) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServerItem) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ServerItem) GetAuthority() uint32 {
	if m != nil {
		return m.Authority
	}
	return 0
}

func (m *ServerItem) GetRecommend() uint32 {
	if m != nil {
		return m.Recommend
	}
	return 0
}

func (m *ServerItem) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

func (m *ServerItem) GetOnline() uint32 {
	if m != nil {
		return m.Online
	}
	return 0
}

type DungeonCellData struct {
	CellId           uint32                `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	X                int32                 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y                int32                 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	SceneId          uint32                `protobuf:"varint,4,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	IsBranch         bool                  `protobuf:"varint,5,opt,name=is_branch,json=isBranch,proto3" json:"is_branch,omitempty"`
	IsBoss           bool                  `protobuf:"varint,6,opt,name=is_boss,json=isBoss,proto3" json:"is_boss,omitempty"`
	IsDanger         bool                  `protobuf:"varint,7,opt,name=is_danger,json=isDanger,proto3" json:"is_danger,omitempty"`
	Dir              GameDungeonDirection  `protobuf:"varint,8,opt,name=dir,proto3,enum=Adoter.Asset.GameDungeonDirection" json:"dir,omitempty"`
	Entities         []*EntitySpawnData    `protobuf:"bytes,9,rep,name=entities,proto3" json:"entities,omitempty"`
	FirstTimeRewards []*WeightItemSlotWrap `protobuf:"bytes,10,rep,name=first_time_rewards,json=firstTimeRewards,proto3" json:"first_time_rewards,omitempty"`
	Rewards          []*WeightItemSlotWrap `protobuf:"bytes,11,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Cell             []*DungeonCellData    `protobuf:"bytes,12,rep,name=cell,proto3" json:"cell,omitempty"`
	N                bool                  `protobuf:"varint,13,opt,name=n,proto3" json:"n,omitempty"`
	E                bool                  `protobuf:"varint,14,opt,name=e,proto3" json:"e,omitempty"`
	S                bool                  `protobuf:"varint,15,opt,name=s,proto3" json:"s,omitempty"`
	W                bool                  `protobuf:"varint,16,opt,name=w,proto3" json:"w,omitempty"`
	Generated        bool                  `protobuf:"varint,17,opt,name=generated,proto3" json:"generated,omitempty"`
	Pass             bool                  `protobuf:"varint,18,opt,name=pass,proto3" json:"pass,omitempty"`
	Npc              []*EntitySpawnData    `protobuf:"bytes,19,rep,name=npc,proto3" json:"npc,omitempty"`
	IsSin            bool                  `protobuf:"varint,20,opt,name=is_sin,json=isSin,proto3" json:"is_sin,omitempty"`
	//repeated EntitySpawnData sin_players = 21;
	SinThreat           SIN_THREAT                      `protobuf:"varint,22,opt,name=sin_threat,json=sinThreat,proto3,enum=Adoter.Asset.SIN_THREAT" json:"sin_threat,omitempty"`
	SinRewards          []*WeightItemSlotWrap           `protobuf:"bytes,23,rep,name=sin_rewards,json=sinRewards,proto3" json:"sin_rewards,omitempty"`
	PartyType           PartyType                       `protobuf:"varint,24,opt,name=party_type,json=partyType,proto3,enum=Adoter.Asset.PartyType" json:"party_type,omitempty"`
	PartyLocation       PartyLocation                   `protobuf:"varint,25,opt,name=party_location,json=partyLocation,proto3,enum=Adoter.Asset.PartyLocation" json:"party_location,omitempty"`
	LevelSupId          uint32                          `protobuf:"varint,26,opt,name=level_sup_id,json=levelSupId,proto3" json:"level_sup_id,omitempty"`
	IsPrepare           bool                            `protobuf:"varint,27,opt,name=is_prepare,json=isPrepare,proto3" json:"is_prepare,omitempty"`
	LevelId             int32                           `protobuf:"varint,28,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Buffs               []int32                         `protobuf:"varint,29,rep,packed,name=buffs,proto3" json:"buffs,omitempty"`
	HasSended           bool                            `protobuf:"varint,30,opt,name=has_sended,json=hasSended,proto3" json:"has_sended,omitempty"`
	IsBlessShop         bool                            `protobuf:"varint,31,opt,name=is_bless_shop,json=isBlessShop,proto3" json:"is_bless_shop,omitempty"`
	TempRewards         []*WeightItemSlotWrap           `protobuf:"bytes,32,rep,name=temp_rewards,json=tempRewards,proto3" json:"temp_rewards,omitempty"`
	IsBlack             bool                            `protobuf:"varint,33,opt,name=is_black,json=isBlack,proto3" json:"is_black,omitempty"`
	IsAct               bool                            `protobuf:"varint,34,opt,name=is_act,json=isAct,proto3" json:"is_act,omitempty"`
	SceneBlack          uint32                          `protobuf:"varint,35,opt,name=scene_black,json=sceneBlack,proto3" json:"scene_black,omitempty"`
	IsIntrude           bool                            `protobuf:"varint,36,opt,name=is_intrude,json=isIntrude,proto3" json:"is_intrude,omitempty"`
	IntrudeRewards      []*WeightItemSlotWrap           `protobuf:"bytes,37,rep,name=intrude_rewards,json=intrudeRewards,proto3" json:"intrude_rewards,omitempty"`
	CurSinDifficulty    uint32                          `protobuf:"varint,38,opt,name=cur_sin_difficulty,json=curSinDifficulty,proto3" json:"cur_sin_difficulty,omitempty"`
	SinFailedTimes      uint32                          `protobuf:"varint,39,opt,name=sin_failed_times,json=sinFailedTimes,proto3" json:"sin_failed_times,omitempty"`
	CurAtkSinDifficulty uint32                          `protobuf:"varint,40,opt,name=cur_atk_sin_difficulty,json=curAtkSinDifficulty,proto3" json:"cur_atk_sin_difficulty,omitempty"`
	HasIntrude          bool                            `protobuf:"varint,41,opt,name=has_intrude,json=hasIntrude,proto3" json:"has_intrude,omitempty"`
	IsInBattle          bool                            `protobuf:"varint,42,opt,name=is_in_battle,json=isInBattle,proto3" json:"is_in_battle,omitempty"`
	RoomId              uint32                          `protobuf:"varint,43,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	CanSin              bool                            `protobuf:"varint,44,opt,name=can_sin,json=canSin,proto3" json:"can_sin,omitempty"`
	BoxRewards          map[uint64]*RoomEntitySpawnData `protobuf:"bytes,45,rep,name=box_rewards,json=boxRewards,proto3" json:"box_rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoomData            *RoomDungeonCellData            `protobuf:"bytes,46,opt,name=room_data,json=roomData,proto3" json:"room_data,omitempty"`
	//int32 unit_group_id = 47;
	Obj                  []*EntitySpawnData `protobuf:"bytes,48,rep,name=obj,proto3" json:"obj,omitempty"`
	RoomIndex            uint32             `protobuf:"varint,49,opt,name=room_index,json=roomIndex,proto3" json:"room_index,omitempty"`
	EnterHp              float32            `protobuf:"fixed32,50,opt,name=enter_hp,json=enterHp,proto3" json:"enter_hp,omitempty"`
	LeaveHp              float32            `protobuf:"fixed32,51,opt,name=leave_hp,json=leaveHp,proto3" json:"leave_hp,omitempty"`
	RebirthCount         uint32             `protobuf:"varint,52,opt,name=rebirth_count,json=rebirthCount,proto3" json:"rebirth_count,omitempty"`
	StayTime             uint32             `protobuf:"varint,53,opt,name=stay_time,json=stayTime,proto3" json:"stay_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DungeonCellData) Reset()         { *m = DungeonCellData{} }
func (m *DungeonCellData) String() string { return proto.CompactTextString(m) }
func (*DungeonCellData) ProtoMessage()    {}
func (*DungeonCellData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{70}
}

func (m *DungeonCellData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DungeonCellData.Unmarshal(m, b)
}
func (m *DungeonCellData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DungeonCellData.Marshal(b, m, deterministic)
}
func (m *DungeonCellData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonCellData.Merge(m, src)
}
func (m *DungeonCellData) XXX_Size() int {
	return xxx_messageInfo_DungeonCellData.Size(m)
}
func (m *DungeonCellData) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonCellData.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonCellData proto.InternalMessageInfo

func (m *DungeonCellData) GetCellId() uint32 {
	if m != nil {
		return m.CellId
	}
	return 0
}

func (m *DungeonCellData) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *DungeonCellData) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *DungeonCellData) GetSceneId() uint32 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

func (m *DungeonCellData) GetIsBranch() bool {
	if m != nil {
		return m.IsBranch
	}
	return false
}

func (m *DungeonCellData) GetIsBoss() bool {
	if m != nil {
		return m.IsBoss
	}
	return false
}

func (m *DungeonCellData) GetIsDanger() bool {
	if m != nil {
		return m.IsDanger
	}
	return false
}

func (m *DungeonCellData) GetDir() GameDungeonDirection {
	if m != nil {
		return m.Dir
	}
	return GameDungeonDirection_North
}

func (m *DungeonCellData) GetEntities() []*EntitySpawnData {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *DungeonCellData) GetFirstTimeRewards() []*WeightItemSlotWrap {
	if m != nil {
		return m.FirstTimeRewards
	}
	return nil
}

func (m *DungeonCellData) GetRewards() []*WeightItemSlotWrap {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *DungeonCellData) GetCell() []*DungeonCellData {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *DungeonCellData) GetN() bool {
	if m != nil {
		return m.N
	}
	return false
}

func (m *DungeonCellData) GetE() bool {
	if m != nil {
		return m.E
	}
	return false
}

func (m *DungeonCellData) GetS() bool {
	if m != nil {
		return m.S
	}
	return false
}

func (m *DungeonCellData) GetW() bool {
	if m != nil {
		return m.W
	}
	return false
}

func (m *DungeonCellData) GetGenerated() bool {
	if m != nil {
		return m.Generated
	}
	return false
}

func (m *DungeonCellData) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

func (m *DungeonCellData) GetNpc() []*EntitySpawnData {
	if m != nil {
		return m.Npc
	}
	return nil
}

func (m *DungeonCellData) GetIsSin() bool {
	if m != nil {
		return m.IsSin
	}
	return false
}

func (m *DungeonCellData) GetSinThreat() SIN_THREAT {
	if m != nil {
		return m.SinThreat
	}
	return SIN_THREAT_SIN_THREAT_NONE
}

func (m *DungeonCellData) GetSinRewards() []*WeightItemSlotWrap {
	if m != nil {
		return m.SinRewards
	}
	return nil
}

func (m *DungeonCellData) GetPartyType() PartyType {
	if m != nil {
		return m.PartyType
	}
	return PartyType_PartyType_None
}

func (m *DungeonCellData) GetPartyLocation() PartyLocation {
	if m != nil {
		return m.PartyLocation
	}
	return PartyLocation_PartyLocation_None
}

func (m *DungeonCellData) GetLevelSupId() uint32 {
	if m != nil {
		return m.LevelSupId
	}
	return 0
}

func (m *DungeonCellData) GetIsPrepare() bool {
	if m != nil {
		return m.IsPrepare
	}
	return false
}

func (m *DungeonCellData) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *DungeonCellData) GetBuffs() []int32 {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *DungeonCellData) GetHasSended() bool {
	if m != nil {
		return m.HasSended
	}
	return false
}

func (m *DungeonCellData) GetIsBlessShop() bool {
	if m != nil {
		return m.IsBlessShop
	}
	return false
}

func (m *DungeonCellData) GetTempRewards() []*WeightItemSlotWrap {
	if m != nil {
		return m.TempRewards
	}
	return nil
}

func (m *DungeonCellData) GetIsBlack() bool {
	if m != nil {
		return m.IsBlack
	}
	return false
}

func (m *DungeonCellData) GetIsAct() bool {
	if m != nil {
		return m.IsAct
	}
	return false
}

func (m *DungeonCellData) GetSceneBlack() uint32 {
	if m != nil {
		return m.SceneBlack
	}
	return 0
}

func (m *DungeonCellData) GetIsIntrude() bool {
	if m != nil {
		return m.IsIntrude
	}
	return false
}

func (m *DungeonCellData) GetIntrudeRewards() []*WeightItemSlotWrap {
	if m != nil {
		return m.IntrudeRewards
	}
	return nil
}

func (m *DungeonCellData) GetCurSinDifficulty() uint32 {
	if m != nil {
		return m.CurSinDifficulty
	}
	return 0
}

func (m *DungeonCellData) GetSinFailedTimes() uint32 {
	if m != nil {
		return m.SinFailedTimes
	}
	return 0
}

func (m *DungeonCellData) GetCurAtkSinDifficulty() uint32 {
	if m != nil {
		return m.CurAtkSinDifficulty
	}
	return 0
}

func (m *DungeonCellData) GetHasIntrude() bool {
	if m != nil {
		return m.HasIntrude
	}
	return false
}

func (m *DungeonCellData) GetIsInBattle() bool {
	if m != nil {
		return m.IsInBattle
	}
	return false
}

func (m *DungeonCellData) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *DungeonCellData) GetCanSin() bool {
	if m != nil {
		return m.CanSin
	}
	return false
}

func (m *DungeonCellData) GetBoxRewards() map[uint64]*RoomEntitySpawnData {
	if m != nil {
		return m.BoxRewards
	}
	return nil
}

func (m *DungeonCellData) GetRoomData() *RoomDungeonCellData {
	if m != nil {
		return m.RoomData
	}
	return nil
}

func (m *DungeonCellData) GetObj() []*EntitySpawnData {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *DungeonCellData) GetRoomIndex() uint32 {
	if m != nil {
		return m.RoomIndex
	}
	return 0
}

func (m *DungeonCellData) GetEnterHp() float32 {
	if m != nil {
		return m.EnterHp
	}
	return 0
}

func (m *DungeonCellData) GetLeaveHp() float32 {
	if m != nil {
		return m.LeaveHp
	}
	return 0
}

func (m *DungeonCellData) GetRebirthCount() uint32 {
	if m != nil {
		return m.RebirthCount
	}
	return 0
}

func (m *DungeonCellData) GetStayTime() uint32 {
	if m != nil {
		return m.StayTime
	}
	return 0
}

type RoomDungeonCellData struct {
	RoomId    int32     `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	IsBranch  bool      `protobuf:"varint,2,opt,name=is_branch,json=isBranch,proto3" json:"is_branch,omitempty"`
	IsBoss    bool      `protobuf:"varint,3,opt,name=is_boss,json=isBoss,proto3" json:"is_boss,omitempty"`
	CanSin    bool      `protobuf:"varint,4,opt,name=can_sin,json=canSin,proto3" json:"can_sin,omitempty"`
	PartyType PartyType `protobuf:"varint,5,opt,name=party_type,json=partyType,proto3,enum=Adoter.Asset.PartyType" json:"party_type,omitempty"`
	//int32 fake_sin_room_id = 6;
	PartyGenType         PartyGenType                   `protobuf:"varint,7,opt,name=party_gen_type,json=partyGenType,proto3,enum=Adoter.Asset.PartyGenType" json:"party_gen_type,omitempty"`
	PartyGenParameter    int32                          `protobuf:"varint,8,opt,name=party_gen_parameter,json=partyGenParameter,proto3" json:"party_gen_parameter,omitempty"`
	PartyGenRoomId       int32                          `protobuf:"varint,9,opt,name=party_gen_room_id,json=partyGenRoomId,proto3" json:"party_gen_room_id,omitempty"`
	Parent               *RoomDungeonCellData           `protobuf:"bytes,10,opt,name=parent,proto3" json:"parent,omitempty"`
	Childs               map[int32]*RoomDungeonCellData `protobuf:"bytes,11,rep,name=childs,proto3" json:"childs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CellId               int32                          `protobuf:"varint,12,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RoomDungeonCellData) Reset()         { *m = RoomDungeonCellData{} }
func (m *RoomDungeonCellData) String() string { return proto.CompactTextString(m) }
func (*RoomDungeonCellData) ProtoMessage()    {}
func (*RoomDungeonCellData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{71}
}

func (m *RoomDungeonCellData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomDungeonCellData.Unmarshal(m, b)
}
func (m *RoomDungeonCellData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomDungeonCellData.Marshal(b, m, deterministic)
}
func (m *RoomDungeonCellData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomDungeonCellData.Merge(m, src)
}
func (m *RoomDungeonCellData) XXX_Size() int {
	return xxx_messageInfo_RoomDungeonCellData.Size(m)
}
func (m *RoomDungeonCellData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomDungeonCellData.DiscardUnknown(m)
}

var xxx_messageInfo_RoomDungeonCellData proto.InternalMessageInfo

func (m *RoomDungeonCellData) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomDungeonCellData) GetIsBranch() bool {
	if m != nil {
		return m.IsBranch
	}
	return false
}

func (m *RoomDungeonCellData) GetIsBoss() bool {
	if m != nil {
		return m.IsBoss
	}
	return false
}

func (m *RoomDungeonCellData) GetCanSin() bool {
	if m != nil {
		return m.CanSin
	}
	return false
}

func (m *RoomDungeonCellData) GetPartyType() PartyType {
	if m != nil {
		return m.PartyType
	}
	return PartyType_PartyType_None
}

func (m *RoomDungeonCellData) GetPartyGenType() PartyGenType {
	if m != nil {
		return m.PartyGenType
	}
	return PartyGenType_PartyGenType_None
}

func (m *RoomDungeonCellData) GetPartyGenParameter() int32 {
	if m != nil {
		return m.PartyGenParameter
	}
	return 0
}

func (m *RoomDungeonCellData) GetPartyGenRoomId() int32 {
	if m != nil {
		return m.PartyGenRoomId
	}
	return 0
}

func (m *RoomDungeonCellData) GetParent() *RoomDungeonCellData {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *RoomDungeonCellData) GetChilds() map[int32]*RoomDungeonCellData {
	if m != nil {
		return m.Childs
	}
	return nil
}

func (m *RoomDungeonCellData) GetCellId() int32 {
	if m != nil {
		return m.CellId
	}
	return 0
}

type EntitySpawnData struct {
	Type                 EntitySpawnType      `protobuf:"varint,1,opt,name=type,proto3,enum=Adoter.Asset.EntitySpawnType" json:"type,omitempty"`
	Id                   uint32               `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           []uint32             `protobuf:"varint,3,rep,packed,name=attributes,proto3" json:"attributes,omitempty"`
	Guid                 uint64               `protobuf:"varint,4,opt,name=guid,proto3" json:"guid,omitempty"`
	SinPlayer            *GameAiHelper        `protobuf:"bytes,5,opt,name=sin_player,json=sinPlayer,proto3" json:"sin_player,omitempty"`
	RoomData             *RoomEntitySpawnData `protobuf:"bytes,6,opt,name=room_data,json=roomData,proto3" json:"room_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EntitySpawnData) Reset()         { *m = EntitySpawnData{} }
func (m *EntitySpawnData) String() string { return proto.CompactTextString(m) }
func (*EntitySpawnData) ProtoMessage()    {}
func (*EntitySpawnData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{72}
}

func (m *EntitySpawnData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntitySpawnData.Unmarshal(m, b)
}
func (m *EntitySpawnData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntitySpawnData.Marshal(b, m, deterministic)
}
func (m *EntitySpawnData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitySpawnData.Merge(m, src)
}
func (m *EntitySpawnData) XXX_Size() int {
	return xxx_messageInfo_EntitySpawnData.Size(m)
}
func (m *EntitySpawnData) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitySpawnData.DiscardUnknown(m)
}

var xxx_messageInfo_EntitySpawnData proto.InternalMessageInfo

func (m *EntitySpawnData) GetType() EntitySpawnType {
	if m != nil {
		return m.Type
	}
	return EntitySpawnType_Trigger
}

func (m *EntitySpawnData) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EntitySpawnData) GetAttributes() []uint32 {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EntitySpawnData) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *EntitySpawnData) GetSinPlayer() *GameAiHelper {
	if m != nil {
		return m.SinPlayer
	}
	return nil
}

func (m *EntitySpawnData) GetRoomData() *RoomEntitySpawnData {
	if m != nil {
		return m.RoomData
	}
	return nil
}

type RoomEntitySpawnData struct {
	UnitId               int32                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	UnitGroupId          int32                 `protobuf:"varint,2,opt,name=unit_group_id,json=unitGroupId,proto3" json:"unit_group_id,omitempty"`
	AttributePool        int32                 `protobuf:"varint,3,opt,name=attribute_pool,json=attributePool,proto3" json:"attribute_pool,omitempty"`
	Rate                 float32               `protobuf:"fixed32,4,opt,name=rate,proto3" json:"rate,omitempty"`
	DropItem             int32                 `protobuf:"varint,5,opt,name=drop_item,json=dropItem,proto3" json:"drop_item,omitempty"`
	ShowType             RoomUnitShowType      `protobuf:"varint,6,opt,name=show_type,json=showType,proto3,enum=Adoter.Asset.RoomUnitShowType" json:"show_type,omitempty"`
	Position             *Vector3D             `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
	Dir                  RoomUnitDirType       `protobuf:"varint,8,opt,name=dir,proto3,enum=Adoter.Asset.RoomUnitDirType" json:"dir,omitempty"`
	BoxNumber            int32                 `protobuf:"varint,9,opt,name=box_number,json=boxNumber,proto3" json:"box_number,omitempty"`
	Rewards              []*WeightItemSlotWrap `protobuf:"bytes,10,rep,name=rewards,proto3" json:"rewards,omitempty"`
	DetectAi             int32                 `protobuf:"varint,11,opt,name=detect_ai,json=detectAi,proto3" json:"detect_ai,omitempty"`
	DetectAiParam        string                `protobuf:"bytes,12,opt,name=detect_ai_param,json=detectAiParam,proto3" json:"detect_ai_param,omitempty"`
	IdleAi               int32                 `protobuf:"varint,13,opt,name=idle_ai,json=idleAi,proto3" json:"idle_ai,omitempty"`
	IdleAiParam          string                `protobuf:"bytes,14,opt,name=idle_ai_param,json=idleAiParam,proto3" json:"idle_ai_param,omitempty"`
	AiGroupId            int32                 `protobuf:"varint,15,opt,name=ai_group_id,json=aiGroupId,proto3" json:"ai_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RoomEntitySpawnData) Reset()         { *m = RoomEntitySpawnData{} }
func (m *RoomEntitySpawnData) String() string { return proto.CompactTextString(m) }
func (*RoomEntitySpawnData) ProtoMessage()    {}
func (*RoomEntitySpawnData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{73}
}

func (m *RoomEntitySpawnData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomEntitySpawnData.Unmarshal(m, b)
}
func (m *RoomEntitySpawnData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomEntitySpawnData.Marshal(b, m, deterministic)
}
func (m *RoomEntitySpawnData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomEntitySpawnData.Merge(m, src)
}
func (m *RoomEntitySpawnData) XXX_Size() int {
	return xxx_messageInfo_RoomEntitySpawnData.Size(m)
}
func (m *RoomEntitySpawnData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomEntitySpawnData.DiscardUnknown(m)
}

var xxx_messageInfo_RoomEntitySpawnData proto.InternalMessageInfo

func (m *RoomEntitySpawnData) GetUnitId() int32 {
	if m != nil {
		return m.UnitId
	}
	return 0
}

func (m *RoomEntitySpawnData) GetUnitGroupId() int32 {
	if m != nil {
		return m.UnitGroupId
	}
	return 0
}

func (m *RoomEntitySpawnData) GetAttributePool() int32 {
	if m != nil {
		return m.AttributePool
	}
	return 0
}

func (m *RoomEntitySpawnData) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *RoomEntitySpawnData) GetDropItem() int32 {
	if m != nil {
		return m.DropItem
	}
	return 0
}

func (m *RoomEntitySpawnData) GetShowType() RoomUnitShowType {
	if m != nil {
		return m.ShowType
	}
	return RoomUnitShowType_RoomUnitShowType_None
}

func (m *RoomEntitySpawnData) GetPosition() *Vector3D {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *RoomEntitySpawnData) GetDir() RoomUnitDirType {
	if m != nil {
		return m.Dir
	}
	return RoomUnitDirType_RoomUnitDirType_Right
}

func (m *RoomEntitySpawnData) GetBoxNumber() int32 {
	if m != nil {
		return m.BoxNumber
	}
	return 0
}

func (m *RoomEntitySpawnData) GetRewards() []*WeightItemSlotWrap {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *RoomEntitySpawnData) GetDetectAi() int32 {
	if m != nil {
		return m.DetectAi
	}
	return 0
}

func (m *RoomEntitySpawnData) GetDetectAiParam() string {
	if m != nil {
		return m.DetectAiParam
	}
	return ""
}

func (m *RoomEntitySpawnData) GetIdleAi() int32 {
	if m != nil {
		return m.IdleAi
	}
	return 0
}

func (m *RoomEntitySpawnData) GetIdleAiParam() string {
	if m != nil {
		return m.IdleAiParam
	}
	return ""
}

func (m *RoomEntitySpawnData) GetAiGroupId() int32 {
	if m != nil {
		return m.AiGroupId
	}
	return 0
}

type Condition struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{74}
}

func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LevelChallenge struct {
	LevelId              uint32       `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	FinishChallenge      []*Condition `protobuf:"bytes,2,rep,name=finish_challenge,json=finishChallenge,proto3" json:"finish_challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LevelChallenge) Reset()         { *m = LevelChallenge{} }
func (m *LevelChallenge) String() string { return proto.CompactTextString(m) }
func (*LevelChallenge) ProtoMessage()    {}
func (*LevelChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{75}
}

func (m *LevelChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LevelChallenge.Unmarshal(m, b)
}
func (m *LevelChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LevelChallenge.Marshal(b, m, deterministic)
}
func (m *LevelChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelChallenge.Merge(m, src)
}
func (m *LevelChallenge) XXX_Size() int {
	return xxx_messageInfo_LevelChallenge.Size(m)
}
func (m *LevelChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_LevelChallenge proto.InternalMessageInfo

func (m *LevelChallenge) GetLevelId() uint32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *LevelChallenge) GetFinishChallenge() []*Condition {
	if m != nil {
		return m.FinishChallenge
	}
	return nil
}

type GameMailNode struct {
	Guid                 uint64      `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	PlayerGuid           uint64      `protobuf:"varint,2,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	HeroGuid             uint64      `protobuf:"varint,3,opt,name=hero_guid,json=heroGuid,proto3" json:"hero_guid,omitempty"`
	MailId               uint32      `protobuf:"varint,4,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	ValidTime            uint32      `protobuf:"varint,5,opt,name=valid_time,json=validTime,proto3" json:"valid_time,omitempty"`
	Title                string      `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Caller               string      `protobuf:"bytes,7,opt,name=caller,proto3" json:"caller,omitempty"`
	Content              string      `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Sender               string      `protobuf:"bytes,9,opt,name=sender,proto3" json:"sender,omitempty"`
	ExReward             []*ItemSlot `protobuf:"bytes,10,rep,name=ex_reward,json=exReward,proto3" json:"ex_reward,omitempty"`
	EmailState           EMailState  `protobuf:"varint,11,opt,name=email_state,json=emailState,proto3,enum=Adoter.Asset.EMailState" json:"email_state,omitempty"`
	InitTime             uint32      `protobuf:"varint,13,opt,name=init_time,json=initTime,proto3" json:"init_time,omitempty"`
	ContentId            uint64      `protobuf:"varint,14,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	MailType             MAIL_TYPE   `protobuf:"varint,15,opt,name=mail_type,json=mailType,proto3,enum=Adoter.Asset.MAIL_TYPE" json:"mail_type,omitempty"`
	RankId               uint64      `protobuf:"varint,16,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	RankNum              uint32      `protobuf:"varint,17,opt,name=rank_num,json=rankNum,proto3" json:"rank_num,omitempty"`
	DropgroupId          uint32      `protobuf:"varint,18,opt,name=dropgroup_id,json=dropgroupId,proto3" json:"dropgroup_id,omitempty"`
	HelpNum              uint32      `protobuf:"varint,19,opt,name=help_num,json=helpNum,proto3" json:"help_num,omitempty"`
	GoldNum              uint32      `protobuf:"varint,20,opt,name=gold_num,json=goldNum,proto3" json:"gold_num,omitempty"`
	ChannelType          uint32      `protobuf:"varint,21,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	ShopItemId           uint32      `protobuf:"varint,22,opt,name=shop_item_id,json=shopItemId,proto3" json:"shop_item_id,omitempty"`
	OrderId              string      `protobuf:"bytes,23,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderNumber          string      `protobuf:"bytes,24,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	ExpirationDate       string      `protobuf:"bytes,25,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	ContentParams        []string    `protobuf:"bytes,26,rep,name=content_params,json=contentParams,proto3" json:"content_params,omitempty"`
	SendDate             string      `protobuf:"bytes,27,opt,name=send_date,json=sendDate,proto3" json:"send_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GameMailNode) Reset()         { *m = GameMailNode{} }
func (m *GameMailNode) String() string { return proto.CompactTextString(m) }
func (*GameMailNode) ProtoMessage()    {}
func (*GameMailNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{76}
}

func (m *GameMailNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameMailNode.Unmarshal(m, b)
}
func (m *GameMailNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameMailNode.Marshal(b, m, deterministic)
}
func (m *GameMailNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMailNode.Merge(m, src)
}
func (m *GameMailNode) XXX_Size() int {
	return xxx_messageInfo_GameMailNode.Size(m)
}
func (m *GameMailNode) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMailNode.DiscardUnknown(m)
}

var xxx_messageInfo_GameMailNode proto.InternalMessageInfo

func (m *GameMailNode) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GameMailNode) GetPlayerGuid() uint64 {
	if m != nil {
		return m.PlayerGuid
	}
	return 0
}

func (m *GameMailNode) GetHeroGuid() uint64 {
	if m != nil {
		return m.HeroGuid
	}
	return 0
}

func (m *GameMailNode) GetMailId() uint32 {
	if m != nil {
		return m.MailId
	}
	return 0
}

func (m *GameMailNode) GetValidTime() uint32 {
	if m != nil {
		return m.ValidTime
	}
	return 0
}

func (m *GameMailNode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GameMailNode) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func (m *GameMailNode) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GameMailNode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *GameMailNode) GetExReward() []*ItemSlot {
	if m != nil {
		return m.ExReward
	}
	return nil
}

func (m *GameMailNode) GetEmailState() EMailState {
	if m != nil {
		return m.EmailState
	}
	return EMailState_Mail_None
}

func (m *GameMailNode) GetInitTime() uint32 {
	if m != nil {
		return m.InitTime
	}
	return 0
}

func (m *GameMailNode) GetContentId() uint64 {
	if m != nil {
		return m.ContentId
	}
	return 0
}

func (m *GameMailNode) GetMailType() MAIL_TYPE {
	if m != nil {
		return m.MailType
	}
	return MAIL_TYPE_MAIL_TYPE_NULL
}

func (m *GameMailNode) GetRankId() uint64 {
	if m != nil {
		return m.RankId
	}
	return 0
}

func (m *GameMailNode) GetRankNum() uint32 {
	if m != nil {
		return m.RankNum
	}
	return 0
}

func (m *GameMailNode) GetDropgroupId() uint32 {
	if m != nil {
		return m.DropgroupId
	}
	return 0
}

func (m *GameMailNode) GetHelpNum() uint32 {
	if m != nil {
		return m.HelpNum
	}
	return 0
}

func (m *GameMailNode) GetGoldNum() uint32 {
	if m != nil {
		return m.GoldNum
	}
	return 0
}

func (m *GameMailNode) GetChannelType() uint32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *GameMailNode) GetShopItemId() uint32 {
	if m != nil {
		return m.ShopItemId
	}
	return 0
}

func (m *GameMailNode) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *GameMailNode) GetOrderNumber() string {
	if m != nil {
		return m.OrderNumber
	}
	return ""
}

func (m *GameMailNode) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *GameMailNode) GetContentParams() []string {
	if m != nil {
		return m.ContentParams
	}
	return nil
}

func (m *GameMailNode) GetSendDate() string {
	if m != nil {
		return m.SendDate
	}
	return ""
}

type PBPlayerTinyInfo struct {
	PlayerId             uint32   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	HeadIcon             string   `protobuf:"bytes,3,opt,name=head_icon,json=headIcon,proto3" json:"head_icon,omitempty"`
	Deleted              bool     `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBPlayerTinyInfo) Reset()         { *m = PBPlayerTinyInfo{} }
func (m *PBPlayerTinyInfo) String() string { return proto.CompactTextString(m) }
func (*PBPlayerTinyInfo) ProtoMessage()    {}
func (*PBPlayerTinyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{77}
}

func (m *PBPlayerTinyInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBPlayerTinyInfo.Unmarshal(m, b)
}
func (m *PBPlayerTinyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBPlayerTinyInfo.Marshal(b, m, deterministic)
}
func (m *PBPlayerTinyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBPlayerTinyInfo.Merge(m, src)
}
func (m *PBPlayerTinyInfo) XXX_Size() int {
	return xxx_messageInfo_PBPlayerTinyInfo.Size(m)
}
func (m *PBPlayerTinyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PBPlayerTinyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PBPlayerTinyInfo proto.InternalMessageInfo

func (m *PBPlayerTinyInfo) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PBPlayerTinyInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *PBPlayerTinyInfo) GetHeadIcon() string {
	if m != nil {
		return m.HeadIcon
	}
	return ""
}

func (m *PBPlayerTinyInfo) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type PlayerRechargeOtherSkin struct {
	HeroId uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	//int64 shop_id = 2;
	//int64 shop_item_id = 3;
	//int64 dropgroup_id = 4; //华服奖励
	ExDropgroupId        int64    `protobuf:"varint,5,opt,name=ex_dropgroup_id,json=exDropgroupId,proto3" json:"ex_dropgroup_id,omitempty"`
	SkinId               int64    `protobuf:"varint,6,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRechargeOtherSkin) Reset()         { *m = PlayerRechargeOtherSkin{} }
func (m *PlayerRechargeOtherSkin) String() string { return proto.CompactTextString(m) }
func (*PlayerRechargeOtherSkin) ProtoMessage()    {}
func (*PlayerRechargeOtherSkin) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{78}
}

func (m *PlayerRechargeOtherSkin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerRechargeOtherSkin.Unmarshal(m, b)
}
func (m *PlayerRechargeOtherSkin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerRechargeOtherSkin.Marshal(b, m, deterministic)
}
func (m *PlayerRechargeOtherSkin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRechargeOtherSkin.Merge(m, src)
}
func (m *PlayerRechargeOtherSkin) XXX_Size() int {
	return xxx_messageInfo_PlayerRechargeOtherSkin.Size(m)
}
func (m *PlayerRechargeOtherSkin) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRechargeOtherSkin.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRechargeOtherSkin proto.InternalMessageInfo

func (m *PlayerRechargeOtherSkin) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *PlayerRechargeOtherSkin) GetExDropgroupId() int64 {
	if m != nil {
		return m.ExDropgroupId
	}
	return 0
}

func (m *PlayerRechargeOtherSkin) GetSkinId() int64 {
	if m != nil {
		return m.SkinId
	}
	return 0
}

type GamePlayer struct {
	Guid                    uint64                       `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	EquipmentStorage        uint32                       `protobuf:"varint,2,opt,name=equipment_storage,json=equipmentStorage,proto3" json:"equipment_storage,omitempty"`
	ItemStorage             uint32                       `protobuf:"varint,3,opt,name=item_storage,json=itemStorage,proto3" json:"item_storage,omitempty"`
	ScrollStorage           uint32                       `protobuf:"varint,4,opt,name=scroll_storage,json=scrollStorage,proto3" json:"scroll_storage,omitempty"`
	RuneStorage             uint32                       `protobuf:"varint,5,opt,name=rune_storage,json=runeStorage,proto3" json:"rune_storage,omitempty"`
	StorageList             map[uint32]*PlayerInventory  `protobuf:"bytes,6,rep,name=storage_list,json=storageList,proto3" json:"storage_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OtherSkin               []*PlayerRechargeOtherSkin   `protobuf:"bytes,7,rep,name=other_skin,json=otherSkin,proto3" json:"other_skin,omitempty"`
	OrgLevel                uint32                       `protobuf:"varint,8,opt,name=org_level,json=orgLevel,proto3" json:"org_level,omitempty"`
	SkinList                []int64                      `protobuf:"varint,9,rep,packed,name=skin_list,json=skinList,proto3" json:"skin_list,omitempty"`
	AccumulateRechargeCount int64                        `protobuf:"varint,10,opt,name=accumulate_recharge_count,json=accumulateRechargeCount,proto3" json:"accumulate_recharge_count,omitempty"`
	RepuList                map[uint32]*PlayerReputation `protobuf:"bytes,11,rep,name=repu_list,json=repuList,proto3" json:"repu_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//map<uint32/*职业id*/, HeroExReward> ex_list = 12; //额外奖励
	HistSkinList                  []int32         `protobuf:"varint,13,rep,packed,name=hist_skin_list,json=histSkinList,proto3" json:"hist_skin_list,omitempty"`
	TransferData                  []*TransferData `protobuf:"bytes,14,rep,name=transfer_data,json=transferData,proto3" json:"transfer_data,omitempty"`
	MycardAccumulateRechargeCount int64           `protobuf:"varint,15,opt,name=mycard_accumulate_recharge_count,json=mycardAccumulateRechargeCount,proto3" json:"mycard_accumulate_recharge_count,omitempty"`
	AccumulateLoginDays           int64           `protobuf:"varint,16,opt,name=accumulate_login_days,json=accumulateLoginDays,proto3" json:"accumulate_login_days,omitempty"`
	ContinuousLoginDays           int64           `protobuf:"varint,17,opt,name=continuous_login_days,json=continuousLoginDays,proto3" json:"continuous_login_days,omitempty"`
	AccumulateRechargeTimes       int64           `protobuf:"varint,18,opt,name=accumulate_recharge_times,json=accumulateRechargeTimes,proto3" json:"accumulate_recharge_times,omitempty"`
	FirstRechargeTime             int64           `protobuf:"varint,19,opt,name=first_recharge_time,json=firstRechargeTime,proto3" json:"first_recharge_time,omitempty"`
	LastRechargeTime              int64           `protobuf:"varint,20,opt,name=last_recharge_time,json=lastRechargeTime,proto3" json:"last_recharge_time,omitempty"`
	LastLoginTime                 int64           `protobuf:"varint,21,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}        `json:"-"`
	XXX_unrecognized              []byte          `json:"-"`
	XXX_sizecache                 int32           `json:"-"`
}

func (m *GamePlayer) Reset()         { *m = GamePlayer{} }
func (m *GamePlayer) String() string { return proto.CompactTextString(m) }
func (*GamePlayer) ProtoMessage()    {}
func (*GamePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{79}
}

func (m *GamePlayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GamePlayer.Unmarshal(m, b)
}
func (m *GamePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GamePlayer.Marshal(b, m, deterministic)
}
func (m *GamePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayer.Merge(m, src)
}
func (m *GamePlayer) XXX_Size() int {
	return xxx_messageInfo_GamePlayer.Size(m)
}
func (m *GamePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayer proto.InternalMessageInfo

func (m *GamePlayer) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *GamePlayer) GetEquipmentStorage() uint32 {
	if m != nil {
		return m.EquipmentStorage
	}
	return 0
}

func (m *GamePlayer) GetItemStorage() uint32 {
	if m != nil {
		return m.ItemStorage
	}
	return 0
}

func (m *GamePlayer) GetScrollStorage() uint32 {
	if m != nil {
		return m.ScrollStorage
	}
	return 0
}

func (m *GamePlayer) GetRuneStorage() uint32 {
	if m != nil {
		return m.RuneStorage
	}
	return 0
}

func (m *GamePlayer) GetStorageList() map[uint32]*PlayerInventory {
	if m != nil {
		return m.StorageList
	}
	return nil
}

func (m *GamePlayer) GetOtherSkin() []*PlayerRechargeOtherSkin {
	if m != nil {
		return m.OtherSkin
	}
	return nil
}

func (m *GamePlayer) GetOrgLevel() uint32 {
	if m != nil {
		return m.OrgLevel
	}
	return 0
}

func (m *GamePlayer) GetSkinList() []int64 {
	if m != nil {
		return m.SkinList
	}
	return nil
}

func (m *GamePlayer) GetAccumulateRechargeCount() int64 {
	if m != nil {
		return m.AccumulateRechargeCount
	}
	return 0
}

func (m *GamePlayer) GetRepuList() map[uint32]*PlayerReputation {
	if m != nil {
		return m.RepuList
	}
	return nil
}

func (m *GamePlayer) GetHistSkinList() []int32 {
	if m != nil {
		return m.HistSkinList
	}
	return nil
}

func (m *GamePlayer) GetTransferData() []*TransferData {
	if m != nil {
		return m.TransferData
	}
	return nil
}

func (m *GamePlayer) GetMycardAccumulateRechargeCount() int64 {
	if m != nil {
		return m.MycardAccumulateRechargeCount
	}
	return 0
}

func (m *GamePlayer) GetAccumulateLoginDays() int64 {
	if m != nil {
		return m.AccumulateLoginDays
	}
	return 0
}

func (m *GamePlayer) GetContinuousLoginDays() int64 {
	if m != nil {
		return m.ContinuousLoginDays
	}
	return 0
}

func (m *GamePlayer) GetAccumulateRechargeTimes() int64 {
	if m != nil {
		return m.AccumulateRechargeTimes
	}
	return 0
}

func (m *GamePlayer) GetFirstRechargeTime() int64 {
	if m != nil {
		return m.FirstRechargeTime
	}
	return 0
}

func (m *GamePlayer) GetLastRechargeTime() int64 {
	if m != nil {
		return m.LastRechargeTime
	}
	return 0
}

func (m *GamePlayer) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

type WeightItemSlotWrap struct {
	Weight               uint32    `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Slot                 *ItemSlot `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WeightItemSlotWrap) Reset()         { *m = WeightItemSlotWrap{} }
func (m *WeightItemSlotWrap) String() string { return proto.CompactTextString(m) }
func (*WeightItemSlotWrap) ProtoMessage()    {}
func (*WeightItemSlotWrap) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{80}
}

func (m *WeightItemSlotWrap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightItemSlotWrap.Unmarshal(m, b)
}
func (m *WeightItemSlotWrap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightItemSlotWrap.Marshal(b, m, deterministic)
}
func (m *WeightItemSlotWrap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightItemSlotWrap.Merge(m, src)
}
func (m *WeightItemSlotWrap) XXX_Size() int {
	return xxx_messageInfo_WeightItemSlotWrap.Size(m)
}
func (m *WeightItemSlotWrap) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightItemSlotWrap.DiscardUnknown(m)
}

var xxx_messageInfo_WeightItemSlotWrap proto.InternalMessageInfo

func (m *WeightItemSlotWrap) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *WeightItemSlotWrap) GetSlot() *ItemSlot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type WeightRangeItemSlot struct {
	Weight               uint32   `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ItemType `protobuf:"varint,3,opt,name=type,proto3,enum=Adoter.Asset.ItemType" json:"type,omitempty"`
	NumMin               uint32   `protobuf:"varint,4,opt,name=num_min,json=numMin,proto3" json:"num_min,omitempty"`
	NumMax               uint32   `protobuf:"varint,5,opt,name=num_max,json=numMax,proto3" json:"num_max,omitempty"`
	HeroId               uint32   `protobuf:"varint,6,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeightRangeItemSlot) Reset()         { *m = WeightRangeItemSlot{} }
func (m *WeightRangeItemSlot) String() string { return proto.CompactTextString(m) }
func (*WeightRangeItemSlot) ProtoMessage()    {}
func (*WeightRangeItemSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{81}
}

func (m *WeightRangeItemSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeightRangeItemSlot.Unmarshal(m, b)
}
func (m *WeightRangeItemSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeightRangeItemSlot.Marshal(b, m, deterministic)
}
func (m *WeightRangeItemSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightRangeItemSlot.Merge(m, src)
}
func (m *WeightRangeItemSlot) XXX_Size() int {
	return xxx_messageInfo_WeightRangeItemSlot.Size(m)
}
func (m *WeightRangeItemSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightRangeItemSlot.DiscardUnknown(m)
}

var xxx_messageInfo_WeightRangeItemSlot proto.InternalMessageInfo

func (m *WeightRangeItemSlot) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *WeightRangeItemSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeightRangeItemSlot) GetType() ItemType {
	if m != nil {
		return m.Type
	}
	return ItemType_ItemType_Null
}

func (m *WeightRangeItemSlot) GetNumMin() uint32 {
	if m != nil {
		return m.NumMin
	}
	return 0
}

func (m *WeightRangeItemSlot) GetNumMax() uint32 {
	if m != nil {
		return m.NumMax
	}
	return 0
}

func (m *WeightRangeItemSlot) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

type RangeItemSlot struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ItemType `protobuf:"varint,2,opt,name=type,proto3,enum=Adoter.Asset.ItemType" json:"type,omitempty"`
	NumMin               uint32   `protobuf:"varint,3,opt,name=num_min,json=numMin,proto3" json:"num_min,omitempty"`
	NumMax               uint32   `protobuf:"varint,4,opt,name=num_max,json=numMax,proto3" json:"num_max,omitempty"`
	HeroId               uint32   `protobuf:"varint,5,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeItemSlot) Reset()         { *m = RangeItemSlot{} }
func (m *RangeItemSlot) String() string { return proto.CompactTextString(m) }
func (*RangeItemSlot) ProtoMessage()    {}
func (*RangeItemSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{82}
}

func (m *RangeItemSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeItemSlot.Unmarshal(m, b)
}
func (m *RangeItemSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeItemSlot.Marshal(b, m, deterministic)
}
func (m *RangeItemSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeItemSlot.Merge(m, src)
}
func (m *RangeItemSlot) XXX_Size() int {
	return xxx_messageInfo_RangeItemSlot.Size(m)
}
func (m *RangeItemSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeItemSlot.DiscardUnknown(m)
}

var xxx_messageInfo_RangeItemSlot proto.InternalMessageInfo

func (m *RangeItemSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RangeItemSlot) GetType() ItemType {
	if m != nil {
		return m.Type
	}
	return ItemType_ItemType_Null
}

func (m *RangeItemSlot) GetNumMin() uint32 {
	if m != nil {
		return m.NumMin
	}
	return 0
}

func (m *RangeItemSlot) GetNumMax() uint32 {
	if m != nil {
		return m.NumMax
	}
	return 0
}

func (m *RangeItemSlot) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

type PBPlayerVipInfo struct {
	VipLevel             uint32   `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	VipExp               int32    `protobuf:"varint,2,opt,name=vip_exp,json=vipExp,proto3" json:"vip_exp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBPlayerVipInfo) Reset()         { *m = PBPlayerVipInfo{} }
func (m *PBPlayerVipInfo) String() string { return proto.CompactTextString(m) }
func (*PBPlayerVipInfo) ProtoMessage()    {}
func (*PBPlayerVipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{83}
}

func (m *PBPlayerVipInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBPlayerVipInfo.Unmarshal(m, b)
}
func (m *PBPlayerVipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBPlayerVipInfo.Marshal(b, m, deterministic)
}
func (m *PBPlayerVipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBPlayerVipInfo.Merge(m, src)
}
func (m *PBPlayerVipInfo) XXX_Size() int {
	return xxx_messageInfo_PBPlayerVipInfo.Size(m)
}
func (m *PBPlayerVipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PBPlayerVipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PBPlayerVipInfo proto.InternalMessageInfo

func (m *PBPlayerVipInfo) GetVipLevel() uint32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *PBPlayerVipInfo) GetVipExp() int32 {
	if m != nil {
		return m.VipExp
	}
	return 0
}

type PBHeroRoomData struct {
	RoomId               uint32   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBHeroRoomData) Reset()         { *m = PBHeroRoomData{} }
func (m *PBHeroRoomData) String() string { return proto.CompactTextString(m) }
func (*PBHeroRoomData) ProtoMessage()    {}
func (*PBHeroRoomData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{84}
}

func (m *PBHeroRoomData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBHeroRoomData.Unmarshal(m, b)
}
func (m *PBHeroRoomData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBHeroRoomData.Marshal(b, m, deterministic)
}
func (m *PBHeroRoomData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBHeroRoomData.Merge(m, src)
}
func (m *PBHeroRoomData) XXX_Size() int {
	return xxx_messageInfo_PBHeroRoomData.Size(m)
}
func (m *PBHeroRoomData) XXX_DiscardUnknown() {
	xxx_messageInfo_PBHeroRoomData.DiscardUnknown(m)
}

var xxx_messageInfo_PBHeroRoomData proto.InternalMessageInfo

func (m *PBHeroRoomData) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

//物品基类(所有物品都包在此)
type Item_Item struct {
	TypeT                META_DATA_TYPE         `protobuf:"varint,1,opt,name=type_t,json=typeT,proto3,enum=Adoter.Asset.META_DATA_TYPE" json:"type_t,omitempty"`
	ItemId               int64                  `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	CommonProp           *Redis_Item_CommonProp `protobuf:"bytes,3,opt,name=common_prop,json=commonProp,proto3" json:"common_prop,omitempty"`
	HeroId               int32                  `protobuf:"varint,4,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Item_Item) Reset()         { *m = Item_Item{} }
func (m *Item_Item) String() string { return proto.CompactTextString(m) }
func (*Item_Item) ProtoMessage()    {}
func (*Item_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{85}
}

func (m *Item_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item_Item.Unmarshal(m, b)
}
func (m *Item_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item_Item.Marshal(b, m, deterministic)
}
func (m *Item_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item_Item.Merge(m, src)
}
func (m *Item_Item) XXX_Size() int {
	return xxx_messageInfo_Item_Item.Size(m)
}
func (m *Item_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item_Item proto.InternalMessageInfo

func (m *Item_Item) GetTypeT() META_DATA_TYPE {
	if m != nil {
		return m.TypeT
	}
	return META_DATA_TYPE_META_DATA_TYPE_NULL
}

func (m *Item_Item) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Item_Item) GetCommonProp() *Redis_Item_CommonProp {
	if m != nil {
		return m.CommonProp
	}
	return nil
}

func (m *Item_Item) GetHeroId() int32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

//物品通用存盘属性
type Redis_Item_CommonProp struct {
	//公共数据
	Guid     uint64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	GlobalId uint64 `protobuf:"varint,2,opt,name=global_id,json=globalId,proto3" json:"global_id,omitempty"`
	Quality  int32  `protobuf:"varint,3,opt,name=quality,proto3" json:"quality,omitempty"`
	Count    int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Binding  bool   `protobuf:"varint,5,opt,name=binding,proto3" json:"binding,omitempty"`
	Level    uint32 `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	//装备数据
	MainAttributes               []*GameEquipmentAttribute   `protobuf:"bytes,20,rep,name=main_attributes,json=mainAttributes,proto3" json:"main_attributes,omitempty"`
	FixedAttributes              []*GameEquipmentAttribute   `protobuf:"bytes,21,rep,name=fixed_attributes,json=fixedAttributes,proto3" json:"fixed_attributes,omitempty"`
	PreAttributes                []*GameEquipmentAttribute   `protobuf:"bytes,22,rep,name=pre_attributes,json=preAttributes,proto3" json:"pre_attributes,omitempty"`
	SufAttributes                []*GameEquipmentAttribute   `protobuf:"bytes,23,rep,name=suf_attributes,json=sufAttributes,proto3" json:"suf_attributes,omitempty"`
	IsLock                       bool                        `protobuf:"varint,24,opt,name=is_lock,json=isLock,proto3" json:"is_lock,omitempty"`
	IsEquiped                    bool                        `protobuf:"varint,25,opt,name=is_equiped,json=isEquiped,proto3" json:"is_equiped,omitempty"`
	RefinedAttrId                []uint32                    `protobuf:"varint,26,rep,packed,name=refined_attr_id,json=refinedAttrId,proto3" json:"refined_attr_id,omitempty"`
	EnhanceGrade                 int32                       `protobuf:"varint,27,opt,name=enhance_grade,json=enhanceGrade,proto3" json:"enhance_grade,omitempty"`
	EnhanceId                    int32                       `protobuf:"varint,28,opt,name=enhance_id,json=enhanceId,proto3" json:"enhance_id,omitempty"`
	EnhanceCount                 int32                       `protobuf:"varint,29,opt,name=enhance_count,json=enhanceCount,proto3" json:"enhance_count,omitempty"`
	BasicAttributes              []NumericType               `protobuf:"varint,30,rep,packed,name=basic_attributes,json=basicAttributes,proto3,enum=Adoter.Asset.NumericType" json:"basic_attributes,omitempty"`
	SkilldAttributes             map[uint32]*SkilldAttribute `protobuf:"bytes,31,rep,name=skilld_attributes,json=skilldAttributes,proto3" json:"skilld_attributes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Exp                          int32                       `protobuf:"varint,32,opt,name=exp,proto3" json:"exp,omitempty"`
	Advanced                     int32                       `protobuf:"varint,33,opt,name=advanced,proto3" json:"advanced,omitempty"`
	ScrollEnhanceCount           int32                       `protobuf:"varint,34,opt,name=scroll_enhance_count,json=scrollEnhanceCount,proto3" json:"scroll_enhance_count,omitempty"`
	CreateTime                   int32                       `protobuf:"varint,35,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EquipSlot                    int32                       `protobuf:"varint,36,opt,name=equip_slot,json=equipSlot,proto3" json:"equip_slot,omitempty"`
	EnhanceCosts                 []*ItemSlot                 `protobuf:"bytes,37,rep,name=enhance_costs,json=enhanceCosts,proto3" json:"enhance_costs,omitempty"`
	IsZuitiJinghua               bool                        `protobuf:"varint,38,opt,name=is_zuiti_jinghua,json=isZuitiJinghua,proto3" json:"is_zuiti_jinghua,omitempty"`
	NegAttributes                []*GameEquipmentAttribute   `protobuf:"bytes,39,rep,name=neg_attributes,json=negAttributes,proto3" json:"neg_attributes,omitempty"`
	IsZuitiZhenxie               bool                        `protobuf:"varint,40,opt,name=is_zuiti_zhenxie,json=isZuitiZhenxie,proto3" json:"is_zuiti_zhenxie,omitempty"`
	ZhenxieTime                  int64                       `protobuf:"varint,41,opt,name=zhenxie_time,json=zhenxieTime,proto3" json:"zhenxie_time,omitempty"`
	ZhenxieNum                   int32                       `protobuf:"varint,42,opt,name=zhenxie_num,json=zhenxieNum,proto3" json:"zhenxie_num,omitempty"`
	ScrollIsGold                 bool                        `protobuf:"varint,43,opt,name=scroll_is_gold,json=scrollIsGold,proto3" json:"scroll_is_gold,omitempty"`
	RuneSlots                    []*RuneSlot                 `protobuf:"bytes,44,rep,name=rune_slots,json=runeSlots,proto3" json:"rune_slots,omitempty"`
	RuneBeEquippedEquipmentGuid  uint64                      `protobuf:"varint,45,opt,name=rune_be_equipped_equipment_guid,json=runeBeEquippedEquipmentGuid,proto3" json:"rune_be_equipped_equipment_guid,omitempty"`
	PropList                     map[uint32]float32          `protobuf:"bytes,46,rep,name=prop_list,json=propList,proto3" json:"prop_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	SecondaryScrolls             []uint64                    `protobuf:"varint,47,rep,packed,name=secondary_scrolls,json=secondaryScrolls,proto3" json:"secondary_scrolls,omitempty"`
	ScrollBeEquippedScrollGuid   uint64                      `protobuf:"varint,48,opt,name=scroll_be_equipped_scroll_guid,json=scrollBeEquippedScrollGuid,proto3" json:"scroll_be_equipped_scroll_guid,omitempty"`
	IsShenghua                   bool                        `protobuf:"varint,49,opt,name=is_shenghua,json=isShenghua,proto3" json:"is_shenghua,omitempty"`
	SkinOn                       []uint32                    `protobuf:"varint,50,rep,packed,name=skin_on,json=skinOn,proto3" json:"skin_on,omitempty"`
	IsZongshi                    bool                        `protobuf:"varint,51,opt,name=is_zongshi,json=isZongshi,proto3" json:"is_zongshi,omitempty"`
	BornInGold                   bool                        `protobuf:"varint,52,opt,name=born_in_gold,json=bornInGold,proto3" json:"born_in_gold,omitempty"`
	ZongshiForgeNeedItemCountMax uint32                      `protobuf:"varint,53,opt,name=zongshi_forge_need_item_count_max,json=zongshiForgeNeedItemCountMax,proto3" json:"zongshi_forge_need_item_count_max,omitempty"`
	ZongshiForgeCurrentItemCount uint32                      `protobuf:"varint,54,opt,name=zongshi_forge_current_item_count,json=zongshiForgeCurrentItemCount,proto3" json:"zongshi_forge_current_item_count,omitempty"`
	MasterFixedAttributes        []*GameEquipmentAttribute   `protobuf:"bytes,55,rep,name=master_fixed_attributes,json=masterFixedAttributes,proto3" json:"master_fixed_attributes,omitempty"`
	ScrollReinforceLevel         int32                       `protobuf:"varint,56,opt,name=scroll_reinforce_level,json=scrollReinforceLevel,proto3" json:"scroll_reinforce_level,omitempty"`
	ZuiyeRefineCurrentLevel      int32                       `protobuf:"varint,57,opt,name=zuiye_refine_current_level,json=zuiyeRefineCurrentLevel,proto3" json:"zuiye_refine_current_level,omitempty"`
	ZuiyeRefineValue             int32                       `protobuf:"varint,58,opt,name=zuiye_refine_value,json=zuiyeRefineValue,proto3" json:"zuiye_refine_value,omitempty"`
	ZuitiRefineAttributes        []*GameEquipmentAttribute   `protobuf:"bytes,60,rep,name=zuiti_refine_attributes,json=zuitiRefineAttributes,proto3" json:"zuiti_refine_attributes,omitempty"`
	ZuitiRefineReplaceAttributes []*GameEquipmentAttribute   `protobuf:"bytes,61,rep,name=zuiti_refine_replace_attributes,json=zuitiRefineReplaceAttributes,proto3" json:"zuiti_refine_replace_attributes,omitempty"`
	ZuitiRefineLevelAttributes   []*GameEquipmentAttribute   `protobuf:"bytes,62,rep,name=zuiti_refine_level_attributes,json=zuitiRefineLevelAttributes,proto3" json:"zuiti_refine_level_attributes,omitempty"`
	IsTwiceEvolution             bool                        `protobuf:"varint,63,opt,name=is_twice_evolution,json=isTwiceEvolution,proto3" json:"is_twice_evolution,omitempty"`
	StickerType                  []STICKER_TYPE              `protobuf:"varint,64,rep,packed,name=sticker_type,json=stickerType,proto3,enum=Adoter.Asset.STICKER_TYPE" json:"sticker_type,omitempty"`
	ScrollNode                   map[int32]*ScrollNode       `protobuf:"bytes,65,rep,name=scroll_node,json=scrollNode,proto3" json:"scroll_node,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EvoSkilld                    int32                       `protobuf:"varint,66,opt,name=evo_skilld,json=evoSkilld,proto3" json:"evo_skilld,omitempty"`
	ChallengeTimes               int32                       `protobuf:"varint,67,opt,name=challenge_times,json=challengeTimes,proto3" json:"challenge_times,omitempty"`
	Difficulty                   LevelDifficulty             `protobuf:"varint,68,opt,name=difficulty,proto3,enum=Adoter.Asset.LevelDifficulty" json:"difficulty,omitempty"`
	ReplaceSuitId                int32                       `protobuf:"varint,69,opt,name=replace_suit_id,json=replaceSuitId,proto3" json:"replace_suit_id,omitempty"`
	ExpireTime                   int32                       `protobuf:"varint,70,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                    `json:"-"`
	XXX_unrecognized             []byte                      `json:"-"`
	XXX_sizecache                int32                       `json:"-"`
}

func (m *Redis_Item_CommonProp) Reset()         { *m = Redis_Item_CommonProp{} }
func (m *Redis_Item_CommonProp) String() string { return proto.CompactTextString(m) }
func (*Redis_Item_CommonProp) ProtoMessage()    {}
func (*Redis_Item_CommonProp) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{86}
}

func (m *Redis_Item_CommonProp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Redis_Item_CommonProp.Unmarshal(m, b)
}
func (m *Redis_Item_CommonProp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Redis_Item_CommonProp.Marshal(b, m, deterministic)
}
func (m *Redis_Item_CommonProp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redis_Item_CommonProp.Merge(m, src)
}
func (m *Redis_Item_CommonProp) XXX_Size() int {
	return xxx_messageInfo_Redis_Item_CommonProp.Size(m)
}
func (m *Redis_Item_CommonProp) XXX_DiscardUnknown() {
	xxx_messageInfo_Redis_Item_CommonProp.DiscardUnknown(m)
}

var xxx_messageInfo_Redis_Item_CommonProp proto.InternalMessageInfo

func (m *Redis_Item_CommonProp) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetGlobalId() uint64 {
	if m != nil {
		return m.GlobalId
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetBinding() bool {
	if m != nil {
		return m.Binding
	}
	return false
}

func (m *Redis_Item_CommonProp) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetMainAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.MainAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetFixedAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.FixedAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetPreAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.PreAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetSufAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.SufAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (m *Redis_Item_CommonProp) GetIsEquiped() bool {
	if m != nil {
		return m.IsEquiped
	}
	return false
}

func (m *Redis_Item_CommonProp) GetRefinedAttrId() []uint32 {
	if m != nil {
		return m.RefinedAttrId
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetEnhanceGrade() int32 {
	if m != nil {
		return m.EnhanceGrade
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetEnhanceId() int32 {
	if m != nil {
		return m.EnhanceId
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetEnhanceCount() int32 {
	if m != nil {
		return m.EnhanceCount
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetBasicAttributes() []NumericType {
	if m != nil {
		return m.BasicAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetSkilldAttributes() map[uint32]*SkilldAttribute {
	if m != nil {
		return m.SkilldAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetAdvanced() int32 {
	if m != nil {
		return m.Advanced
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetScrollEnhanceCount() int32 {
	if m != nil {
		return m.ScrollEnhanceCount
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetEquipSlot() int32 {
	if m != nil {
		return m.EquipSlot
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetEnhanceCosts() []*ItemSlot {
	if m != nil {
		return m.EnhanceCosts
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetIsZuitiJinghua() bool {
	if m != nil {
		return m.IsZuitiJinghua
	}
	return false
}

func (m *Redis_Item_CommonProp) GetNegAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.NegAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetIsZuitiZhenxie() bool {
	if m != nil {
		return m.IsZuitiZhenxie
	}
	return false
}

func (m *Redis_Item_CommonProp) GetZhenxieTime() int64 {
	if m != nil {
		return m.ZhenxieTime
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetZhenxieNum() int32 {
	if m != nil {
		return m.ZhenxieNum
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetScrollIsGold() bool {
	if m != nil {
		return m.ScrollIsGold
	}
	return false
}

func (m *Redis_Item_CommonProp) GetRuneSlots() []*RuneSlot {
	if m != nil {
		return m.RuneSlots
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetRuneBeEquippedEquipmentGuid() uint64 {
	if m != nil {
		return m.RuneBeEquippedEquipmentGuid
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetPropList() map[uint32]float32 {
	if m != nil {
		return m.PropList
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetSecondaryScrolls() []uint64 {
	if m != nil {
		return m.SecondaryScrolls
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetScrollBeEquippedScrollGuid() uint64 {
	if m != nil {
		return m.ScrollBeEquippedScrollGuid
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetIsShenghua() bool {
	if m != nil {
		return m.IsShenghua
	}
	return false
}

func (m *Redis_Item_CommonProp) GetSkinOn() []uint32 {
	if m != nil {
		return m.SkinOn
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetIsZongshi() bool {
	if m != nil {
		return m.IsZongshi
	}
	return false
}

func (m *Redis_Item_CommonProp) GetBornInGold() bool {
	if m != nil {
		return m.BornInGold
	}
	return false
}

func (m *Redis_Item_CommonProp) GetZongshiForgeNeedItemCountMax() uint32 {
	if m != nil {
		return m.ZongshiForgeNeedItemCountMax
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetZongshiForgeCurrentItemCount() uint32 {
	if m != nil {
		return m.ZongshiForgeCurrentItemCount
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetMasterFixedAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.MasterFixedAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetScrollReinforceLevel() int32 {
	if m != nil {
		return m.ScrollReinforceLevel
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetZuiyeRefineCurrentLevel() int32 {
	if m != nil {
		return m.ZuiyeRefineCurrentLevel
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetZuiyeRefineValue() int32 {
	if m != nil {
		return m.ZuiyeRefineValue
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetZuitiRefineAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.ZuitiRefineAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetZuitiRefineReplaceAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.ZuitiRefineReplaceAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetZuitiRefineLevelAttributes() []*GameEquipmentAttribute {
	if m != nil {
		return m.ZuitiRefineLevelAttributes
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetIsTwiceEvolution() bool {
	if m != nil {
		return m.IsTwiceEvolution
	}
	return false
}

func (m *Redis_Item_CommonProp) GetStickerType() []STICKER_TYPE {
	if m != nil {
		return m.StickerType
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetScrollNode() map[int32]*ScrollNode {
	if m != nil {
		return m.ScrollNode
	}
	return nil
}

func (m *Redis_Item_CommonProp) GetEvoSkilld() int32 {
	if m != nil {
		return m.EvoSkilld
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetChallengeTimes() int32 {
	if m != nil {
		return m.ChallengeTimes
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetDifficulty() LevelDifficulty {
	if m != nil {
		return m.Difficulty
	}
	return LevelDifficulty_LevelDifficulty_Normal
}

func (m *Redis_Item_CommonProp) GetReplaceSuitId() int32 {
	if m != nil {
		return m.ReplaceSuitId
	}
	return 0
}

func (m *Redis_Item_CommonProp) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type SkilldAttribute struct {
	Level                int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	MaxLevel             int32    `protobuf:"varint,2,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	ExtraCount           int32    `protobuf:"varint,3,opt,name=extra_count,json=extraCount,proto3" json:"extra_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkilldAttribute) Reset()         { *m = SkilldAttribute{} }
func (m *SkilldAttribute) String() string { return proto.CompactTextString(m) }
func (*SkilldAttribute) ProtoMessage()    {}
func (*SkilldAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{87}
}

func (m *SkilldAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkilldAttribute.Unmarshal(m, b)
}
func (m *SkilldAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkilldAttribute.Marshal(b, m, deterministic)
}
func (m *SkilldAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkilldAttribute.Merge(m, src)
}
func (m *SkilldAttribute) XXX_Size() int {
	return xxx_messageInfo_SkilldAttribute.Size(m)
}
func (m *SkilldAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_SkilldAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_SkilldAttribute proto.InternalMessageInfo

func (m *SkilldAttribute) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SkilldAttribute) GetMaxLevel() int32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *SkilldAttribute) GetExtraCount() int32 {
	if m != nil {
		return m.ExtraCount
	}
	return 0
}

type GuardSkilldAttribute struct {
	Id                   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Skill                *SkilldAttribute `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GuardSkilldAttribute) Reset()         { *m = GuardSkilldAttribute{} }
func (m *GuardSkilldAttribute) String() string { return proto.CompactTextString(m) }
func (*GuardSkilldAttribute) ProtoMessage()    {}
func (*GuardSkilldAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{88}
}

func (m *GuardSkilldAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuardSkilldAttribute.Unmarshal(m, b)
}
func (m *GuardSkilldAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuardSkilldAttribute.Marshal(b, m, deterministic)
}
func (m *GuardSkilldAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardSkilldAttribute.Merge(m, src)
}
func (m *GuardSkilldAttribute) XXX_Size() int {
	return xxx_messageInfo_GuardSkilldAttribute.Size(m)
}
func (m *GuardSkilldAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardSkilldAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_GuardSkilldAttribute proto.InternalMessageInfo

func (m *GuardSkilldAttribute) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuardSkilldAttribute) GetSkill() *SkilldAttribute {
	if m != nil {
		return m.Skill
	}
	return nil
}

type SkinAttribute struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseValue            int32    `protobuf:"varint,2,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
	PercentValue         int32    `protobuf:"varint,3,opt,name=percent_value,json=percentValue,proto3" json:"percent_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkinAttribute) Reset()         { *m = SkinAttribute{} }
func (m *SkinAttribute) String() string { return proto.CompactTextString(m) }
func (*SkinAttribute) ProtoMessage()    {}
func (*SkinAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{89}
}

func (m *SkinAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkinAttribute.Unmarshal(m, b)
}
func (m *SkinAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkinAttribute.Marshal(b, m, deterministic)
}
func (m *SkinAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinAttribute.Merge(m, src)
}
func (m *SkinAttribute) XXX_Size() int {
	return xxx_messageInfo_SkinAttribute.Size(m)
}
func (m *SkinAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_SkinAttribute proto.InternalMessageInfo

func (m *SkinAttribute) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SkinAttribute) GetBaseValue() int32 {
	if m != nil {
		return m.BaseValue
	}
	return 0
}

func (m *SkinAttribute) GetPercentValue() int32 {
	if m != nil {
		return m.PercentValue
	}
	return 0
}

type OwnAttribute struct {
	Id                   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Numeric              NumericType `protobuf:"varint,2,opt,name=numeric,proto3,enum=Adoter.Asset.NumericType" json:"numeric,omitempty"`
	AddVal               float32     `protobuf:"fixed32,3,opt,name=add_val,json=addVal,proto3" json:"add_val,omitempty"`
	LvAdd                float32     `protobuf:"fixed32,4,opt,name=lv_add,json=lvAdd,proto3" json:"lv_add,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OwnAttribute) Reset()         { *m = OwnAttribute{} }
func (m *OwnAttribute) String() string { return proto.CompactTextString(m) }
func (*OwnAttribute) ProtoMessage()    {}
func (*OwnAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{90}
}

func (m *OwnAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OwnAttribute.Unmarshal(m, b)
}
func (m *OwnAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OwnAttribute.Marshal(b, m, deterministic)
}
func (m *OwnAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnAttribute.Merge(m, src)
}
func (m *OwnAttribute) XXX_Size() int {
	return xxx_messageInfo_OwnAttribute.Size(m)
}
func (m *OwnAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_OwnAttribute proto.InternalMessageInfo

func (m *OwnAttribute) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OwnAttribute) GetNumeric() NumericType {
	if m != nil {
		return m.Numeric
	}
	return NumericType_Numeric_None
}

func (m *OwnAttribute) GetAddVal() float32 {
	if m != nil {
		return m.AddVal
	}
	return 0
}

func (m *OwnAttribute) GetLvAdd() float32 {
	if m != nil {
		return m.LvAdd
	}
	return 0
}

//装备上的符文槽位
type RuneSlot struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Colour               uint32   `protobuf:"varint,2,opt,name=colour,proto3" json:"colour,omitempty"`
	RuneGuid             uint64   `protobuf:"varint,3,opt,name=rune_guid,json=runeGuid,proto3" json:"rune_guid,omitempty"`
	RuneId               uint32   `protobuf:"varint,4,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	IsLock               bool     `protobuf:"varint,5,opt,name=is_lock,json=isLock,proto3" json:"is_lock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuneSlot) Reset()         { *m = RuneSlot{} }
func (m *RuneSlot) String() string { return proto.CompactTextString(m) }
func (*RuneSlot) ProtoMessage()    {}
func (*RuneSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{91}
}

func (m *RuneSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuneSlot.Unmarshal(m, b)
}
func (m *RuneSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuneSlot.Marshal(b, m, deterministic)
}
func (m *RuneSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneSlot.Merge(m, src)
}
func (m *RuneSlot) XXX_Size() int {
	return xxx_messageInfo_RuneSlot.Size(m)
}
func (m *RuneSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneSlot.DiscardUnknown(m)
}

var xxx_messageInfo_RuneSlot proto.InternalMessageInfo

func (m *RuneSlot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RuneSlot) GetColour() uint32 {
	if m != nil {
		return m.Colour
	}
	return 0
}

func (m *RuneSlot) GetRuneGuid() uint64 {
	if m != nil {
		return m.RuneGuid
	}
	return 0
}

func (m *RuneSlot) GetRuneId() uint32 {
	if m != nil {
		return m.RuneId
	}
	return 0
}

func (m *RuneSlot) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

//好友系统
//好友
type Friend_Element struct {
	HeroData             *GameHero `protobuf:"bytes,1,opt,name=hero_data,json=heroData,proto3" json:"hero_data,omitempty"`
	Timestamp            int32     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PresentTime          int32     `protobuf:"varint,3,opt,name=present_time,json=presentTime,proto3" json:"present_time,omitempty"`
	Haogandu             uint32    `protobuf:"varint,4,opt,name=haogandu,proto3" json:"haogandu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Friend_Element) Reset()         { *m = Friend_Element{} }
func (m *Friend_Element) String() string { return proto.CompactTextString(m) }
func (*Friend_Element) ProtoMessage()    {}
func (*Friend_Element) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{92}
}

func (m *Friend_Element) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Friend_Element.Unmarshal(m, b)
}
func (m *Friend_Element) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Friend_Element.Marshal(b, m, deterministic)
}
func (m *Friend_Element) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_Element.Merge(m, src)
}
func (m *Friend_Element) XXX_Size() int {
	return xxx_messageInfo_Friend_Element.Size(m)
}
func (m *Friend_Element) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_Element.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_Element proto.InternalMessageInfo

func (m *Friend_Element) GetHeroData() *GameHero {
	if m != nil {
		return m.HeroData
	}
	return nil
}

func (m *Friend_Element) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Friend_Element) GetPresentTime() int32 {
	if m != nil {
		return m.PresentTime
	}
	return 0
}

func (m *Friend_Element) GetHaogandu() uint32 {
	if m != nil {
		return m.Haogandu
	}
	return 0
}

//申请
type Friend_ApplyElement struct {
	HeroData             *GameHero `protobuf:"bytes,1,opt,name=hero_data,json=heroData,proto3" json:"hero_data,omitempty"`
	Timestamp            int32     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Friend_ApplyElement) Reset()         { *m = Friend_ApplyElement{} }
func (m *Friend_ApplyElement) String() string { return proto.CompactTextString(m) }
func (*Friend_ApplyElement) ProtoMessage()    {}
func (*Friend_ApplyElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{93}
}

func (m *Friend_ApplyElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Friend_ApplyElement.Unmarshal(m, b)
}
func (m *Friend_ApplyElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Friend_ApplyElement.Marshal(b, m, deterministic)
}
func (m *Friend_ApplyElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_ApplyElement.Merge(m, src)
}
func (m *Friend_ApplyElement) XXX_Size() int {
	return xxx_messageInfo_Friend_ApplyElement.Size(m)
}
func (m *Friend_ApplyElement) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_ApplyElement.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_ApplyElement proto.InternalMessageInfo

func (m *Friend_ApplyElement) GetHeroData() *GameHero {
	if m != nil {
		return m.HeroData
	}
	return nil
}

func (m *Friend_ApplyElement) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

//接收礼物
type Friend_GiftElement struct {
	Guid                 uint32    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	HeroData             *GameHero `protobuf:"bytes,2,opt,name=hero_data,json=heroData,proto3" json:"hero_data,omitempty"`
	Timestamp            int32     `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Haogandu             uint32    `protobuf:"varint,4,opt,name=haogandu,proto3" json:"haogandu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Friend_GiftElement) Reset()         { *m = Friend_GiftElement{} }
func (m *Friend_GiftElement) String() string { return proto.CompactTextString(m) }
func (*Friend_GiftElement) ProtoMessage()    {}
func (*Friend_GiftElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{94}
}

func (m *Friend_GiftElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Friend_GiftElement.Unmarshal(m, b)
}
func (m *Friend_GiftElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Friend_GiftElement.Marshal(b, m, deterministic)
}
func (m *Friend_GiftElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_GiftElement.Merge(m, src)
}
func (m *Friend_GiftElement) XXX_Size() int {
	return xxx_messageInfo_Friend_GiftElement.Size(m)
}
func (m *Friend_GiftElement) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_GiftElement.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_GiftElement proto.InternalMessageInfo

func (m *Friend_GiftElement) GetGuid() uint32 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *Friend_GiftElement) GetHeroData() *GameHero {
	if m != nil {
		return m.HeroData
	}
	return nil
}

func (m *Friend_GiftElement) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Friend_GiftElement) GetHaogandu() uint32 {
	if m != nil {
		return m.Haogandu
	}
	return 0
}

//存盘数据
type GameFriend struct {
	FriendList           map[uint64]*Friend_Element      `protobuf:"bytes,6,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AppliantList         map[uint64]*Friend_ApplyElement `protobuf:"bytes,7,rep,name=appliant_list,json=appliantList,proto3" json:"appliant_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GiftList             map[uint32]*Friend_GiftElement  `protobuf:"bytes,8,rep,name=gift_list,json=giftList,proto3" json:"gift_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PresentList          map[uint64]int32                `protobuf:"bytes,9,rep,name=present_list,json=presentList,proto3" json:"present_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GameFriend) Reset()         { *m = GameFriend{} }
func (m *GameFriend) String() string { return proto.CompactTextString(m) }
func (*GameFriend) ProtoMessage()    {}
func (*GameFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{95}
}

func (m *GameFriend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameFriend.Unmarshal(m, b)
}
func (m *GameFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameFriend.Marshal(b, m, deterministic)
}
func (m *GameFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameFriend.Merge(m, src)
}
func (m *GameFriend) XXX_Size() int {
	return xxx_messageInfo_GameFriend.Size(m)
}
func (m *GameFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_GameFriend.DiscardUnknown(m)
}

var xxx_messageInfo_GameFriend proto.InternalMessageInfo

func (m *GameFriend) GetFriendList() map[uint64]*Friend_Element {
	if m != nil {
		return m.FriendList
	}
	return nil
}

func (m *GameFriend) GetAppliantList() map[uint64]*Friend_ApplyElement {
	if m != nil {
		return m.AppliantList
	}
	return nil
}

func (m *GameFriend) GetGiftList() map[uint32]*Friend_GiftElement {
	if m != nil {
		return m.GiftList
	}
	return nil
}

func (m *GameFriend) GetPresentList() map[uint64]int32 {
	if m != nil {
		return m.PresentList
	}
	return nil
}

type SinFightRecord struct {
	FightTime            int32    `protobuf:"varint,1,opt,name=fight_time,json=fightTime,proto3" json:"fight_time,omitempty"`
	FightMode            int32    `protobuf:"varint,2,opt,name=fight_mode,json=fightMode,proto3" json:"fight_mode,omitempty"`
	Power                int32    `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	FightResult          int32    `protobuf:"varint,4,opt,name=fight_result,json=fightResult,proto3" json:"fight_result,omitempty"`
	ScoreChange          int32    `protobuf:"varint,5,opt,name=score_change,json=scoreChange,proto3" json:"score_change,omitempty"`
	HeroId               int32    `protobuf:"varint,6,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	HeroLevel            int32    `protobuf:"varint,7,opt,name=hero_level,json=heroLevel,proto3" json:"hero_level,omitempty"`
	HeroName             string   `protobuf:"bytes,8,opt,name=hero_name,json=heroName,proto3" json:"hero_name,omitempty"`
	Guid                 int32    `protobuf:"varint,9,opt,name=guid,proto3" json:"guid,omitempty"`
	Career               int32    `protobuf:"varint,10,opt,name=career,proto3" json:"career,omitempty"`
	ClLevel              int32    `protobuf:"varint,11,opt,name=cl_level,json=clLevel,proto3" json:"cl_level,omitempty"`
	PlayerGuid           int64    `protobuf:"varint,12,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	Frame                int32    `protobuf:"varint,13,opt,name=frame,proto3" json:"frame,omitempty"`
	Skin                 int32    `protobuf:"varint,14,opt,name=skin,proto3" json:"skin,omitempty"`
	Season               int64    `protobuf:"varint,15,opt,name=season,proto3" json:"season,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SinFightRecord) Reset()         { *m = SinFightRecord{} }
func (m *SinFightRecord) String() string { return proto.CompactTextString(m) }
func (*SinFightRecord) ProtoMessage()    {}
func (*SinFightRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{96}
}

func (m *SinFightRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SinFightRecord.Unmarshal(m, b)
}
func (m *SinFightRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SinFightRecord.Marshal(b, m, deterministic)
}
func (m *SinFightRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinFightRecord.Merge(m, src)
}
func (m *SinFightRecord) XXX_Size() int {
	return xxx_messageInfo_SinFightRecord.Size(m)
}
func (m *SinFightRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SinFightRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SinFightRecord proto.InternalMessageInfo

func (m *SinFightRecord) GetFightTime() int32 {
	if m != nil {
		return m.FightTime
	}
	return 0
}

func (m *SinFightRecord) GetFightMode() int32 {
	if m != nil {
		return m.FightMode
	}
	return 0
}

func (m *SinFightRecord) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *SinFightRecord) GetFightResult() int32 {
	if m != nil {
		return m.FightResult
	}
	return 0
}

func (m *SinFightRecord) GetScoreChange() int32 {
	if m != nil {
		return m.ScoreChange
	}
	return 0
}

func (m *SinFightRecord) GetHeroId() int32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *SinFightRecord) GetHeroLevel() int32 {
	if m != nil {
		return m.HeroLevel
	}
	return 0
}

func (m *SinFightRecord) GetHeroName() string {
	if m != nil {
		return m.HeroName
	}
	return ""
}

func (m *SinFightRecord) GetGuid() int32 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *SinFightRecord) GetCareer() int32 {
	if m != nil {
		return m.Career
	}
	return 0
}

func (m *SinFightRecord) GetClLevel() int32 {
	if m != nil {
		return m.ClLevel
	}
	return 0
}

func (m *SinFightRecord) GetPlayerGuid() int64 {
	if m != nil {
		return m.PlayerGuid
	}
	return 0
}

func (m *SinFightRecord) GetFrame() int32 {
	if m != nil {
		return m.Frame
	}
	return 0
}

func (m *SinFightRecord) GetSkin() int32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

func (m *SinFightRecord) GetSeason() int64 {
	if m != nil {
		return m.Season
	}
	return 0
}

type SinResultRecord struct {
	ActiveEasyWin        int32    `protobuf:"varint,1,opt,name=active_easy_win,json=activeEasyWin,proto3" json:"active_easy_win,omitempty"`
	ActiveEasyLose       int32    `protobuf:"varint,2,opt,name=active_easy_lose,json=activeEasyLose,proto3" json:"active_easy_lose,omitempty"`
	ActiveNormalWin      int32    `protobuf:"varint,3,opt,name=active_normal_win,json=activeNormalWin,proto3" json:"active_normal_win,omitempty"`
	ActiveNormalLose     int32    `protobuf:"varint,4,opt,name=active_normal_lose,json=activeNormalLose,proto3" json:"active_normal_lose,omitempty"`
	ActiveHardWin        int32    `protobuf:"varint,5,opt,name=active_hard_win,json=activeHardWin,proto3" json:"active_hard_win,omitempty"`
	ActiveHardLose       int32    `protobuf:"varint,6,opt,name=active_hard_lose,json=activeHardLose,proto3" json:"active_hard_lose,omitempty"`
	PassiveEasyWin       int32    `protobuf:"varint,7,opt,name=passive_easy_win,json=passiveEasyWin,proto3" json:"passive_easy_win,omitempty"`
	PassiveEasyLose      int32    `protobuf:"varint,8,opt,name=passive_easy_lose,json=passiveEasyLose,proto3" json:"passive_easy_lose,omitempty"`
	PassiveNormalWin     int32    `protobuf:"varint,9,opt,name=passive_normal_win,json=passiveNormalWin,proto3" json:"passive_normal_win,omitempty"`
	PassiveNormalLose    int32    `protobuf:"varint,10,opt,name=passive_normal_lose,json=passiveNormalLose,proto3" json:"passive_normal_lose,omitempty"`
	PassiveHardWin       int32    `protobuf:"varint,11,opt,name=passive_hard_win,json=passiveHardWin,proto3" json:"passive_hard_win,omitempty"`
	PassiveHardLose      int32    `protobuf:"varint,12,opt,name=passive_hard_lose,json=passiveHardLose,proto3" json:"passive_hard_lose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SinResultRecord) Reset()         { *m = SinResultRecord{} }
func (m *SinResultRecord) String() string { return proto.CompactTextString(m) }
func (*SinResultRecord) ProtoMessage()    {}
func (*SinResultRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{97}
}

func (m *SinResultRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SinResultRecord.Unmarshal(m, b)
}
func (m *SinResultRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SinResultRecord.Marshal(b, m, deterministic)
}
func (m *SinResultRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinResultRecord.Merge(m, src)
}
func (m *SinResultRecord) XXX_Size() int {
	return xxx_messageInfo_SinResultRecord.Size(m)
}
func (m *SinResultRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SinResultRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SinResultRecord proto.InternalMessageInfo

func (m *SinResultRecord) GetActiveEasyWin() int32 {
	if m != nil {
		return m.ActiveEasyWin
	}
	return 0
}

func (m *SinResultRecord) GetActiveEasyLose() int32 {
	if m != nil {
		return m.ActiveEasyLose
	}
	return 0
}

func (m *SinResultRecord) GetActiveNormalWin() int32 {
	if m != nil {
		return m.ActiveNormalWin
	}
	return 0
}

func (m *SinResultRecord) GetActiveNormalLose() int32 {
	if m != nil {
		return m.ActiveNormalLose
	}
	return 0
}

func (m *SinResultRecord) GetActiveHardWin() int32 {
	if m != nil {
		return m.ActiveHardWin
	}
	return 0
}

func (m *SinResultRecord) GetActiveHardLose() int32 {
	if m != nil {
		return m.ActiveHardLose
	}
	return 0
}

func (m *SinResultRecord) GetPassiveEasyWin() int32 {
	if m != nil {
		return m.PassiveEasyWin
	}
	return 0
}

func (m *SinResultRecord) GetPassiveEasyLose() int32 {
	if m != nil {
		return m.PassiveEasyLose
	}
	return 0
}

func (m *SinResultRecord) GetPassiveNormalWin() int32 {
	if m != nil {
		return m.PassiveNormalWin
	}
	return 0
}

func (m *SinResultRecord) GetPassiveNormalLose() int32 {
	if m != nil {
		return m.PassiveNormalLose
	}
	return 0
}

func (m *SinResultRecord) GetPassiveHardWin() int32 {
	if m != nil {
		return m.PassiveHardWin
	}
	return 0
}

func (m *SinResultRecord) GetPassiveHardLose() int32 {
	if m != nil {
		return m.PassiveHardLose
	}
	return 0
}

type SinFightInfo struct {
	Record               []*SinFightRecord `protobuf:"bytes,1,rep,name=record,proto3" json:"record,omitempty"`
	ResultRecord         *SinResultRecord  `protobuf:"bytes,2,opt,name=result_record,json=resultRecord,proto3" json:"result_record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SinFightInfo) Reset()         { *m = SinFightInfo{} }
func (m *SinFightInfo) String() string { return proto.CompactTextString(m) }
func (*SinFightInfo) ProtoMessage()    {}
func (*SinFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{98}
}

func (m *SinFightInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SinFightInfo.Unmarshal(m, b)
}
func (m *SinFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SinFightInfo.Marshal(b, m, deterministic)
}
func (m *SinFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinFightInfo.Merge(m, src)
}
func (m *SinFightInfo) XXX_Size() int {
	return xxx_messageInfo_SinFightInfo.Size(m)
}
func (m *SinFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SinFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SinFightInfo proto.InternalMessageInfo

func (m *SinFightInfo) GetRecord() []*SinFightRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *SinFightInfo) GetResultRecord() *SinResultRecord {
	if m != nil {
		return m.ResultRecord
	}
	return nil
}

type PVPFightInfo struct {
	Record               []*SinFightRecord `protobuf:"bytes,1,rep,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PVPFightInfo) Reset()         { *m = PVPFightInfo{} }
func (m *PVPFightInfo) String() string { return proto.CompactTextString(m) }
func (*PVPFightInfo) ProtoMessage()    {}
func (*PVPFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{99}
}

func (m *PVPFightInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PVPFightInfo.Unmarshal(m, b)
}
func (m *PVPFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PVPFightInfo.Marshal(b, m, deterministic)
}
func (m *PVPFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PVPFightInfo.Merge(m, src)
}
func (m *PVPFightInfo) XXX_Size() int {
	return xxx_messageInfo_PVPFightInfo.Size(m)
}
func (m *PVPFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PVPFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PVPFightInfo proto.InternalMessageInfo

func (m *PVPFightInfo) GetRecord() []*SinFightRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type MatchList struct {
	List                 map[uint64]int32 `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MatchList) Reset()         { *m = MatchList{} }
func (m *MatchList) String() string { return proto.CompactTextString(m) }
func (*MatchList) ProtoMessage()    {}
func (*MatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{100}
}

func (m *MatchList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchList.Unmarshal(m, b)
}
func (m *MatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchList.Marshal(b, m, deterministic)
}
func (m *MatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchList.Merge(m, src)
}
func (m *MatchList) XXX_Size() int {
	return xxx_messageInfo_MatchList.Size(m)
}
func (m *MatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchList.DiscardUnknown(m)
}

var xxx_messageInfo_MatchList proto.InternalMessageInfo

func (m *MatchList) GetList() map[uint64]int32 {
	if m != nil {
		return m.List
	}
	return nil
}

type SinThreatInfo struct {
	Easy                 uint32   `protobuf:"varint,1,opt,name=easy,proto3" json:"easy,omitempty"`
	Normal               uint32   `protobuf:"varint,2,opt,name=normal,proto3" json:"normal,omitempty"`
	Hard                 uint32   `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SinThreatInfo) Reset()         { *m = SinThreatInfo{} }
func (m *SinThreatInfo) String() string { return proto.CompactTextString(m) }
func (*SinThreatInfo) ProtoMessage()    {}
func (*SinThreatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{101}
}

func (m *SinThreatInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SinThreatInfo.Unmarshal(m, b)
}
func (m *SinThreatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SinThreatInfo.Marshal(b, m, deterministic)
}
func (m *SinThreatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinThreatInfo.Merge(m, src)
}
func (m *SinThreatInfo) XXX_Size() int {
	return xxx_messageInfo_SinThreatInfo.Size(m)
}
func (m *SinThreatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SinThreatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SinThreatInfo proto.InternalMessageInfo

func (m *SinThreatInfo) GetEasy() uint32 {
	if m != nil {
		return m.Easy
	}
	return 0
}

func (m *SinThreatInfo) GetNormal() uint32 {
	if m != nil {
		return m.Normal
	}
	return 0
}

func (m *SinThreatInfo) GetHard() uint32 {
	if m != nil {
		return m.Hard
	}
	return 0
}

type AdvanceSkillInfo struct {
	SkillChain1          []int32          `protobuf:"varint,1,rep,packed,name=skill_chain1,json=skillChain1,proto3" json:"skill_chain1,omitempty"`
	SkillChain2          []int32          `protobuf:"varint,2,rep,packed,name=skill_chain2,json=skillChain2,proto3" json:"skill_chain2,omitempty"`
	NormalSkills         []int32          `protobuf:"varint,3,rep,packed,name=normal_skills,json=normalSkills,proto3" json:"normal_skills,omitempty"`
	NormalSkySkills      []int32          `protobuf:"varint,4,rep,packed,name=normal_sky_skills,json=normalSkySkills,proto3" json:"normal_sky_skills,omitempty"`
	CommonSkills         []int32          `protobuf:"varint,5,rep,packed,name=common_skills,json=commonSkills,proto3" json:"common_skills,omitempty"`
	Skills               map[uint32]int32 `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AdvanceSkillInfo) Reset()         { *m = AdvanceSkillInfo{} }
func (m *AdvanceSkillInfo) String() string { return proto.CompactTextString(m) }
func (*AdvanceSkillInfo) ProtoMessage()    {}
func (*AdvanceSkillInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{102}
}

func (m *AdvanceSkillInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvanceSkillInfo.Unmarshal(m, b)
}
func (m *AdvanceSkillInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvanceSkillInfo.Marshal(b, m, deterministic)
}
func (m *AdvanceSkillInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvanceSkillInfo.Merge(m, src)
}
func (m *AdvanceSkillInfo) XXX_Size() int {
	return xxx_messageInfo_AdvanceSkillInfo.Size(m)
}
func (m *AdvanceSkillInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvanceSkillInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AdvanceSkillInfo proto.InternalMessageInfo

func (m *AdvanceSkillInfo) GetSkillChain1() []int32 {
	if m != nil {
		return m.SkillChain1
	}
	return nil
}

func (m *AdvanceSkillInfo) GetSkillChain2() []int32 {
	if m != nil {
		return m.SkillChain2
	}
	return nil
}

func (m *AdvanceSkillInfo) GetNormalSkills() []int32 {
	if m != nil {
		return m.NormalSkills
	}
	return nil
}

func (m *AdvanceSkillInfo) GetNormalSkySkills() []int32 {
	if m != nil {
		return m.NormalSkySkills
	}
	return nil
}

func (m *AdvanceSkillInfo) GetCommonSkills() []int32 {
	if m != nil {
		return m.CommonSkills
	}
	return nil
}

func (m *AdvanceSkillInfo) GetSkills() map[uint32]int32 {
	if m != nil {
		return m.Skills
	}
	return nil
}

type EventContent struct {
	EventType            NPCEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=Adoter.Asset.NPCEventType" json:"event_type,omitempty"`
	EventParam           int32        `protobuf:"varint,2,opt,name=event_param,json=eventParam,proto3" json:"event_param,omitempty"`
	DropGroupId          int32        `protobuf:"varint,3,opt,name=drop_group_id,json=dropGroupId,proto3" json:"drop_group_id,omitempty"`
	Slot                 []*ItemSlot  `protobuf:"bytes,4,rep,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EventContent) Reset()         { *m = EventContent{} }
func (m *EventContent) String() string { return proto.CompactTextString(m) }
func (*EventContent) ProtoMessage()    {}
func (*EventContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{103}
}

func (m *EventContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventContent.Unmarshal(m, b)
}
func (m *EventContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventContent.Marshal(b, m, deterministic)
}
func (m *EventContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventContent.Merge(m, src)
}
func (m *EventContent) XXX_Size() int {
	return xxx_messageInfo_EventContent.Size(m)
}
func (m *EventContent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventContent.DiscardUnknown(m)
}

var xxx_messageInfo_EventContent proto.InternalMessageInfo

func (m *EventContent) GetEventType() NPCEventType {
	if m != nil {
		return m.EventType
	}
	return NPCEventType_NPCEventType_None
}

func (m *EventContent) GetEventParam() int32 {
	if m != nil {
		return m.EventParam
	}
	return 0
}

func (m *EventContent) GetDropGroupId() int32 {
	if m != nil {
		return m.DropGroupId
	}
	return 0
}

func (m *EventContent) GetSlot() []*ItemSlot {
	if m != nil {
		return m.Slot
	}
	return nil
}

type StateAvatar struct {
	Conditions           []*GameConditionDataGroup `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	AvatarId             int32                     `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StateAvatar) Reset()         { *m = StateAvatar{} }
func (m *StateAvatar) String() string { return proto.CompactTextString(m) }
func (*StateAvatar) ProtoMessage()    {}
func (*StateAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{104}
}

func (m *StateAvatar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateAvatar.Unmarshal(m, b)
}
func (m *StateAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateAvatar.Marshal(b, m, deterministic)
}
func (m *StateAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateAvatar.Merge(m, src)
}
func (m *StateAvatar) XXX_Size() int {
	return xxx_messageInfo_StateAvatar.Size(m)
}
func (m *StateAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_StateAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_StateAvatar proto.InternalMessageInfo

func (m *StateAvatar) GetConditions() []*GameConditionDataGroup {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StateAvatar) GetAvatarId() int32 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

//MF值
type MagicFindValue struct {
	BaseValue            float32  `protobuf:"fixed32,1,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
	FixedValue           float32  `protobuf:"fixed32,2,opt,name=fixed_value,json=fixedValue,proto3" json:"fixed_value,omitempty"`
	RatioValue           float32  `protobuf:"fixed32,3,opt,name=ratio_value,json=ratioValue,proto3" json:"ratio_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MagicFindValue) Reset()         { *m = MagicFindValue{} }
func (m *MagicFindValue) String() string { return proto.CompactTextString(m) }
func (*MagicFindValue) ProtoMessage()    {}
func (*MagicFindValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{105}
}

func (m *MagicFindValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MagicFindValue.Unmarshal(m, b)
}
func (m *MagicFindValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MagicFindValue.Marshal(b, m, deterministic)
}
func (m *MagicFindValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MagicFindValue.Merge(m, src)
}
func (m *MagicFindValue) XXX_Size() int {
	return xxx_messageInfo_MagicFindValue.Size(m)
}
func (m *MagicFindValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MagicFindValue.DiscardUnknown(m)
}

var xxx_messageInfo_MagicFindValue proto.InternalMessageInfo

func (m *MagicFindValue) GetBaseValue() float32 {
	if m != nil {
		return m.BaseValue
	}
	return 0
}

func (m *MagicFindValue) GetFixedValue() float32 {
	if m != nil {
		return m.FixedValue
	}
	return 0
}

func (m *MagicFindValue) GetRatioValue() float32 {
	if m != nil {
		return m.RatioValue
	}
	return 0
}

//随机范围
type RangeElement struct {
	NumMin               uint32   `protobuf:"varint,1,opt,name=num_min,json=numMin,proto3" json:"num_min,omitempty"`
	NumMax               uint32   `protobuf:"varint,2,opt,name=num_max,json=numMax,proto3" json:"num_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeElement) Reset()         { *m = RangeElement{} }
func (m *RangeElement) String() string { return proto.CompactTextString(m) }
func (*RangeElement) ProtoMessage()    {}
func (*RangeElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{106}
}

func (m *RangeElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeElement.Unmarshal(m, b)
}
func (m *RangeElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeElement.Marshal(b, m, deterministic)
}
func (m *RangeElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeElement.Merge(m, src)
}
func (m *RangeElement) XXX_Size() int {
	return xxx_messageInfo_RangeElement.Size(m)
}
func (m *RangeElement) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeElement.DiscardUnknown(m)
}

var xxx_messageInfo_RangeElement proto.InternalMessageInfo

func (m *RangeElement) GetNumMin() uint32 {
	if m != nil {
		return m.NumMin
	}
	return 0
}

func (m *RangeElement) GetNumMax() uint32 {
	if m != nil {
		return m.NumMax
	}
	return 0
}

type MapIntInt struct {
	Key                  int32    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                int32    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapIntInt) Reset()         { *m = MapIntInt{} }
func (m *MapIntInt) String() string { return proto.CompactTextString(m) }
func (*MapIntInt) ProtoMessage()    {}
func (*MapIntInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{107}
}

func (m *MapIntInt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapIntInt.Unmarshal(m, b)
}
func (m *MapIntInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapIntInt.Marshal(b, m, deterministic)
}
func (m *MapIntInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapIntInt.Merge(m, src)
}
func (m *MapIntInt) XXX_Size() int {
	return xxx_messageInfo_MapIntInt.Size(m)
}
func (m *MapIntInt) XXX_DiscardUnknown() {
	xxx_messageInfo_MapIntInt.DiscardUnknown(m)
}

var xxx_messageInfo_MapIntInt proto.InternalMessageInfo

func (m *MapIntInt) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *MapIntInt) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ScrollHandBook struct {
	Quality              uint32   `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	Advanced             uint32   `protobuf:"varint,2,opt,name=advanced,proto3" json:"advanced,omitempty"`
	IsGold               bool     `protobuf:"varint,3,opt,name=is_gold,json=isGold,proto3" json:"is_gold,omitempty"`
	IsShenghua           bool     `protobuf:"varint,4,opt,name=is_shenghua,json=isShenghua,proto3" json:"is_shenghua,omitempty"`
	IsTwiceEvolution     bool     `protobuf:"varint,5,opt,name=is_twice_evolution,json=isTwiceEvolution,proto3" json:"is_twice_evolution,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScrollHandBook) Reset()         { *m = ScrollHandBook{} }
func (m *ScrollHandBook) String() string { return proto.CompactTextString(m) }
func (*ScrollHandBook) ProtoMessage()    {}
func (*ScrollHandBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{108}
}

func (m *ScrollHandBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScrollHandBook.Unmarshal(m, b)
}
func (m *ScrollHandBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScrollHandBook.Marshal(b, m, deterministic)
}
func (m *ScrollHandBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrollHandBook.Merge(m, src)
}
func (m *ScrollHandBook) XXX_Size() int {
	return xxx_messageInfo_ScrollHandBook.Size(m)
}
func (m *ScrollHandBook) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrollHandBook.DiscardUnknown(m)
}

var xxx_messageInfo_ScrollHandBook proto.InternalMessageInfo

func (m *ScrollHandBook) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *ScrollHandBook) GetAdvanced() uint32 {
	if m != nil {
		return m.Advanced
	}
	return 0
}

func (m *ScrollHandBook) GetIsGold() bool {
	if m != nil {
		return m.IsGold
	}
	return false
}

func (m *ScrollHandBook) GetIsShenghua() bool {
	if m != nil {
		return m.IsShenghua
	}
	return false
}

func (m *ScrollHandBook) GetIsTwiceEvolution() bool {
	if m != nil {
		return m.IsTwiceEvolution
	}
	return false
}

type EquipHandBook struct {
	Quality              uint32   `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	IsZongshi            bool     `protobuf:"varint,2,opt,name=is_zongshi,json=isZongshi,proto3" json:"is_zongshi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EquipHandBook) Reset()         { *m = EquipHandBook{} }
func (m *EquipHandBook) String() string { return proto.CompactTextString(m) }
func (*EquipHandBook) ProtoMessage()    {}
func (*EquipHandBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{109}
}

func (m *EquipHandBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipHandBook.Unmarshal(m, b)
}
func (m *EquipHandBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipHandBook.Marshal(b, m, deterministic)
}
func (m *EquipHandBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipHandBook.Merge(m, src)
}
func (m *EquipHandBook) XXX_Size() int {
	return xxx_messageInfo_EquipHandBook.Size(m)
}
func (m *EquipHandBook) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipHandBook.DiscardUnknown(m)
}

var xxx_messageInfo_EquipHandBook proto.InternalMessageInfo

func (m *EquipHandBook) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *EquipHandBook) GetIsZongshi() bool {
	if m != nil {
		return m.IsZongshi
	}
	return false
}

type MapLongF struct {
	Key                  int64    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                float32  `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapLongF) Reset()         { *m = MapLongF{} }
func (m *MapLongF) String() string { return proto.CompactTextString(m) }
func (*MapLongF) ProtoMessage()    {}
func (*MapLongF) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{110}
}

func (m *MapLongF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapLongF.Unmarshal(m, b)
}
func (m *MapLongF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapLongF.Marshal(b, m, deterministic)
}
func (m *MapLongF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLongF.Merge(m, src)
}
func (m *MapLongF) XXX_Size() int {
	return xxx_messageInfo_MapLongF.Size(m)
}
func (m *MapLongF) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLongF.DiscardUnknown(m)
}

var xxx_messageInfo_MapLongF proto.InternalMessageInfo

func (m *MapLongF) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *MapLongF) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type LevelData struct {
	LevelId              int32              `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	Cells                []*DungeonCellData `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LevelData) Reset()         { *m = LevelData{} }
func (m *LevelData) String() string { return proto.CompactTextString(m) }
func (*LevelData) ProtoMessage()    {}
func (*LevelData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{111}
}

func (m *LevelData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LevelData.Unmarshal(m, b)
}
func (m *LevelData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LevelData.Marshal(b, m, deterministic)
}
func (m *LevelData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelData.Merge(m, src)
}
func (m *LevelData) XXX_Size() int {
	return xxx_messageInfo_LevelData.Size(m)
}
func (m *LevelData) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelData.DiscardUnknown(m)
}

var xxx_messageInfo_LevelData proto.InternalMessageInfo

func (m *LevelData) GetLevelId() int32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *LevelData) GetCells() []*DungeonCellData {
	if m != nil {
		return m.Cells
	}
	return nil
}

type EndlessData struct {
	Difficulty           int32              `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	EndlessId            int32              `protobuf:"varint,2,opt,name=endless_id,json=endlessId,proto3" json:"endless_id,omitempty"`
	Hero                 *GameEndlessHero   `protobuf:"bytes,3,opt,name=hero,proto3" json:"hero,omitempty"`
	Dungeons             []*DungeonCellData `protobuf:"bytes,4,rep,name=dungeons,proto3" json:"dungeons,omitempty"`
	LastCellId           int32              `protobuf:"varint,5,opt,name=last_cell_id,json=lastCellId,proto3" json:"last_cell_id,omitempty"`
	PlayMode             PlayMode1          `protobuf:"varint,6,opt,name=play_mode,json=playMode,proto3,enum=Adoter.Asset.PlayMode1" json:"play_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EndlessData) Reset()         { *m = EndlessData{} }
func (m *EndlessData) String() string { return proto.CompactTextString(m) }
func (*EndlessData) ProtoMessage()    {}
func (*EndlessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{112}
}

func (m *EndlessData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndlessData.Unmarshal(m, b)
}
func (m *EndlessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndlessData.Marshal(b, m, deterministic)
}
func (m *EndlessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndlessData.Merge(m, src)
}
func (m *EndlessData) XXX_Size() int {
	return xxx_messageInfo_EndlessData.Size(m)
}
func (m *EndlessData) XXX_DiscardUnknown() {
	xxx_messageInfo_EndlessData.DiscardUnknown(m)
}

var xxx_messageInfo_EndlessData proto.InternalMessageInfo

func (m *EndlessData) GetDifficulty() int32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *EndlessData) GetEndlessId() int32 {
	if m != nil {
		return m.EndlessId
	}
	return 0
}

func (m *EndlessData) GetHero() *GameEndlessHero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *EndlessData) GetDungeons() []*DungeonCellData {
	if m != nil {
		return m.Dungeons
	}
	return nil
}

func (m *EndlessData) GetLastCellId() int32 {
	if m != nil {
		return m.LastCellId
	}
	return 0
}

func (m *EndlessData) GetPlayMode() PlayMode1 {
	if m != nil {
		return m.PlayMode
	}
	return PlayMode1_PlayMode1_None
}

type GameEndlessHero struct {
	Genre                *GameGenre     `protobuf:"bytes,1,opt,name=genre,proto3" json:"genre,omitempty"`
	Buffs                []*EndlessBuff `protobuf:"bytes,2,rep,name=buffs,proto3" json:"buffs,omitempty"`
	Durable              []*MapLongF    `protobuf:"bytes,3,rep,name=durable,proto3" json:"durable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GameEndlessHero) Reset()         { *m = GameEndlessHero{} }
func (m *GameEndlessHero) String() string { return proto.CompactTextString(m) }
func (*GameEndlessHero) ProtoMessage()    {}
func (*GameEndlessHero) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{113}
}

func (m *GameEndlessHero) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEndlessHero.Unmarshal(m, b)
}
func (m *GameEndlessHero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEndlessHero.Marshal(b, m, deterministic)
}
func (m *GameEndlessHero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEndlessHero.Merge(m, src)
}
func (m *GameEndlessHero) XXX_Size() int {
	return xxx_messageInfo_GameEndlessHero.Size(m)
}
func (m *GameEndlessHero) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEndlessHero.DiscardUnknown(m)
}

var xxx_messageInfo_GameEndlessHero proto.InternalMessageInfo

func (m *GameEndlessHero) GetGenre() *GameGenre {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *GameEndlessHero) GetBuffs() []*EndlessBuff {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *GameEndlessHero) GetDurable() []*MapLongF {
	if m != nil {
		return m.Durable
	}
	return nil
}

type BlessBuffData struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UpgradeValue         []int32  `protobuf:"varint,2,rep,packed,name=upgrade_value,json=upgradeValue,proto3" json:"upgrade_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlessBuffData) Reset()         { *m = BlessBuffData{} }
func (m *BlessBuffData) String() string { return proto.CompactTextString(m) }
func (*BlessBuffData) ProtoMessage()    {}
func (*BlessBuffData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{114}
}

func (m *BlessBuffData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlessBuffData.Unmarshal(m, b)
}
func (m *BlessBuffData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlessBuffData.Marshal(b, m, deterministic)
}
func (m *BlessBuffData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlessBuffData.Merge(m, src)
}
func (m *BlessBuffData) XXX_Size() int {
	return xxx_messageInfo_BlessBuffData.Size(m)
}
func (m *BlessBuffData) XXX_DiscardUnknown() {
	xxx_messageInfo_BlessBuffData.DiscardUnknown(m)
}

var xxx_messageInfo_BlessBuffData proto.InternalMessageInfo

func (m *BlessBuffData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BlessBuffData) GetUpgradeValue() []int32 {
	if m != nil {
		return m.UpgradeValue
	}
	return nil
}

type EndlessBuff struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Duration             int32    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndlessBuff) Reset()         { *m = EndlessBuff{} }
func (m *EndlessBuff) String() string { return proto.CompactTextString(m) }
func (*EndlessBuff) ProtoMessage()    {}
func (*EndlessBuff) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{115}
}

func (m *EndlessBuff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndlessBuff.Unmarshal(m, b)
}
func (m *EndlessBuff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndlessBuff.Marshal(b, m, deterministic)
}
func (m *EndlessBuff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndlessBuff.Merge(m, src)
}
func (m *EndlessBuff) XXX_Size() int {
	return xxx_messageInfo_EndlessBuff.Size(m)
}
func (m *EndlessBuff) XXX_DiscardUnknown() {
	xxx_messageInfo_EndlessBuff.DiscardUnknown(m)
}

var xxx_messageInfo_EndlessBuff proto.InternalMessageInfo

func (m *EndlessBuff) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EndlessBuff) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *EndlessBuff) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type EndlessShopBuff struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyCount             int32    `protobuf:"varint,2,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndlessShopBuff) Reset()         { *m = EndlessShopBuff{} }
func (m *EndlessShopBuff) String() string { return proto.CompactTextString(m) }
func (*EndlessShopBuff) ProtoMessage()    {}
func (*EndlessShopBuff) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{116}
}

func (m *EndlessShopBuff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndlessShopBuff.Unmarshal(m, b)
}
func (m *EndlessShopBuff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndlessShopBuff.Marshal(b, m, deterministic)
}
func (m *EndlessShopBuff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndlessShopBuff.Merge(m, src)
}
func (m *EndlessShopBuff) XXX_Size() int {
	return xxx_messageInfo_EndlessShopBuff.Size(m)
}
func (m *EndlessShopBuff) XXX_DiscardUnknown() {
	xxx_messageInfo_EndlessShopBuff.DiscardUnknown(m)
}

var xxx_messageInfo_EndlessShopBuff proto.InternalMessageInfo

func (m *EndlessShopBuff) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EndlessShopBuff) GetBuyCount() int32 {
	if m != nil {
		return m.BuyCount
	}
	return 0
}

type LibInfo struct {
	FileName             string   `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileMd5              string   `protobuf:"bytes,2,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LibInfo) Reset()         { *m = LibInfo{} }
func (m *LibInfo) String() string { return proto.CompactTextString(m) }
func (*LibInfo) ProtoMessage()    {}
func (*LibInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{117}
}

func (m *LibInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LibInfo.Unmarshal(m, b)
}
func (m *LibInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LibInfo.Marshal(b, m, deterministic)
}
func (m *LibInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LibInfo.Merge(m, src)
}
func (m *LibInfo) XXX_Size() int {
	return xxx_messageInfo_LibInfo.Size(m)
}
func (m *LibInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LibInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LibInfo proto.InternalMessageInfo

func (m *LibInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *LibInfo) GetFileMd5() string {
	if m != nil {
		return m.FileMd5
	}
	return ""
}

type LibSync struct {
	PlayerGuid           int64      `protobuf:"varint,1,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	PlayerId             int64      `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName           string     `protobuf:"bytes,3,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	ChannelId            int32      `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	List                 []*LibInfo `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	Imei                 string     `protobuf:"bytes,6,opt,name=imei,proto3" json:"imei,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LibSync) Reset()         { *m = LibSync{} }
func (m *LibSync) String() string { return proto.CompactTextString(m) }
func (*LibSync) ProtoMessage()    {}
func (*LibSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{118}
}

func (m *LibSync) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LibSync.Unmarshal(m, b)
}
func (m *LibSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LibSync.Marshal(b, m, deterministic)
}
func (m *LibSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LibSync.Merge(m, src)
}
func (m *LibSync) XXX_Size() int {
	return xxx_messageInfo_LibSync.Size(m)
}
func (m *LibSync) XXX_DiscardUnknown() {
	xxx_messageInfo_LibSync.DiscardUnknown(m)
}

var xxx_messageInfo_LibSync proto.InternalMessageInfo

func (m *LibSync) GetPlayerGuid() int64 {
	if m != nil {
		return m.PlayerGuid
	}
	return 0
}

func (m *LibSync) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *LibSync) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *LibSync) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *LibSync) GetList() []*LibInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *LibSync) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

type BlessEffect struct {
	Type                 BlessNumType `protobuf:"varint,1,opt,name=type,proto3,enum=Adoter.Asset.BlessNumType" json:"type,omitempty"`
	Val                  int32        `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BlessEffect) Reset()         { *m = BlessEffect{} }
func (m *BlessEffect) String() string { return proto.CompactTextString(m) }
func (*BlessEffect) ProtoMessage()    {}
func (*BlessEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{119}
}

func (m *BlessEffect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlessEffect.Unmarshal(m, b)
}
func (m *BlessEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlessEffect.Marshal(b, m, deterministic)
}
func (m *BlessEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlessEffect.Merge(m, src)
}
func (m *BlessEffect) XXX_Size() int {
	return xxx_messageInfo_BlessEffect.Size(m)
}
func (m *BlessEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_BlessEffect.DiscardUnknown(m)
}

var xxx_messageInfo_BlessEffect proto.InternalMessageInfo

func (m *BlessEffect) GetType() BlessNumType {
	if m != nil {
		return m.Type
	}
	return BlessNumType_Bless_None
}

func (m *BlessEffect) GetVal() int32 {
	if m != nil {
		return m.Val
	}
	return 0
}

type EvolutionInfo struct {
	EvolutionSetId       int32    `protobuf:"varint,1,opt,name=evolution_set_id,json=evolutionSetId,proto3" json:"evolution_set_id,omitempty"`
	LowestStar           int32    `protobuf:"varint,2,opt,name=lowest_star,json=lowestStar,proto3" json:"lowest_star,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvolutionInfo) Reset()         { *m = EvolutionInfo{} }
func (m *EvolutionInfo) String() string { return proto.CompactTextString(m) }
func (*EvolutionInfo) ProtoMessage()    {}
func (*EvolutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{120}
}

func (m *EvolutionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvolutionInfo.Unmarshal(m, b)
}
func (m *EvolutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvolutionInfo.Marshal(b, m, deterministic)
}
func (m *EvolutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvolutionInfo.Merge(m, src)
}
func (m *EvolutionInfo) XXX_Size() int {
	return xxx_messageInfo_EvolutionInfo.Size(m)
}
func (m *EvolutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EvolutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EvolutionInfo proto.InternalMessageInfo

func (m *EvolutionInfo) GetEvolutionSetId() int32 {
	if m != nil {
		return m.EvolutionSetId
	}
	return 0
}

func (m *EvolutionInfo) GetLowestStar() int32 {
	if m != nil {
		return m.LowestStar
	}
	return 0
}

type ActivityParameter struct {
	DropType             DropExtendType `protobuf:"varint,1,opt,name=drop_type,json=dropType,proto3,enum=Adoter.Asset.DropExtendType" json:"drop_type,omitempty"`
	Para1                int32          `protobuf:"varint,2,opt,name=para1,proto3" json:"para1,omitempty"`
	Para2                int32          `protobuf:"varint,3,opt,name=para2,proto3" json:"para2,omitempty"`
	Para3                int32          `protobuf:"varint,4,opt,name=para3,proto3" json:"para3,omitempty"`
	Para4                int32          `protobuf:"varint,5,opt,name=para4,proto3" json:"para4,omitempty"`
	Para5                int32          `protobuf:"varint,6,opt,name=para5,proto3" json:"para5,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ActivityParameter) Reset()         { *m = ActivityParameter{} }
func (m *ActivityParameter) String() string { return proto.CompactTextString(m) }
func (*ActivityParameter) ProtoMessage()    {}
func (*ActivityParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{121}
}

func (m *ActivityParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivityParameter.Unmarshal(m, b)
}
func (m *ActivityParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivityParameter.Marshal(b, m, deterministic)
}
func (m *ActivityParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityParameter.Merge(m, src)
}
func (m *ActivityParameter) XXX_Size() int {
	return xxx_messageInfo_ActivityParameter.Size(m)
}
func (m *ActivityParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityParameter.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityParameter proto.InternalMessageInfo

func (m *ActivityParameter) GetDropType() DropExtendType {
	if m != nil {
		return m.DropType
	}
	return DropExtendType_DropExtendType_Null
}

func (m *ActivityParameter) GetPara1() int32 {
	if m != nil {
		return m.Para1
	}
	return 0
}

func (m *ActivityParameter) GetPara2() int32 {
	if m != nil {
		return m.Para2
	}
	return 0
}

func (m *ActivityParameter) GetPara3() int32 {
	if m != nil {
		return m.Para3
	}
	return 0
}

func (m *ActivityParameter) GetPara4() int32 {
	if m != nil {
		return m.Para4
	}
	return 0
}

func (m *ActivityParameter) GetPara5() int32 {
	if m != nil {
		return m.Para5
	}
	return 0
}

type MultiItemSlot struct {
	Id                   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slots                []*ItemSlot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MultiItemSlot) Reset()         { *m = MultiItemSlot{} }
func (m *MultiItemSlot) String() string { return proto.CompactTextString(m) }
func (*MultiItemSlot) ProtoMessage()    {}
func (*MultiItemSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{122}
}

func (m *MultiItemSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiItemSlot.Unmarshal(m, b)
}
func (m *MultiItemSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiItemSlot.Marshal(b, m, deterministic)
}
func (m *MultiItemSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiItemSlot.Merge(m, src)
}
func (m *MultiItemSlot) XXX_Size() int {
	return xxx_messageInfo_MultiItemSlot.Size(m)
}
func (m *MultiItemSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiItemSlot.DiscardUnknown(m)
}

var xxx_messageInfo_MultiItemSlot proto.InternalMessageInfo

func (m *MultiItemSlot) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MultiItemSlot) GetSlots() []*ItemSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type ReputationCondition struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TextTips             string   `protobuf:"bytes,2,opt,name=text_tips,json=textTips,proto3" json:"text_tips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReputationCondition) Reset()         { *m = ReputationCondition{} }
func (m *ReputationCondition) String() string { return proto.CompactTextString(m) }
func (*ReputationCondition) ProtoMessage()    {}
func (*ReputationCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{123}
}

func (m *ReputationCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReputationCondition.Unmarshal(m, b)
}
func (m *ReputationCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReputationCondition.Marshal(b, m, deterministic)
}
func (m *ReputationCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputationCondition.Merge(m, src)
}
func (m *ReputationCondition) XXX_Size() int {
	return xxx_messageInfo_ReputationCondition.Size(m)
}
func (m *ReputationCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputationCondition.DiscardUnknown(m)
}

var xxx_messageInfo_ReputationCondition proto.InternalMessageInfo

func (m *ReputationCondition) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReputationCondition) GetTextTips() string {
	if m != nil {
		return m.TextTips
	}
	return ""
}

type CorpsApply struct {
	CorpsId              int64    `protobuf:"varint,1,opt,name=corps_id,json=corpsId,proto3" json:"corps_id,omitempty"`
	Corps                *Corps   `protobuf:"bytes,2,opt,name=corps,proto3" json:"corps,omitempty"`
	Time                 uint32   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpsApply) Reset()         { *m = CorpsApply{} }
func (m *CorpsApply) String() string { return proto.CompactTextString(m) }
func (*CorpsApply) ProtoMessage()    {}
func (*CorpsApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{124}
}

func (m *CorpsApply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsApply.Unmarshal(m, b)
}
func (m *CorpsApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsApply.Marshal(b, m, deterministic)
}
func (m *CorpsApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsApply.Merge(m, src)
}
func (m *CorpsApply) XXX_Size() int {
	return xxx_messageInfo_CorpsApply.Size(m)
}
func (m *CorpsApply) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsApply.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsApply proto.InternalMessageInfo

func (m *CorpsApply) GetCorpsId() int64 {
	if m != nil {
		return m.CorpsId
	}
	return 0
}

func (m *CorpsApply) GetCorps() *Corps {
	if m != nil {
		return m.Corps
	}
	return nil
}

func (m *CorpsApply) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

//公会成员
type CorpsMember struct {
	PlayerId             int64     `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	JoinTime             int32     `protobuf:"varint,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	MemType              int32     `protobuf:"varint,3,opt,name=mem_type,json=memType,proto3" json:"mem_type,omitempty"`
	HeroData             *GameHero `protobuf:"bytes,4,opt,name=hero_data,json=heroData,proto3" json:"hero_data,omitempty"`
	ContriValue          int64     `protobuf:"varint,5,opt,name=contri_value,json=contriValue,proto3" json:"contri_value,omitempty"`
	LastContriTime       int32     `protobuf:"varint,6,opt,name=last_contri_time,json=lastContriTime,proto3" json:"last_contri_time,omitempty"`
	BeHurt               int64     `protobuf:"varint,7,opt,name=be_hurt,json=beHurt,proto3" json:"be_hurt,omitempty"`
	Recover              int64     `protobuf:"varint,8,opt,name=recover,proto3" json:"recover,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CorpsMember) Reset()         { *m = CorpsMember{} }
func (m *CorpsMember) String() string { return proto.CompactTextString(m) }
func (*CorpsMember) ProtoMessage()    {}
func (*CorpsMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{125}
}

func (m *CorpsMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsMember.Unmarshal(m, b)
}
func (m *CorpsMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsMember.Marshal(b, m, deterministic)
}
func (m *CorpsMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsMember.Merge(m, src)
}
func (m *CorpsMember) XXX_Size() int {
	return xxx_messageInfo_CorpsMember.Size(m)
}
func (m *CorpsMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsMember.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsMember proto.InternalMessageInfo

func (m *CorpsMember) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *CorpsMember) GetJoinTime() int32 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *CorpsMember) GetMemType() int32 {
	if m != nil {
		return m.MemType
	}
	return 0
}

func (m *CorpsMember) GetHeroData() *GameHero {
	if m != nil {
		return m.HeroData
	}
	return nil
}

func (m *CorpsMember) GetContriValue() int64 {
	if m != nil {
		return m.ContriValue
	}
	return 0
}

func (m *CorpsMember) GetLastContriTime() int32 {
	if m != nil {
		return m.LastContriTime
	}
	return 0
}

func (m *CorpsMember) GetBeHurt() int64 {
	if m != nil {
		return m.BeHurt
	}
	return 0
}

func (m *CorpsMember) GetRecover() int64 {
	if m != nil {
		return m.Recover
	}
	return 0
}

type CorpsReputation struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	UpdateTime           int32    `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	SrcPlayerId          int64    `protobuf:"varint,4,opt,name=src_player_id,json=srcPlayerId,proto3" json:"src_player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpsReputation) Reset()         { *m = CorpsReputation{} }
func (m *CorpsReputation) String() string { return proto.CompactTextString(m) }
func (*CorpsReputation) ProtoMessage()    {}
func (*CorpsReputation) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{126}
}

func (m *CorpsReputation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsReputation.Unmarshal(m, b)
}
func (m *CorpsReputation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsReputation.Marshal(b, m, deterministic)
}
func (m *CorpsReputation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsReputation.Merge(m, src)
}
func (m *CorpsReputation) XXX_Size() int {
	return xxx_messageInfo_CorpsReputation.Size(m)
}
func (m *CorpsReputation) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsReputation.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsReputation proto.InternalMessageInfo

func (m *CorpsReputation) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CorpsReputation) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CorpsReputation) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *CorpsReputation) GetSrcPlayerId() int64 {
	if m != nil {
		return m.SrcPlayerId
	}
	return 0
}

type CorpsInvite struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	CreateTime           int32    `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpsInvite) Reset()         { *m = CorpsInvite{} }
func (m *CorpsInvite) String() string { return proto.CompactTextString(m) }
func (*CorpsInvite) ProtoMessage()    {}
func (*CorpsInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{127}
}

func (m *CorpsInvite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsInvite.Unmarshal(m, b)
}
func (m *CorpsInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsInvite.Marshal(b, m, deterministic)
}
func (m *CorpsInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsInvite.Merge(m, src)
}
func (m *CorpsInvite) XXX_Size() int {
	return xxx_messageInfo_CorpsInvite.Size(m)
}
func (m *CorpsInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsInvite.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsInvite proto.InternalMessageInfo

func (m *CorpsInvite) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *CorpsInvite) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type CorpsFrameBase struct {
	FrameId              int32    `protobuf:"varint,1,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"`
	ExpireTime           int32    `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpsFrameBase) Reset()         { *m = CorpsFrameBase{} }
func (m *CorpsFrameBase) String() string { return proto.CompactTextString(m) }
func (*CorpsFrameBase) ProtoMessage()    {}
func (*CorpsFrameBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{128}
}

func (m *CorpsFrameBase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsFrameBase.Unmarshal(m, b)
}
func (m *CorpsFrameBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsFrameBase.Marshal(b, m, deterministic)
}
func (m *CorpsFrameBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsFrameBase.Merge(m, src)
}
func (m *CorpsFrameBase) XXX_Size() int {
	return xxx_messageInfo_CorpsFrameBase.Size(m)
}
func (m *CorpsFrameBase) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsFrameBase.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsFrameBase proto.InternalMessageInfo

func (m *CorpsFrameBase) GetFrameId() int32 {
	if m != nil {
		return m.FrameId
	}
	return 0
}

func (m *CorpsFrameBase) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type CorpsHeadFrame struct {
	CurrFrame            int32             `protobuf:"varint,1,opt,name=curr_frame,json=currFrame,proto3" json:"curr_frame,omitempty"`
	FrameList            []*CorpsFrameBase `protobuf:"bytes,2,rep,name=frame_list,json=frameList,proto3" json:"frame_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CorpsHeadFrame) Reset()         { *m = CorpsHeadFrame{} }
func (m *CorpsHeadFrame) String() string { return proto.CompactTextString(m) }
func (*CorpsHeadFrame) ProtoMessage()    {}
func (*CorpsHeadFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{129}
}

func (m *CorpsHeadFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsHeadFrame.Unmarshal(m, b)
}
func (m *CorpsHeadFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsHeadFrame.Marshal(b, m, deterministic)
}
func (m *CorpsHeadFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsHeadFrame.Merge(m, src)
}
func (m *CorpsHeadFrame) XXX_Size() int {
	return xxx_messageInfo_CorpsHeadFrame.Size(m)
}
func (m *CorpsHeadFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsHeadFrame.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsHeadFrame proto.InternalMessageInfo

func (m *CorpsHeadFrame) GetCurrFrame() int32 {
	if m != nil {
		return m.CurrFrame
	}
	return 0
}

func (m *CorpsHeadFrame) GetFrameList() []*CorpsFrameBase {
	if m != nil {
		return m.FrameList
	}
	return nil
}

//公会
type Corps struct {
	Id                   int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level                int32              `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	CreatedTime          int32              `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	Iphoto               string             `protobuf:"bytes,5,opt,name=iphoto,proto3" json:"iphoto,omitempty"`
	Announcement         string             `protobuf:"bytes,6,opt,name=announcement,proto3" json:"announcement,omitempty"`
	Zongzhi              string             `protobuf:"bytes,7,opt,name=zongzhi,proto3" json:"zongzhi,omitempty"`
	MinLevel             int32              `protobuf:"varint,8,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	Xuanyan              string             `protobuf:"bytes,9,opt,name=xuanyan,proto3" json:"xuanyan,omitempty"`
	AutoJoinMinLevel     int32              `protobuf:"varint,10,opt,name=auto_join_min_level,json=autoJoinMinLevel,proto3" json:"auto_join_min_level,omitempty"`
	DismissTime          int32              `protobuf:"varint,11,opt,name=dismiss_time,json=dismissTime,proto3" json:"dismiss_time,omitempty"`
	Exp                  int32              `protobuf:"varint,12,opt,name=exp,proto3" json:"exp,omitempty"`
	Power                int32              `protobuf:"varint,13,opt,name=power,proto3" json:"power,omitempty"`
	MemberList           []*CorpsMember     `protobuf:"bytes,20,rep,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
	ApplyList            []*CorpsMember     `protobuf:"bytes,21,rep,name=apply_list,json=applyList,proto3" json:"apply_list,omitempty"`
	RepuList             []*CorpsReputation `protobuf:"bytes,22,rep,name=repu_list,json=repuList,proto3" json:"repu_list,omitempty"`
	EventList            []*CorpsEvent      `protobuf:"bytes,23,rep,name=event_list,json=eventList,proto3" json:"event_list,omitempty"`
	InviteList           []*CorpsInvite     `protobuf:"bytes,24,rep,name=invite_list,json=inviteList,proto3" json:"invite_list,omitempty"`
	MemberCount          int32              `protobuf:"varint,25,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	LastEditGonggaoTime  int32              `protobuf:"varint,26,opt,name=last_edit_gonggao_time,json=lastEditGonggaoTime,proto3" json:"last_edit_gonggao_time,omitempty"`
	Technology           []*Technology      `protobuf:"bytes,27,rep,name=technology,proto3" json:"technology,omitempty"`
	Frame                *CorpsHeadFrame    `protobuf:"bytes,28,opt,name=frame,proto3" json:"frame,omitempty"`
	IsJoin               bool               `protobuf:"varint,29,opt,name=is_join,json=isJoin,proto3" json:"is_join,omitempty"`
	KickCount            int32              `protobuf:"varint,30,opt,name=kick_count,json=kickCount,proto3" json:"kick_count,omitempty"`
	LastKickTime         int32              `protobuf:"varint,31,opt,name=last_kick_time,json=lastKickTime,proto3" json:"last_kick_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Corps) Reset()         { *m = Corps{} }
func (m *Corps) String() string { return proto.CompactTextString(m) }
func (*Corps) ProtoMessage()    {}
func (*Corps) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{130}
}

func (m *Corps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Corps.Unmarshal(m, b)
}
func (m *Corps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Corps.Marshal(b, m, deterministic)
}
func (m *Corps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Corps.Merge(m, src)
}
func (m *Corps) XXX_Size() int {
	return xxx_messageInfo_Corps.Size(m)
}
func (m *Corps) XXX_DiscardUnknown() {
	xxx_messageInfo_Corps.DiscardUnknown(m)
}

var xxx_messageInfo_Corps proto.InternalMessageInfo

func (m *Corps) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corps) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corps) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Corps) GetCreatedTime() int32 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *Corps) GetIphoto() string {
	if m != nil {
		return m.Iphoto
	}
	return ""
}

func (m *Corps) GetAnnouncement() string {
	if m != nil {
		return m.Announcement
	}
	return ""
}

func (m *Corps) GetZongzhi() string {
	if m != nil {
		return m.Zongzhi
	}
	return ""
}

func (m *Corps) GetMinLevel() int32 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *Corps) GetXuanyan() string {
	if m != nil {
		return m.Xuanyan
	}
	return ""
}

func (m *Corps) GetAutoJoinMinLevel() int32 {
	if m != nil {
		return m.AutoJoinMinLevel
	}
	return 0
}

func (m *Corps) GetDismissTime() int32 {
	if m != nil {
		return m.DismissTime
	}
	return 0
}

func (m *Corps) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Corps) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Corps) GetMemberList() []*CorpsMember {
	if m != nil {
		return m.MemberList
	}
	return nil
}

func (m *Corps) GetApplyList() []*CorpsMember {
	if m != nil {
		return m.ApplyList
	}
	return nil
}

func (m *Corps) GetRepuList() []*CorpsReputation {
	if m != nil {
		return m.RepuList
	}
	return nil
}

func (m *Corps) GetEventList() []*CorpsEvent {
	if m != nil {
		return m.EventList
	}
	return nil
}

func (m *Corps) GetInviteList() []*CorpsInvite {
	if m != nil {
		return m.InviteList
	}
	return nil
}

func (m *Corps) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *Corps) GetLastEditGonggaoTime() int32 {
	if m != nil {
		return m.LastEditGonggaoTime
	}
	return 0
}

func (m *Corps) GetTechnology() []*Technology {
	if m != nil {
		return m.Technology
	}
	return nil
}

func (m *Corps) GetFrame() *CorpsHeadFrame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *Corps) GetIsJoin() bool {
	if m != nil {
		return m.IsJoin
	}
	return false
}

func (m *Corps) GetKickCount() int32 {
	if m != nil {
		return m.KickCount
	}
	return 0
}

func (m *Corps) GetLastKickTime() int32 {
	if m != nil {
		return m.LastKickTime
	}
	return 0
}

type CorpsEvent struct {
	EventType            int32    `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	SrcPlayerId          int64    `protobuf:"varint,2,opt,name=src_player_id,json=srcPlayerId,proto3" json:"src_player_id,omitempty"`
	DestPlayerId         int64    `protobuf:"varint,3,opt,name=dest_player_id,json=destPlayerId,proto3" json:"dest_player_id,omitempty"`
	Time                 int32    `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Param                int32    `protobuf:"varint,5,opt,name=param,proto3" json:"param,omitempty"`
	SrcPlayerName        string   `protobuf:"bytes,6,opt,name=src_player_name,json=srcPlayerName,proto3" json:"src_player_name,omitempty"`
	DestPlayerName       string   `protobuf:"bytes,7,opt,name=dest_player_name,json=destPlayerName,proto3" json:"dest_player_name,omitempty"`
	Param1               int32    `protobuf:"varint,8,opt,name=param1,proto3" json:"param1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpsEvent) Reset()         { *m = CorpsEvent{} }
func (m *CorpsEvent) String() string { return proto.CompactTextString(m) }
func (*CorpsEvent) ProtoMessage()    {}
func (*CorpsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{131}
}

func (m *CorpsEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpsEvent.Unmarshal(m, b)
}
func (m *CorpsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpsEvent.Marshal(b, m, deterministic)
}
func (m *CorpsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpsEvent.Merge(m, src)
}
func (m *CorpsEvent) XXX_Size() int {
	return xxx_messageInfo_CorpsEvent.Size(m)
}
func (m *CorpsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CorpsEvent proto.InternalMessageInfo

func (m *CorpsEvent) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *CorpsEvent) GetSrcPlayerId() int64 {
	if m != nil {
		return m.SrcPlayerId
	}
	return 0
}

func (m *CorpsEvent) GetDestPlayerId() int64 {
	if m != nil {
		return m.DestPlayerId
	}
	return 0
}

func (m *CorpsEvent) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CorpsEvent) GetParam() int32 {
	if m != nil {
		return m.Param
	}
	return 0
}

func (m *CorpsEvent) GetSrcPlayerName() string {
	if m != nil {
		return m.SrcPlayerName
	}
	return ""
}

func (m *CorpsEvent) GetDestPlayerName() string {
	if m != nil {
		return m.DestPlayerName
	}
	return ""
}

func (m *CorpsEvent) GetParam1() int32 {
	if m != nil {
		return m.Param1
	}
	return 0
}

type HuantiInfo struct {
	UnitId               uint32                  `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	Grade                uint32                  `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
	IsAssist             uint32                  `protobuf:"varint,3,opt,name=is_assist,json=isAssist,proto3" json:"is_assist,omitempty"`
	SkilldAttributes     []*GuardSkilldAttribute `protobuf:"bytes,4,rep,name=skilld_attributes,json=skilldAttributes,proto3" json:"skilld_attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HuantiInfo) Reset()         { *m = HuantiInfo{} }
func (m *HuantiInfo) String() string { return proto.CompactTextString(m) }
func (*HuantiInfo) ProtoMessage()    {}
func (*HuantiInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{132}
}

func (m *HuantiInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuantiInfo.Unmarshal(m, b)
}
func (m *HuantiInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuantiInfo.Marshal(b, m, deterministic)
}
func (m *HuantiInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuantiInfo.Merge(m, src)
}
func (m *HuantiInfo) XXX_Size() int {
	return xxx_messageInfo_HuantiInfo.Size(m)
}
func (m *HuantiInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HuantiInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HuantiInfo proto.InternalMessageInfo

func (m *HuantiInfo) GetUnitId() uint32 {
	if m != nil {
		return m.UnitId
	}
	return 0
}

func (m *HuantiInfo) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *HuantiInfo) GetIsAssist() uint32 {
	if m != nil {
		return m.IsAssist
	}
	return 0
}

func (m *HuantiInfo) GetSkilldAttributes() []*GuardSkilldAttribute {
	if m != nil {
		return m.SkilldAttributes
	}
	return nil
}

type TransferData struct {
	Guid             uint64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	TransferHeroGuid uint64 `protobuf:"varint,2,opt,name=transfer_hero_guid,json=transferHeroGuid,proto3" json:"transfer_hero_guid,omitempty"`
	//map<uint32, PlayerInventory> inventory = 2; //玩家包裹
	//int32 yuanbao = 3;
	HeroId               int32        `protobuf:"varint,3,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Career               []*MapIntInt `protobuf:"bytes,4,rep,name=career,proto3" json:"career,omitempty"`
	SellSkin             []uint64     `protobuf:"varint,5,rep,packed,name=sell_skin,json=sellSkin,proto3" json:"sell_skin,omitempty"`
	ReserveSkin          []uint64     `protobuf:"varint,6,rep,packed,name=reserve_skin,json=reserveSkin,proto3" json:"reserve_skin,omitempty"`
	OtherRoleSkin        []*Item_Item `protobuf:"bytes,7,rep,name=other_role_skin,json=otherRoleSkin,proto3" json:"other_role_skin,omitempty"`
	OtherSellSkin        []*ItemSlot  `protobuf:"bytes,8,rep,name=other_sell_skin,json=otherSellSkin,proto3" json:"other_sell_skin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TransferData) Reset()         { *m = TransferData{} }
func (m *TransferData) String() string { return proto.CompactTextString(m) }
func (*TransferData) ProtoMessage()    {}
func (*TransferData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{133}
}

func (m *TransferData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferData.Unmarshal(m, b)
}
func (m *TransferData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferData.Marshal(b, m, deterministic)
}
func (m *TransferData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferData.Merge(m, src)
}
func (m *TransferData) XXX_Size() int {
	return xxx_messageInfo_TransferData.Size(m)
}
func (m *TransferData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferData.DiscardUnknown(m)
}

var xxx_messageInfo_TransferData proto.InternalMessageInfo

func (m *TransferData) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *TransferData) GetTransferHeroGuid() uint64 {
	if m != nil {
		return m.TransferHeroGuid
	}
	return 0
}

func (m *TransferData) GetHeroId() int32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *TransferData) GetCareer() []*MapIntInt {
	if m != nil {
		return m.Career
	}
	return nil
}

func (m *TransferData) GetSellSkin() []uint64 {
	if m != nil {
		return m.SellSkin
	}
	return nil
}

func (m *TransferData) GetReserveSkin() []uint64 {
	if m != nil {
		return m.ReserveSkin
	}
	return nil
}

func (m *TransferData) GetOtherRoleSkin() []*Item_Item {
	if m != nil {
		return m.OtherRoleSkin
	}
	return nil
}

func (m *TransferData) GetOtherSellSkin() []*ItemSlot {
	if m != nil {
		return m.OtherSellSkin
	}
	return nil
}

type TechnologyCondition struct {
	GroupId              int32    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TechnologyCondition) Reset()         { *m = TechnologyCondition{} }
func (m *TechnologyCondition) String() string { return proto.CompactTextString(m) }
func (*TechnologyCondition) ProtoMessage()    {}
func (*TechnologyCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{134}
}

func (m *TechnologyCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechnologyCondition.Unmarshal(m, b)
}
func (m *TechnologyCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechnologyCondition.Marshal(b, m, deterministic)
}
func (m *TechnologyCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechnologyCondition.Merge(m, src)
}
func (m *TechnologyCondition) XXX_Size() int {
	return xxx_messageInfo_TechnologyCondition.Size(m)
}
func (m *TechnologyCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_TechnologyCondition.DiscardUnknown(m)
}

var xxx_messageInfo_TechnologyCondition proto.InternalMessageInfo

func (m *TechnologyCondition) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *TechnologyCondition) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Technology struct {
	GroupId              int32    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Technology) Reset()         { *m = Technology{} }
func (m *Technology) String() string { return proto.CompactTextString(m) }
func (*Technology) ProtoMessage()    {}
func (*Technology) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{135}
}

func (m *Technology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Technology.Unmarshal(m, b)
}
func (m *Technology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Technology.Marshal(b, m, deterministic)
}
func (m *Technology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Technology.Merge(m, src)
}
func (m *Technology) XXX_Size() int {
	return xxx_messageInfo_Technology.Size(m)
}
func (m *Technology) XXX_DiscardUnknown() {
	xxx_messageInfo_Technology.DiscardUnknown(m)
}

var xxx_messageInfo_Technology proto.InternalMessageInfo

func (m *Technology) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Technology) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type DynamicActivity struct {
	StartTime            int32    `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int32    `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LogoutTime           int32    `protobuf:"varint,3,opt,name=logout_time,json=logoutTime,proto3" json:"logout_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynamicActivity) Reset()         { *m = DynamicActivity{} }
func (m *DynamicActivity) String() string { return proto.CompactTextString(m) }
func (*DynamicActivity) ProtoMessage()    {}
func (*DynamicActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{136}
}

func (m *DynamicActivity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicActivity.Unmarshal(m, b)
}
func (m *DynamicActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicActivity.Marshal(b, m, deterministic)
}
func (m *DynamicActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicActivity.Merge(m, src)
}
func (m *DynamicActivity) XXX_Size() int {
	return xxx_messageInfo_DynamicActivity.Size(m)
}
func (m *DynamicActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicActivity.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicActivity proto.InternalMessageInfo

func (m *DynamicActivity) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *DynamicActivity) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *DynamicActivity) GetLogoutTime() int32 {
	if m != nil {
		return m.LogoutTime
	}
	return 0
}

type OfflineQuest struct {
	Type                 GameQuestType `protobuf:"varint,1,opt,name=type,proto3,enum=Adoter.Asset.GameQuestType" json:"type,omitempty"`
	Param                []int32       `protobuf:"varint,2,rep,packed,name=param,proto3" json:"param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OfflineQuest) Reset()         { *m = OfflineQuest{} }
func (m *OfflineQuest) String() string { return proto.CompactTextString(m) }
func (*OfflineQuest) ProtoMessage()    {}
func (*OfflineQuest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{137}
}

func (m *OfflineQuest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineQuest.Unmarshal(m, b)
}
func (m *OfflineQuest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineQuest.Marshal(b, m, deterministic)
}
func (m *OfflineQuest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineQuest.Merge(m, src)
}
func (m *OfflineQuest) XXX_Size() int {
	return xxx_messageInfo_OfflineQuest.Size(m)
}
func (m *OfflineQuest) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineQuest.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineQuest proto.InternalMessageInfo

func (m *OfflineQuest) GetType() GameQuestType {
	if m != nil {
		return m.Type
	}
	return GameQuestType_GameQuestType_Normal
}

func (m *OfflineQuest) GetParam() []int32 {
	if m != nil {
		return m.Param
	}
	return nil
}

type ScrollNode struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScrollNode) Reset()         { *m = ScrollNode{} }
func (m *ScrollNode) String() string { return proto.CompactTextString(m) }
func (*ScrollNode) ProtoMessage()    {}
func (*ScrollNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{138}
}

func (m *ScrollNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScrollNode.Unmarshal(m, b)
}
func (m *ScrollNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScrollNode.Marshal(b, m, deterministic)
}
func (m *ScrollNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrollNode.Merge(m, src)
}
func (m *ScrollNode) XXX_Size() int {
	return xxx_messageInfo_ScrollNode.Size(m)
}
func (m *ScrollNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrollNode.DiscardUnknown(m)
}

var xxx_messageInfo_ScrollNode proto.InternalMessageInfo

func (m *ScrollNode) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ScrollNode) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type PVPInfo struct {
	Season               uint32   `protobuf:"varint,1,opt,name=season,proto3" json:"season,omitempty"`
	PvpLevel             uint32   `protobuf:"varint,2,opt,name=pvp_level,json=pvpLevel,proto3" json:"pvp_level,omitempty"`
	PvpScore             uint32   `protobuf:"varint,3,opt,name=pvp_score,json=pvpScore,proto3" json:"pvp_score,omitempty"`
	PvpWinCount          uint32   `protobuf:"varint,4,opt,name=pvp_win_count,json=pvpWinCount,proto3" json:"pvp_win_count,omitempty"`
	PvpFailCount         uint32   `protobuf:"varint,5,opt,name=pvp_fail_count,json=pvpFailCount,proto3" json:"pvp_fail_count,omitempty"`
	UpdateTime           int32    `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ConWin               uint32   `protobuf:"varint,7,opt,name=con_win,json=conWin,proto3" json:"con_win,omitempty"`
	ConFail              uint32   `protobuf:"varint,8,opt,name=con_fail,json=conFail,proto3" json:"con_fail,omitempty"`
	CurrencyWeeklyCount  int32    `protobuf:"varint,9,opt,name=currency_weekly_count,json=currencyWeeklyCount,proto3" json:"currency_weekly_count,omitempty"`
	LevelUpFight         []int32  `protobuf:"varint,10,rep,packed,name=level_up_fight,json=levelUpFight,proto3" json:"level_up_fight,omitempty"`
	LevelDownFight       []int32  `protobuf:"varint,11,rep,packed,name=level_down_fight,json=levelDownFight,proto3" json:"level_down_fight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PVPInfo) Reset()         { *m = PVPInfo{} }
func (m *PVPInfo) String() string { return proto.CompactTextString(m) }
func (*PVPInfo) ProtoMessage()    {}
func (*PVPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{139}
}

func (m *PVPInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PVPInfo.Unmarshal(m, b)
}
func (m *PVPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PVPInfo.Marshal(b, m, deterministic)
}
func (m *PVPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PVPInfo.Merge(m, src)
}
func (m *PVPInfo) XXX_Size() int {
	return xxx_messageInfo_PVPInfo.Size(m)
}
func (m *PVPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PVPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PVPInfo proto.InternalMessageInfo

func (m *PVPInfo) GetSeason() uint32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *PVPInfo) GetPvpLevel() uint32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *PVPInfo) GetPvpScore() uint32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *PVPInfo) GetPvpWinCount() uint32 {
	if m != nil {
		return m.PvpWinCount
	}
	return 0
}

func (m *PVPInfo) GetPvpFailCount() uint32 {
	if m != nil {
		return m.PvpFailCount
	}
	return 0
}

func (m *PVPInfo) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *PVPInfo) GetConWin() uint32 {
	if m != nil {
		return m.ConWin
	}
	return 0
}

func (m *PVPInfo) GetConFail() uint32 {
	if m != nil {
		return m.ConFail
	}
	return 0
}

func (m *PVPInfo) GetCurrencyWeeklyCount() int32 {
	if m != nil {
		return m.CurrencyWeeklyCount
	}
	return 0
}

func (m *PVPInfo) GetLevelUpFight() []int32 {
	if m != nil {
		return m.LevelUpFight
	}
	return nil
}

func (m *PVPInfo) GetLevelDownFight() []int32 {
	if m != nil {
		return m.LevelDownFight
	}
	return nil
}

type GamePlayerPVPInfo struct {
	LinkId               uint32        `protobuf:"varint,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	DsId                 uint32        `protobuf:"varint,2,opt,name=ds_id,json=dsId,proto3" json:"ds_id,omitempty"`
	Hero                 *GameHero     `protobuf:"bytes,3,opt,name=hero,proto3" json:"hero,omitempty"`
	AiHelper             *GameAiHelper `protobuf:"bytes,4,opt,name=ai_helper,json=aiHelper,proto3" json:"ai_helper,omitempty"`
	MatchTimestamp       int32         `protobuf:"varint,5,opt,name=match_timestamp,json=matchTimestamp,proto3" json:"match_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GamePlayerPVPInfo) Reset()         { *m = GamePlayerPVPInfo{} }
func (m *GamePlayerPVPInfo) String() string { return proto.CompactTextString(m) }
func (*GamePlayerPVPInfo) ProtoMessage()    {}
func (*GamePlayerPVPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{140}
}

func (m *GamePlayerPVPInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GamePlayerPVPInfo.Unmarshal(m, b)
}
func (m *GamePlayerPVPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GamePlayerPVPInfo.Marshal(b, m, deterministic)
}
func (m *GamePlayerPVPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayerPVPInfo.Merge(m, src)
}
func (m *GamePlayerPVPInfo) XXX_Size() int {
	return xxx_messageInfo_GamePlayerPVPInfo.Size(m)
}
func (m *GamePlayerPVPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayerPVPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayerPVPInfo proto.InternalMessageInfo

func (m *GamePlayerPVPInfo) GetLinkId() uint32 {
	if m != nil {
		return m.LinkId
	}
	return 0
}

func (m *GamePlayerPVPInfo) GetDsId() uint32 {
	if m != nil {
		return m.DsId
	}
	return 0
}

func (m *GamePlayerPVPInfo) GetHero() *GameHero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *GamePlayerPVPInfo) GetAiHelper() *GameAiHelper {
	if m != nil {
		return m.AiHelper
	}
	return nil
}

func (m *GamePlayerPVPInfo) GetMatchTimestamp() int32 {
	if m != nil {
		return m.MatchTimestamp
	}
	return 0
}

type PVPFightResult struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PVPFightResult) Reset()         { *m = PVPFightResult{} }
func (m *PVPFightResult) String() string { return proto.CompactTextString(m) }
func (*PVPFightResult) ProtoMessage()    {}
func (*PVPFightResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{141}
}

func (m *PVPFightResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PVPFightResult.Unmarshal(m, b)
}
func (m *PVPFightResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PVPFightResult.Marshal(b, m, deterministic)
}
func (m *PVPFightResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PVPFightResult.Merge(m, src)
}
func (m *PVPFightResult) XXX_Size() int {
	return xxx_messageInfo_PVPFightResult.Size(m)
}
func (m *PVPFightResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PVPFightResult.DiscardUnknown(m)
}

var xxx_messageInfo_PVPFightResult proto.InternalMessageInfo

func (m *PVPFightResult) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type PlayerPVPResult struct {
	IsWin                bool                `protobuf:"varint,1,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	PvpLevel             uint32              `protobuf:"varint,2,opt,name=pvp_level,json=pvpLevel,proto3" json:"pvp_level,omitempty"`
	PvpScore             uint32              `protobuf:"varint,3,opt,name=pvp_score,json=pvpScore,proto3" json:"pvp_score,omitempty"`
	ScoreChange          int32               `protobuf:"varint,4,opt,name=score_change,json=scoreChange,proto3" json:"score_change,omitempty"`
	LevelUpFight         []*PVPFightResult   `protobuf:"bytes,5,rep,name=level_up_fight,json=levelUpFight,proto3" json:"level_up_fight,omitempty"`
	LevelDownFight       []*PVPFightResult   `protobuf:"bytes,6,rep,name=level_down_fight,json=levelDownFight,proto3" json:"level_down_fight,omitempty"`
	Status               PVPStatus           `protobuf:"varint,7,opt,name=status,proto3,enum=Adoter.Asset.PVPStatus" json:"status,omitempty"`
	LjCurrencyCount      int32               `protobuf:"varint,8,opt,name=lj_currency_count,json=ljCurrencyCount,proto3" json:"lj_currency_count,omitempty"`
	LjCurrencyStatus     PVPLJCurrencyStatus `protobuf:"varint,9,opt,name=lj_currency_status,json=ljCurrencyStatus,proto3,enum=Adoter.Asset.PVPLJCurrencyStatus" json:"lj_currency_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PlayerPVPResult) Reset()         { *m = PlayerPVPResult{} }
func (m *PlayerPVPResult) String() string { return proto.CompactTextString(m) }
func (*PlayerPVPResult) ProtoMessage()    {}
func (*PlayerPVPResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{142}
}

func (m *PlayerPVPResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerPVPResult.Unmarshal(m, b)
}
func (m *PlayerPVPResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerPVPResult.Marshal(b, m, deterministic)
}
func (m *PlayerPVPResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerPVPResult.Merge(m, src)
}
func (m *PlayerPVPResult) XXX_Size() int {
	return xxx_messageInfo_PlayerPVPResult.Size(m)
}
func (m *PlayerPVPResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerPVPResult.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerPVPResult proto.InternalMessageInfo

func (m *PlayerPVPResult) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *PlayerPVPResult) GetPvpLevel() uint32 {
	if m != nil {
		return m.PvpLevel
	}
	return 0
}

func (m *PlayerPVPResult) GetPvpScore() uint32 {
	if m != nil {
		return m.PvpScore
	}
	return 0
}

func (m *PlayerPVPResult) GetScoreChange() int32 {
	if m != nil {
		return m.ScoreChange
	}
	return 0
}

func (m *PlayerPVPResult) GetLevelUpFight() []*PVPFightResult {
	if m != nil {
		return m.LevelUpFight
	}
	return nil
}

func (m *PlayerPVPResult) GetLevelDownFight() []*PVPFightResult {
	if m != nil {
		return m.LevelDownFight
	}
	return nil
}

func (m *PlayerPVPResult) GetStatus() PVPStatus {
	if m != nil {
		return m.Status
	}
	return PVPStatus_PVPStatus_NULL
}

func (m *PlayerPVPResult) GetLjCurrencyCount() int32 {
	if m != nil {
		return m.LjCurrencyCount
	}
	return 0
}

func (m *PlayerPVPResult) GetLjCurrencyStatus() PVPLJCurrencyStatus {
	if m != nil {
		return m.LjCurrencyStatus
	}
	return PVPLJCurrencyStatus_PVPLJCS_NULL
}

//活动存储数据
type ActivityElement struct {
	ActivityId           int64                `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	State                ACTIVITY_STATE       `protobuf:"varint,2,opt,name=state,proto3,enum=Adoter.Asset.ACTIVITY_STATE" json:"state,omitempty"`
	ActivityType         int32                `protobuf:"varint,3,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	StartDate            int32                `protobuf:"varint,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	StartTime            int32                `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndDate              int32                `protobuf:"varint,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	EndTime              int32                `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ChannelType          int32                `protobuf:"varint,8,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	ParameterList        []*ActivityParameter `protobuf:"bytes,9,rep,name=parameter_list,json=parameterList,proto3" json:"parameter_list,omitempty"`
	RoleType             []int32              `protobuf:"varint,10,rep,packed,name=role_type,json=roleType,proto3" json:"role_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ActivityElement) Reset()         { *m = ActivityElement{} }
func (m *ActivityElement) String() string { return proto.CompactTextString(m) }
func (*ActivityElement) ProtoMessage()    {}
func (*ActivityElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{143}
}

func (m *ActivityElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivityElement.Unmarshal(m, b)
}
func (m *ActivityElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivityElement.Marshal(b, m, deterministic)
}
func (m *ActivityElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityElement.Merge(m, src)
}
func (m *ActivityElement) XXX_Size() int {
	return xxx_messageInfo_ActivityElement.Size(m)
}
func (m *ActivityElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityElement.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityElement proto.InternalMessageInfo

func (m *ActivityElement) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ActivityElement) GetState() ACTIVITY_STATE {
	if m != nil {
		return m.State
	}
	return ACTIVITY_STATE_ACTIVITY_STATE_NULL
}

func (m *ActivityElement) GetActivityType() int32 {
	if m != nil {
		return m.ActivityType
	}
	return 0
}

func (m *ActivityElement) GetStartDate() int32 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *ActivityElement) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ActivityElement) GetEndDate() int32 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *ActivityElement) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ActivityElement) GetChannelType() int32 {
	if m != nil {
		return m.ChannelType
	}
	return 0
}

func (m *ActivityElement) GetParameterList() []*ActivityParameter {
	if m != nil {
		return m.ParameterList
	}
	return nil
}

func (m *ActivityElement) GetRoleType() []int32 {
	if m != nil {
		return m.RoleType
	}
	return nil
}

type SecretFileMap struct {
	FileMap              map[int32]uint32 `protobuf:"bytes,1,rep,name=file_map,json=fileMap,proto3" json:"file_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SecretFileMap) Reset()         { *m = SecretFileMap{} }
func (m *SecretFileMap) String() string { return proto.CompactTextString(m) }
func (*SecretFileMap) ProtoMessage()    {}
func (*SecretFileMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{144}
}

func (m *SecretFileMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretFileMap.Unmarshal(m, b)
}
func (m *SecretFileMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretFileMap.Marshal(b, m, deterministic)
}
func (m *SecretFileMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretFileMap.Merge(m, src)
}
func (m *SecretFileMap) XXX_Size() int {
	return xxx_messageInfo_SecretFileMap.Size(m)
}
func (m *SecretFileMap) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretFileMap.DiscardUnknown(m)
}

var xxx_messageInfo_SecretFileMap proto.InternalMessageInfo

func (m *SecretFileMap) GetFileMap() map[int32]uint32 {
	if m != nil {
		return m.FileMap
	}
	return nil
}

type ScenceLocation struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScenceId             int32    `protobuf:"varint,2,opt,name=scence_id,json=scenceId,proto3" json:"scence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScenceLocation) Reset()         { *m = ScenceLocation{} }
func (m *ScenceLocation) String() string { return proto.CompactTextString(m) }
func (*ScenceLocation) ProtoMessage()    {}
func (*ScenceLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{145}
}

func (m *ScenceLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScenceLocation.Unmarshal(m, b)
}
func (m *ScenceLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScenceLocation.Marshal(b, m, deterministic)
}
func (m *ScenceLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScenceLocation.Merge(m, src)
}
func (m *ScenceLocation) XXX_Size() int {
	return xxx_messageInfo_ScenceLocation.Size(m)
}
func (m *ScenceLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ScenceLocation.DiscardUnknown(m)
}

var xxx_messageInfo_ScenceLocation proto.InternalMessageInfo

func (m *ScenceLocation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ScenceLocation) GetScenceId() int32 {
	if m != nil {
		return m.ScenceId
	}
	return 0
}

type Crop struct {
	FieldId              uint32   `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	SeedId               uint32   `protobuf:"varint,2,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	SowTime              uint32   `protobuf:"varint,3,opt,name=sow_time,json=sowTime,proto3" json:"sow_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Crop) Reset()         { *m = Crop{} }
func (m *Crop) String() string { return proto.CompactTextString(m) }
func (*Crop) ProtoMessage()    {}
func (*Crop) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{146}
}

func (m *Crop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Crop.Unmarshal(m, b)
}
func (m *Crop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Crop.Marshal(b, m, deterministic)
}
func (m *Crop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crop.Merge(m, src)
}
func (m *Crop) XXX_Size() int {
	return xxx_messageInfo_Crop.Size(m)
}
func (m *Crop) XXX_DiscardUnknown() {
	xxx_messageInfo_Crop.DiscardUnknown(m)
}

var xxx_messageInfo_Crop proto.InternalMessageInfo

func (m *Crop) GetFieldId() uint32 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *Crop) GetSeedId() uint32 {
	if m != nil {
		return m.SeedId
	}
	return 0
}

func (m *Crop) GetSowTime() uint32 {
	if m != nil {
		return m.SowTime
	}
	return 0
}

type Furniture struct {
	Guid                 uint64    `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Id                   uint32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	FieldId              uint32    `protobuf:"varint,3,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	Pos                  *Vector2D `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Furniture) Reset()         { *m = Furniture{} }
func (m *Furniture) String() string { return proto.CompactTextString(m) }
func (*Furniture) ProtoMessage()    {}
func (*Furniture) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{147}
}

func (m *Furniture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Furniture.Unmarshal(m, b)
}
func (m *Furniture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Furniture.Marshal(b, m, deterministic)
}
func (m *Furniture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Furniture.Merge(m, src)
}
func (m *Furniture) XXX_Size() int {
	return xxx_messageInfo_Furniture.Size(m)
}
func (m *Furniture) XXX_DiscardUnknown() {
	xxx_messageInfo_Furniture.DiscardUnknown(m)
}

var xxx_messageInfo_Furniture proto.InternalMessageInfo

func (m *Furniture) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *Furniture) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Furniture) GetFieldId() uint32 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *Furniture) GetPos() *Vector2D {
	if m != nil {
		return m.Pos
	}
	return nil
}

type Homeland struct {
	Id                   uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Scence               []*HomeScence `protobuf:"bytes,2,rep,name=scence,proto3" json:"scence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Homeland) Reset()         { *m = Homeland{} }
func (m *Homeland) String() string { return proto.CompactTextString(m) }
func (*Homeland) ProtoMessage()    {}
func (*Homeland) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{148}
}

func (m *Homeland) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Homeland.Unmarshal(m, b)
}
func (m *Homeland) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Homeland.Marshal(b, m, deterministic)
}
func (m *Homeland) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Homeland.Merge(m, src)
}
func (m *Homeland) XXX_Size() int {
	return xxx_messageInfo_Homeland.Size(m)
}
func (m *Homeland) XXX_DiscardUnknown() {
	xxx_messageInfo_Homeland.DiscardUnknown(m)
}

var xxx_messageInfo_Homeland proto.InternalMessageInfo

func (m *Homeland) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Homeland) GetScence() []*HomeScence {
	if m != nil {
		return m.Scence
	}
	return nil
}

type Vector2D struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector2D) Reset()         { *m = Vector2D{} }
func (m *Vector2D) String() string { return proto.CompactTextString(m) }
func (*Vector2D) ProtoMessage()    {}
func (*Vector2D) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{149}
}

func (m *Vector2D) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector2D.Unmarshal(m, b)
}
func (m *Vector2D) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector2D.Marshal(b, m, deterministic)
}
func (m *Vector2D) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector2D.Merge(m, src)
}
func (m *Vector2D) XXX_Size() int {
	return xxx_messageInfo_Vector2D.Size(m)
}
func (m *Vector2D) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector2D.DiscardUnknown(m)
}

var xxx_messageInfo_Vector2D proto.InternalMessageInfo

func (m *Vector2D) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector2D) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type HomeScence struct {
	Id                   uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayFurniture     []*Furniture    `protobuf:"bytes,2,rep,name=display_furniture,json=displayFurniture,proto3" json:"display_furniture,omitempty"`
	NextData             map[int32]int32 `protobuf:"bytes,3,rep,name=next_data,json=nextData,proto3" json:"next_data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	X                    float32         `protobuf:"fixed32,4,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32         `protobuf:"fixed32,5,opt,name=y,proto3" json:"y,omitempty"`
	ScenceId             int32           `protobuf:"varint,6,opt,name=scence_id,json=scenceId,proto3" json:"scence_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HomeScence) Reset()         { *m = HomeScence{} }
func (m *HomeScence) String() string { return proto.CompactTextString(m) }
func (*HomeScence) ProtoMessage()    {}
func (*HomeScence) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{150}
}

func (m *HomeScence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HomeScence.Unmarshal(m, b)
}
func (m *HomeScence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HomeScence.Marshal(b, m, deterministic)
}
func (m *HomeScence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeScence.Merge(m, src)
}
func (m *HomeScence) XXX_Size() int {
	return xxx_messageInfo_HomeScence.Size(m)
}
func (m *HomeScence) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeScence.DiscardUnknown(m)
}

var xxx_messageInfo_HomeScence proto.InternalMessageInfo

func (m *HomeScence) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HomeScence) GetDisplayFurniture() []*Furniture {
	if m != nil {
		return m.DisplayFurniture
	}
	return nil
}

func (m *HomeScence) GetNextData() map[int32]int32 {
	if m != nil {
		return m.NextData
	}
	return nil
}

func (m *HomeScence) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *HomeScence) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *HomeScence) GetScenceId() int32 {
	if m != nil {
		return m.ScenceId
	}
	return 0
}

type PVPMatchPlayerInfo struct {
	PlayerGuid           int64    `protobuf:"varint,1,opt,name=player_guid,json=playerGuid,proto3" json:"player_guid,omitempty"`
	MatchTimestamp       int32    `protobuf:"varint,2,opt,name=match_timestamp,json=matchTimestamp,proto3" json:"match_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PVPMatchPlayerInfo) Reset()         { *m = PVPMatchPlayerInfo{} }
func (m *PVPMatchPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PVPMatchPlayerInfo) ProtoMessage()    {}
func (*PVPMatchPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{151}
}

func (m *PVPMatchPlayerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PVPMatchPlayerInfo.Unmarshal(m, b)
}
func (m *PVPMatchPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PVPMatchPlayerInfo.Marshal(b, m, deterministic)
}
func (m *PVPMatchPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PVPMatchPlayerInfo.Merge(m, src)
}
func (m *PVPMatchPlayerInfo) XXX_Size() int {
	return xxx_messageInfo_PVPMatchPlayerInfo.Size(m)
}
func (m *PVPMatchPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PVPMatchPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PVPMatchPlayerInfo proto.InternalMessageInfo

func (m *PVPMatchPlayerInfo) GetPlayerGuid() int64 {
	if m != nil {
		return m.PlayerGuid
	}
	return 0
}

func (m *PVPMatchPlayerInfo) GetMatchTimestamp() int32 {
	if m != nil {
		return m.MatchTimestamp
	}
	return 0
}

type GlobalBossInfo struct {
	BossId               int32    `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalBossInfo) Reset()         { *m = GlobalBossInfo{} }
func (m *GlobalBossInfo) String() string { return proto.CompactTextString(m) }
func (*GlobalBossInfo) ProtoMessage()    {}
func (*GlobalBossInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{152}
}

func (m *GlobalBossInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalBossInfo.Unmarshal(m, b)
}
func (m *GlobalBossInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalBossInfo.Marshal(b, m, deterministic)
}
func (m *GlobalBossInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalBossInfo.Merge(m, src)
}
func (m *GlobalBossInfo) XXX_Size() int {
	return xxx_messageInfo_GlobalBossInfo.Size(m)
}
func (m *GlobalBossInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalBossInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalBossInfo proto.InternalMessageInfo

func (m *GlobalBossInfo) GetBossId() int32 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *GlobalBossInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EndPointInfo struct {
	Port                 int32    `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	StrAddress           string   `protobuf:"bytes,2,opt,name=str_address,json=strAddress,proto3" json:"str_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndPointInfo) Reset()         { *m = EndPointInfo{} }
func (m *EndPointInfo) String() string { return proto.CompactTextString(m) }
func (*EndPointInfo) ProtoMessage()    {}
func (*EndPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{153}
}

func (m *EndPointInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndPointInfo.Unmarshal(m, b)
}
func (m *EndPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndPointInfo.Marshal(b, m, deterministic)
}
func (m *EndPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndPointInfo.Merge(m, src)
}
func (m *EndPointInfo) XXX_Size() int {
	return xxx_messageInfo_EndPointInfo.Size(m)
}
func (m *EndPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EndPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EndPointInfo proto.InternalMessageInfo

func (m *EndPointInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EndPointInfo) GetStrAddress() string {
	if m != nil {
		return m.StrAddress
	}
	return ""
}

type HorseRaceInfo struct {
	Language             LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=Adoter.Asset.LanguageType" json:"language,omitempty"`
	Content              string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HorseRaceInfo) Reset()         { *m = HorseRaceInfo{} }
func (m *HorseRaceInfo) String() string { return proto.CompactTextString(m) }
func (*HorseRaceInfo) ProtoMessage()    {}
func (*HorseRaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{154}
}

func (m *HorseRaceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HorseRaceInfo.Unmarshal(m, b)
}
func (m *HorseRaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HorseRaceInfo.Marshal(b, m, deterministic)
}
func (m *HorseRaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HorseRaceInfo.Merge(m, src)
}
func (m *HorseRaceInfo) XXX_Size() int {
	return xxx_messageInfo_HorseRaceInfo.Size(m)
}
func (m *HorseRaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HorseRaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HorseRaceInfo proto.InternalMessageInfo

func (m *HorseRaceInfo) GetLanguage() LanguageType {
	if m != nil {
		return m.Language
	}
	return LanguageType_Language_None
}

func (m *HorseRaceInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type DropReward struct {
	FixedReward          []*WeightItemSlotWrap `protobuf:"bytes,1,rep,name=fixed_reward,json=fixedReward,proto3" json:"fixed_reward,omitempty"`
	RandomReward         []*WeightItemSlotWrap `protobuf:"bytes,2,rep,name=random_reward,json=randomReward,proto3" json:"random_reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DropReward) Reset()         { *m = DropReward{} }
func (m *DropReward) String() string { return proto.CompactTextString(m) }
func (*DropReward) ProtoMessage()    {}
func (*DropReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{155}
}

func (m *DropReward) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DropReward.Unmarshal(m, b)
}
func (m *DropReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DropReward.Marshal(b, m, deterministic)
}
func (m *DropReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropReward.Merge(m, src)
}
func (m *DropReward) XXX_Size() int {
	return xxx_messageInfo_DropReward.Size(m)
}
func (m *DropReward) XXX_DiscardUnknown() {
	xxx_messageInfo_DropReward.DiscardUnknown(m)
}

var xxx_messageInfo_DropReward proto.InternalMessageInfo

func (m *DropReward) GetFixedReward() []*WeightItemSlotWrap {
	if m != nil {
		return m.FixedReward
	}
	return nil
}

func (m *DropReward) GetRandomReward() []*WeightItemSlotWrap {
	if m != nil {
		return m.RandomReward
	}
	return nil
}

type AccRechargeInfo struct {
	Amount               uint32   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	GainIndex            []int32  `protobuf:"varint,2,rep,packed,name=gain_index,json=gainIndex,proto3" json:"gain_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccRechargeInfo) Reset()         { *m = AccRechargeInfo{} }
func (m *AccRechargeInfo) String() string { return proto.CompactTextString(m) }
func (*AccRechargeInfo) ProtoMessage()    {}
func (*AccRechargeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{156}
}

func (m *AccRechargeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccRechargeInfo.Unmarshal(m, b)
}
func (m *AccRechargeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccRechargeInfo.Marshal(b, m, deterministic)
}
func (m *AccRechargeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccRechargeInfo.Merge(m, src)
}
func (m *AccRechargeInfo) XXX_Size() int {
	return xxx_messageInfo_AccRechargeInfo.Size(m)
}
func (m *AccRechargeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccRechargeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccRechargeInfo proto.InternalMessageInfo

func (m *AccRechargeInfo) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AccRechargeInfo) GetGainIndex() []int32 {
	if m != nil {
		return m.GainIndex
	}
	return nil
}

type AccRechargeActivity struct {
	ActivityId           uint32           `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Info                 *AccRechargeInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AccRechargeActivity) Reset()         { *m = AccRechargeActivity{} }
func (m *AccRechargeActivity) String() string { return proto.CompactTextString(m) }
func (*AccRechargeActivity) ProtoMessage()    {}
func (*AccRechargeActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{157}
}

func (m *AccRechargeActivity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccRechargeActivity.Unmarshal(m, b)
}
func (m *AccRechargeActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccRechargeActivity.Marshal(b, m, deterministic)
}
func (m *AccRechargeActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccRechargeActivity.Merge(m, src)
}
func (m *AccRechargeActivity) XXX_Size() int {
	return xxx_messageInfo_AccRechargeActivity.Size(m)
}
func (m *AccRechargeActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_AccRechargeActivity.DiscardUnknown(m)
}

var xxx_messageInfo_AccRechargeActivity proto.InternalMessageInfo

func (m *AccRechargeActivity) GetActivityId() uint32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *AccRechargeActivity) GetInfo() *AccRechargeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type WrapInt struct {
	Data                 int32    `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WrapInt) Reset()         { *m = WrapInt{} }
func (m *WrapInt) String() string { return proto.CompactTextString(m) }
func (*WrapInt) ProtoMessage()    {}
func (*WrapInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e731496f775310, []int{158}
}

func (m *WrapInt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WrapInt.Unmarshal(m, b)
}
func (m *WrapInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WrapInt.Marshal(b, m, deterministic)
}
func (m *WrapInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrapInt.Merge(m, src)
}
func (m *WrapInt) XXX_Size() int {
	return xxx_messageInfo_WrapInt.Size(m)
}
func (m *WrapInt) XXX_DiscardUnknown() {
	xxx_messageInfo_WrapInt.DiscardUnknown(m)
}

var xxx_messageInfo_WrapInt proto.InternalMessageInfo

func (m *WrapInt) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterEnum("Adoter.Asset.EntitySpawnType", EntitySpawnType_name, EntitySpawnType_value)
	proto.RegisterEnum("Adoter.Asset.EquipmentSpecial", EquipmentSpecial_name, EquipmentSpecial_value)
	proto.RegisterEnum("Adoter.Asset.LevelDifficulty", LevelDifficulty_name, LevelDifficulty_value)
	proto.RegisterEnum("Adoter.Asset.EMailboxType", EMailboxType_name, EMailboxType_value)
	proto.RegisterEnum("Adoter.Asset.GameSystemType", GameSystemType_name, GameSystemType_value)
	proto.RegisterEnum("Adoter.Asset.EMoneyType", EMoneyType_name, EMoneyType_value)
	proto.RegisterEnum("Adoter.Asset.EMailState", EMailState_name, EMailState_value)
	proto.RegisterEnum("Adoter.Asset.HandbookQuestType", HandbookQuestType_name, HandbookQuestType_value)
	proto.RegisterEnum("Adoter.Asset.ItemType", ItemType_name, ItemType_value)
	proto.RegisterEnum("Adoter.Asset.MaterialType", MaterialType_name, MaterialType_value)
	proto.RegisterEnum("Adoter.Asset.ETypeItem", ETypeItem_name, ETypeItem_value)
	proto.RegisterEnum("Adoter.Asset.GameDungeonDirection", GameDungeonDirection_name, GameDungeonDirection_value)
	proto.RegisterEnum("Adoter.Asset.UnitSubType", UnitSubType_name, UnitSubType_value)
	proto.RegisterEnum("Adoter.Asset.GameQuestActionType", GameQuestActionType_name, GameQuestActionType_value)
	proto.RegisterEnum("Adoter.Asset.GameConditionOperator", GameConditionOperator_name, GameConditionOperator_value)
	proto.RegisterEnum("Adoter.Asset.GameConditionType", GameConditionType_name, GameConditionType_value)
	proto.RegisterEnum("Adoter.Asset.QuestStatus", QuestStatus_name, QuestStatus_value)
	proto.RegisterEnum("Adoter.Asset.GameQuestRepeatType", GameQuestRepeatType_name, GameQuestRepeatType_value)
	proto.RegisterEnum("Adoter.Asset.GameQuestType", GameQuestType_name, GameQuestType_value)
	proto.RegisterEnum("Adoter.Asset.EGameRoomType", EGameRoomType_name, EGameRoomType_value)
	proto.RegisterEnum("Adoter.Asset.EEntranceState", EEntranceState_name, EEntranceState_value)
	proto.RegisterEnum("Adoter.Asset.EGameRoomState", EGameRoomState_name, EGameRoomState_value)
	proto.RegisterEnum("Adoter.Asset.ESlotState", ESlotState_name, ESlotState_value)
	proto.RegisterEnum("Adoter.Asset.LuckyCritType", LuckyCritType_name, LuckyCritType_value)
	proto.RegisterEnum("Adoter.Asset.EquipmentSexLimit", EquipmentSexLimit_name, EquipmentSexLimit_value)
	proto.RegisterEnum("Adoter.Asset.UnitCareerType1", UnitCareerType1_name, UnitCareerType1_value)
	proto.RegisterEnum("Adoter.Asset.NumericType", NumericType_name, NumericType_value)
	proto.RegisterEnum("Adoter.Asset.HandBookType", HandBookType_name, HandBookType_value)
	proto.RegisterEnum("Adoter.Asset.UnitType", UnitType_name, UnitType_value)
	proto.RegisterEnum("Adoter.Asset.UnitElementType", UnitElementType_name, UnitElementType_value)
	proto.RegisterEnum("Adoter.Asset.GENDER_TYPE", GENDER_TYPE_name, GENDER_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.TIME_OUT_TYPE", TIME_OUT_TYPE_name, TIME_OUT_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.TXN_TYPE", TXN_TYPE_name, TXN_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.TXN_RESULT", TXN_RESULT_name, TXN_RESULT_value)
	proto.RegisterEnum("Adoter.Asset.PROP_TYPE", PROP_TYPE_name, PROP_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.BATTLE_PASS_LEVEL", BATTLE_PASS_LEVEL_name, BATTLE_PASS_LEVEL_value)
	proto.RegisterEnum("Adoter.Asset.SIN_THREAT", SIN_THREAT_name, SIN_THREAT_value)
	proto.RegisterEnum("Adoter.Asset.REPUTATION_TYPE", REPUTATION_TYPE_name, REPUTATION_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.MAIL_TYPE", MAIL_TYPE_name, MAIL_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.PVP_REWARD_TYPE", PVP_REWARD_TYPE_name, PVP_REWARD_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.MONTH_CARD_TYPE", MONTH_CARD_TYPE_name, MONTH_CARD_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.CLAN_POS", CLAN_POS_name, CLAN_POS_value)
	proto.RegisterEnum("Adoter.Asset.CLAN_OPER_TYPE", CLAN_OPER_TYPE_name, CLAN_OPER_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.META_DATA_TYPE", META_DATA_TYPE_name, META_DATA_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.CLAN_REPUTATION_TYPE", CLAN_REPUTATION_TYPE_name, CLAN_REPUTATION_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.SERVER_REPUTATION_TYPE", SERVER_REPUTATION_TYPE_name, SERVER_REPUTATION_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.INVENTORY_TYPE", INVENTORY_TYPE_name, INVENTORY_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.STICKER_TYPE", STICKER_TYPE_name, STICKER_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.SYSTEM_MESSAGE_TYPE", SYSTEM_MESSAGE_TYPE_name, SYSTEM_MESSAGE_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.BATTLE_BI_TYPE", BATTLE_BI_TYPE_name, BATTLE_BI_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.PartyType", PartyType_name, PartyType_value)
	proto.RegisterEnum("Adoter.Asset.PartyLocation", PartyLocation_name, PartyLocation_value)
	proto.RegisterEnum("Adoter.Asset.FUNCTION_UNLOCK", FUNCTION_UNLOCK_name, FUNCTION_UNLOCK_value)
	proto.RegisterEnum("Adoter.Asset.LocationType", LocationType_name, LocationType_value)
	proto.RegisterEnum("Adoter.Asset.PartyGenType", PartyGenType_name, PartyGenType_value)
	proto.RegisterEnum("Adoter.Asset.SkillEnum", SkillEnum_name, SkillEnum_value)
	proto.RegisterEnum("Adoter.Asset.NPCEventType", NPCEventType_name, NPCEventType_value)
	proto.RegisterEnum("Adoter.Asset.RechargeType", RechargeType_name, RechargeType_value)
	proto.RegisterEnum("Adoter.Asset.ShopDisplayType", ShopDisplayType_name, ShopDisplayType_value)
	proto.RegisterEnum("Adoter.Asset.DeliverType", DeliverType_name, DeliverType_value)
	proto.RegisterEnum("Adoter.Asset.ScrollFunctionType", ScrollFunctionType_name, ScrollFunctionType_value)
	proto.RegisterEnum("Adoter.Asset.PlayMode1", PlayMode1_name, PlayMode1_value)
	proto.RegisterEnum("Adoter.Asset.EndlessShopType", EndlessShopType_name, EndlessShopType_value)
	proto.RegisterEnum("Adoter.Asset.ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterEnum("Adoter.Asset.LevelChallengeType", LevelChallengeType_name, LevelChallengeType_value)
	proto.RegisterEnum("Adoter.Asset.BlessNumType", BlessNumType_name, BlessNumType_value)
	proto.RegisterEnum("Adoter.Asset.FunType", FunType_name, FunType_value)
	proto.RegisterEnum("Adoter.Asset.DropExtendType", DropExtendType_name, DropExtendType_value)
	proto.RegisterEnum("Adoter.Asset.SkinSelectType", SkinSelectType_name, SkinSelectType_value)
	proto.RegisterEnum("Adoter.Asset.CorpsMemberType", CorpsMemberType_name, CorpsMemberType_value)
	proto.RegisterEnum("Adoter.Asset.CORPS_REPU_TYPE", CORPS_REPU_TYPE_name, CORPS_REPU_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.HuantiAssistOperType", HuantiAssistOperType_name, HuantiAssistOperType_value)
	proto.RegisterEnum("Adoter.Asset.QuestGroup", QuestGroup_name, QuestGroup_value)
	proto.RegisterEnum("Adoter.Asset.PVPStatus", PVPStatus_name, PVPStatus_value)
	proto.RegisterEnum("Adoter.Asset.PVPLJCurrencyStatus", PVPLJCurrencyStatus_name, PVPLJCurrencyStatus_value)
	proto.RegisterEnum("Adoter.Asset.PVPFightType", PVPFightType_name, PVPFightType_value)
	proto.RegisterEnum("Adoter.Asset.ACTIVITY_STATE", ACTIVITY_STATE_name, ACTIVITY_STATE_value)
	proto.RegisterEnum("Adoter.Asset.ACTIVITY_TYPE", ACTIVITY_TYPE_name, ACTIVITY_TYPE_value)
	proto.RegisterEnum("Adoter.Asset.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("Adoter.Asset.CropsOperType", CropsOperType_name, CropsOperType_value)
	proto.RegisterEnum("Adoter.Asset.FurnitureOperType", FurnitureOperType_name, FurnitureOperType_value)
	proto.RegisterEnum("Adoter.Asset.BossType", BossType_name, BossType_value)
	proto.RegisterEnum("Adoter.Asset.HomelandOperType", HomelandOperType_name, HomelandOperType_value)
	proto.RegisterEnum("Adoter.Asset.RoomUnitDirType", RoomUnitDirType_name, RoomUnitDirType_value)
	proto.RegisterEnum("Adoter.Asset.RoomUnitShowType", RoomUnitShowType_name, RoomUnitShowType_value)
	proto.RegisterEnum("Adoter.Asset.UnitTag", UnitTag_name, UnitTag_value)
	proto.RegisterEnum("Adoter.Asset.LanguageType", LanguageType_name, LanguageType_value)
	proto.RegisterEnum("Adoter.Asset.AccRechargeOpType", AccRechargeOpType_name, AccRechargeOpType_value)
	proto.RegisterEnum("Adoter.Asset.GlobalDeductLongYinOpType", GlobalDeductLongYinOpType_name, GlobalDeductLongYinOpType_value)
	proto.RegisterType((*PBAppearInfo)(nil), "Adoter.Asset.PBAppearInfo")
	proto.RegisterType((*Vector3D)(nil), "Adoter.Asset.Vector3D")
	proto.RegisterType((*WeightSlot)(nil), "Adoter.Asset.WeightSlot")
	proto.RegisterType((*MultiWeightSlot)(nil), "Adoter.Asset.MultiWeightSlot")
	proto.RegisterType((*DifficultyDropWeightSlot)(nil), "Adoter.Asset.DifficultyDropWeightSlot")
	proto.RegisterType((*DifficultyItemSlot)(nil), "Adoter.Asset.DifficultyItemSlot")
	proto.RegisterType((*PBMoneyAmount)(nil), "Adoter.Asset.PBMoneyAmount")
	proto.RegisterType((*PBMessageHeader)(nil), "Adoter.Asset.PBMessageHeader")
	proto.RegisterType((*GameEquipment)(nil), "Adoter.Asset.GameEquipment")
	proto.RegisterType((*GameRandomRangeAttributeSlot)(nil), "Adoter.Asset.GameRandomRangeAttributeSlot")
	proto.RegisterType((*GameScroll)(nil), "Adoter.Asset.GameScroll")
	proto.RegisterMapType((map[uint32]int32)(nil), "Adoter.Asset.GameScroll.SkilldAttributesEntry")
	proto.RegisterType((*QuestFinishInfo)(nil), "Adoter.Asset.QuestFinishInfo")
	proto.RegisterType((*GameQuestPair)(nil), "Adoter.Asset.GameQuestPair")
	proto.RegisterType((*GameConditionDataGroup)(nil), "Adoter.Asset.GameConditionDataGroup")
	proto.RegisterType((*GameQuestInfo)(nil), "Adoter.Asset.GameQuestInfo")
	proto.RegisterType((*QuestRecord)(nil), "Adoter.Asset.QuestRecord")
	proto.RegisterType((*GameConditionDataWrapEx)(nil), "Adoter.Asset.GameConditionDataWrapEx")
	proto.RegisterType((*GameEquipmentAttributeSet)(nil), "Adoter.Asset.GameEquipmentAttributeSet")
	proto.RegisterType((*GameShopItem)(nil), "Adoter.Asset.GameShopItem")
	proto.RegisterType((*UnitPropertyWeightSlot)(nil), "Adoter.Asset.UnitPropertyWeightSlot")
	proto.RegisterType((*GameConditionData)(nil), "Adoter.Asset.GameConditionData")
	proto.RegisterType((*GenreEquipment)(nil), "Adoter.Asset.GenreEquipment")
	proto.RegisterType((*GenreScroll)(nil), "Adoter.Asset.GenreScroll")
	proto.RegisterType((*GenreSecondaryScroll)(nil), "Adoter.Asset.GenreSecondaryScroll")
	proto.RegisterType((*GenreSkill)(nil), "Adoter.Asset.GenreSkill")
	proto.RegisterType((*GenreSkin)(nil), "Adoter.Asset.GenreSkin")
	proto.RegisterType((*GameGenre)(nil), "Adoter.Asset.GameGenre")
	proto.RegisterMapType((map[uint32]*SkinPropSelect)(nil), "Adoter.Asset.GameGenre.SkinPropSelectEntry")
	proto.RegisterType((*GameEquipmentAttribute)(nil), "Adoter.Asset.GameEquipmentAttribute")
	proto.RegisterType((*GameItemList)(nil), "Adoter.Asset.GameItemList")
	proto.RegisterType((*GameItem)(nil), "Adoter.Asset.GameItem")
	proto.RegisterType((*PBItemData)(nil), "Adoter.Asset.PBItemData")
	proto.RegisterType((*ItemSlot)(nil), "Adoter.Asset.ItemSlot")
	proto.RegisterType((*GUIDItemSlot)(nil), "Adoter.Asset.GUIDItemSlot")
	proto.RegisterType((*PBGuidList)(nil), "Adoter.Asset.PBGuidList")
	proto.RegisterType((*PlayerInventory)(nil), "Adoter.Asset.PlayerInventory")
	proto.RegisterType((*PlayerCommonLimit)(nil), "Adoter.Asset.PlayerCommonLimit")
	proto.RegisterType((*PlayerCoolDown)(nil), "Adoter.Asset.PlayerCoolDown")
	proto.RegisterType((*PlayerAchievement)(nil), "Adoter.Asset.PlayerAchievement")
	proto.RegisterType((*PlayerReputation)(nil), "Adoter.Asset.PlayerReputation")
	proto.RegisterType((*PlayerAutoReward)(nil), "Adoter.Asset.PlayerAutoReward")
	proto.RegisterType((*ShopItem)(nil), "Adoter.Asset.ShopItem")
	proto.RegisterType((*Shop)(nil), "Adoter.Asset.Shop")
	proto.RegisterType((*PlayerMail)(nil), "Adoter.Asset.PlayerMail")
	proto.RegisterType((*PlayerFriend)(nil), "Adoter.Asset.PlayerFriend")
	proto.RegisterType((*PlayerBlack)(nil), "Adoter.Asset.PlayerBlack")
	proto.RegisterType((*ItemElement)(nil), "Adoter.Asset.ItemElement")
	proto.RegisterType((*PlayerUpdate)(nil), "Adoter.Asset.PlayerUpdate")
	proto.RegisterType((*TXN)(nil), "Adoter.Asset.TXN")
	proto.RegisterType((*PlayerTxn)(nil), "Adoter.Asset.PlayerTxn")
	proto.RegisterType((*PlayerTxnTimeOut)(nil), "Adoter.Asset.PlayerTxnTimeOut")
	proto.RegisterType((*PlayerRankReward)(nil), "Adoter.Asset.PlayerRankReward")
	proto.RegisterType((*PropMap)(nil), "Adoter.Asset.PropMap")
	proto.RegisterMapType((map[string]float32)(nil), "Adoter.Asset.PropMap.PropEntry")
	proto.RegisterType((*PlayerSkill)(nil), "Adoter.Asset.PlayerSkill")
	proto.RegisterType((*PlayerProperty)(nil), "Adoter.Asset.PlayerProperty")
	proto.RegisterMapType((map[uint32]*PropMap)(nil), "Adoter.Asset.PlayerProperty.PropListEntry")
	proto.RegisterMapType((map[uint32]int64)(nil), "Adoter.Asset.PlayerProperty.ScoreListEntry")
	proto.RegisterType((*PlayerRecharge)(nil), "Adoter.Asset.PlayerRecharge")
	proto.RegisterType((*PlayerShopItem)(nil), "Adoter.Asset.PlayerShopItem")
	proto.RegisterType((*SkinProp)(nil), "Adoter.Asset.SkinProp")
	proto.RegisterType((*SkinPropSelect)(nil), "Adoter.Asset.SkinPropSelect")
	proto.RegisterType((*PlayerEndlessTime)(nil), "Adoter.Asset.PlayerEndlessTime")
	proto.RegisterType((*PlayerBattlePassElement)(nil), "Adoter.Asset.PlayerBattlePassElement")
	proto.RegisterType((*PlayerBattlePass)(nil), "Adoter.Asset.PlayerBattlePass")
	proto.RegisterType((*BattleStatistics)(nil), "Adoter.Asset.BattleStatistics")
	proto.RegisterType((*PlayerFood)(nil), "Adoter.Asset.PlayerFood")
	proto.RegisterType((*GameHero)(nil), "Adoter.Asset.GameHero")
	proto.RegisterMapType((map[int64]*CorpsApply)(nil), "Adoter.Asset.GameHero.ApplyCorpsListEntry")
	proto.RegisterMapType((map[uint32]*PlayerCoolDown)(nil), "Adoter.Asset.GameHero.CooldownListEntry")
	proto.RegisterMapType((map[int64]*CorpsApply)(nil), "Adoter.Asset.GameHero.CorpsInviteListEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "Adoter.Asset.GameHero.EnemyHandbookListEntry")
	proto.RegisterMapType((map[uint32]int64)(nil), "Adoter.Asset.GameHero.EnterLevelTimesEntry")
	proto.RegisterMapType((map[uint64]*EquipHandBook)(nil), "Adoter.Asset.GameHero.EquipHandbookEntry")
	proto.RegisterMapType((map[uint32]*LevelRecord)(nil), "Adoter.Asset.GameHero.FinishedLevelTimesEntry")
	proto.RegisterMapType((map[uint32]*LevelRecord)(nil), "Adoter.Asset.GameHero.FinishedLocationTimesEntry")
	proto.RegisterMapType((map[uint64]int32)(nil), "Adoter.Asset.GameHero.HelpersEntry")
	proto.RegisterMapType((map[uint32]*PlayerInventory)(nil), "Adoter.Asset.GameHero.InventoryEntry")
	proto.RegisterMapType((map[uint32]*DungeonCellData)(nil), "Adoter.Asset.GameHero.LevelBossEntry")
	proto.RegisterMapType((map[uint64]*GameMailNode)(nil), "Adoter.Asset.GameHero.MailListsEntry")
	proto.RegisterMapType((map[uint32]*PlayerRecharge)(nil), "Adoter.Asset.GameHero.RechargeListEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "Adoter.Asset.GameHero.RegularMailEntry")
	proto.RegisterMapType((map[uint32]*PlayerReputation)(nil), "Adoter.Asset.GameHero.RepuListEntry")
	proto.RegisterMapType((map[uint32]int64)(nil), "Adoter.Asset.GameHero.RepuTotalValueEntry")
	proto.RegisterMapType((map[uint64]*ScrollHandBook)(nil), "Adoter.Asset.GameHero.ScrollHandbookEntry")
	proto.RegisterMapType((map[int32]*SecretFileMap)(nil), "Adoter.Asset.GameHero.SecretfileMapEntry")
	proto.RegisterMapType((map[int32]*Shop)(nil), "Adoter.Asset.GameHero.ShopInfoEntry")
	proto.RegisterMapType((map[uint32]*PlayerShopItem)(nil), "Adoter.Asset.GameHero.ShopItemListEntry")
	proto.RegisterMapType((map[uint64]int32)(nil), "Adoter.Asset.GameHero.SinPlayersEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "Adoter.Asset.GameHero.SinThreatEntry")
	proto.RegisterMapType((map[uint32]int32)(nil), "Adoter.Asset.GameHero.SkillsEntry")
	proto.RegisterMapType((map[uint32]*SkinPropSelect)(nil), "Adoter.Asset.GameHero.SkinPropSelectEntry")
	proto.RegisterMapType((map[int32]int32)(nil), "Adoter.Asset.GameHero.UpdateListEntry")
	proto.RegisterMapType((map[uint32]*BattleStatistics)(nil), "Adoter.Asset.GameHero.WorldBossBattleStatisticsEntry")
	proto.RegisterMapType((map[uint32]*DynamicActivity)(nil), "Adoter.Asset.GameHero.ZhaohuiMailListEntry")
	proto.RegisterMapType((map[uint32]*DynamicActivity)(nil), "Adoter.Asset.GameHero.ZhaohuiMailListNewEntry")
	proto.RegisterType((*Endless_ExtendData)(nil), "Adoter.Asset.Endless_ExtendData")
	proto.RegisterType((*GameAiHelper)(nil), "Adoter.Asset.GameAiHelper")
	proto.RegisterMapType((map[uint32]int32)(nil), "Adoter.Asset.GameAiHelper.SkillsEntry")
	proto.RegisterMapType((map[uint32]*SkinPropSelect)(nil), "Adoter.Asset.GameAiHelper.SkinPropSelectEntry")
	proto.RegisterType((*HeroSelectionItem)(nil), "Adoter.Asset.HeroSelectionItem")
	proto.RegisterType((*LevelRecord)(nil), "Adoter.Asset.LevelRecord")
	proto.RegisterType((*ServerWorld)(nil), "Adoter.Asset.ServerWorld")
	proto.RegisterType((*ServerItem)(nil), "Adoter.Asset.ServerItem")
	proto.RegisterType((*DungeonCellData)(nil), "Adoter.Asset.DungeonCellData")
	proto.RegisterMapType((map[uint64]*RoomEntitySpawnData)(nil), "Adoter.Asset.DungeonCellData.BoxRewardsEntry")
	proto.RegisterType((*RoomDungeonCellData)(nil), "Adoter.Asset.RoomDungeonCellData")
	proto.RegisterMapType((map[int32]*RoomDungeonCellData)(nil), "Adoter.Asset.RoomDungeonCellData.ChildsEntry")
	proto.RegisterType((*EntitySpawnData)(nil), "Adoter.Asset.EntitySpawnData")
	proto.RegisterType((*RoomEntitySpawnData)(nil), "Adoter.Asset.RoomEntitySpawnData")
	proto.RegisterType((*Condition)(nil), "Adoter.Asset.condition")
	proto.RegisterType((*LevelChallenge)(nil), "Adoter.Asset.LevelChallenge")
	proto.RegisterType((*GameMailNode)(nil), "Adoter.Asset.GameMailNode")
	proto.RegisterType((*PBPlayerTinyInfo)(nil), "Adoter.Asset.PBPlayerTinyInfo")
	proto.RegisterType((*PlayerRechargeOtherSkin)(nil), "Adoter.Asset.PlayerRechargeOtherSkin")
	proto.RegisterType((*GamePlayer)(nil), "Adoter.Asset.GamePlayer")
	proto.RegisterMapType((map[uint32]*PlayerReputation)(nil), "Adoter.Asset.GamePlayer.RepuListEntry")
	proto.RegisterMapType((map[uint32]*PlayerInventory)(nil), "Adoter.Asset.GamePlayer.StorageListEntry")
	proto.RegisterType((*WeightItemSlotWrap)(nil), "Adoter.Asset.WeightItemSlotWrap")
	proto.RegisterType((*WeightRangeItemSlot)(nil), "Adoter.Asset.WeightRangeItemSlot")
	proto.RegisterType((*RangeItemSlot)(nil), "Adoter.Asset.RangeItemSlot")
	proto.RegisterType((*PBPlayerVipInfo)(nil), "Adoter.Asset.PBPlayerVipInfo")
	proto.RegisterType((*PBHeroRoomData)(nil), "Adoter.Asset.PBHeroRoomData")
	proto.RegisterType((*Item_Item)(nil), "Adoter.Asset.Item_Item")
	proto.RegisterType((*Redis_Item_CommonProp)(nil), "Adoter.Asset.Redis_Item_CommonProp")
	proto.RegisterMapType((map[uint32]float32)(nil), "Adoter.Asset.Redis_Item_CommonProp.PropListEntry")
	proto.RegisterMapType((map[int32]*ScrollNode)(nil), "Adoter.Asset.Redis_Item_CommonProp.ScrollNodeEntry")
	proto.RegisterMapType((map[uint32]*SkilldAttribute)(nil), "Adoter.Asset.Redis_Item_CommonProp.SkilldAttributesEntry")
	proto.RegisterType((*SkilldAttribute)(nil), "Adoter.Asset.SkilldAttribute")
	proto.RegisterType((*GuardSkilldAttribute)(nil), "Adoter.Asset.GuardSkilldAttribute")
	proto.RegisterType((*SkinAttribute)(nil), "Adoter.Asset.SkinAttribute")
	proto.RegisterType((*OwnAttribute)(nil), "Adoter.Asset.OwnAttribute")
	proto.RegisterType((*RuneSlot)(nil), "Adoter.Asset.RuneSlot")
	proto.RegisterType((*Friend_Element)(nil), "Adoter.Asset.Friend_Element")
	proto.RegisterType((*Friend_ApplyElement)(nil), "Adoter.Asset.Friend_ApplyElement")
	proto.RegisterType((*Friend_GiftElement)(nil), "Adoter.Asset.Friend_GiftElement")
	proto.RegisterType((*GameFriend)(nil), "Adoter.Asset.GameFriend")
	proto.RegisterMapType((map[uint64]*Friend_ApplyElement)(nil), "Adoter.Asset.GameFriend.AppliantListEntry")
	proto.RegisterMapType((map[uint64]*Friend_Element)(nil), "Adoter.Asset.GameFriend.FriendListEntry")
	proto.RegisterMapType((map[uint32]*Friend_GiftElement)(nil), "Adoter.Asset.GameFriend.GiftListEntry")
	proto.RegisterMapType((map[uint64]int32)(nil), "Adoter.Asset.GameFriend.PresentListEntry")
	proto.RegisterType((*SinFightRecord)(nil), "Adoter.Asset.SinFightRecord")
	proto.RegisterType((*SinResultRecord)(nil), "Adoter.Asset.SinResultRecord")
	proto.RegisterType((*SinFightInfo)(nil), "Adoter.Asset.SinFightInfo")
	proto.RegisterType((*PVPFightInfo)(nil), "Adoter.Asset.PVPFightInfo")
	proto.RegisterType((*MatchList)(nil), "Adoter.Asset.MatchList")
	proto.RegisterMapType((map[uint64]int32)(nil), "Adoter.Asset.MatchList.ListEntry")
	proto.RegisterType((*SinThreatInfo)(nil), "Adoter.Asset.SinThreatInfo")
	proto.RegisterType((*AdvanceSkillInfo)(nil), "Adoter.Asset.AdvanceSkillInfo")
	proto.RegisterMapType((map[uint32]int32)(nil), "Adoter.Asset.AdvanceSkillInfo.SkillsEntry")
	proto.RegisterType((*EventContent)(nil), "Adoter.Asset.EventContent")
	proto.RegisterType((*StateAvatar)(nil), "Adoter.Asset.StateAvatar")
	proto.RegisterType((*MagicFindValue)(nil), "Adoter.Asset.MagicFindValue")
	proto.RegisterType((*RangeElement)(nil), "Adoter.Asset.RangeElement")
	proto.RegisterType((*MapIntInt)(nil), "Adoter.Asset.MapIntInt")
	proto.RegisterType((*ScrollHandBook)(nil), "Adoter.Asset.ScrollHandBook")
	proto.RegisterType((*EquipHandBook)(nil), "Adoter.Asset.EquipHandBook")
	proto.RegisterType((*MapLongF)(nil), "Adoter.Asset.MapLongF")
	proto.RegisterType((*LevelData)(nil), "Adoter.Asset.LevelData")
	proto.RegisterType((*EndlessData)(nil), "Adoter.Asset.EndlessData")
	proto.RegisterType((*GameEndlessHero)(nil), "Adoter.Asset.GameEndlessHero")
	proto.RegisterType((*BlessBuffData)(nil), "Adoter.Asset.BlessBuffData")
	proto.RegisterType((*EndlessBuff)(nil), "Adoter.Asset.EndlessBuff")
	proto.RegisterType((*EndlessShopBuff)(nil), "Adoter.Asset.EndlessShopBuff")
	proto.RegisterType((*LibInfo)(nil), "Adoter.Asset.LibInfo")
	proto.RegisterType((*LibSync)(nil), "Adoter.Asset.LibSync")
	proto.RegisterType((*BlessEffect)(nil), "Adoter.Asset.BlessEffect")
	proto.RegisterType((*EvolutionInfo)(nil), "Adoter.Asset.EvolutionInfo")
	proto.RegisterType((*ActivityParameter)(nil), "Adoter.Asset.ActivityParameter")
	proto.RegisterType((*MultiItemSlot)(nil), "Adoter.Asset.MultiItemSlot")
	proto.RegisterType((*ReputationCondition)(nil), "Adoter.Asset.ReputationCondition")
	proto.RegisterType((*CorpsApply)(nil), "Adoter.Asset.CorpsApply")
	proto.RegisterType((*CorpsMember)(nil), "Adoter.Asset.CorpsMember")
	proto.RegisterType((*CorpsReputation)(nil), "Adoter.Asset.CorpsReputation")
	proto.RegisterType((*CorpsInvite)(nil), "Adoter.Asset.CorpsInvite")
	proto.RegisterType((*CorpsFrameBase)(nil), "Adoter.Asset.CorpsFrameBase")
	proto.RegisterType((*CorpsHeadFrame)(nil), "Adoter.Asset.CorpsHeadFrame")
	proto.RegisterType((*Corps)(nil), "Adoter.Asset.Corps")
	proto.RegisterType((*CorpsEvent)(nil), "Adoter.Asset.CorpsEvent")
	proto.RegisterType((*HuantiInfo)(nil), "Adoter.Asset.HuantiInfo")
	proto.RegisterType((*TransferData)(nil), "Adoter.Asset.TransferData")
	proto.RegisterType((*TechnologyCondition)(nil), "Adoter.Asset.TechnologyCondition")
	proto.RegisterType((*Technology)(nil), "Adoter.Asset.Technology")
	proto.RegisterType((*DynamicActivity)(nil), "Adoter.Asset.DynamicActivity")
	proto.RegisterType((*OfflineQuest)(nil), "Adoter.Asset.OfflineQuest")
	proto.RegisterType((*ScrollNode)(nil), "Adoter.Asset.ScrollNode")
	proto.RegisterType((*PVPInfo)(nil), "Adoter.Asset.PVPInfo")
	proto.RegisterType((*GamePlayerPVPInfo)(nil), "Adoter.Asset.GamePlayerPVPInfo")
	proto.RegisterType((*PVPFightResult)(nil), "Adoter.Asset.PVPFightResult")
	proto.RegisterType((*PlayerPVPResult)(nil), "Adoter.Asset.PlayerPVPResult")
	proto.RegisterType((*ActivityElement)(nil), "Adoter.Asset.ActivityElement")
	proto.RegisterType((*SecretFileMap)(nil), "Adoter.Asset.SecretFileMap")
	proto.RegisterMapType((map[int32]uint32)(nil), "Adoter.Asset.SecretFileMap.FileMapEntry")
	proto.RegisterType((*ScenceLocation)(nil), "Adoter.Asset.ScenceLocation")
	proto.RegisterType((*Crop)(nil), "Adoter.Asset.Crop")
	proto.RegisterType((*Furniture)(nil), "Adoter.Asset.Furniture")
	proto.RegisterType((*Homeland)(nil), "Adoter.Asset.Homeland")
	proto.RegisterType((*Vector2D)(nil), "Adoter.Asset.Vector2D")
	proto.RegisterType((*HomeScence)(nil), "Adoter.Asset.HomeScence")
	proto.RegisterMapType((map[int32]int32)(nil), "Adoter.Asset.HomeScence.NextDataEntry")
	proto.RegisterType((*PVPMatchPlayerInfo)(nil), "Adoter.Asset.PVPMatchPlayerInfo")
	proto.RegisterType((*GlobalBossInfo)(nil), "Adoter.Asset.GlobalBossInfo")
	proto.RegisterType((*EndPointInfo)(nil), "Adoter.Asset.EndPointInfo")
	proto.RegisterType((*HorseRaceInfo)(nil), "Adoter.Asset.HorseRaceInfo")
	proto.RegisterType((*DropReward)(nil), "Adoter.Asset.DropReward")
	proto.RegisterType((*AccRechargeInfo)(nil), "Adoter.Asset.AccRechargeInfo")
	proto.RegisterType((*AccRechargeActivity)(nil), "Adoter.Asset.AccRechargeActivity")
	proto.RegisterType((*WrapInt)(nil), "Adoter.Asset.wrapInt")
}

func init() { proto.RegisterFile("GameCommon.proto", fileDescriptor_36e731496f775310) }

var fileDescriptor_36e731496f775310 = []byte{
	// 32208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0xfd, 0x79, 0x7c, 0x1c, 0xc7,
	0x71, 0x28, 0x8e, 0x7b, 0x17, 0xd7, 0x6e, 0x63, 0x17, 0x18, 0x0e, 0xaf, 0x25, 0x29, 0x4a, 0xe4,
	0xea, 0x30, 0x05, 0x4b, 0xb4, 0x44, 0x49, 0x96, 0x25, 0x5b, 0xb2, 0x41, 0x00, 0x24, 0x60, 0xe1,
	0xd2, 0x2c, 0x78, 0x88, 0xb2, 0xb5, 0x1a, 0xec, 0x34, 0x80, 0x31, 0x66, 0x67, 0xd6, 0x33, 0xb3,
	0x00, 0x96, 0x7a, 0x7e, 0x2f, 0x7e, 0xb6, 0xe2, 0xc8, 0xf7, 0x7d, 0xc4, 0x76, 0x9c, 0xc4, 0x89,
	0x1d, 0xe7, 0x72, 0x4e, 0x9f, 0xc9, 0x4b, 0x9c, 0x3b, 0xcf, 0x71, 0x9c, 0x38, 0xe7, 0xfb, 0xe5,
	0xe5, 0x25, 0x79, 0xf9, 0xe5, 0xe5, 0x70, 0x2e, 0x27, 0x71, 0xee, 0xe3, 0xfb, 0xa9, 0xaa, 0xee,
	0x99, 0x9e, 0x63, 0x01, 0xd2, 0x76, 0xf8, 0x07, 0xb1, 0x5d, 0x55, 0x5d, 0xdd, 0xd3, 0x67, 0x55,
	0x75, 0x75, 0x35, 0xd3, 0xce, 0x9b, 0x6d, 0x3e, 0xe5, 0xb5, 0xdb, 0x9e, 0x7b, 0xba, 0xe3, 0x7b,
	0xa1, 0xa7, 0x57, 0x26, 0x2d, 0x2f, 0xe4, 0xfe, 0xe9, 0xc9, 0x20, 0xe0, 0x61, 0xfd, 0x22, 0xab,
	0x2c, 0x9f, 0x9d, 0xec, 0x74, 0xb8, 0xe9, 0xcf, 0xb9, 0x6b, 0x9e, 0xae, 0xb3, 0xc1, 0xf5, 0xae,
	0x6d, 0xd5, 0x0a, 0x27, 0x0a, 0xa7, 0x06, 0x0d, 0xfc, 0xad, 0x9f, 0x61, 0xa5, 0x8e, 0x17, 0xd8,
	0xa1, 0xed, 0xb9, 0xb5, 0xe2, 0x89, 0xc2, 0xa9, 0xd1, 0x33, 0x87, 0x4e, 0xab, 0x4c, 0x4e, 0x5f,
	0xe4, 0xad, 0xd0, 0xf3, 0xef, 0x99, 0x36, 0x22, 0xba, 0xfa, 0xbd, 0xac, 0x24, 0xa1, 0x7a, 0x85,
	0x15, 0x76, 0x90, 0x61, 0xd1, 0x28, 0xec, 0x40, 0xaa, 0x87, 0x6c, 0x8a, 0x46, 0xa1, 0x07, 0xa9,
	0xab, 0xb5, 0x01, 0x4a, 0x5d, 0xad, 0x7f, 0x63, 0x81, 0xb1, 0x4b, 0xdc, 0x5e, 0xdf, 0x08, 0x1b,
	0x8e, 0x17, 0xea, 0x87, 0xd8, 0xf0, 0x36, 0xa6, 0x44, 0x6e, 0x91, 0xd2, 0xc7, 0x58, 0xd1, 0xb6,
	0x90, 0x47, 0xd5, 0x28, 0xda, 0x96, 0x7e, 0x8c, 0x95, 0xdb, 0xb6, 0xdb, 0x74, 0xf8, 0x16, 0x77,
	0x90, 0x59, 0xd5, 0x28, 0xb5, 0x6d, 0x77, 0x1e, 0xd2, 0x88, 0x34, 0x77, 0x04, 0x72, 0x50, 0x20,
	0xcd, 0x1d, 0x42, 0x1e, 0x62, 0xc3, 0xe1, 0x86, 0xcf, 0xcd, 0xb0, 0x36, 0x84, 0x18, 0x91, 0xaa,
	0x5f, 0x61, 0xe3, 0x0b, 0x5d, 0x27, 0xb4, 0x95, 0xca, 0x9c, 0x66, 0x43, 0x81, 0xe3, 0x85, 0x41,
	0xad, 0x70, 0x62, 0xe0, 0xd4, 0xe8, 0x99, 0x5a, 0xb2, 0x09, 0x62, 0x42, 0x83, 0xc8, 0xf4, 0xc3,
	0x6c, 0x64, 0x83, 0xfb, 0x5e, 0x53, 0xd4, 0x74, 0xc8, 0x18, 0x86, 0xe4, 0x9c, 0x55, 0x7f, 0x84,
	0xd5, 0xa6, 0xed, 0xb5, 0x35, 0xbb, 0xd5, 0x75, 0xc2, 0xde, 0xb4, 0xef, 0x75, 0x94, 0x42, 0x0e,
	0xb3, 0x11, 0xcb, 0xf7, 0x3a, 0x4d, 0xd1, 0x03, 0x43, 0xc6, 0x30, 0x24, 0xe7, 0x2c, 0xa5, 0x29,
	0x04, 0x33, 0x4a, 0xd5, 0x37, 0x98, 0x1e, 0x33, 0x9b, 0x0b, 0x79, 0x1b, 0xd9, 0x1c, 0x60, 0x43,
	0xb6, 0x6b, 0xf1, 0x1d, 0xc1, 0x84, 0x12, 0xfa, 0x0b, 0xe5, 0x17, 0x14, 0xf1, 0x0b, 0x6e, 0x4b,
	0x7e, 0x41, 0xbf, 0x3a, 0x89, 0xef, 0xa9, 0x3f, 0xc9, 0xaa, 0xcb, 0x67, 0x17, 0x3c, 0x97, 0xf7,
	0x26, 0xdb, 0x5e, 0xd7, 0x0d, 0xf5, 0xfb, 0x19, 0x6b, 0x43, 0xb2, 0x19, 0xf6, 0x3a, 0x1c, 0x4b,
	0x1a, 0x4b, 0xb7, 0xca, 0x0c, 0xd2, 0xaf, 0xf4, 0x3a, 0xdc, 0x28, 0xb7, 0xe5, 0x4f, 0xf8, 0x16,
	0x13, 0x59, 0xe0, 0xb7, 0x0c, 0x18, 0x22, 0x55, 0x7f, 0x43, 0x81, 0x8d, 0x2f, 0x9f, 0x5d, 0xe0,
	0x41, 0x60, 0xae, 0xf3, 0x59, 0x6e, 0x5a, 0xdc, 0x87, 0xde, 0xeb, 0x38, 0x66, 0x8f, 0xfb, 0xcd,
	0x68, 0x50, 0x96, 0x08, 0x30, 0x67, 0xa5, 0x9b, 0x78, 0x50, 0x36, 0xb1, 0x7e, 0x1b, 0x1b, 0x6f,
	0x9b, 0xb6, 0xd3, 0x34, 0x5b, 0x2d, 0xe0, 0x0c, 0x04, 0x03, 0x48, 0x50, 0x05, 0xf0, 0x24, 0x41,
	0xe7, 0x70, 0xe0, 0x04, 0x21, 0xef, 0x34, 0x5b, 0x9e, 0xc5, 0x71, 0x6c, 0x0c, 0x19, 0x25, 0x00,
	0x4c, 0x79, 0x16, 0xaf, 0x7f, 0x68, 0x98, 0x55, 0x61, 0xf6, 0xcc, 0xbc, 0xa2, 0x6b, 0x77, 0xda,
	0xdc, 0x0d, 0x73, 0x27, 0xc7, 0x6d, 0x6c, 0x9c, 0x03, 0x41, 0x13, 0x6b, 0x82, 0x68, 0xaa, 0x4b,
	0x15, 0xc1, 0xb3, 0xdc, 0xf7, 0xce, 0x03, 0xdd, 0x49, 0x56, 0xe1, 0x92, 0x91, 0xac, 0x4f, 0xd5,
	0x18, 0x8d, 0x60, 0x73, 0x96, 0xbe, 0x80, 0xb5, 0x76, 0x9b, 0x66, 0x18, 0xfa, 0xf6, 0x6a, 0x37,
	0xe4, 0x41, 0x6d, 0x10, 0x7b, 0xea, 0x96, 0x64, 0xab, 0x26, 0x2a, 0x35, 0x29, 0x89, 0x8d, 0x31,
	0xc8, 0x1c, 0x25, 0x03, 0x7d, 0x89, 0x69, 0x6b, 0xf6, 0x0e, 0xb7, 0x54, 0x7e, 0x43, 0xd7, 0xc1,
	0x6f, 0x1c, 0x73, 0x2b, 0x0c, 0x1f, 0x61, 0x63, 0x1d, 0x9f, 0xab, 0xec, 0x86, 0xaf, 0x83, 0x5d,
	0xb5, 0xe3, 0xf3, 0x24, 0xb3, 0xa0, 0xbb, 0xa6, 0x32, 0x1b, 0xb9, 0x1e, 0x66, 0x41, 0x77, 0x4d,
	0x61, 0x76, 0x1b, 0x1b, 0xf7, 0xf9, 0x9a, 0xed, 0x8a, 0x8f, 0x85, 0xf6, 0x2d, 0x9d, 0x18, 0x38,
	0x55, 0x35, 0xaa, 0x02, 0x0c, 0xb4, 0x73, 0x96, 0x7e, 0x33, 0xab, 0x72, 0x77, 0xc3, 0x74, 0x5b,
	0xbc, 0xb9, 0xee, 0x9b, 0x16, 0xaf, 0x95, 0xb1, 0xcf, 0x2b, 0x02, 0x78, 0x1e, 0x60, 0x2a, 0x11,
	0x8e, 0x93, 0x1a, 0x4b, 0x10, 0x4d, 0xe1, 0xe0, 0x3f, 0xce, 0x98, 0x24, 0xb2, 0xad, 0xda, 0x28,
	0x52, 0x94, 0x05, 0x64, 0xce, 0xd2, 0xef, 0x60, 0x3a, 0xf6, 0x2c, 0xb7, 0x9a, 0x41, 0xd7, 0x0e,
	0x05, 0xa3, 0x0a, 0x92, 0x69, 0x02, 0xd3, 0xe8, 0xda, 0x21, 0x31, 0x93, 0x63, 0x48, 0x52, 0xdb,
	0x56, 0xad, 0x4a, 0xd5, 0x57, 0x48, 0x69, 0xbc, 0xdb, 0x41, 0xd3, 0xf1, 0x5a, 0x9b, 0xb5, 0xb1,
	0x13, 0x85, 0x53, 0x25, 0x63, 0xd8, 0x0e, 0xe6, 0xbd, 0xd6, 0x26, 0x8c, 0xe3, 0x78, 0xf8, 0x8d,
	0xd3, 0x2c, 0xd9, 0x90, 0x23, 0xef, 0xa5, 0xec, 0x70, 0xdb, 0x0c, 0x42, 0xee, 0x37, 0x33, 0xc3,
	0x41, 0xbb, 0x8e, 0x26, 0x3f, 0x48, 0x4c, 0xce, 0x25, 0x07, 0x45, 0x7d, 0x93, 0xdd, 0x00, 0x19,
	0x0c, 0xd3, 0xb5, 0xbc, 0xb6, 0x61, 0xba, 0xeb, 0x71, 0x27, 0xe3, 0x52, 0x74, 0x1f, 0x2b, 0x75,
	0x7c, 0xaf, 0xc3, 0xfd, 0xb0, 0x27, 0xd6, 0x88, 0x23, 0xc9, 0xe2, 0x16, 0xbb, 0x6d, 0xee, 0xdb,
	0x2d, 0x5c, 0x24, 0x22, 0x52, 0x58, 0xc1, 0xb6, 0x4c, 0xa7, 0xcb, 0xc5, 0x4e, 0x41, 0x89, 0xfa,
	0xc7, 0x07, 0x18, 0x83, 0xd2, 0x1a, 0x2d, 0xdf, 0x73, 0x9c, 0xdc, 0xf9, 0x08, 0x53, 0x1a, 0xb1,
	0xcd, 0x68, 0x8b, 0x28, 0x11, 0x20, 0xd9, 0xff, 0xd4, 0x23, 0x34, 0x0b, 0x93, 0x5d, 0x3b, 0xcd,
	0xb4, 0x55, 0x33, 0xb0, 0x5b, 0xe9, 0x79, 0xb8, 0x6b, 0xcd, 0xc7, 0x31, 0x8b, 0x32, 0x24, 0x1f,
	0x67, 0xfb, 0x82, 0x4d, 0xdb, 0x71, 0x72, 0xa6, 0xdf, 0xe9, 0x6c, 0x7b, 0xd3, 0x07, 0x9d, 0x6e,
	0x60, 0x8e, 0x98, 0xcb, 0x8c, 0x1b, 0xfa, 0x3d, 0x43, 0x0b, 0x52, 0x60, 0x5d, 0x63, 0x03, 0x7c,
	0xa7, 0x53, 0x1b, 0xc6, 0xda, 0xc3, 0x4f, 0xfd, 0x28, 0x2b, 0x99, 0xd6, 0x16, 0x7c, 0x84, 0x55,
	0x1b, 0xa1, 0xaf, 0x96, 0x69, 0xfd, 0x26, 0x36, 0xda, 0x82, 0x5d, 0x8d, 0x37, 0x43, 0xbb, 0xcd,
	0x6b, 0x25, 0x5c, 0x74, 0x19, 0x81, 0x56, 0xec, 0x36, 0x4f, 0x0e, 0x9f, 0x72, 0x72, 0xf8, 0x1c,
	0x9d, 0x62, 0x07, 0x73, 0xab, 0x05, 0x95, 0xd8, 0xe4, 0xd4, 0xa9, 0x55, 0x03, 0x7e, 0x26, 0x3b,
	0x6d, 0x48, 0x74, 0xda, 0x83, 0xc5, 0xe7, 0x17, 0xea, 0xb7, 0xb2, 0xf1, 0x47, 0xbb, 0x3c, 0x08,
	0xcf, 0xd9, 0xae, 0x1d, 0x6c, 0x48, 0x49, 0xc3, 0x32, 0x43, 0x13, 0xb7, 0xd3, 0xaa, 0x81, 0xbf,
	0xeb, 0xf7, 0xd3, 0x8a, 0x8b, 0xa4, 0xcb, 0xa6, 0xed, 0xef, 0x55, 0x46, 0x55, 0x0e, 0x8c, 0x77,
	0x14, 0xd8, 0x21, 0x92, 0x74, 0x5c, 0x0b, 0x05, 0x90, 0x69, 0x33, 0x34, 0xcf, 0xfb, 0x5e, 0xb7,
	0xa3, 0xdf, 0xc3, 0x8a, 0x5e, 0x47, 0x0c, 0xbd, 0x9b, 0xb3, 0x2d, 0x1f, 0xe5, 0x58, 0xea, 0x70,
	0xdf, 0x0c, 0x3d, 0xdf, 0x28, 0x7a, 0x1d, 0x7d, 0x86, 0xb1, 0x96, 0x44, 0xc8, 0xfd, 0xf2, 0xd6,
	0x5d, 0x32, 0x43, 0x71, 0x97, 0x7c, 0xb3, 0x33, 0xb3, 0x63, 0x28, 0x19, 0xeb, 0x6f, 0x1b, 0x52,
	0x3e, 0xa8, 0xaf, 0x7c, 0x75, 0x84, 0x95, 0x5e, 0x01, 0x04, 0xf1, 0x88, 0x1d, 0xc1, 0xf4, 0x9c,
	0xa5, 0xdf, 0xcd, 0x86, 0x83, 0xd0, 0x0c, 0xbb, 0x01, 0x8e, 0xd4, 0xcc, 0x08, 0x44, 0xbe, 0x0d,
	0x24, 0x30, 0x04, 0x21, 0x8c, 0x84, 0x8e, 0xef, 0xad, 0xfb, 0x3c, 0x08, 0xa4, 0xb8, 0x23, 0xd3,
	0xfa, 0xc3, 0xac, 0x12, 0x74, 0x57, 0x9b, 0x11, 0x9e, 0xc6, 0xe3, 0xb1, 0xec, 0x87, 0x45, 0x3d,
	0x60, 0x8c, 0x06, 0xdd, 0xd5, 0x65, 0x99, 0xff, 0x56, 0x36, 0xb6, 0x86, 0x3d, 0x08, 0x2b, 0x15,
	0x8a, 0x12, 0xc3, 0xb4, 0x4e, 0x49, 0x68, 0x03, 0x45, 0x9f, 0x03, 0x6c, 0xa8, 0x63, 0xfa, 0x66,
	0x1b, 0x47, 0xe2, 0x90, 0x41, 0x09, 0x18, 0x86, 0x66, 0xab, 0xc5, 0x3b, 0x61, 0x3c, 0x0c, 0x87,
	0x0c, 0x46, 0x20, 0x1c, 0x86, 0x37, 0xb1, 0x51, 0xe2, 0x43, 0x04, 0xb4, 0x36, 0x33, 0x02, 0x49,
	0x82, 0x6e, 0xc7, 0x8a, 0x06, 0x32, 0xad, 0xcb, 0x8c, 0x40, 0x48, 0x70, 0x92, 0x55, 0xb0, 0xac,
	0xa6, 0x68, 0xb4, 0x51, 0xda, 0x64, 0x11, 0x46, 0xcd, 0xa4, 0xdf, 0xc3, 0x46, 0x7c, 0xde, 0xf2,
	0x7c, 0x2b, 0xc0, 0xe5, 0x78, 0x34, 0xb7, 0x49, 0x0d, 0xa4, 0x30, 0x24, 0x25, 0x2c, 0xe7, 0xab,
	0x66, 0x18, 0x3a, 0xbc, 0xd9, 0x31, 0x83, 0xa0, 0x69, 0xb6, 0x42, 0x7b, 0x8b, 0xd7, 0xaa, 0xb4,
	0x9c, 0x13, 0x66, 0xd9, 0x0c, 0x82, 0x49, 0x84, 0xeb, 0x2b, 0xac, 0xa6, 0x52, 0x27, 0x5a, 0x7c,
	0x6c, 0xef, 0x16, 0x3f, 0x18, 0x33, 0x6c, 0x28, 0x6d, 0x7f, 0x3e, 0x59, 0x07, 0xf1, 0x85, 0xe3,
	0x7b, 0x0d, 0x0b, 0xa5, 0x7a, 0x04, 0xa9, 0xbb, 0x6c, 0x54, 0xf9, 0x48, 0xfd, 0x85, 0x6c, 0xb4,
	0x6d, 0x76, 0x9a, 0xb2, 0x51, 0x0a, 0x7b, 0x57, 0x90, 0xb5, 0xcd, 0x8e, 0x21, 0x5a, 0xe6, 0x24,
	0xab, 0x38, 0x76, 0x10, 0x46, 0xd9, 0x61, 0xaa, 0x0c, 0x19, 0xa3, 0x00, 0x13, 0x24, 0xf5, 0x37,
	0x16, 0xd8, 0xe1, 0x3e, 0x93, 0xe5, 0xab, 0x9b, 0x9c, 0x0f, 0xb1, 0x72, 0x34, 0xc7, 0x84, 0x42,
	0x72, 0xd3, 0x1e, 0x73, 0xd3, 0x88, 0x73, 0xd4, 0x7f, 0xa1, 0xc0, 0x8e, 0xe4, 0xef, 0x71, 0x0d,
	0x1e, 0xea, 0xcf, 0x57, 0x96, 0xa5, 0x6b, 0xdd, 0x1a, 0x31, 0x47, 0x9e, 0x10, 0x52, 0xcc, 0x13,
	0x42, 0x8e, 0xb0, 0x12, 0xdf, 0x10, 0xf2, 0xc7, 0x00, 0x0e, 0xa1, 0x11, 0xbe, 0x41, 0xa2, 0x07,
	0xa1, 0x68, 0x6b, 0x1a, 0x94, 0x28, 0xda, 0x95, 0xf6, 0xb3, 0x21, 0xbe, 0x01, 0x3c, 0x87, 0x10,
	0x3e, 0xc8, 0x37, 0xe6, 0xac, 0xfa, 0xd3, 0x83, 0xac, 0x82, 0xdb, 0xc7, 0x86, 0xd7, 0x01, 0xe1,
	0x5f, 0x68, 0x46, 0x85, 0x48, 0x33, 0xd2, 0xd9, 0xa0, 0x6b, 0xb6, 0x69, 0xb1, 0x2c, 0x1b, 0xf8,
	0x5b, 0x3f, 0xc1, 0x46, 0x2d, 0x1e, 0xb4, 0x7c, 0xbb, 0x83, 0x0d, 0x38, 0x80, 0x28, 0x15, 0x04,
	0xb9, 0xec, 0x96, 0xe7, 0x62, 0x15, 0xca, 0x06, 0xfe, 0x06, 0xce, 0x5d, 0x1b, 0x0b, 0x2f, 0x1b,
	0xc5, 0xae, 0xad, 0xd7, 0xd8, 0xc8, 0x2b, 0xba, 0xa6, 0x63, 0x87, 0x3d, 0xdc, 0x86, 0x86, 0x0c,
	0x99, 0x04, 0xf1, 0xde, 0x73, 0x03, 0xd3, 0xe1, 0x38, 0xfd, 0xcb, 0x86, 0x48, 0xe9, 0xd3, 0x89,
	0x35, 0xb5, 0xd4, 0xaf, 0x7d, 0xb3, 0x4b, 0xb8, 0xba, 0xa4, 0xea, 0x77, 0xb0, 0xa1, 0x96, 0x17,
	0x84, 0x41, 0xad, 0x8c, 0x0c, 0x52, 0x9a, 0xa8, 0xd4, 0x80, 0x0c, 0x22, 0xd2, 0x1f, 0x62, 0x63,
	0x9e, 0x6f, 0xaf, 0xdb, 0xae, 0xe9, 0x34, 0x29, 0x1b, 0xdb, 0x35, 0x5b, 0x55, 0x52, 0x4f, 0x61,
	0xf6, 0x5b, 0xd9, 0x58, 0xa7, 0xeb, 0xb7, 0x36, 0xcc, 0x80, 0x96, 0x1c, 0xb9, 0xa2, 0x54, 0x25,
	0x14, 0x56, 0x9d, 0x40, 0x3f, 0xcd, 0xf6, 0x27, 0xc9, 0x9a, 0xdd, 0x80, 0x5b, 0xb8, 0xbe, 0x54,
	0x8d, 0x7d, 0x09, 0xda, 0x0b, 0x01, 0xb7, 0x50, 0x3d, 0x0b, 0x79, 0x3b, 0xc0, 0x15, 0xa4, 0x6a,
	0x50, 0x02, 0x5a, 0x74, 0x8b, 0xfb, 0x01, 0xf4, 0xc9, 0x18, 0xed, 0x02, 0x22, 0x09, 0xeb, 0x1e,
	0xdf, 0xe9, 0xd8, 0xbe, 0x58, 0xf7, 0xc6, 0x11, 0xcb, 0x08, 0x04, 0x5c, 0xeb, 0x4d, 0x76, 0xe8,
	0x82, 0x6b, 0x87, 0xcb, 0x42, 0x7a, 0xba, 0x06, 0x15, 0xfa, 0x4e, 0x36, 0x88, 0x6a, 0x5b, 0x71,
	0x2f, 0x91, 0x0c, 0xc9, 0xea, 0xef, 0x2f, 0xb0, 0x7d, 0x99, 0xce, 0xd1, 0xef, 0x11, 0x4c, 0x68,
	0xfe, 0xee, 0x36, 0x07, 0x63, 0x56, 0x72, 0x4b, 0x2f, 0xe6, 0x6c, 0xe9, 0x03, 0xca, 0x96, 0xae,
	0x4f, 0xb0, 0x41, 0x68, 0x17, 0x1c, 0x84, 0xfd, 0x3b, 0x0c, 0x69, 0xea, 0x6f, 0x2d, 0xb0, 0xb1,
	0xf3, 0xdc, 0xf5, 0x15, 0x5d, 0xed, 0x56, 0x36, 0x16, 0xeb, 0x5b, 0xca, 0x96, 0x5b, 0x8d, 0xa0,
	0xb9, 0x6a, 0x59, 0x31, 0xab, 0x96, 0xdd, 0xc7, 0x98, 0xdf, 0x75, 0xb9, 0xd8, 0xf0, 0x06, 0xf2,
	0xc6, 0x8f, 0xd1, 0x75, 0x51, 0xda, 0x35, 0xca, 0xbe, 0xf8, 0x15, 0xd4, 0x3f, 0x5b, 0x60, 0xa3,
	0x58, 0x27, 0x21, 0xac, 0xde, 0xc4, 0x46, 0x85, 0x60, 0xaa, 0xd4, 0x86, 0x11, 0xe8, 0x7c, 0xae,
	0xe4, 0x3a, 0x94, 0x94, 0x5c, 0x1d, 0xaf, 0x65, 0x42, 0x5b, 0x62, 0x45, 0xc4, 0xca, 0x51, 0x91,
	0x40, 0xec, 0xec, 0x25, 0xb6, 0x2f, 0xe0, 0x30, 0x57, 0x4c, 0xbf, 0xd7, 0xa4, 0xac, 0x52, 0x85,
	0xac, 0xa7, 0x3a, 0x07, 0x2b, 0x26, 0x69, 0xa9, 0x86, 0x86, 0x16, 0x24, 0x01, 0x41, 0x7d, 0x85,
	0x1d, 0xc8, 0xa3, 0xfc, 0xda, 0xbe, 0xa5, 0x3e, 0xcb, 0x18, 0x71, 0x05, 0xb1, 0x12, 0xd6, 0x3c,
	0x94, 0x6f, 0x63, 0x9b, 0xc7, 0x08, 0xa6, 0xe7, 0x50, 0x70, 0x25, 0x14, 0x19, 0x6f, 0x88, 0x0f,
	0x43, 0x10, 0x9a, 0x6f, 0xea, 0x93, 0xac, 0x2c, 0x39, 0xb9, 0x58, 0xe6, 0xa6, 0xed, 0xaa, 0x55,
	0x02, 0xce, 0x2e, 0x56, 0xe8, 0x30, 0x1b, 0x41, 0x64, 0xd4, 0xc5, 0xc3, 0x90, 0x9c, 0xb3, 0xea,
	0x6f, 0x1c, 0x61, 0x65, 0x18, 0xaa, 0xc8, 0x07, 0x2a, 0xb3, 0x0e, 0x3f, 0x9a, 0xd1, 0x2a, 0x3a,
	0x82, 0xe9, 0x39, 0x0b, 0x34, 0x3e, 0x42, 0x29, 0x0b, 0x6a, 0x19, 0x21, 0x8b, 0xb0, 0xaa, 0x3e,
	0xc8, 0xca, 0xd1, 0xa0, 0x11, 0x83, 0xe4, 0x86, 0x9c, 0x36, 0x8f, 0x06, 0xa8, 0x11, 0x93, 0xeb,
	0x0f, 0xb3, 0xaa, 0x68, 0xad, 0xd6, 0x86, 0x69, 0xbb, 0x77, 0x8b, 0x3e, 0x3b, 0x92, 0xd7, 0x67,
	0xd4, 0x55, 0x15, 0xa2, 0x9f, 0x42, 0xf2, 0x74, 0xfe, 0x33, 0x42, 0xae, 0xbb, 0xc6, 0xfc, 0x67,
	0xf4, 0x17, 0xb0, 0x0a, 0xb5, 0xb3, 0x28, 0x7e, 0x38, 0xcf, 0xc2, 0x15, 0x77, 0x99, 0x41, 0xbd,
	0x22, 0x0a, 0x4f, 0x66, 0x3e, 0x23, 0xd4, 0xf8, 0x6b, 0xca, 0x7c, 0x46, 0x7f, 0x80, 0x8d, 0x76,
	0x9d, 0xd0, 0x37, 0x9b, 0x08, 0x44, 0x99, 0x70, 0xb7, 0xbc, 0x0c, 0x89, 0x69, 0xdc, 0xbc, 0x90,
	0x55, 0x68, 0x5f, 0x15, 0x79, 0xcb, 0x79, 0xdf, 0xbc, 0x8c, 0xa6, 0x22, 0x51, 0x30, 0x91, 0x53,
	0xee, 0xe7, 0xb0, 0x41, 0x18, 0x00, 0x28, 0x43, 0x8e, 0x9e, 0x39, 0x9c, 0x5f, 0xa2, 0x6b, 0x20,
	0x91, 0x7e, 0x81, 0x69, 0x38, 0x78, 0x40, 0x3b, 0x6d, 0x06, 0xdc, 0xe1, 0xad, 0xb0, 0x36, 0x8a,
	0xc5, 0x3d, 0x27, 0xbb, 0xe6, 0x61, 0x66, 0xd0, 0xe4, 0x5c, 0x58, 0x8e, 0x1b, 0x48, 0x4d, 0x7a,
	0xdc, 0x58, 0x90, 0x00, 0xc2, 0xb6, 0x61, 0x07, 0xcd, 0xcd, 0xae, 0xe9, 0xae, 0x3b, 0x9e, 0xbb,
	0x2e, 0xc5, 0x4a, 0xb2, 0x12, 0xec, 0xb3, 0x83, 0x47, 0x24, 0x46, 0xc8, 0x95, 0x37, 0xb1, 0x51,
	0x1a, 0x81, 0x1d, 0x6f, 0x9b, 0xfb, 0x42, 0xfc, 0xa4, 0x41, 0xb9, 0x0c, 0x10, 0x68, 0xcd, 0x8d,
	0xae, 0xe9, 0x86, 0x76, 0xd3, 0x76, 0xd7, 0x3c, 0xdc, 0x45, 0x32, 0xad, 0x39, 0x8b, 0x04, 0xa0,
	0x8b, 0x18, 0x6c, 0x23, 0xfa, 0x4d, 0xc2, 0x4b, 0xc7, 0x31, 0x5b, 0x3c, 0x32, 0x41, 0x8c, 0x23,
	0xff, 0xaa, 0x00, 0x93, 0x09, 0xe2, 0x68, 0x93, 0xed, 0xcf, 0xf9, 0xb4, 0x1c, 0x3d, 0xed, 0x8c,
	0xaa, 0xa7, 0x65, 0xe6, 0x42, 0x92, 0x87, 0xaa, 0x29, 0xbe, 0x9c, 0x14, 0xb9, 0xac, 0x94, 0x95,
	0x91, 0x6d, 0x5e, 0x9c, 0x34, 0x67, 0x4e, 0x64, 0xbb, 0xa2, 0x9f, 0x51, 0x42, 0x9a, 0x34, 0x5f,
	0x48, 0xd2, 0x13, 0x6c, 0x26, 0xf3, 0x76, 0x10, 0x82, 0x6c, 0x41, 0xfb, 0x72, 0x21, 0x6f, 0x91,
	0x97, 0xa4, 0x62, 0xbf, 0xae, 0x7f, 0x7f, 0x81, 0x95, 0x24, 0x0c, 0x16, 0x1f, 0x80, 0x26, 0x16,
	0x1f, 0x00, 0xe0, 0xe2, 0x73, 0x82, 0x55, 0x10, 0xd9, 0xe6, 0xa1, 0x19, 0xaf, 0x40, 0x0c, 0x60,
	0x0b, 0x3c, 0x34, 0xe7, 0x2c, 0x68, 0x3f, 0xb7, 0xdb, 0x16, 0x8b, 0x3a, 0xfc, 0xd4, 0xef, 0x15,
	0x0c, 0x71, 0x83, 0x1d, 0xc4, 0x0d, 0x36, 0x35, 0x4a, 0x67, 0x60, 0x53, 0xc5, 0x0a, 0x61, 0x49,
	0x68, 0x5a, 0x4d, 0x68, 0xf2, 0x43, 0x49, 0x4d, 0xbe, 0xfe, 0xc5, 0x02, 0x63, 0xcb, 0x67, 0x21,
	0x07, 0xee, 0xde, 0x77, 0xb0, 0xa1, 0x55, 0xdf, 0x5e, 0xa3, 0xed, 0x7b, 0x97, 0xaf, 0x45, 0x22,
	0xfd, 0x41, 0xc6, 0xc8, 0xce, 0x89, 0xd2, 0x31, 0x75, 0xea, 0xb1, 0x5d, 0xa4, 0x63, 0xb1, 0xbe,
	0x61, 0x49, 0x0f, 0x44, 0xdb, 0x05, 0x66, 0x1e, 0xc8, 0x9d, 0xe5, 0x91, 0x15, 0x44, 0x6e, 0x24,
	0x98, 0x15, 0xb6, 0x00, 0xcf, 0x0f, 0x9b, 0x42, 0x88, 0x19, 0x14, 0x5b, 0x80, 0xe7, 0x87, 0x24,
	0xe4, 0xd4, 0x2f, 0xb3, 0x52, 0x64, 0xf6, 0x4e, 0x8f, 0x90, 0x89, 0x84, 0x90, 0x93, 0x23, 0x42,
	0x24, 0xc5, 0x12, 0xd9, 0x03, 0x55, 0xec, 0x81, 0xfa, 0x97, 0x0b, 0xac, 0x72, 0xfe, 0xc2, 0xdc,
	0x74, 0xc4, 0x3e, 0x4f, 0x77, 0x4f, 0x1f, 0x45, 0xc8, 0x22, 0x07, 0xae, 0xbd, 0xc8, 0xc1, 0xa8,
	0xc8, 0x5d, 0xbb, 0x4f, 0x9f, 0x62, 0x63, 0xb6, 0xbb, 0xc5, 0xdd, 0xd0, 0xf3, 0x85, 0xcd, 0x7d,
	0x18, 0x0b, 0x49, 0x4d, 0xad, 0xb9, 0xc5, 0x8b, 0x33, 0x8b, 0x2b, 0x4b, 0xc6, 0x63, 0xcd, 0x95,
	0xc7, 0x96, 0x67, 0x8c, 0x6a, 0x94, 0x07, 0x07, 0xc8, 0x71, 0x86, 0xc3, 0xae, 0x49, 0xc7, 0x03,
	0x64, 0x29, 0xc2, 0x81, 0x36, 0x07, 0x80, 0xfa, 0x09, 0x18, 0x21, 0x50, 0x1a, 0xce, 0x87, 0xf8,
	0x83, 0x07, 0xe4, 0x07, 0xd7, 0x9f, 0x2e, 0xb0, 0x71, 0x5a, 0x55, 0xe7, 0x24, 0xe3, 0x9c, 0x9a,
	0x15, 0xae, 0xbf, 0x66, 0x77, 0xca, 0xc9, 0x47, 0xd3, 0xf9, 0x70, 0xb6, 0xe9, 0x9a, 0xea, 0xec,
	0xeb, 0xb0, 0x7d, 0x54, 0x0d, 0x3a, 0xdc, 0x9a, 0xb7, 0xdb, 0x36, 0x1a, 0x52, 0x5b, 0x98, 0x6c,
	0x3a, 0x90, 0x96, 0xbb, 0xf8, 0x80, 0x51, 0x6d, 0xc5, 0x54, 0xb4, 0x97, 0x83, 0x24, 0x0d, 0x4a,
	0x74, 0xbb, 0x23, 0xe4, 0x8a, 0x32, 0x40, 0x1a, 0x00, 0x00, 0x81, 0x34, 0x36, 0x0f, 0x0e, 0x19,
	0x94, 0xa8, 0x3f, 0xca, 0xc6, 0x64, 0x89, 0x9e, 0x33, 0xed, 0x6d, 0xbb, 0x30, 0xaf, 0x5b, 0x9e,
	0xe7, 0x34, 0x2d, 0x6f, 0xdb, 0x8d, 0xcb, 0x62, 0x2d, 0x81, 0xdf, 0xb3, 0xa0, 0xfa, 0x5f, 0x14,
	0xe4, 0x57, 0x4c, 0xb6, 0x36, 0x6c, 0xbe, 0xc5, 0xa5, 0xe8, 0x6a, 0xc6, 0x49, 0xe5, 0x23, 0x14,
	0x28, 0x49, 0x47, 0xaa, 0x35, 0x64, 0x20, 0x63, 0x0d, 0x39, 0xc6, 0xca, 0x3e, 0xdf, 0x36, 0x7d,
	0x0b, 0x58, 0x0c, 0x22, 0x8b, 0x12, 0x01, 0xe6, 0x2c, 0xd0, 0x36, 0x20, 0x9b, 0xd7, 0x0d, 0x85,
	0x46, 0x29, 0x93, 0xfa, 0x19, 0x76, 0x50, 0x9a, 0x2b, 0x9a, 0x22, 0x3f, 0xe9, 0x3e, 0xa4, 0xe7,
	0xed, 0x97, 0x48, 0x03, 0x71, 0xa4, 0x01, 0x81, 0xa2, 0x24, 0xf3, 0xd0, 0xb2, 0x3f, 0x42, 0x55,
	0x96, 0xd0, 0x8b, 0x68, 0xa6, 0xfb, 0x62, 0x81, 0x69, 0xf4, 0xbd, 0x06, 0xef, 0x74, 0x43, 0x53,
	0x6a, 0x9b, 0xd1, 0x98, 0xa9, 0x8a, 0xa9, 0x91, 0xb0, 0xf2, 0x0d, 0x48, 0x95, 0x60, 0xcf, 0x2f,
	0x3e, 0xc5, 0x34, 0xc7, 0x44, 0x6b, 0x44, 0xd0, 0x6d, 0x0b, 0x2a, 0x5a, 0x32, 0xc6, 0x00, 0x6e,
	0x20, 0x58, 0x9a, 0x92, 0x42, 0x2f, 0x34, 0x1d, 0x51, 0xdb, 0x21, 0xea, 0x39, 0x04, 0x61, 0x55,
	0x81, 0x15, 0x11, 0x80, 0xda, 0x28, 0xa8, 0x86, 0x91, 0x6a, 0x0c, 0xe1, 0xa0, 0x20, 0xd2, 0x47,
	0xbd, 0x25, 0xfa, 0xa8, 0xc9, 0x6e, 0xe8, 0x51, 0xab, 0x80, 0x38, 0xe8, 0xf3, 0x4e, 0x57, 0x9d,
	0x0d, 0xc7, 0x53, 0x3a, 0xc3, 0xcc, 0xf2, 0x85, 0x95, 0xc9, 0x95, 0xb9, 0xa5, 0x45, 0x9a, 0x0e,
	0x25, 0xa0, 0xc7, 0x99, 0x80, 0x86, 0xb2, 0xd0, 0xde, 0xb2, 0xc3, 0x9e, 0xdc, 0x2d, 0x06, 0x0c,
	0x26, 0x41, 0xd4, 0xf3, 0xa2, 0x63, 0x1c, 0x3b, 0x20, 0x69, 0x73, 0xc0, 0x60, 0x04, 0x82, 0x89,
	0x0b, 0xea, 0x5a, 0x29, 0xb2, 0x09, 0x1c, 0x66, 0x23, 0x34, 0xe5, 0xe5, 0xd2, 0x38, 0x8c, 0xf3,
	0x1d, 0x85, 0xf4, 0xd5, 0x6e, 0x4f, 0x98, 0x1b, 0x84, 0xa9, 0x7c, 0xb5, 0xdb, 0x23, 0x7b, 0x03,
	0xb4, 0xb5, 0xeb, 0x78, 0xad, 0xcd, 0xb8, 0xad, 0xab, 0x06, 0x23, 0x10, 0xb6, 0xa0, 0xa2, 0xae,
	0x0e, 0xee, 0xaa, 0xae, 0x0e, 0x65, 0xd4, 0xd5, 0x8f, 0x0d, 0xb0, 0x41, 0xa8, 0x1e, 0x4a, 0xe5,
	0x1b, 0xf1, 0x71, 0x27, 0x48, 0xe5, 0x1b, 0x78, 0xdc, 0x79, 0x92, 0x55, 0x10, 0x21, 0x4b, 0x10,
	0x6a, 0x19, 0xc0, 0x2e, 0x8a, 0x52, 0xee, 0x11, 0x1b, 0x24, 0x8a, 0x3a, 0xb9, 0x5a, 0x99, 0x6c,
	0x01, 0xda, 0x1f, 0x51, 0xcc, 0x39, 0x89, 0x42, 0xa3, 0xcf, 0xa5, 0x8d, 0x91, 0x6a, 0x3e, 0x2a,
	0x60, 0xf8, 0x5d, 0x37, 0xb3, 0xaa, 0x24, 0xa1, 0x96, 0xa1, 0xfa, 0xcb, 0x7c, 0xd4, 0x3a, 0x0f,
	0xc4, 0x7c, 0x60, 0x7c, 0xe0, 0xc8, 0xe8, 0xaf, 0xa4, 0x8e, 0x46, 0x79, 0x83, 0x50, 0xbf, 0x8b,
	0x1d, 0x08, 0x3d, 0xcb, 0xec, 0x35, 0x83, 0x5e, 0x00, 0xf5, 0x17, 0x38, 0x9c, 0x30, 0x25, 0x43,
	0x47, 0x5c, 0x03, 0x51, 0x06, 0x61, 0xf4, 0x09, 0xb6, 0x4f, 0x8c, 0x6a, 0xa5, 0xe6, 0x25, 0xac,
	0xd5, 0x38, 0x0d, 0xeb, 0xb8, 0xf6, 0xa9, 0x6e, 0x2b, 0x67, 0xba, 0xed, 0x5e, 0x76, 0x68, 0xcd,
	0xf6, 0xc9, 0x62, 0xb7, 0x61, 0xfa, 0xeb, 0x3c, 0x6a, 0x63, 0x86, 0xb4, 0x07, 0x10, 0x6b, 0x08,
	0xa4, 0x68, 0xec, 0xfa, 0x9f, 0x0c, 0x32, 0x46, 0x63, 0x7c, 0xc1, 0xb4, 0x1d, 0xe8, 0x37, 0x3c,
	0x5f, 0x8d, 0x96, 0xa6, 0x61, 0x48, 0x8a, 0x03, 0x55, 0xee, 0xd2, 0x82, 0x11, 0xe9, 0x7d, 0xdc,
	0xb5, 0x64, 0xdd, 0x7c, 0x6e, 0x5a, 0xdc, 0x4a, 0x4c, 0x5f, 0x02, 0x21, 0xc1, 0x6d, 0x6c, 0x7c,
	0x9d, 0x87, 0xea, 0xa2, 0x23, 0x66, 0x6f, 0x75, 0x9d, 0x87, 0xf1, 0x72, 0x03, 0x8c, 0x2c, 0xee,
	0xf0, 0x50, 0x19, 0x60, 0x43, 0x06, 0x23, 0x10, 0x12, 0x1c, 0x60, 0x43, 0xa1, 0x1d, 0x3a, 0x34,
	0x63, 0x2b, 0x06, 0x25, 0x60, 0xc4, 0xb6, 0x3c, 0x37, 0x04, 0x05, 0x6d, 0x04, 0xe1, 0x32, 0x99,
	0x5c, 0x29, 0x4b, 0xa9, 0x95, 0x52, 0x99, 0x3f, 0x65, 0xfa, 0x58, 0x31, 0x7f, 0xe4, 0x5e, 0x1a,
	0x9f, 0x12, 0x0e, 0xd0, 0x5e, 0x4a, 0x63, 0x24, 0xb1, 0x04, 0x54, 0xae, 0x6f, 0x09, 0x38, 0xce,
	0x18, 0xe6, 0x25, 0xd6, 0x24, 0xe9, 0x23, 0x37, 0x62, 0x7d, 0x2f, 0x2b, 0x63, 0xfb, 0x23, 0x6b,
	0x2d, 0x4f, 0x38, 0x5c, 0x98, 0x9c, 0x9b, 0x17, 0x4c, 0x81, 0x32, 0x5a, 0x57, 0xc2, 0xd0, 0x6c,
	0x6d, 0x92, 0x0a, 0xbb, 0x0f, 0xdb, 0x80, 0x11, 0x08, 0x75, 0x58, 0x2c, 0x35, 0xf0, 0xba, 0x7e,
	0x8b, 0x37, 0x77, 0x6a, 0x3a, 0x7d, 0x90, 0x84, 0x5c, 0x4e, 0xa0, 0xaf, 0xd6, 0xf6, 0x27, 0xd1,
	0x57, 0xa8, 0x7b, 0x05, 0xda, 0xb6, 0x6a, 0x07, 0x68, 0xd9, 0x92, 0xa0, 0x39, 0x4b, 0xbf, 0x85,
	0x8d, 0x89, 0xf2, 0xb7, 0x6d, 0xb7, 0xe9, 0x07, 0x61, 0xed, 0x20, 0x8e, 0xf9, 0x0a, 0x41, 0x2f,
	0xd9, 0xae, 0x11, 0x84, 0xf5, 0x79, 0x56, 0xa1, 0x91, 0x76, 0xce, 0xb7, 0xb9, 0x6b, 0x65, 0x3d,
	0x00, 0x06, 0x14, 0x0f, 0x80, 0x9b, 0xd8, 0xa8, 0x40, 0x46, 0x5a, 0x79, 0xc5, 0x60, 0x04, 0x82,
	0x4f, 0xaa, 0x3f, 0xc2, 0x46, 0x89, 0xdb, 0x59, 0xc7, 0xa4, 0x83, 0xd2, 0xaf, 0x81, 0xd9, 0x1f,
	0x16, 0xd8, 0x28, 0x4c, 0xea, 0x19, 0x87, 0x36, 0xea, 0xaf, 0x8b, 0xdc, 0x93, 0x94, 0xc8, 0x84,
	0x88, 0x10, 0x49, 0x64, 0xea, 0xe8, 0x1b, 0xd8, 0x65, 0xf4, 0x0d, 0xa6, 0x47, 0x9f, 0x54, 0x48,
	0xd0, 0x58, 0x44, 0x33, 0x04, 0x97, 0x41, 0x94, 0x64, 0x13, 0xda, 0xca, 0x70, 0x52, 0x5b, 0xa9,
	0xcf, 0xc8, 0x0e, 0xb8, 0x80, 0x1b, 0xab, 0x22, 0x55, 0x0f, 0xa1, 0x88, 0x7b, 0x2b, 0xc3, 0xcd,
	0x94, 0x84, 0x02, 0x45, 0xae, 0xa9, 0x02, 0x74, 0x45, 0x02, 0xeb, 0xf7, 0xb3, 0x81, 0x95, 0xcb,
	0x8b, 0xfa, 0x41, 0x36, 0x1c, 0xee, 0xb8, 0xb1, 0x71, 0x67, 0x28, 0xdc, 0x71, 0xc9, 0x08, 0x0e,
	0x8b, 0x10, 0x3a, 0x5e, 0x50, 0xf6, 0x11, 0x3f, 0x08, 0xd1, 0xef, 0xe2, 0x9d, 0x45, 0x56, 0xa6,
	0x0a, 0xac, 0xec, 0xb8, 0xfd, 0xf2, 0xdf, 0xcd, 0x4a, 0x00, 0xee, 0x2f, 0xde, 0xaf, 0x5c, 0x16,
	0x93, 0x6a, 0x24, 0xdc, 0x41, 0xf3, 0xa3, 0x7e, 0x17, 0x1b, 0x06, 0xb9, 0xc0, 0x09, 0x85, 0x70,
	0x5e, 0xcb, 0x66, 0x30, 0x66, 0x1a, 0x17, 0xe6, 0x57, 0x0c, 0x41, 0x87, 0x92, 0x49, 0xbc, 0x08,
	0xe1, 0x6f, 0xd8, 0x41, 0x2c, 0xdb, 0x6c, 0x7b, 0xae, 0x45, 0x2b, 0x3f, 0x49, 0x0e, 0xa3, 0x02,
	0x86, 0x2b, 0xfc, 0x71, 0xe9, 0x18, 0x13, 0x6d, 0x0d, 0x03, 0xc2, 0xfd, 0x05, 0xd1, 0xcf, 0x13,
	0x8d, 0x8f, 0x7b, 0xf7, 0x48, 0x9e, 0xd5, 0x42, 0x19, 0x63, 0xd4, 0x2f, 0xb8, 0xa9, 0x4f, 0x49,
	0x31, 0x63, 0x65, 0xc7, 0x85, 0x66, 0x5e, 0xea, 0x86, 0xfd, 0x5a, 0x47, 0x11, 0xee, 0x8a, 0x09,
	0xe1, 0xae, 0xfe, 0x47, 0xb1, 0x04, 0x66, 0xba, 0x9b, 0x42, 0x58, 0x39, 0xcc, 0x46, 0x7c, 0xd3,
	0xdd, 0x54, 0x96, 0x73, 0x48, 0xd2, 0xd2, 0x17, 0x7a, 0x9d, 0x26, 0x68, 0x29, 0xc2, 0xed, 0x28,
	0xf4, 0x3a, 0x8b, 0xa4, 0xa8, 0xc4, 0x0b, 0xe6, 0x40, 0x7f, 0xd1, 0x72, 0x30, 0x29, 0x5a, 0xc6,
	0x82, 0x8b, 0xba, 0x70, 0xfb, 0xf1, 0xca, 0x7e, 0x1b, 0x1b, 0xe7, 0x3b, 0xa1, 0x6f, 0x36, 0x63,
	0xee, 0xd4, 0x7e, 0x55, 0x04, 0x1b, 0xb2, 0x88, 0x94, 0x24, 0x38, 0x92, 0x96, 0x04, 0xeb, 0xdb,
	0x6c, 0x64, 0xd9, 0xf7, 0x3a, 0x0b, 0x66, 0x47, 0xbf, 0x87, 0x0d, 0x76, 0x7c, 0x3c, 0x65, 0x1a,
	0xc8, 0x9e, 0x14, 0x09, 0x22, 0xfc, 0x4b, 0x56, 0x1a, 0x24, 0x3e, 0x7a, 0x3f, 0x2b, 0x47, 0x20,
	0xd5, 0xba, 0x51, 0xce, 0x39, 0x85, 0x2e, 0xaa, 0xf6, 0x8b, 0x4f, 0x16, 0xe4, 0x8a, 0xf3, 0x35,
	0x9b, 0x37, 0xa1, 0x35, 0x88, 0x40, 0x18, 0xba, 0x44, 0x5b, 0x0f, 0x19, 0x55, 0x04, 0x1b, 0x08,
	0x25, 0x6f, 0x93, 0x04, 0x5d, 0xec, 0xeb, 0x36, 0x24, 0x9c, 0x07, 0x88, 0x94, 0xb8, 0x1e, 0x66,
	0x23, 0xf2, 0x7c, 0x6a, 0x08, 0x4f, 0xeb, 0x86, 0x4d, 0x3c, 0x98, 0xaa, 0x7f, 0xa2, 0x28, 0x35,
	0x1c, 0x79, 0x90, 0xa0, 0xbf, 0x84, 0xb1, 0xa0, 0xe5, 0xf9, 0x9c, 0x06, 0x6b, 0x21, 0xcf, 0xe6,
	0x95, 0xcc, 0x71, 0xba, 0x01, 0xe4, 0x30, 0x5e, 0xa9, 0x35, 0xcb, 0x81, 0x4c, 0xeb, 0xe7, 0x59,
	0x19, 0x0d, 0x68, 0xc8, 0x2a, 0xd7, 0x66, 0x93, 0x62, 0x05, 0x3f, 0x62, 0x4e, 0xe8, 0x1b, 0x02,
	0xc9, 0xa3, 0x2f, 0x64, 0x63, 0xc9, 0x52, 0xf6, 0x72, 0x13, 0x18, 0x50, 0x3a, 0xe8, 0xa8, 0xc1,
	0xaa, 0x09, 0xc6, 0x39, 0x99, 0x9f, 0x93, 0xb4, 0x5d, 0x1d, 0xcc, 0x1d, 0x32, 0x6a, 0xa7, 0xbf,
	0xba, 0x20, 0x5b, 0x4e, 0x0a, 0x4e, 0xb1, 0x0e, 0x49, 0x7c, 0x29, 0xa1, 0xdf, 0xc0, 0xca, 0xc9,
	0x65, 0xb3, 0x6a, 0xc4, 0x00, 0x75, 0xe2, 0x90, 0xbc, 0x1d, 0x4d, 0x1c, 0x14, 0x4a, 0x61, 0xec,
	0x73, 0x4b, 0x15, 0x5c, 0x2b, 0x12, 0x88, 0x63, 0x7e, 0x56, 0x56, 0x22, 0x12, 0xfd, 0x4f, 0x08,
	0x31, 0x3a, 0x29, 0xff, 0xb3, 0x40, 0xe0, 0xe7, 0xac, 0xb8, 0x9a, 0x45, 0x55, 0xd5, 0x5d, 0x66,
	0x25, 0x69, 0xa1, 0xcb, 0xb5, 0x7a, 0x1c, 0x66, 0x23, 0x1d, 0xe1, 0xa6, 0x28, 0xac, 0xe9, 0x1d,
	0x72, 0x53, 0x54, 0xcc, 0xec, 0x03, 0x09, 0x33, 0xfb, 0x79, 0x36, 0x96, 0xb4, 0xf9, 0xe9, 0xf7,
	0x31, 0x16, 0x19, 0x55, 0xfb, 0x58, 0xdc, 0x64, 0x0e, 0xa3, 0x2c, 0x2d, 0xa7, 0x41, 0xfd, 0x9c,
	0xd4, 0x98, 0x67, 0x5c, 0xcb, 0xe1, 0x41, 0x20, 0xe5, 0x3d, 0x1a, 0xf3, 0x62, 0x15, 0x74, 0xa4,
	0xe7, 0x27, 0x2a, 0xdf, 0xb0, 0x2f, 0x49, 0x61, 0x14, 0x00, 0xf3, 0x66, 0x10, 0xd6, 0x5f, 0xc8,
	0x0e, 0x0b, 0xc1, 0x20, 0x3a, 0x1f, 0x97, 0xdb, 0x3a, 0x2a, 0x09, 0xa4, 0x5e, 0x29, 0x4c, 0xc5,
	0xca, 0x45, 0x07, 0x0f, 0xef, 0x1a, 0x90, 0xcb, 0x68, 0x9c, 0x3d, 0xb3, 0x51, 0x46, 0xb5, 0x2a,
	0xaa, 0xb5, 0x12, 0xbe, 0x3b, 0xc2, 0xd4, 0xc7, 0x77, 0x3a, 0xb4, 0xe8, 0x75, 0x9a, 0xea, 0x82,
	0x26, 0xc4, 0x5e, 0xbe, 0xd3, 0xb9, 0x10, 0x6b, 0xb7, 0xc7, 0x19, 0xc3, 0xa3, 0x7f, 0x62, 0x4a,
	0x8b, 0x67, 0x19, 0x20, 0x34, 0xaf, 0x97, 0x98, 0xb6, 0xe6, 0x73, 0xde, 0x54, 0x55, 0xc3, 0xe1,
	0x3c, 0xcf, 0x95, 0x3e, 0xdf, 0x6d, 0x8c, 0x41, 0x76, 0x23, 0xd2, 0x22, 0xf5, 0x0b, 0x6c, 0xbf,
	0xf0, 0x21, 0x4a, 0xf0, 0x1c, 0xb9, 0x1e, 0x9e, 0xfb, 0x04, 0x07, 0x85, 0x6d, 0x4a, 0x3d, 0x14,
	0x7e, 0x20, 0xb1, 0x7a, 0x08, 0x4b, 0xe6, 0x36, 0xe7, 0x9b, 0x4d, 0x68, 0x26, 0x72, 0x02, 0x19,
	0x81, 0xf4, 0xcc, 0x4e, 0x27, 0xbd, 0x81, 0xb0, 0xf4, 0x06, 0x52, 0xf7, 0x98, 0x46, 0x95, 0x68,
	0x84, 0x66, 0x68, 0x07, 0xa1, 0xdd, 0x0a, 0x70, 0x3f, 0x36, 0x77, 0x9a, 0x96, 0xd9, 0x36, 0xd7,
	0xb9, 0x38, 0x07, 0x2d, 0xb7, 0xcd, 0x9d, 0x69, 0x04, 0x20, 0xda, 0x76, 0x25, 0xba, 0x28, 0xd0,
	0xb6, 0x1b, 0xa3, 0xb1, 0xd5, 0x55, 0x8b, 0x10, 0xb6, 0x3a, 0xca, 0x59, 0xf5, 0x17, 0x48, 0xc5,
	0xe8, 0x9c, 0xe7, 0xe1, 0xf8, 0x5f, 0xf3, 0x3c, 0x4b, 0xf1, 0xdf, 0x85, 0x64, 0xdf, 0x79, 0xf6,
	0x8f, 0xf3, 0x64, 0x42, 0x9e, 0xe5, 0xbe, 0xd7, 0x6f, 0xa2, 0xa9, 0x1e, 0xae, 0xd5, 0xc8, 0xc3,
	0x55, 0x1e, 0xec, 0x0f, 0x28, 0x07, 0xfb, 0xd1, 0x78, 0x1b, 0xcc, 0x19, 0x6f, 0x43, 0xf1, 0x78,
	0xab, 0xb1, 0x11, 0x58, 0x6f, 0x6c, 0xd7, 0x94, 0x47, 0xf7, 0x22, 0x09, 0xba, 0xa9, 0xf8, 0x89,
	0x0e, 0x1d, 0x5b, 0xdc, 0x8f, 0xf7, 0xd7, 0x01, 0x43, 0x17, 0x38, 0x83, 0x50, 0xd8, 0x57, 0x87,
	0xd8, 0x70, 0xcb, 0xf4, 0x39, 0xf7, 0x45, 0x3f, 0x8a, 0x14, 0x2a, 0xf0, 0xea, 0x91, 0x52, 0x99,
	0xfc, 0x42, 0xd4, 0x83, 0xa3, 0x93, 0xa9, 0x83, 0x23, 0x96, 0x26, 0x39, 0x03, 0xcb, 0x9e, 0xeb,
	0xf9, 0x6d, 0xd3, 0xa1, 0x33, 0x9e, 0x00, 0x4f, 0x5d, 0x86, 0x8c, 0x0a, 0x01, 0x71, 0x83, 0x0d,
	0x40, 0x3d, 0x8e, 0x88, 0x7a, 0x92, 0xb0, 0x82, 0x84, 0xe3, 0x92, 0xb0, 0x27, 0x68, 0x6f, 0x66,
	0xc2, 0x12, 0x28, 0xe9, 0xaa, 0xc4, 0x90, 0x80, 0x82, 0xe8, 0x41, 0x36, 0x2c, 0xb0, 0x63, 0xb9,
	0x67, 0xa7, 0xa2, 0xc3, 0xc8, 0x5b, 0x4f, 0xf8, 0xe8, 0x89, 0x1c, 0x28, 0x98, 0x28, 0x07, 0x5a,
	0xe2, 0xa8, 0x5e, 0x39, 0xb6, 0x3a, 0xc4, 0x86, 0x37, 0xb8, 0xe9, 0x84, 0x1b, 0xa8, 0xb7, 0x15,
	0x0d, 0x91, 0x42, 0xa7, 0x68, 0x54, 0x83, 0x50, 0x2f, 0x2b, 0x1a, 0x22, 0x05, 0x9d, 0xc5, 0x69,
	0x2e, 0xa1, 0x42, 0x56, 0x34, 0x64, 0x12, 0x8f, 0xae, 0xe9, 0x27, 0x89, 0xc1, 0xfb, 0xc5, 0xd1,
	0x35, 0xc1, 0x50, 0xe4, 0xad, 0xb1, 0x11, 0x8b, 0xaf, 0x71, 0x37, 0xe0, 0xa8, 0x8e, 0x15, 0x0d,
	0x99, 0x84, 0xe2, 0x82, 0x0d, 0x9b, 0x3b, 0x16, 0xea, 0x60, 0x45, 0x43, 0xa4, 0x62, 0x99, 0xa4,
	0xe3, 0xd9, 0x6e, 0x58, 0x3b, 0xa4, 0xc8, 0x24, 0xcb, 0x00, 0xd1, 0x1f, 0x82, 0x11, 0xe9, 0x74,
	0xb8, 0x1f, 0xd4, 0x0e, 0x63, 0xeb, 0xdc, 0xdc, 0xa7, 0x75, 0x66, 0x89, 0x8a, 0x9a, 0x47, 0xe6,
	0x49, 0x78, 0x90, 0xd1, 0x60, 0xad, 0x25, 0x3d, 0xc8, 0x68, 0x2d, 0x7b, 0x92, 0x1d, 0x48, 0x92,
	0x09, 0x13, 0xe4, 0x91, 0x7e, 0x0e, 0x94, 0x58, 0xe4, 0x39, 0x95, 0x07, 0x6a, 0x22, 0x54, 0xba,
	0xbe, 0x96, 0x41, 0xe8, 0x36, 0x3b, 0x1c, 0x97, 0x20, 0x4f, 0xd6, 0xa9, 0x90, 0xa3, 0x58, 0xc8,
	0xdd, 0x7b, 0x15, 0x22, 0x32, 0x29, 0xe5, 0x1c, 0x5c, 0xcb, 0xc3, 0x25, 0xbe, 0x19, 0x1d, 0xfb,
	0x6a, 0xc7, 0x92, 0xdf, 0x8c, 0xae, 0x55, 0xa0, 0x1e, 0xa3, 0x5e, 0x85, 0x3e, 0xe0, 0x2d, 0x3b,
	0xec, 0xd5, 0x6e, 0xa0, 0x4d, 0x1e, 0xa0, 0x0b, 0xa6, 0xed, 0x4e, 0xd9, 0x61, 0x4f, 0xbf, 0x05,
	0x47, 0x70, 0xc7, 0xe7, 0x1b, 0xdc, 0x45, 0xb3, 0xcd, 0x71, 0xf2, 0x48, 0x49, 0x00, 0x61, 0x9c,
	0x27, 0x4f, 0x94, 0x6f, 0x44, 0x13, 0x7e, 0xf2, 0xd8, 0xf8, 0xe6, 0xf4, 0xb1, 0xf1, 0x4d, 0x19,
	0xa2, 0x33, 0xb8, 0x2a, 0x79, 0x8e, 0x55, 0x3b, 0x81, 0x4b, 0x00, 0xfe, 0x86, 0x85, 0x26, 0xe8,
	0xb5, 0x38, 0xaf, 0x9d, 0x24, 0xe1, 0x0a, 0x13, 0x20, 0xdb, 0x04, 0x66, 0x68, 0xe3, 0x87, 0xd7,
	0xea, 0xb4, 0x4e, 0x46, 0x00, 0xfd, 0x34, 0x1b, 0x82, 0xa5, 0x30, 0xa8, 0xdd, 0x9c, 0x77, 0x3e,
	0x1c, 0x2f, 0xa1, 0x06, 0x91, 0xe9, 0xa7, 0x98, 0xe6, 0xf3, 0xb0, 0xeb, 0xbb, 0x4a, 0x7b, 0xdc,
	0x82, 0x9f, 0x3a, 0x46, 0xf0, 0xa8, 0x45, 0x4e, 0xb2, 0x0a, 0x66, 0x69, 0x92, 0x95, 0xab, 0x76,
	0x2b, 0x36, 0xee, 0x28, 0xc2, 0x2e, 0x20, 0x48, 0x3f, 0xcd, 0xf6, 0x07, 0x1b, 0xa6, 0xcf, 0x9b,
	0x1d, 0xbb, 0x15, 0x76, 0x7d, 0xe9, 0xfd, 0x7b, 0x1b, 0x39, 0xe8, 0x20, 0x6a, 0x99, 0x30, 0xa4,
	0x3c, 0xd7, 0xd8, 0x48, 0xaf, 0x6b, 0xba, 0xab, 0xa6, 0x57, 0x3b, 0x85, 0x9f, 0x28, 0x93, 0x24,
	0x88, 0xad, 0xdb, 0xe8, 0x4e, 0x7d, 0xd5, 0x73, 0x79, 0xed, 0x76, 0xf2, 0xc3, 0x90, 0xc0, 0x2b,
	0x9e, 0xcb, 0x61, 0xd5, 0x6e, 0x39, 0x26, 0x4a, 0x41, 0x13, 0xa4, 0x4f, 0x41, 0x92, 0x34, 0x23,
	0x71, 0x25, 0xa1, 0xf6, 0x1c, 0xb2, 0x40, 0x89, 0x24, 0x19, 0xce, 0xfc, 0x2d, 0x32, 0x4c, 0xdc,
	0x41, 0x0a, 0x15, 0x01, 0xe6, 0x2c, 0x7d, 0x8a, 0x95, 0x23, 0x9b, 0x41, 0xed, 0xce, 0x7e, 0xce,
	0xa8, 0x38, 0x3a, 0xa3, 0x43, 0x19, 0x21, 0x7e, 0x47, 0xf9, 0xf4, 0x05, 0x18, 0x38, 0x9e, 0x83,
	0x67, 0x15, 0xb8, 0x8f, 0x3f, 0x17, 0x19, 0x9d, 0xea, 0xc3, 0x68, 0x4a, 0xd0, 0xc6, 0x02, 0x78,
	0xa5, 0xa5, 0x80, 0x60, 0x5b, 0x74, 0xbc, 0x75, 0x9b, 0xe6, 0x4c, 0xed, 0x2e, 0xea, 0x6e, 0x84,
	0x48, 0x13, 0x9d, 0xe3, 0xad, 0x7b, 0x5d, 0xe1, 0xec, 0x79, 0x37, 0xad, 0x23, 0x04, 0x92, 0xae,
	0x9a, 0xe2, 0x83, 0xe9, 0x34, 0xfb, 0x0c, 0xe9, 0xd1, 0x04, 0xa3, 0xe3, 0x6c, 0xb5, 0xad, 0x91,
	0xcb, 0x3d, 0xc9, 0xb6, 0x96, 0x87, 0x1c, 0xb6, 0x6b, 0x8b, 0x62, 0xee, 0x15, 0x76, 0x0e, 0xd7,
	0xa6, 0x42, 0x26, 0x85, 0x09, 0x0e, 0xbf, 0xf7, 0x79, 0xfd, 0x3c, 0xce, 0xf0, 0x7b, 0x0d, 0xde,
	0xe9, 0x2a, 0xca, 0x86, 0x2f, 0x92, 0xfa, 0xf3, 0x59, 0x39, 0x34, 0x83, 0x4d, 0x62, 0x71, 0xff,
	0xae, 0xce, 0x91, 0x78, 0xa8, 0x5e, 0x02, 0x6a, 0xcc, 0x39, 0xc7, 0x74, 0xcc, 0x09, 0x33, 0x13,
	0x8d, 0x95, 0xc8, 0xe2, 0xf9, 0x7b, 0xb3, 0xd0, 0x20, 0xdb, 0x94, 0xc8, 0x85, 0xac, 0x66, 0x99,
	0x66, 0x76, 0x43, 0x2f, 0x21, 0x86, 0x3d, 0x80, 0x8c, 0x6e, 0xcc, 0x9b, 0x47, 0xf1, 0x39, 0x84,
	0x31, 0x66, 0x46, 0xbf, 0x91, 0x13, 0x2c, 0x32, 0xb0, 0x38, 0x71, 0x1c, 0xbd, 0x30, 0xd8, 0x1e,
	0x54, 0x1c, 0x89, 0x38, 0x0c, 0xdf, 0x39, 0x4b, 0xbf, 0x91, 0x8d, 0x82, 0xc4, 0x24, 0x6d, 0xbc,
	0x2f, 0x10, 0x26, 0x0c, 0x73, 0x67, 0x81, 0xcc, 0xbc, 0x27, 0x58, 0x85, 0x8c, 0xc8, 0xab, 0xdd,
	0x5e, 0x33, 0x70, 0x6b, 0x2f, 0x94, 0xae, 0xba, 0x7e, 0x10, 0x9e, 0xed, 0xf6, 0x1a, 0x6e, 0xc2,
	0x91, 0xe6, 0x21, 0x12, 0x32, 0xa4, 0x23, 0xcd, 0x61, 0x36, 0xe2, 0x7b, 0x1e, 0xea, 0x23, 0x2f,
	0x12, 0xd6, 0x06, 0xcf, 0x6b, 0xd3, 0x1d, 0x27, 0xbb, 0xb3, 0xe1, 0x85, 0x5e, 0xed, 0xac, 0xb0,
	0x74, 0x61, 0x0a, 0xba, 0x18, 0xa6, 0x3f, 0x59, 0xe5, 0xa6, 0x70, 0xde, 0x94, 0x00, 0x80, 0x36,
	0xcb, 0xbb, 0xd9, 0xf0, 0x3a, 0x77, 0x2d, 0xee, 0xd7, 0xa6, 0xf3, 0x5c, 0xd9, 0xce, 0xcf, 0x2c,
	0x4e, 0xcf, 0x18, 0x64, 0x09, 0x12, 0x84, 0x30, 0x36, 0x89, 0x33, 0x35, 0xe4, 0x0c, 0x1d, 0x9f,
	0x10, 0x48, 0x8e, 0xed, 0x35, 0xdf, 0x6c, 0x8b, 0x1e, 0x3b, 0x87, 0xf8, 0x32, 0x42, 0xa4, 0x00,
	0xab, 0x76, 0xc4, 0xf9, 0xf4, 0xf1, 0x8b, 0x62, 0x48, 0x44, 0x81, 0x6e, 0x96, 0xdc, 0xa3, 0x08,
	0x84, 0x47, 0xb9, 0x77, 0x30, 0x5d, 0x91, 0x12, 0xa4, 0x2f, 0xef, 0x4b, 0x48, 0x61, 0x8f, 0x85,
	0x05, 0xe1, 0xb2, 0x3c, 0xc9, 0xca, 0xa4, 0xc5, 0xb9, 0x6b, 0x5e, 0xed, 0x91, 0x5d, 0x47, 0x31,
	0x6a, 0x7e, 0xee, 0x9a, 0x27, 0x46, 0x71, 0x20, 0x92, 0xfa, 0x73, 0xd8, 0xbe, 0xd8, 0xcd, 0x2d,
	0x08, 0x3d, 0x1f, 0x44, 0xdd, 0x79, 0xe5, 0x3a, 0x0a, 0x20, 0x1a, 0x04, 0x87, 0xa9, 0x49, 0xa6,
	0x43, 0x41, 0xb7, 0x40, 0xfa, 0x0f, 0x5a, 0x0f, 0x05, 0xc9, 0xad, 0x6c, 0x4c, 0x6c, 0x1d, 0x92,
	0x68, 0x51, 0x18, 0x26, 0x10, 0x2a, 0xc9, 0x9e, 0x27, 0x7d, 0xa6, 0xb0, 0xea, 0x4b, 0x79, 0x07,
	0xbb, 0x91, 0xcb, 0x8c, 0x70, 0xa6, 0xc2, 0xea, 0x4e, 0x83, 0xc4, 0x6e, 0x3b, 0xd8, 0xbe, 0x41,
	0x6d, 0x79, 0xd7, 0x15, 0x0f, 0x86, 0x24, 0xb4, 0xba, 0xd8, 0x83, 0xd1, 0x30, 0x8e, 0x69, 0x5c,
	0x83, 0x60, 0x43, 0x5d, 0x6f, 0x03, 0xac, 0xf6, 0x28, 0xc9, 0x62, 0x00, 0x3a, 0x8f, 0x10, 0xfd,
	0x3e, 0x76, 0xd8, 0xb4, 0xac, 0xe6, 0xd5, 0x0d, 0xaf, 0xdb, 0xe3, 0xb1, 0x14, 0xe0, 0x76, 0xdb,
	0x35, 0x83, 0x0e, 0x43, 0x4c, 0xcb, 0xba, 0x82, 0x58, 0xb9, 0xa3, 0x2f, 0x76, 0xdb, 0xe8, 0xde,
	0x8e, 0x6b, 0x56, 0x83, 0x54, 0x7b, 0x4c, 0xc0, 0x9c, 0x09, 0x60, 0xa3, 0xea, 0xfa, 0xc8, 0x60,
	0x85, 0x94, 0xfb, 0xc0, 0x76, 0xa7, 0xba, 0xbe, 0x30, 0x99, 0x05, 0xd1, 0x25, 0xc5, 0x0b, 0xb8,
	0x47, 0x95, 0x02, 0x79, 0x49, 0x51, 0x64, 0x86, 0x49, 0x07, 0x99, 0x2f, 0x46, 0x99, 0x17, 0xcc,
	0x1d, 0xc8, 0x7c, 0x97, 0xb0, 0x61, 0x5d, 0xca, 0x73, 0xa6, 0x49, 0x9a, 0x4d, 0xc8, 0x80, 0xa5,
	0xd7, 0x59, 0x35, 0x2a, 0x0e, 0x79, 0x5e, 0x16, 0x47, 0x68, 0xa2, 0x48, 0xe0, 0x0a, 0x8a, 0x2e,
	0x7a, 0x36, 0x8a, 0x3e, 0x7c, 0x4c, 0x9c, 0x86, 0x75, 0x5d, 0x2e, 0x7b, 0xf0, 0x3c, 0x55, 0x8c,
	0xc6, 0x6e, 0x50, 0xbb, 0x92, 0x77, 0x73, 0x30, 0x1e, 0x7d, 0xb6, 0x4b, 0x75, 0x11, 0x7d, 0xc1,
	0x82, 0x08, 0x00, 0x5d, 0x0a, 0x8c, 0xc4, 0x6d, 0xcb, 0xc7, 0x77, 0xed, 0xd2, 0x86, 0xed, 0xae,
	0x20, 0x9d, 0xb4, 0x21, 0xc9, 0x34, 0xd4, 0xb8, 0xe5, 0xd8, 0x30, 0x88, 0xa9, 0x07, 0x5e, 0x4a,
	0xbb, 0x06, 0xc1, 0xa2, 0x5d, 0x83, 0x1c, 0x55, 0xae, 0x6e, 0x70, 0x77, 0xc7, 0xe6, 0xb5, 0x26,
	0x1d, 0x32, 0x20, 0xf0, 0x0a, 0xc1, 0x40, 0x67, 0x58, 0xc3, 0xe3, 0x85, 0xe6, 0xba, 0xbd, 0x26,
	0xaf, 0x67, 0x3d, 0x49, 0x47, 0x6a, 0x84, 0x38, 0x6f, 0xaf, 0x89, 0xdb, 0x59, 0x0b, 0xb0, 0x0d,
	0x89, 0xb3, 0x32, 0x9c, 0xf0, 0xe6, 0xae, 0x1b, 0xa7, 0xb4, 0x00, 0x29, 0x1b, 0xa7, 0xaf, 0x80,
	0x60, 0x65, 0x6c, 0x49, 0x93, 0xdf, 0x2a, 0xad, 0x8c, 0x2d, 0x61, 0xef, 0x3b, 0xc8, 0x86, 0x5b,
	0x0e, 0xaa, 0xbd, 0x2d, 0xa1, 0x25, 0x3a, 0xa0, 0xf4, 0xde, 0xc2, 0xc6, 0xd0, 0x8e, 0x11, 0xfa,
	0x26, 0x74, 0xa6, 0x6d, 0xd5, 0x2c, 0x5a, 0xb3, 0x01, 0xba, 0x82, 0x40, 0xf2, 0x10, 0x35, 0x6d,
	0x12, 0xb3, 0xc9, 0xf0, 0xcc, 0x89, 0x48, 0x02, 0xd1, 0xf6, 0xfc, 0x30, 0xab, 0x8a, 0x95, 0x49,
	0x68, 0x38, 0x6b, 0x7b, 0x79, 0xcd, 0x55, 0x3a, 0x71, 0x22, 0xa0, 0x0b, 0x54, 0x68, 0x77, 0xc1,
	0x45, 0x8b, 0xd7, 0xd6, 0x45, 0xe3, 0x12, 0x10, 0x16, 0x2c, 0x18, 0x33, 0xfb, 0x57, 0xf9, 0x9a,
	0xe7, 0xf3, 0xa6, 0xa4, 0x45, 0xb7, 0x9f, 0x8d, 0x5c, 0x57, 0xbb, 0x68, 0xfa, 0xef, 0xa3, 0x3c,
	0xc2, 0xac, 0x83, 0xce, 0x3f, 0x07, 0xd8, 0x10, 0xae, 0xba, 0x35, 0x9b, 0x9a, 0x03, 0x13, 0x20,
	0x91, 0xa2, 0xeb, 0xde, 0xcb, 0xc9, 0x2a, 0x8f, 0x1e, 0x7a, 0x2f, 0x63, 0xfb, 0xb9, 0xcb, 0xdb,
	0xbd, 0xe6, 0x86, 0xe9, 0x5a, 0xab, 0x9e, 0x27, 0xf6, 0xeb, 0x4d, 0xfc, 0xba, 0x3b, 0xfb, 0xf4,
	0xd4, 0x0c, 0xe4, 0x98, 0x15, 0x19, 0xe2, 0xee, 0xda, 0xc7, 0xd3, 0x70, 0x7d, 0x59, 0x38, 0x13,
	0x47, 0xec, 0x6b, 0x0e, 0x72, 0xbe, 0xbd, 0x1f, 0x67, 0xbc, 0xfa, 0x29, 0x68, 0x89, 0xab, 0xb8,
	0x0e, 0x2a, 0x60, 0x7a, 0x83, 0x8d, 0x8b, 0x05, 0x34, 0x62, 0xd9, 0xee, 0xe7, 0xc6, 0x46, 0x73,
	0x02, 0xa9, 0x93, 0x3c, 0xc5, 0x1a, 0x1c, 0x31, 0x05, 0x81, 0x1e, 0x37, 0x14, 0x79, 0xa4, 0xeb,
	0xd2, 0x10, 0x40, 0xa0, 0x3c, 0x37, 0x3f, 0xc5, 0xb4, 0x90, 0xb7, 0x3b, 0x4d, 0x55, 0xcd, 0xf3,
	0xc8, 0x47, 0x02, 0xe0, 0x8d, 0x58, 0xd5, 0xbb, 0x99, 0x55, 0x41, 0x92, 0xb2, 0x4d, 0x47, 0x74,
	0x76, 0x87, 0x3a, 0x5b, 0x00, 0xa9, 0xb3, 0xa3, 0xab, 0xc6, 0xaf, 0x50, 0xaf, 0x1a, 0x3f, 0x8f,
	0x1d, 0x5e, 0x6d, 0x9a, 0xad, 0x57, 0x74, 0x6d, 0x10, 0xb6, 0x71, 0xf0, 0xb7, 0xed, 0x00, 0xeb,
	0xe4, 0x23, 0x93, 0x83, 0xab, 0x93, 0x84, 0x9d, 0x52, 0x91, 0xfa, 0x4a, 0x8e, 0xa7, 0x65, 0xb0,
	0x7b, 0xbb, 0x5c, 0x83, 0xa3, 0xe5, 0x23, 0x6c, 0x9f, 0x1c, 0x89, 0x64, 0x10, 0x84, 0xb1, 0x11,
	0xe6, 0x1e, 0x07, 0xa4, 0x4d, 0x8b, 0xc6, 0x38, 0x8f, 0x13, 0x38, 0x16, 0x4e, 0xb0, 0x0a, 0x2c,
	0x64, 0x91, 0x74, 0xd3, 0x15, 0x36, 0x55, 0xdb, 0x3d, 0x2f, 0x04, 0x9c, 0x3a, 0xab, 0xa2, 0x53,
	0x67, 0x13, 0xbd, 0x3a, 0x6d, 0xab, 0xb6, 0x45, 0x1b, 0x28, 0x02, 0xe7, 0x3d, 0x77, 0x7d, 0xce,
	0x82, 0x0f, 0x35, 0x3b, 0x1d, 0xa7, 0xd7, 0x6c, 0x79, 0x7e, 0x27, 0xa0, 0x1a, 0x6d, 0xef, 0xfa,
	0xa1, 0x93, 0x40, 0x3e, 0x05, 0xd4, 0xf1, 0x50, 0x1d, 0x33, 0x13, 0x40, 0xfd, 0x12, 0xdb, 0x47,
	0xfc, 0x6c, 0x77, 0xcb, 0x96, 0x12, 0xe7, 0x4e, 0x3f, 0x4f, 0x55, 0x21, 0xe7, 0xfb, 0x9d, 0x60,
	0x0e, 0xc9, 0x63, 0xbe, 0xe3, 0xad, 0x24, 0x34, 0xed, 0x59, 0xda, 0xcb, 0xd3, 0xe1, 0xfa, 0x78,
	0x96, 0xde, 0xc3, 0x0e, 0x09, 0xef, 0x05, 0xd3, 0x6a, 0xae, 0x7b, 0xee, 0xfa, 0xba, 0xe9, 0x91,
	0xb4, 0x7e, 0x95, 0xfc, 0x89, 0xc8, 0x85, 0xc1, 0xb4, 0xce, 0x13, 0x0e, 0x05, 0xf7, 0xe7, 0xb2,
	0x03, 0x98, 0xe9, 0x15, 0x74, 0x79, 0x16, 0x3e, 0x09, 0xb3, 0x3c, 0x45, 0xbe, 0xb1, 0x80, 0x7b,
	0x14, 0xaf, 0xcf, 0xfa, 0x1d, 0xb2, 0x00, 0xaf, 0xb0, 0x43, 0x21, 0x37, 0xdb, 0xcd, 0x6c, 0x3f,
	0xff, 0x97, 0x6b, 0xeb, 0xe7, 0xfd, 0x90, 0x7d, 0x26, 0xd5, 0xd7, 0xcf, 0x67, 0x47, 0xa8, 0x70,
	0x71, 0xf3, 0xca, 0xe2, 0x6b, 0x71, 0xc7, 0xbf, 0x12, 0xeb, 0x72, 0x10, 0x09, 0xc8, 0xe6, 0x38,
	0xcd, 0xd7, 0xe4, 0x18, 0x78, 0x98, 0xdd, 0xd0, 0x27, 0x27, 0x6d, 0x5c, 0xff, 0x15, 0x33, 0xd7,
	0x72, 0x32, 0xd3, 0x2e, 0xb6, 0xc4, 0x0e, 0x8b, 0x35, 0x14, 0x49, 0x24, 0x17, 0x58, 0x47, 0xff,
	0xdb, 0xee, 0xeb, 0xe8, 0x41, 0xca, 0x37, 0x15, 0x67, 0x13, 0x3e, 0x98, 0x2c, 0xe4, 0xad, 0x0d,
	0xd7, 0x73, 0xbc, 0xf5, 0x5e, 0xed, 0x1b, 0x72, 0x83, 0x18, 0xac, 0x44, 0x04, 0x86, 0x42, 0xac,
	0xcf, 0x31, 0x4d, 0xbd, 0x79, 0x86, 0xad, 0xfa, 0xaa, 0x42, 0x7f, 0xf5, 0x23, 0xb6, 0x02, 0x1b,
	0x63, 0xf1, 0xed, 0x33, 0x6c, 0xd0, 0x53, 0x6c, 0x3c, 0x32, 0x09, 0x90, 0x8f, 0x5e, 0xed, 0xbf,
	0x93, 0xa1, 0x74, 0x2c, 0x82, 0x93, 0x2b, 0xdf, 0x8d, 0x8c, 0xa1, 0x25, 0x95, 0xb6, 0xe6, 0x57,
	0x13, 0x51, 0x19, 0x40, 0xb4, 0x2b, 0x1f, 0x65, 0x25, 0xc4, 0xb7, 0xcd, 0x9d, 0xda, 0x6b, 0xc4,
	0xc1, 0x1a, 0x00, 0x16, 0xcc, 0x1d, 0x50, 0x97, 0xf8, 0x4e, 0x33, 0xf2, 0xa1, 0xc2, 0x0a, 0x3f,
	0x4d, 0x15, 0x4e, 0x79, 0x60, 0x4c, 0x0a, 0x9a, 0xc8, 0x04, 0xce, 0x77, 0x24, 0x08, 0xeb, 0xbb,
	0xc8, 0x0e, 0x06, 0xbc, 0xe5, 0xf3, 0x70, 0xcd, 0x76, 0x78, 0x53, 0x69, 0xc0, 0x6f, 0xdc, 0xab,
	0x01, 0x0f, 0xc4, 0xf9, 0x62, 0xa8, 0xfe, 0x28, 0x1b, 0x53, 0xf8, 0xb5, 0xcd, 0x4e, 0xed, 0xb5,
	0x85, 0x5d, 0x77, 0x92, 0x46, 0x44, 0xbd, 0x60, 0x8a, 0x03, 0xca, 0x6a, 0xa0, 0xc2, 0xf4, 0x47,
	0x18, 0x28, 0xc4, 0x5d, 0xc7, 0xf4, 0x51, 0x5f, 0xab, 0x7d, 0x13, 0x31, 0x7c, 0x76, 0x5f, 0xf1,
	0x04, 0x69, 0x41, 0x6a, 0x26, 0x76, 0xa3, 0x7e, 0x0c, 0xd1, 0x5f, 0x20, 0xcc, 0x7f, 0xa2, 0x97,
	0x9f, 0x29, 0xec, 0x25, 0x1e, 0x90, 0x69, 0x30, 0x10, 0x2b, 0xe3, 0xe8, 0x86, 0xd7, 0xe6, 0x8e,
	0xe9, 0xa2, 0x01, 0xfc, 0x75, 0xd4, 0x2b, 0x4c, 0xc2, 0xe6, 0x2c, 0xfd, 0x02, 0xd3, 0xc8, 0x25,
	0x46, 0x71, 0xbd, 0x7b, 0x7d, 0x61, 0xd7, 0x65, 0x0f, 0xf4, 0xf2, 0x95, 0xc8, 0x2d, 0x4f, 0x2c,
	0x7b, 0x7e, 0x02, 0xa8, 0x5f, 0x86, 0xf5, 0x3d, 0xe4, 0x7e, 0xc2, 0x54, 0xf8, 0x86, 0xc2, 0xae,
	0xeb, 0xde, 0x0c, 0x64, 0x48, 0x1b, 0x0a, 0xc7, 0x79, 0x12, 0x0a, 0xf2, 0x66, 0x14, 0x3c, 0x04,
	0xbe, 0xe9, 0x8d, 0xe2, 0x9b, 0x64, 0x00, 0x91, 0x39, 0x4b, 0x3f, 0xc8, 0x86, 0x40, 0xcb, 0xe3,
	0xb5, 0x37, 0xd1, 0xf9, 0x30, 0xa5, 0x60, 0x7c, 0xc2, 0x36, 0xe1, 0x9b, 0xee, 0x66, 0xed, 0xcd,
	0xf2, 0xe0, 0xd7, 0x76, 0x0d, 0xd3, 0xdd, 0x04, 0x6d, 0x8c, 0xf4, 0x4b, 0xf5, 0x1c, 0xe4, 0x2d,
	0x74, 0xf4, 0x3e, 0x8e, 0x98, 0x99, 0xf8, 0x34, 0x64, 0x36, 0x3a, 0xea, 0xc6, 0x2e, 0xf9, 0xde,
	0xe2, 0xae, 0x22, 0x38, 0x1d, 0x17, 0xc5, 0x2b, 0xb9, 0x38, 0x13, 0xc7, 0xfe, 0xb9, 0x9d, 0x69,
	0x78, 0xae, 0xa2, 0x1e, 0x34, 0x7d, 0x1f, 0x9d, 0x47, 0x8c, 0x01, 0x42, 0x39, 0x6a, 0x7a, 0x0e,
	0xdb, 0xd7, 0xf6, 0xdc, 0x70, 0x23, 0x41, 0xfb, 0xfd, 0x44, 0x3b, 0x8e, 0x18, 0x85, 0x78, 0x82,
	0x0d, 0x84, 0x3b, 0x6e, 0xed, 0x63, 0xc5, 0xbc, 0x85, 0x29, 0x72, 0x59, 0x30, 0x80, 0x48, 0x7f,
	0x31, 0x1b, 0x45, 0xbf, 0x0d, 0x71, 0xcc, 0xf9, 0x03, 0x94, 0xe7, 0xc6, 0x3e, 0x79, 0x84, 0x9b,
	0x83, 0xc1, 0x42, 0xfa, 0xed, 0x75, 0x43, 0xfd, 0x96, 0x58, 0x04, 0x25, 0x21, 0xfa, 0x07, 0x8b,
	0xf2, 0x12, 0x3f, 0x42, 0x49, 0x94, 0xae, 0xa3, 0x83, 0x5e, 0xd7, 0x95, 0xbe, 0xab, 0x3f, 0x54,
	0x94, 0x87, 0x78, 0x00, 0xa4, 0xce, 0xad, 0xb3, 0x0a, 0x0d, 0x44, 0x02, 0xd6, 0x7e, 0x58, 0xd0,
	0x20, 0xd0, 0x40, 0x98, 0xbe, 0xc4, 0xc6, 0xe2, 0x13, 0x54, 0xec, 0x80, 0x1f, 0x29, 0xee, 0x2a,
	0xfe, 0xcb, 0xb3, 0x57, 0x45, 0xfc, 0x0f, 0x14, 0x10, 0x14, 0xda, 0xda, 0x30, 0x5d, 0x97, 0x0b,
	0xef, 0xad, 0x1f, 0x15, 0x85, 0x0a, 0x20, 0x9a, 0xed, 0x6f, 0x63, 0x63, 0x66, 0xab, 0xd5, 0x6d,
	0x77, 0x1d, 0x68, 0x7b, 0xbf, 0xbd, 0x5a, 0xfb, 0x78, 0x51, 0x7a, 0x00, 0x4b, 0xb0, 0xd1, 0x5e,
	0xd5, 0x67, 0x18, 0xa3, 0x91, 0xb9, 0xea, 0x05, 0x41, 0xed, 0x13, 0xc5, 0x5d, 0x95, 0x2a, 0x6c,
	0x97, 0xb3, 0x5e, 0x20, 0xf5, 0x64, 0x47, 0xa6, 0x61, 0xfa, 0x5c, 0xdd, 0x30, 0xbd, 0x8d, 0xae,
	0xdd, 0x8c, 0xb4, 0xee, 0xda, 0x27, 0x8b, 0xbb, 0x4e, 0x9f, 0x2b, 0x94, 0x41, 0x2a, 0xdf, 0x62,
	0xfa, 0x5c, 0x4d, 0x42, 0xf5, 0x25, 0x76, 0x80, 0x2a, 0xd8, 0xda, 0x30, 0x1d, 0x87, 0xbb, 0x52,
	0x83, 0xfa, 0x54, 0x31, 0xef, 0x82, 0x14, 0xd6, 0x70, 0x4a, 0x52, 0x1a, 0xba, 0x93, 0x48, 0x23,
	0xc3, 0x55, 0x76, 0x30, 0x53, 0xd5, 0xa6, 0xcb, 0xb7, 0x6b, 0x9f, 0x2e, 0xee, 0x7a, 0x32, 0x90,
	0xaa, 0xee, 0x22, 0xdf, 0x16, 0x27, 0x03, 0x57, 0x33, 0x08, 0x7d, 0x9b, 0xdd, 0xb0, 0xed, 0xf9,
	0x8e, 0x85, 0xad, 0x2a, 0xf7, 0xef, 0x20, 0x3a, 0x4e, 0xac, 0x7d, 0x86, 0x8a, 0xba, 0xaf, 0x4f,
	0x51, 0x97, 0x20, 0x2f, 0xb4, 0x6b, 0xfa, 0x1c, 0x92, 0x4a, 0x3c, 0xb2, 0xdd, 0x0f, 0xaf, 0xdf,
	0xcd, 0x4a, 0x9d, 0x2d, 0x61, 0xe6, 0xf9, 0xb1, 0x7c, 0xd7, 0x83, 0x8b, 0xcb, 0x28, 0x5f, 0x8d,
	0x74, 0xb6, 0xc8, 0xae, 0x73, 0x86, 0x1d, 0x6c, 0x9b, 0xb6, 0xeb, 0xd8, 0x2e, 0x6f, 0x26, 0x16,
	0xaa, 0xb7, 0xd2, 0x41, 0xa5, 0x2e, 0xb1, 0x0b, 0xf1, 0x82, 0xf5, 0x6c, 0xf2, 0xb2, 0x94, 0x5e,
	0x4c, 0x41, 0xb7, 0x5d, 0x7b, 0x1b, 0xb9, 0xf0, 0x54, 0xd7, 0x79, 0x38, 0x4d, 0xe0, 0x46, 0xb7,
	0x0d, 0xeb, 0x45, 0x37, 0xe0, 0x56, 0x82, 0xf2, 0xed, 0x44, 0x39, 0x06, 0x88, 0x1c, 0x52, 0x79,
	0x7a, 0x08, 0xa4, 0xef, 0x50, 0x48, 0x1b, 0x04, 0x07, 0xd2, 0x3b, 0x99, 0xce, 0xdb, 0x9d, 0xb0,
	0x27, 0x6d, 0x5f, 0xa8, 0xc2, 0xd4, 0xde, 0x39, 0x80, 0x6a, 0x81, 0x86, 0x28, 0x32, 0x7e, 0x21,
	0xe2, 0xe8, 0x03, 0x6c, 0x54, 0x39, 0x67, 0xbb, 0x9e, 0xa0, 0x13, 0x47, 0x1f, 0x64, 0x15, 0xf5,
	0x10, 0x4a, 0xcd, 0x3b, 0xb8, 0x57, 0xde, 0x27, 0xd9, 0xe1, 0x3e, 0xa7, 0x49, 0x39, 0x55, 0x78,
	0x6e, 0xd2, 0x5f, 0xe4, 0x48, 0xce, 0xb0, 0x16, 0x11, 0x05, 0x94, 0x12, 0x5a, 0xec, 0x68, 0xff,
	0xa3, 0xa4, 0xaf, 0x57, 0x21, 0x8f, 0xb3, 0xb1, 0xe4, 0x89, 0x40, 0x0e, 0xe3, 0x7b, 0x92, 0x8c,
	0x8f, 0xe7, 0xad, 0xc5, 0x11, 0x13, 0x95, 0xf9, 0xcb, 0xd8, 0xbe, 0xcc, 0x29, 0xc1, 0x75, 0xdf,
	0x04, 0x4b, 0x5e, 0xa9, 0x48, 0xd6, 0xbd, 0x9a, 0x30, 0xca, 0xe7, 0xb0, 0xbe, 0x37, 0xc9, 0x3a,
	0x77, 0x1b, 0x89, 0x6f, 0x1a, 0xa8, 0xcc, 0x97, 0x58, 0x35, 0x61, 0x2b, 0x55, 0x99, 0x0f, 0x11,
	0xf3, 0x53, 0x49, 0xe6, 0x7a, 0xd6, 0xb9, 0x5c, 0x65, 0x78, 0x99, 0x8d, 0x25, 0x2d, 0x91, 0x39,
	0xc3, 0xed, 0xae, 0x24, 0xc7, 0xa3, 0xd9, 0x15, 0x04, 0x58, 0x2c, 0x7a, 0x16, 0x57, 0x39, 0x3f,
	0xc4, 0xc6, 0x53, 0x86, 0xb5, 0xeb, 0x1a, 0xc9, 0x2f, 0x64, 0x63, 0x49, 0x7b, 0xda, 0xb5, 0x06,
	0x55, 0x91, 0x7d, 0x9c, 0x31, 0x68, 0x7d, 0x95, 0x7d, 0x2c, 0xf9, 0xa8, 0xec, 0xa7, 0xd9, 0xa1,
	0x7c, 0x2b, 0xcc, 0x75, 0x56, 0x52, 0xcf, 0x5a, 0x5c, 0x72, 0x1a, 0xe9, 0xee, 0x64, 0x2d, 0x53,
	0x87, 0x30, 0x11, 0x8b, 0xb3, 0x9e, 0xb7, 0xa9, 0xb2, 0x6f, 0xb2, 0xfd, 0x39, 0xd6, 0x97, 0x1c,
	0xfe, 0x7b, 0xdc, 0x79, 0x8c, 0x78, 0xe4, 0x15, 0xf0, 0x9f, 0x79, 0xa9, 0xf2, 0xe8, 0xe3, 0x6c,
	0x7f, 0x8e, 0xf9, 0x40, 0x2d, 0x60, 0x80, 0x0a, 0x38, 0x9d, 0x2c, 0x20, 0xa5, 0xde, 0x60, 0x76,
	0x64, 0xa4, 0x32, 0x7f, 0x29, 0x3b, 0x90, 0x67, 0x44, 0xf8, 0x3a, 0x71, 0x7f, 0x19, 0xd3, 0xb3,
	0x3a, 0x50, 0xce, 0x6c, 0xdd, 0xbd, 0x6f, 0x89, 0xc5, 0x39, 0x62, 0xa1, 0xb2, 0x7f, 0x98, 0x69,
	0x69, 0x8d, 0x28, 0x87, 0x79, 0x7f, 0x6f, 0xc2, 0x49, 0xb6, 0x3f, 0x47, 0x43, 0xb9, 0x2e, 0x87,
	0xc4, 0xb3, 0xec, 0x40, 0x9e, 0x32, 0x72, 0x5d, 0x3c, 0x1e, 0x62, 0xe3, 0x29, 0xc9, 0x7f, 0xaf,
	0xaf, 0x18, 0x4a, 0xcd, 0xf2, 0x8c, 0xdc, 0xfa, 0x55, 0xce, 0xf2, 0xe8, 0xd2, 0x4d, 0x72, 0x17,
	0x4a, 0x4a, 0x9f, 0xd7, 0xbd, 0x0b, 0x4d, 0x77, 0xdd, 0x75, 0xee, 0xb9, 0x53, 0x9c, 0xae, 0x85,
	0xaa, 0xcc, 0x4d, 0x76, 0x20, 0x4f, 0x18, 0xbd, 0xfe, 0x22, 0x7a, 0xae, 0xd9, 0xb6, 0x5b, 0x52,
	0xfd, 0x57, 0x8b, 0xb0, 0xd8, 0xe1, 0x3e, 0x02, 0xe4, 0xd7, 0xb3, 0x14, 0x87, 0xdd, 0xb8, 0xbb,
	0xec, 0x78, 0xdd, 0x1b, 0x60, 0x9a, 0x8b, 0xea, 0xb2, 0xfa, 0x96, 0x02, 0xd3, 0x85, 0xb9, 0xab,
	0x39, 0xb3, 0x13, 0x72, 0xd7, 0x92, 0xf7, 0x6d, 0x57, 0x1d, 0xcf, 0xb3, 0x84, 0x72, 0x4e, 0xce,
	0x72, 0x0c, 0x41, 0x17, 0xe5, 0x1d, 0xbc, 0x60, 0xc3, 0xec, 0xd9, 0x4d, 0x75, 0x2d, 0x66, 0x08,
	0x22, 0x82, 0xe7, 0x33, 0x76, 0x75, 0xa3, 0xbb, 0xd6, 0x8d, 0xef, 0xa6, 0x65, 0x84, 0x15, 0x51,
	0xee, 0xd9, 0xee, 0xda, 0x9a, 0x51, 0x46, 0x62, 0x74, 0x70, 0xff, 0x93, 0x31, 0xba, 0x8f, 0x3d,
	0x69, 0x93, 0xd8, 0x76, 0x7d, 0x1e, 0x71, 0x91, 0xf7, 0x9b, 0x88, 0x22, 0xe2, 0xc8, 0x00, 0x9f,
	0xc2, 0x3f, 0x8d, 0x3c, 0x66, 0xa5, 0x7f, 0xda, 0xfd, 0xe2, 0x3a, 0x73, 0x9b, 0xbb, 0xa1, 0x8c,
	0x83, 0xd5, 0xf7, 0xca, 0xa9, 0x42, 0x9a, 0x71, 0x6c, 0x1b, 0xde, 0xdb, 0xb1, 0x6d, 0xe4, 0x1a,
	0x1c, 0xdb, 0x4a, 0xd7, 0xea, 0xd8, 0x56, 0xbe, 0x46, 0xc7, 0x36, 0x96, 0xe3, 0xd8, 0xf6, 0x70,
	0xe4, 0xd8, 0x36, 0xda, 0xcf, 0x88, 0x20, 0xdb, 0xfe, 0x5a, 0x9c, 0xdb, 0x2a, 0x19, 0xe7, 0xb6,
	0x8c, 0xdb, 0x51, 0xf5, 0x5a, 0xdc, 0x8e, 0xc6, 0x72, 0xdc, 0x8e, 0xee, 0x66, 0x23, 0x32, 0x80,
	0xc9, 0xf8, 0xee, 0x9d, 0x23, 0xe9, 0x22, 0x97, 0x48, 0x4d, 0x71, 0x89, 0x8c, 0x5d, 0x0a, 0xf6,
	0x25, 0x5c, 0x0a, 0x52, 0xee, 0x29, 0x7a, 0xc6, 0x3d, 0x25, 0x3a, 0xe3, 0xdd, 0x8f, 0x63, 0x4f,
	0x9c, 0xf1, 0xde, 0xc9, 0x86, 0xfc, 0xae, 0xcb, 0x83, 0xda, 0x81, 0x3d, 0xee, 0x28, 0x23, 0x15,
	0x90, 0x07, 0x9b, 0xb6, 0x1b, 0xd4, 0x0e, 0xee, 0x41, 0x8e, 0x54, 0xd2, 0x53, 0xf3, 0x50, 0xec,
	0xa9, 0xa9, 0x9e, 0x15, 0x1e, 0x26, 0x8f, 0xf0, 0xec, 0x59, 0x61, 0x4d, 0x38, 0x98, 0xe3, 0x59,
	0xe1, 0x31, 0x56, 0xf6, 0xfc, 0x75, 0x91, 0xe5, 0x08, 0xdd, 0xe9, 0xf4, 0xfc, 0x75, 0xca, 0x93,
	0x39, 0xfd, 0x3b, 0x7a, 0x7d, 0xa7, 0x7f, 0x29, 0xbf, 0x86, 0x63, 0x19, 0xbf, 0x86, 0xbb, 0xd8,
	0x88, 0xd5, 0xf5, 0xcd, 0x55, 0x87, 0xd7, 0x6e, 0xc8, 0x73, 0xe8, 0x5e, 0x30, 0x3b, 0xf3, 0x9e,
	0xbb, 0x7e, 0xce, 0x90, 0x64, 0xfa, 0x32, 0xdb, 0x2f, 0xad, 0x39, 0x1c, 0x57, 0x21, 0xb2, 0x71,
	0x1f, 0xc7, 0xe5, 0xec, 0x44, 0xee, 0xb2, 0xa1, 0x2c, 0x57, 0x86, 0x3c, 0xd7, 0x51, 0x56, 0xb0,
	0xe8, 0xd0, 0xf0, 0xc6, 0xbc, 0x43, 0xc3, 0x9b, 0x94, 0x43, 0xc3, 0x93, 0x29, 0x53, 0xcc, 0x89,
	0xac, 0x25, 0xe6, 0x72, 0xce, 0x79, 0xd4, 0xc9, 0x7e, 0x96, 0x06, 0x75, 0xee, 0xec, 0x79, 0x26,
	0x75, 0x17, 0x1b, 0xa6, 0x43, 0x12, 0x74, 0x95, 0xdb, 0xed, 0x30, 0x45, 0xd0, 0xe1, 0x60, 0xa0,
	0xc3, 0x1d, 0xab, 0x76, 0x33, 0x79, 0xa5, 0xd1, 0x31, 0x8d, 0x05, 0x6b, 0xae, 0x62, 0x9b, 0xbe,
	0xe5, 0x3a, 0x6c, 0xfb, 0xc7, 0x58, 0xb9, 0xb3, 0xd5, 0x11, 0xe3, 0xe5, 0x56, 0x72, 0x9f, 0xea,
	0x6c, 0x75, 0x68, 0xbc, 0xdc, 0xce, 0x34, 0xd9, 0x39, 0x51, 0x00, 0xbb, 0xdb, 0xd0, 0xff, 0x46,
	0x9e, 0x8a, 0x45, 0xd1, 0xe9, 0x1e, 0x61, 0x7a, 0x74, 0x30, 0xbc, 0xe1, 0x75, 0x9a, 0xab, 0xdd,
	0xb5, 0xb5, 0xa0, 0xf6, 0xec, 0x3c, 0x9b, 0xbb, 0xe8, 0x46, 0x10, 0x14, 0x70, 0x07, 0x90, 0x65,
	0x48, 0x40, 0xa0, 0xbf, 0x88, 0x8d, 0x47, 0x27, 0xc7, 0x62, 0x38, 0x9d, 0xda, 0x75, 0x38, 0x8d,
	0x09, 0xf2, 0x69, 0x31, 0xaa, 0x1e, 0x4c, 0x9a, 0xb1, 0x6f, 0xbf, 0x1e, 0x2b, 0xf6, 0x11, 0xc5,
	0x70, 0x3b, 0x91, 0xb4, 0xdb, 0xde, 0x91, 0x6b, 0xba, 0x78, 0xce, 0xd7, 0xdf, 0x72, 0xf1, 0x9f,
	0x1e, 0x65, 0xe5, 0xc3, 0x05, 0xb6, 0x6f, 0x96, 0xfb, 0x1e, 0x61, 0x6c, 0xcf, 0xc5, 0xeb, 0x22,
	0x5f, 0x5f, 0x0f, 0xf4, 0x68, 0x0f, 0x4e, 0xc5, 0x1f, 0x15, 0xb7, 0xbe, 0x94, 0xf8, 0xa3, 0xea,
	0x32, 0x37, 0x9c, 0x58, 0xe6, 0xea, 0xff, 0x5a, 0x60, 0xa3, 0x8a, 0x6d, 0x23, 0xf2, 0xc6, 0x27,
	0xab, 0x2e, 0xb5, 0x04, 0x7a, 0xe3, 0x93, 0x49, 0xf7, 0x18, 0x2b, 0x47, 0x77, 0x13, 0xe5, 0x95,
	0x76, 0x79, 0x2d, 0x51, 0x3f, 0xc5, 0x34, 0xcb, 0xb4, 0x9d, 0x5e, 0x53, 0xe1, 0x40, 0xc2, 0xc2,
	0x18, 0xc2, 0x97, 0x23, 0x36, 0xc7, 0x19, 0x6b, 0x75, 0x7d, 0xbf, 0x89, 0x43, 0x44, 0xb8, 0xd3,
	0x97, 0x01, 0x32, 0x0f, 0x80, 0x28, 0xa4, 0x38, 0x62, 0xc5, 0xdd, 0xca, 0xb6, 0xb9, 0x43, 0xc8,
	0x53, 0x4c, 0x73, 0xba, 0xad, 0xcd, 0x5e, 0x13, 0x03, 0x79, 0xab, 0x91, 0x13, 0xc6, 0x10, 0x3e,
	0xed, 0x7b, 0x9d, 0xe8, 0x70, 0x21, 0xf4, 0xb9, 0x19, 0x74, 0x7d, 0xde, 0x5c, 0xf5, 0x76, 0xa4,
	0x9c, 0x20, 0x61, 0x67, 0xbd, 0x9d, 0xfa, 0x1f, 0x14, 0xd8, 0x68, 0x03, 0x5d, 0x22, 0x51, 0x34,
	0x4c, 0xf4, 0x50, 0x55, 0xf4, 0x50, 0x5e, 0x8c, 0x3f, 0x19, 0xc1, 0x6f, 0x40, 0x89, 0xe0, 0x77,
	0x94, 0x95, 0x3a, 0x8e, 0x19, 0xae, 0x79, 0x7e, 0x3b, 0x0a, 0x0c, 0x2a, 0xd2, 0x78, 0x35, 0x9a,
	0x96, 0x3d, 0x71, 0xdd, 0x5d, 0x26, 0x61, 0xcc, 0x85, 0xe6, 0x3a, 0x7e, 0x41, 0xd9, 0x80, 0x9f,
	0x14, 0x60, 0xd4, 0xf6, 0x7c, 0x3b, 0xec, 0xc9, 0x50, 0xb3, 0x32, 0xad, 0x9f, 0x61, 0x23, 0xe4,
	0xc1, 0x29, 0x03, 0xfc, 0xd5, 0xd2, 0x7a, 0x18, 0xba, 0xb4, 0xd2, 0xbe, 0x4d, 0x84, 0xf5, 0x67,
	0x8a, 0x8c, 0xc5, 0xf0, 0xdc, 0x4f, 0x3c, 0xc0, 0x86, 0xd0, 0x6c, 0x2a, 0x55, 0x7f, 0x4c, 0xa0,
	0x0f, 0x3b, 0xe6, 0x8b, 0xee, 0x1a, 0x61, 0x2a, 0x6a, 0x90, 0x41, 0xa5, 0x41, 0xc6, 0x58, 0xd1,
	0xee, 0xc8, 0xf0, 0x85, 0x36, 0xde, 0x6a, 0xea, 0x78, 0x7e, 0x28, 0x86, 0x1b, 0xfe, 0x46, 0x7e,
	0xe4, 0x89, 0x37, 0x22, 0xf8, 0x91, 0xff, 0xdd, 0x0d, 0xac, 0x6c, 0x76, 0xc3, 0x0d, 0xfa, 0x62,
	0xba, 0x77, 0x1f, 0x03, 0x00, 0xeb, 0x73, 0x10, 0xb3, 0xb8, 0x6b, 0x89, 0xfb, 0xf6, 0x31, 0x00,
	0xb6, 0x69, 0x3b, 0x40, 0x0b, 0x35, 0xc3, 0x65, 0x62, 0xc8, 0x0e, 0x16, 0xf9, 0x36, 0xc5, 0x48,
	0x74, 0x6c, 0x97, 0x8b, 0x80, 0x82, 0x22, 0x55, 0x7f, 0x95, 0xc6, 0xc6, 0x53, 0xba, 0x0e, 0x7a,
	0x13, 0xf3, 0xf8, 0x02, 0x21, 0xc8, 0xb0, 0x1c, 0xef, 0x0f, 0x62, 0x5c, 0x7d, 0x5a, 0x3b, 0x64,
	0x5c, 0x7d, 0xb2, 0xfa, 0x16, 0x7a, 0xb8, 0x8a, 0xb5, 0x38, 0x79, 0x78, 0x8a, 0xf0, 0x0c, 0x98,
	0xa6, 0x3b, 0xfa, 0x76, 0xd0, 0x5c, 0xf5, 0x4d, 0xb7, 0xb5, 0x81, 0x2d, 0x52, 0x32, 0x4a, 0x76,
	0x70, 0x16, 0xd3, 0x22, 0xc4, 0x34, 0x9e, 0x27, 0x0c, 0xcb, 0x10, 0xd3, 0x78, 0x48, 0x40, 0xb9,
	0x2c, 0xd3, 0x5d, 0xe7, 0xbe, 0x88, 0x55, 0x50, 0xb2, 0x83, 0x69, 0x4c, 0xeb, 0xf7, 0xb2, 0x01,
	0xcb, 0xa6, 0x2b, 0x20, 0x63, 0x79, 0xd7, 0x25, 0xc4, 0x27, 0x4d, 0xdb, 0x3e, 0xad, 0x36, 0x06,
	0x90, 0xeb, 0x0f, 0xb0, 0x12, 0x77, 0x43, 0x3b, 0xb4, 0xb9, 0x8c, 0xe6, 0x98, 0xd9, 0x29, 0x42,
	0x3b, 0xec, 0x35, 0x3a, 0xe6, 0x36, 0x05, 0xf1, 0x8c, 0xc8, 0xf5, 0x45, 0xa6, 0x93, 0x03, 0x2a,
	0x9e, 0xf3, 0x93, 0xeb, 0xa5, 0x8c, 0xed, 0x78, 0x22, 0x2f, 0x32, 0xbf, 0x8c, 0xc5, 0x70, 0xc9,
	0x37, 0x3b, 0x86, 0x86, 0x79, 0xf1, 0xd8, 0x9f, 0x72, 0xea, 0x0f, 0xb2, 0x11, 0xc9, 0x64, 0xf4,
	0x1a, 0x99, 0xc8, 0x0c, 0xfa, 0xdd, 0x6c, 0x10, 0x3a, 0x04, 0xaf, 0x9c, 0xec, 0xa9, 0xb8, 0x22,
	0x29, 0xf4, 0x95, 0x8b, 0xb7, 0xfa, 0x4b, 0x46, 0xc1, 0x85, 0x14, 0x17, 0x01, 0xbd, 0x0b, 0x1c,
	0x52, 0x14, 0xd6, 0xb5, 0x64, 0x14, 0x02, 0x48, 0x6d, 0xa3, 0x44, 0x5b, 0x32, 0x0a, 0xdb, 0x30,
	0xd6, 0xd6, 0xb9, 0xcb, 0x7d, 0x33, 0xe4, 0x16, 0x4a, 0xb4, 0x25, 0x23, 0x06, 0xe0, 0x98, 0x36,
	0x83, 0x00, 0xa5, 0xd9, 0x92, 0x81, 0xbf, 0xf5, 0xe7, 0xb2, 0x01, 0xb7, 0xd3, 0xaa, 0xed, 0xbf,
	0x96, 0xe6, 0x05, 0x4a, 0x31, 0x60, 0x03, 0xdb, 0xc5, 0x1b, 0x23, 0x38, 0x60, 0x1b, 0xb6, 0x0b,
	0xfa, 0x92, 0xe2, 0xbe, 0x77, 0x28, 0xef, 0x02, 0x75, 0x63, 0x6e, 0xb1, 0xb9, 0x32, 0x6b, 0xcc,
	0x4c, 0xae, 0xa8, 0x1e, 0x7b, 0x93, 0xe4, 0x40, 0x28, 0x5b, 0xf7, 0xf0, 0x35, 0xb6, 0x2e, 0x94,
	0x26, 0x3b, 0xe7, 0x79, 0xb0, 0xe6, 0xfb, 0xa1, 0xb8, 0x62, 0x5f, 0xcb, 0x0b, 0x77, 0xb0, 0x0c,
	0x78, 0x7a, 0x67, 0xa0, 0x23, 0x7f, 0xea, 0x67, 0xd9, 0x18, 0xe5, 0x93, 0x9e, 0x9d, 0x28, 0x10,
	0x8f, 0xa5, 0x6d, 0x43, 0x98, 0x57, 0x9a, 0xe0, 0x8d, 0x6a, 0x47, 0x4d, 0xea, 0x27, 0x58, 0x85,
	0xce, 0x54, 0x82, 0x2e, 0x5e, 0x77, 0x3c, 0x2a, 0x9c, 0x48, 0x01, 0xd6, 0xe8, 0x76, 0xc4, 0x3d,
	0x7c, 0x90, 0x8f, 0x78, 0xc7, 0xf4, 0x39, 0xca, 0xc4, 0x25, 0xa3, 0x6c, 0x07, 0xcb, 0x04, 0x80,
	0x89, 0x18, 0x1d, 0xca, 0xdc, 0x40, 0xe2, 0x84, 0x23, 0x0e, 0x62, 0x0e, 0xb0, 0x21, 0x12, 0x93,
	0x8e, 0xe3, 0xc2, 0x4f, 0x09, 0xe0, 0xb7, 0x61, 0x06, 0xcd, 0x80, 0xbb, 0x16, 0xb7, 0x50, 0x88,
	0x2d, 0x19, 0xe5, 0x0d, 0x33, 0x68, 0x20, 0x40, 0xaf, 0xb3, 0x2a, 0x4c, 0xd0, 0x48, 0xd2, 0x42,
	0x89, 0xb6, 0x64, 0x8c, 0xda, 0xc1, 0x59, 0x29, 0x44, 0xe9, 0x53, 0xac, 0x82, 0x2e, 0x5e, 0xb2,
	0xd1, 0x4f, 0x5c, 0x63, 0xa3, 0x8f, 0x42, 0x2e, 0xd9, 0xea, 0x47, 0x58, 0x09, 0x0b, 0x32, 0x5b,
	0x9b, 0x78, 0xcf, 0xa3, 0x64, 0x8c, 0x40, 0x19, 0x66, 0x6b, 0x53, 0x8c, 0x11, 0xb3, 0x15, 0xa2,
	0xec, 0x8a, 0x63, 0x64, 0xb2, 0x15, 0x52, 0x54, 0x48, 0x58, 0x73, 0x28, 0xd3, 0xcd, 0xc2, 0x34,
	0x00, 0x20, 0xca, 0x47, 0x4d, 0x65, 0xbb, 0xa1, 0xdf, 0xb5, 0x38, 0xde, 0xe6, 0xc0, 0xa6, 0x9a,
	0x23, 0x80, 0x3e, 0xc7, 0xc6, 0x05, 0x2e, 0xaa, 0xf9, 0xad, 0xd7, 0x58, 0xf3, 0x31, 0x91, 0x51,
	0x56, 0xfe, 0x0e, 0xa6, 0xb7, 0xba, 0x3e, 0x0c, 0xe3, 0xa6, 0x15, 0xbd, 0x6b, 0x21, 0xee, 0x7b,
	0x68, 0xad, 0xae, 0xdf, 0xb0, 0xdd, 0xf8, 0xbd, 0x0b, 0xd8, 0xb2, 0x81, 0x72, 0xcd, 0xb4, 0x1d,
	0x2e, 0x0f, 0x8c, 0x9f, 0x4d, 0x82, 0x41, 0x60, 0xbb, 0xe7, 0x10, 0x4c, 0x5b, 0xf6, 0x3d, 0xec,
	0x10, 0xf0, 0x35, 0xc3, 0xcd, 0x34, 0xef, 0x53, 0x48, 0xbf, 0xbf, 0xd5, 0xf5, 0x27, 0xc3, 0xcd,
	0x24, 0xfb, 0x9b, 0xd8, 0x28, 0xf4, 0xa8, 0xfc, 0xee, 0xdb, 0xf1, 0xbb, 0xa1, 0x93, 0xe5, 0x87,
	0x9f, 0x60, 0x15, 0x6c, 0x17, 0x71, 0xd8, 0x88, 0x62, 0x67, 0xc9, 0x60, 0xd0, 0x32, 0x64, 0xc2,
	0x51, 0x7d, 0xe6, 0x9f, 0x43, 0x7b, 0x80, 0xf0, 0x99, 0x87, 0xcd, 0xc1, 0x74, 0x71, 0xbe, 0xde,
	0x41, 0xeb, 0x75, 0xcb, 0x74, 0x61, 0xc2, 0x2e, 0xb2, 0xd1, 0x55, 0x6f, 0x27, 0x6a, 0xc8, 0x3b,
	0xf3, 0x3c, 0x21, 0x53, 0x8b, 0xd3, 0xe9, 0xb3, 0xde, 0x8e, 0x68, 0x40, 0xe1, 0x3c, 0xb0, 0x1a,
	0x01, 0xf4, 0x87, 0x59, 0x19, 0x6b, 0x80, 0xea, 0xd9, 0x69, 0x94, 0x36, 0x4f, 0xa6, 0xa2, 0x99,
	0x78, 0x5e, 0x3b, 0xbd, 0xdc, 0x95, 0x20, 0x0f, 0xee, 0x62, 0xcf, 0x65, 0x03, 0xde, 0xea, 0xcb,
	0x6b, 0x77, 0x5d, 0xd3, 0x42, 0xe4, 0xad, 0xbe, 0x1c, 0xa3, 0x8d, 0xe0, 0x27, 0xa3, 0x77, 0xe1,
	0xdd, 0x62, 0x63, 0x85, 0xaf, 0x46, 0x0f, 0xc3, 0x23, 0xb8, 0x79, 0x70, 0xbf, 0xb9, 0xd1, 0xc1,
	0xbb, 0x23, 0x45, 0x63, 0x04, 0xd3, 0xb3, 0x1d, 0x9a, 0x72, 0xe6, 0x16, 0x07, 0xd4, 0x3d, 0x84,
	0xc2, 0xf4, 0x6c, 0x87, 0xae, 0x94, 0xac, 0xda, 0x7e, 0x28, 0x83, 0xfb, 0xdc, 0x2b, 0xef, 0x51,
	0x23, 0x30, 0x0a, 0x9d, 0x11, 0x84, 0x66, 0x8f, 0x84, 0xc8, 0xfb, 0xc4, 0x13, 0x02, 0xa1, 0xd9,
	0x83, 0x21, 0x70, 0xf4, 0x49, 0x36, 0x9e, 0x6a, 0xa6, 0x9c, 0x83, 0x80, 0xfb, 0x93, 0x62, 0x79,
	0x4e, 0x43, 0xa5, 0x3f, 0x59, 0x91, 0xcd, 0x3f, 0x37, 0xc8, 0xf6, 0xe7, 0xb4, 0xa5, 0x3a, 0x06,
	0xc4, 0xdd, 0x52, 0x31, 0x06, 0x12, 0x1b, 0x7a, 0xb1, 0xff, 0x86, 0x3e, 0x90, 0xd8, 0xd0, 0x95,
	0x91, 0x33, 0x98, 0x18, 0x39, 0xc9, 0xe5, 0x76, 0xe8, 0x9a, 0x97, 0xdb, 0x17, 0xcb, 0xe5, 0x76,
	0x9d, 0x8b, 0xc0, 0x1c, 0x23, 0x98, 0xf7, 0x68, 0x4e, 0xde, 0xf3, 0x9c, 0x42, 0x02, 0x57, 0x3a,
	0x4a, 0x0a, 0xe3, 0x28, 0x47, 0x1c, 0x30, 0x68, 0x3b, 0x0f, 0xa3, 0x9b, 0xa5, 0xfb, 0x24, 0xe9,
	0xb2, 0x44, 0xe8, 0xb7, 0xb3, 0x7d, 0x31, 0xbd, 0x6c, 0x1b, 0xba, 0x31, 0x3c, 0x26, 0xa9, 0x0d,
	0x6a, 0xa3, 0x07, 0xd8, 0x30, 0x2c, 0xc7, 0x22, 0x4e, 0xcf, 0x35, 0x8d, 0x5d, 0x91, 0x41, 0x9f,
	0x61, 0xc3, 0xad, 0x0d, 0xdb, 0x89, 0x44, 0x83, 0x3b, 0xf7, 0xcc, 0x7a, 0x7a, 0x0a, 0xe9, 0x85,
	0xf1, 0x8c, 0x32, 0xab, 0x62, 0x5c, 0x45, 0x5c, 0x95, 0x45, 0x31, 0xee, 0xe8, 0x4b, 0xd9, 0xa8,
	0x42, 0x9f, 0x63, 0xb7, 0xdf, 0x7b, 0x34, 0xf5, 0x37, 0x8f, 0xd7, 0x5f, 0x5d, 0x64, 0xe3, 0xa9,
	0xc1, 0x06, 0x12, 0x4b, 0xff, 0xb8, 0x64, 0x0a, 0xb1, 0x12, 0xab, 0x30, 0x1d, 0xe7, 0xf0, 0x46,
	0xc6, 0x94, 0x77, 0x2d, 0x06, 0xf0, 0x3a, 0x83, 0x02, 0x89, 0xa4, 0xf8, 0x41, 0x45, 0x95, 0x7c,
	0x80, 0x64, 0x88, 0x4e, 0xac, 0x37, 0xe5, 0x9e, 0x81, 0x4a, 0x33, 0x0a, 0x4a, 0x11, 0xa4, 0xa5,
	0x27, 0x57, 0x9f, 0xe1, 0x6b, 0x9d, 0x54, 0xd1, 0xea, 0x53, 0xff, 0x45, 0x31, 0xa7, 0xd2, 0x2d,
	0x71, 0x98, 0x8d, 0x74, 0xdd, 0x38, 0x50, 0xe0, 0x90, 0x31, 0x0c, 0x49, 0xf2, 0xe1, 0x45, 0xc4,
	0xba, 0xef, 0x75, 0x3b, 0x71, 0x10, 0xe3, 0x51, 0x00, 0x62, 0x50, 0xf2, 0x39, 0x0c, 0x84, 0x13,
	0x7d, 0x71, 0xb3, 0xe3, 0x79, 0x8e, 0x8c, 0xce, 0x11, 0x41, 0x97, 0x3d, 0x0f, 0x5f, 0x29, 0x01,
	0xf9, 0x0c, 0x9b, 0xa2, 0x68, 0xe0, 0x6f, 0x98, 0xb2, 0xf4, 0xce, 0x53, 0xc8, 0xdb, 0x52, 0x83,
	0xc4, 0x97, 0x9e, 0x40, 0x03, 0x7a, 0x01, 0xde, 0xf7, 0xd9, 0x56, 0x63, 0x3c, 0xde, 0x98, 0xfd,
	0xd8, 0x0b, 0xae, 0x1d, 0x36, 0x36, 0xbc, 0x6d, 0x7a, 0x38, 0x25, 0x10, 0xbf, 0x12, 0x8f, 0x75,
	0x8d, 0x5c, 0xdb, 0x63, 0x5d, 0xb0, 0x36, 0xc7, 0xe2, 0xfb, 0xf1, 0xfc, 0xa2, 0xa6, 0x6d, 0x1f,
	0x4b, 0x42, 0xc9, 0xfd, 0x38, 0x83, 0xad, 0xa1, 0xe9, 0x76, 0xdb, 0xab, 0xdc, 0x17, 0x33, 0xae,
	0xbc, 0xea, 0xed, 0x2c, 0x22, 0x40, 0x95, 0xa6, 0xd9, 0xf5, 0x4a, 0xd3, 0xd0, 0x32, 0x3c, 0xe4,
	0xad, 0xb0, 0x69, 0xda, 0xe2, 0x5d, 0x9d, 0x12, 0x01, 0x26, 0x6d, 0xfd, 0x36, 0x36, 0x1e, 0x21,
	0x69, 0x81, 0xc0, 0xb9, 0x54, 0x36, 0xaa, 0x92, 0x04, 0x17, 0x07, 0x5c, 0xf4, 0x2c, 0x87, 0x03,
	0x0b, 0x8a, 0x9d, 0x35, 0x0c, 0xc9, 0x49, 0x1b, 0xa5, 0x27, 0x42, 0x88, 0xec, 0x63, 0x14, 0xfd,
	0x9e, 0xd0, 0x94, 0xf9, 0x46, 0x36, 0x6a, 0xda, 0x71, 0xc7, 0x53, 0x18, 0xdc, 0xb2, 0x69, 0x8b,
	0x6e, 0xaf, 0x1f, 0x53, 0x9e, 0x1f, 0x48, 0x87, 0x1c, 0xad, 0x7b, 0xe2, 0xa8, 0x2b, 0x72, 0x5b,
	0x4a, 0x08, 0x80, 0x22, 0xa4, 0xb4, 0x14, 0x00, 0xcf, 0x32, 0x4d, 0x3c, 0x78, 0x11, 0xf9, 0x47,
	0xe5, 0x47, 0xbf, 0x8c, 0xca, 0x33, 0xc6, 0x29, 0x43, 0xc4, 0xbe, 0xfe, 0x5b, 0xc3, 0x74, 0x68,
	0x22, 0x3d, 0x07, 0x72, 0x8d, 0x38, 0x29, 0xc3, 0x6d, 0x31, 0x63, 0xb8, 0x4d, 0x04, 0x1e, 0x1d,
	0x48, 0x05, 0x1e, 0x55, 0xa2, 0xbd, 0x89, 0x43, 0x14, 0x11, 0xed, 0xed, 0x38, 0x63, 0x5b, 0xa6,
	0x63, 0x5b, 0x6a, 0x9c, 0xbf, 0x32, 0x42, 0xb2, 0x51, 0xd8, 0xca, 0x32, 0x0a, 0x1b, 0x9e, 0xc8,
	0x38, 0x8e, 0xd0, 0x22, 0xcb, 0x86, 0x48, 0xa9, 0xd1, 0xd9, 0x4a, 0x88, 0x88, 0xa2, 0xb3, 0xa1,
	0x9e, 0x8f, 0x57, 0xfc, 0xca, 0x94, 0x83, 0x52, 0xfa, 0x3d, 0xac, 0xcc, 0xa5, 0x84, 0xb3, 0x47,
	0x5c, 0xff, 0x12, 0x17, 0x5b, 0xb6, 0xfe, 0x00, 0x1b, 0xe5, 0xf8, 0x35, 0x74, 0xa5, 0x61, 0x34,
	0xff, 0xd9, 0x32, 0xd3, 0xa6, 0xeb, 0x0d, 0x06, 0x43, 0x62, 0xba, 0xea, 0x90, 0xb8, 0x6a, 0x4a,
	0xa1, 0xfb, 0xe3, 0xab, 0xa6, 0xc7, 0xf1, 0x75, 0x83, 0x50, 0x04, 0xec, 0x1c, 0xc3, 0x26, 0x2c,
	0x0b, 0xc8, 0x9c, 0x95, 0x8c, 0xd8, 0x36, 0x7e, 0xad, 0x11, 0xdb, 0x94, 0xc0, 0x4c, 0x1a, 0x3d,
	0x70, 0x26, 0x02, 0x33, 0x1d, 0x61, 0x25, 0x44, 0xb8, 0xdd, 0x36, 0xea, 0x81, 0x55, 0x03, 0x09,
	0xc5, 0xa5, 0x2e, 0x58, 0x49, 0xa2, 0xf1, 0xab, 0xd3, 0xa5, 0xae, 0x08, 0x46, 0xb9, 0x37, 0xb8,
	0x43, 0x71, 0x9d, 0x28, 0x6a, 0x00, 0xde, 0xcf, 0x87, 0xdc, 0x47, 0x58, 0x69, 0xdd, 0x73, 0x2c,
	0x44, 0x1d, 0x10, 0x01, 0xd0, 0x3d, 0xc7, 0x12, 0x8c, 0x13, 0xe6, 0xf2, 0x83, 0xc4, 0x58, 0x35,
	0x97, 0xa7, 0xe3, 0xcd, 0x1c, 0xca, 0xc4, 0x9b, 0x39, 0xc2, 0x4a, 0x9e, 0x6f, 0xd1, 0x35, 0xe7,
	0xc3, 0xd4, 0xcd, 0x98, 0xa6, 0x98, 0x8f, 0x84, 0x12, 0xcb, 0x4a, 0x8d, 0xa6, 0x26, 0xc2, 0xc4,
	0xc2, 0xf2, 0x6c, 0x8c, 0x94, 0x62, 0xfb, 0xe4, 0x3f, 0x6e, 0x41, 0x07, 0x1e, 0x41, 0xaa, 0xb1,
	0x18, 0x3c, 0x0d, 0x5d, 0x75, 0x2b, 0x1b, 0x93, 0xbd, 0x81, 0xf3, 0x9c, 0x8e, 0x3a, 0xca, 0x46,
	0x55, 0x40, 0x71, 0xa6, 0x07, 0x51, 0xb8, 0x42, 0xe4, 0x74, 0x0c, 0x39, 0x61, 0xb8, 0x42, 0xe0,
	0x51, 0x7f, 0x75, 0x81, 0x69, 0xcb, 0x67, 0x85, 0x2f, 0xaa, 0xed, 0xf6, 0xd0, 0xe1, 0x2e, 0x13,
	0x40, 0xae, 0xaa, 0x04, 0x90, 0x3b, 0xc6, 0xca, 0xae, 0x2d, 0xc3, 0xeb, 0x91, 0x39, 0xae, 0x04,
	0x00, 0xbc, 0xa8, 0x8a, 0x53, 0xcc, 0xb4, 0x9a, 0x8a, 0x5d, 0xae, 0x04, 0x80, 0xb9, 0x96, 0xe7,
	0x52, 0xa0, 0x06, 0x87, 0x83, 0x5a, 0x4f, 0xc2, 0x98, 0x4c, 0xd6, 0x03, 0x19, 0xa7, 0x46, 0xba,
	0xcf, 0x2c, 0x85, 0x1b, 0x68, 0xb6, 0x76, 0x55, 0xd3, 0x6c, 0x21, 0x61, 0x9a, 0xc5, 0x80, 0x32,
	0xcd, 0xc4, 0x28, 0x18, 0x92, 0x51, 0xb4, 0xa6, 0x95, 0x71, 0xa0, 0x44, 0xeb, 0xa1, 0x28, 0x5b,
	0x32, 0x5a, 0xcf, 0x07, 0xcb, 0xf4, 0xce, 0x96, 0xd8, 0x7d, 0xf3, 0x96, 0x94, 0xdc, 0x1b, 0xa5,
	0x24, 0x1f, 0xec, 0x7d, 0xa3, 0x54, 0x3c, 0x7e, 0xb7, 0xfb, 0x8d, 0x52, 0x5a, 0x6b, 0x52, 0x37,
	0x4a, 0xd3, 0x57, 0x16, 0x87, 0xb2, 0x57, 0x16, 0xe7, 0x59, 0x45, 0x60, 0xd5, 0x18, 0x38, 0x39,
	0x0e, 0xf6, 0xf4, 0x75, 0xa7, 0x45, 0xbe, 0xd8, 0x8d, 0x75, 0x34, 0x88, 0x21, 0xfa, 0x34, 0x63,
	0x1e, 0xb4, 0x78, 0x13, 0x8f, 0x8f, 0x76, 0x89, 0x7d, 0x93, 0xe9, 0x1f, 0xa3, 0xec, 0x45, 0x5d,
	0x95, 0x38, 0x96, 0x2b, 0xa5, 0x8e, 0xe5, 0xe4, 0xc3, 0x05, 0x58, 0xdb, 0x32, 0xde, 0x26, 0xc6,
	0x87, 0x0b, 0xb0, 0xfc, 0x07, 0xd9, 0x11, 0xd5, 0x17, 0x58, 0x5e, 0x44, 0x54, 0x63, 0x4e, 0x1e,
	0x56, 0xbc, 0x82, 0x05, 0x9e, 0x14, 0x99, 0x29, 0xf5, 0xfa, 0x7b, 0xdf, 0x23, 0x5f, 0xd1, 0x0c,
	0xfd, 0x2e, 0xc0, 0xdf, 0xc2, 0xc6, 0x36, 0xec, 0x20, 0x6c, 0xc6, 0x55, 0x14, 0x31, 0x53, 0x00,
	0xda, 0x90, 0xd5, 0x7c, 0x11, 0xab, 0x86, 0xbe, 0xe9, 0x06, 0x6b, 0xdc, 0x27, 0x21, 0x8d, 0x42,
	0xa7, 0xa4, 0xc4, 0xbb, 0x15, 0x41, 0x82, 0xd2, 0x59, 0x25, 0x54, 0x52, 0xfa, 0x79, 0x76, 0xa2,
	0xdd, 0x6b, 0x99, 0xbe, 0xd5, 0xec, 0xff, 0xb9, 0xe3, 0xf8, 0xb9, 0xc7, 0x89, 0x6e, 0xb2, 0xcf,
	0x47, 0x9f, 0x61, 0x07, 0x15, 0x0e, 0x14, 0xa3, 0xc0, 0x32, 0x7b, 0x01, 0xae, 0xa0, 0x03, 0xc6,
	0xfe, 0x18, 0x39, 0x0f, 0xb8, 0x69, 0xb3, 0x17, 0x40, 0x1e, 0x58, 0x18, 0x6c, 0xb7, 0xeb, 0x75,
	0x03, 0x35, 0x0f, 0x9d, 0x1a, 0xef, 0x8f, 0x91, 0x71, 0x9e, 0x3e, 0x1d, 0x43, 0xd6, 0x03, 0xbd,
	0x5f, 0xc7, 0x44, 0x0f, 0xc6, 0xa4, 0x82, 0xb0, 0xe2, 0x9e, 0x42, 0x21, 0x35, 0xf7, 0x25, 0x22,
	0xb0, 0xe2, 0xe6, 0x72, 0x07, 0xd3, 0xc5, 0x1d, 0x2a, 0x95, 0x9c, 0x22, 0x6c, 0x6a, 0x74, 0x7f,
	0x4a, 0xa1, 0xbe, 0x8d, 0x61, 0x58, 0xd8, 0xa6, 0x12, 0x9f, 0xe1, 0x20, 0x4d, 0x7f, 0x00, 0xcf,
	0xcb, 0x18, 0x0d, 0x47, 0x5f, 0xc6, 0xb4, 0xf4, 0xd8, 0xff, 0x7a, 0xba, 0x87, 0xfe, 0x67, 0xfa,
	0x6f, 0xd6, 0x2f, 0x33, 0x3d, 0x2b, 0x45, 0xa6, 0x5e, 0xbb, 0xa9, 0x46, 0xaf, 0xdd, 0x4c, 0xb0,
	0x41, 0x8c, 0x83, 0x59, 0xdc, 0xfd, 0x2d, 0x19, 0xa0, 0xa9, 0xff, 0x48, 0x81, 0xed, 0x27, 0xd6,
	0xf8, 0x70, 0x40, 0x14, 0xfd, 0xbd, 0x1f, 0xef, 0xaf, 0x25, 0x02, 0xfc, 0x61, 0x36, 0xe2, 0x76,
	0xdb, 0xcd, 0xb6, 0x2d, 0x63, 0x28, 0x0f, 0xbb, 0xdd, 0xf6, 0x02, 0x2d, 0xed, 0x88, 0x30, 0x77,
	0xe4, 0xc3, 0xb4, 0x80, 0x30, 0x77, 0xd4, 0x35, 0x7f, 0x58, 0x5d, 0xf3, 0xeb, 0xef, 0x2a, 0xb0,
	0x6a, 0xb2, 0xc2, 0x5f, 0x4b, 0x34, 0x7c, 0xa5, 0x62, 0x03, 0xfd, 0x2a, 0x36, 0xd8, 0xaf, 0x62,
	0x43, 0x89, 0x8a, 0x9d, 0x67, 0xe3, 0x72, 0x17, 0xbd, 0x68, 0x77, 0xe4, 0x26, 0xba, 0x65, 0x77,
	0x94, 0xe8, 0x6a, 0x55, 0xa3, 0xb4, 0x65, 0x77, 0xa2, 0xf0, 0x84, 0x80, 0xe4, 0x3b, 0x32, 0xae,
	0xe8, 0xf0, 0x96, 0xdd, 0x99, 0xd9, 0xe9, 0xd4, 0x6f, 0x67, 0x63, 0xcb, 0x67, 0x67, 0xb9, 0xef,
	0x19, 0xd2, 0xa6, 0x94, 0xb2, 0x88, 0x44, 0x56, 0xb1, 0xfa, 0x27, 0x0b, 0xac, 0x1c, 0xb9, 0x57,
	0xe8, 0xf7, 0xb0, 0x61, 0xf8, 0xa8, 0x66, 0x98, 0x1f, 0x9e, 0x75, 0x61, 0x66, 0x65, 0xb2, 0x39,
	0x3d, 0xb9, 0x32, 0x49, 0xd2, 0xd7, 0x10, 0xd0, 0xae, 0xa8, 0x71, 0x57, 0x8b, 0x89, 0xb8, 0xab,
	0xd3, 0x6c, 0x54, 0x78, 0xda, 0xe0, 0x8d, 0x7c, 0x7a, 0xcc, 0x20, 0x15, 0x04, 0xc9, 0xe0, 0x96,
	0x1d, 0x60, 0xe1, 0x4d, 0x0a, 0x4f, 0x8f, 0x51, 0xec, 0x58, 0x2b, 0xfa, 0xad, 0x36, 0xd7, 0x60,
	0xe2, 0x75, 0xe0, 0xcf, 0xd5, 0xd8, 0xc1, 0xdc, 0xec, 0xfd, 0x5e, 0xbb, 0x5c, 0x77, 0xbc, 0x55,
	0xd3, 0x89, 0xdf, 0xc0, 0x2d, 0x11, 0x80, 0xa2, 0xcd, 0xc8, 0x27, 0xba, 0x06, 0x92, 0x4f, 0x74,
	0x45, 0xd1, 0xc8, 0x28, 0x6c, 0xac, 0x08, 0x4e, 0x58, 0x63, 0x23, 0xab, 0xb6, 0x6b, 0xd9, 0xee,
	0xba, 0x38, 0x16, 0x92, 0xc9, 0xf8, 0x5c, 0x77, 0x58, 0x3d, 0xd7, 0xcd, 0x79, 0xaf, 0xf6, 0xc0,
	0xd7, 0xf9, 0xbd, 0xda, 0x83, 0x5f, 0xdf, 0xf7, 0x6a, 0x0f, 0x7d, 0x3d, 0xdf, 0xab, 0x3d, 0xfc,
	0xd5, 0xbf, 0x57, 0xab, 0x3c, 0xe4, 0x5a, 0x4b, 0x3c, 0xe4, 0x4a, 0x16, 0x72, 0xf1, 0xea, 0x2b,
	0xca, 0xb6, 0x68, 0x21, 0x9f, 0x21, 0x40, 0xde, 0x13, 0x73, 0x47, 0xaf, 0xe9, 0x9d, 0xdb, 0x63,
	0x39, 0xef, 0xdc, 0x26, 0x9f, 0xb0, 0xbd, 0x21, 0xfd, 0x84, 0x6d, 0xe6, 0xad, 0xd4, 0xe3, 0x39,
	0xcf, 0xe0, 0xe6, 0xbd, 0x95, 0x7a, 0xe3, 0x75, 0xbf, 0x95, 0xba, 0x96, 0xf7, 0x56, 0xea, 0x4d,
	0xd8, 0xbc, 0x0f, 0x5c, 0xc3, 0xc4, 0xba, 0xde, 0x67, 0x53, 0x4f, 0xc4, 0x0e, 0x56, 0xea, 0xb3,
	0xa9, 0x27, 0xc9, 0xd8, 0x10, 0x3d, 0x9b, 0x7a, 0x17, 0x3b, 0x20, 0x24, 0xd2, 0x64, 0x3b, 0x50,
	0x68, 0x2b, 0x9d, 0x70, 0x33, 0x6a, 0x6b, 0xa4, 0x1c, 0x1d, 0x6e, 0xce, 0x38, 0x3a, 0x1c, 0x97,
	0x8f, 0xa8, 0xe0, 0x6e, 0x74, 0x8b, 0x68, 0x72, 0x80, 0xe0, 0x8a, 0xfd, 0x02, 0xb5, 0xc9, 0x83,
	0x50, 0x1e, 0x7f, 0xf4, 0xdb, 0xaf, 0xe2, 0xae, 0x08, 0x42, 0x0c, 0x98, 0x65, 0x07, 0xcd, 0xab,
	0x5d, 0x3b, 0xb4, 0x9b, 0x2f, 0xb7, 0xdd, 0xf5, 0x8d, 0xae, 0x89, 0x07, 0x1e, 0x25, 0x63, 0xcc,
	0x0e, 0xae, 0x00, 0xf8, 0x25, 0x04, 0x85, 0xa1, 0xec, 0xf2, 0x75, 0xb5, 0xad, 0x9f, 0x7d, 0x3d,
	0x43, 0xd9, 0xe5, 0xeb, 0x4a, 0x9b, 0xaa, 0xc5, 0xca, 0x88, 0x1b, 0xa7, 0x12, 0xc5, 0xca, 0x98,
	0x1b, 0x27, 0x59, 0x45, 0x10, 0x50, 0xf3, 0xdc, 0x4e, 0xb1, 0x3b, 0x04, 0x4c, 0x46, 0x8d, 0x92,
	0x24, 0xa0, 0x80, 0x92, 0xfb, 0x0d, 0x13, 0x20, 0xd0, 0x41, 0x6f, 0x89, 0xb4, 0x04, 0x3b, 0x68,
	0x62, 0x5c, 0x32, 0xf2, 0xbe, 0x11, 0xce, 0x83, 0x73, 0xc1, 0x79, 0xcf, 0x49, 0xbf, 0xd8, 0x76,
	0xc7, 0x35, 0xbe, 0xd8, 0xa6, 0x4f, 0xb3, 0x9b, 0x30, 0xdb, 0x2a, 0xa7, 0x19, 0xd8, 0xe1, 0x56,
	0x33, 0xf5, 0x86, 0xdc, 0x9d, 0xb8, 0xc4, 0x1e, 0x03, 0xb2, 0xb3, 0xd4, 0x38, 0x1d, 0x6e, 0xcd,
	0x24, 0x5e, 0x94, 0x5b, 0x54, 0xc3, 0xdc, 0x9e, 0xce, 0x0b, 0x25, 0x97, 0x3f, 0x88, 0xfb, 0x44,
	0xbb, 0x05, 0x45, 0x2b, 0xfb, 0xa8, 0xdb, 0x73, 0xd1, 0x65, 0x32, 0xf3, 0x60, 0x9b, 0x7e, 0x96,
	0xdd, 0x28, 0xda, 0x47, 0xfd, 0x08, 0xf5, 0xad, 0xb6, 0xbb, 0xf0, 0x0b, 0x8e, 0x12, 0x28, 0xfe,
	0x86, 0x46, 0xfc, 0x76, 0xdb, 0x4d, 0x6c, 0xd4, 0x0e, 0x9a, 0xc1, 0x06, 0xa7, 0x31, 0x74, 0xb7,
	0x3c, 0x8c, 0x6a, 0x08, 0x48, 0xa4, 0x36, 0x7a, 0x6e, 0xed, 0x0c, 0xae, 0x3e, 0xa8, 0x36, 0x2e,
	0xb9, 0x62, 0xf5, 0xba, 0xea, 0xb9, 0xeb, 0xc1, 0x86, 0x8d, 0x47, 0x2f, 0xb8, 0x7a, 0x5d, 0x21,
	0x80, 0x7e, 0x82, 0x55, 0x56, 0x3d, 0xdf, 0x6d, 0xda, 0x2e, 0x75, 0xdd, 0xbd, 0xc4, 0x19, 0x60,
	0x73, 0x2e, 0x76, 0xdc, 0x79, 0x76, 0x52, 0xe4, 0x6e, 0xae, 0x79, 0x20, 0xe7, 0xba, 0x9c, 0x5b,
	0xcd, 0x38, 0xcc, 0x39, 0xca, 0x1d, 0x74, 0x22, 0x73, 0x83, 0x20, 0x3c, 0x07, 0x74, 0x8b, 0x9c,
	0x5b, 0x73, 0x32, 0xf4, 0x39, 0x48, 0x23, 0xe7, 0xd8, 0x89, 0x24, 0xa3, 0x56, 0xd7, 0xf7, 0xd1,
	0x36, 0x13, 0x87, 0x4c, 0x7f, 0x5e, 0x96, 0xcf, 0x14, 0x51, 0x45, 0xac, 0x76, 0x7b, 0x3b, 0xfb,
	0xfe, 0xaf, 0xf9, 0xed, 0x6c, 0xfd, 0x5e, 0x76, 0x48, 0x74, 0x8d, 0xcf, 0x6d, 0x77, 0xcd, 0xf3,
	0x5b, 0x32, 0x76, 0xf3, 0xf3, 0x71, 0xe4, 0x8b, 0xf5, 0xc7, 0x90, 0x48, 0x12, 0x90, 0x5e, 0xc0,
	0x8e, 0x5e, 0xed, 0xda, 0x3d, 0x2e, 0xa3, 0x3d, 0xcb, 0x4f, 0xa3, 0x9c, 0x0f, 0x60, 0xce, 0xc3,
	0x48, 0x41, 0x51, 0x9f, 0xc5, 0x47, 0x51, 0xe6, 0x3b, 0x98, 0x9e, 0xc8, 0x4c, 0xe2, 0x37, 0xc5,
	0x00, 0xd3, 0x94, 0x4c, 0xe4, 0xcb, 0xfd, 0x52, 0x76, 0x98, 0x66, 0xb6, 0xa0, 0x56, 0x3e, 0xff,
	0x85, 0xd7, 0xf3, 0xf9, 0xc8, 0x84, 0x18, 0x2b, 0x9f, 0xbf, 0xc9, 0x6e, 0x4a, 0x70, 0x97, 0x0f,
	0x90, 0x29, 0xa5, 0x3c, 0x74, 0x1d, 0xa5, 0xdc, 0xa0, 0x94, 0x62, 0x10, 0x2b, 0xa5, 0xb0, 0x75,
	0x76, 0x3c, 0x51, 0x18, 0xd9, 0x64, 0x95, 0xa2, 0x1e, 0xbe, 0x8e, 0xa2, 0x8e, 0x2a, 0x45, 0x61,
	0xbb, 0x2a, 0x05, 0xdd, 0xc1, 0x74, 0x3b, 0x68, 0x86, 0xdb, 0x76, 0x8b, 0x37, 0xf9, 0x96, 0xe7,
	0x74, 0xd1, 0x14, 0xff, 0x22, 0x72, 0x12, 0xb4, 0x83, 0x15, 0x40, 0xcc, 0x48, 0xb8, 0xfe, 0x10,
	0xab, 0x04, 0xa1, 0xdd, 0xda, 0xe4, 0x3e, 0x19, 0xd5, 0x5e, 0x8c, 0x9b, 0x67, 0x4a, 0x6d, 0x6e,
	0xac, 0xcc, 0x4d, 0x3d, 0x22, 0xa3, 0x98, 0x8d, 0x0a, 0x7a, 0x34, 0xb8, 0xad, 0x44, 0x2f, 0x6b,
	0xb9, 0x9e, 0xc5, 0x6b, 0x93, 0xf8, 0x0d, 0xf7, 0x5c, 0xd3, 0x9e, 0x89, 0xd9, 0x16, 0x3d, 0x8b,
	0xcb, 0x58, 0x4d, 0x11, 0x00, 0xb7, 0xa9, 0x2d, 0x8f, 0xbc, 0x1c, 0x2d, 0x0c, 0xc6, 0x06, 0xdb,
	0xd4, 0x96, 0x47, 0xfb, 0xac, 0xfe, 0x6c, 0x36, 0x1e, 0xdf, 0xe7, 0x25, 0x7d, 0x77, 0x8a, 0x0e,
	0xdd, 0x22, 0x30, 0xa9, 0xb9, 0x0f, 0x31, 0xa6, 0x9c, 0x90, 0x4f, 0xe7, 0x1d, 0x2f, 0x60, 0xeb,
	0xc5, 0x67, 0xe5, 0x86, 0x92, 0x21, 0xef, 0x4d, 0xba, 0x99, 0x9c, 0x37, 0xe9, 0xd2, 0x01, 0x85,
	0xcf, 0xa5, 0x03, 0x0a, 0x1f, 0x5d, 0xbd, 0xf6, 0x27, 0xcc, 0x77, 0xd7, 0x76, 0x53, 0x5c, 0x54,
	0x6d, 0xf7, 0x05, 0x7b, 0x87, 0x15, 0xef, 0x1b, 0x34, 0xfe, 0xe8, 0x25, 0x36, 0x9e, 0xea, 0x8f,
	0x9c, 0x63, 0xc0, 0xdd, 0x6f, 0x4f, 0xc5, 0xf9, 0x55, 0x35, 0x99, 0xb3, 0xf1, 0x54, 0x9d, 0xfb,
	0xc7, 0xca, 0x8e, 0xee, 0x0f, 0xcb, 0x58, 0xd9, 0x32, 0xc8, 0x01, 0x35, 0x70, 0xe8, 0x9b, 0x89,
	0x18, 0xc8, 0x0c, 0x41, 0x14, 0x04, 0xf9, 0x71, 0x76, 0xe0, 0x7c, 0xd7, 0xf4, 0xad, 0x74, 0x59,
	0xe9, 0x88, 0xd8, 0xf7, 0xa0, 0x43, 0xbc, 0xe3, 0x5c, 0x63, 0xeb, 0x22, 0x6d, 0xbd, 0xc5, 0xaa,
	0x8d, 0x4d, 0x45, 0x53, 0xc8, 0x70, 0x3d, 0xce, 0xd8, 0xaa, 0x19, 0xf0, 0xa6, 0xea, 0x4c, 0x5b,
	0x06, 0x08, 0x2d, 0x62, 0x37, 0xb3, 0x6a, 0x87, 0xfb, 0x2d, 0x58, 0x22, 0xe3, 0x67, 0x66, 0x87,
	0x8c, 0x8a, 0x00, 0xd2, 0x23, 0x4e, 0xaf, 0x2e, 0xb0, 0xca, 0xd2, 0xb6, 0xbb, 0x5b, 0xd5, 0x41,
	0xf1, 0x05, 0x19, 0x76, 0xef, 0x37, 0x73, 0x25, 0x25, 0x86, 0xda, 0xb7, 0xf0, 0x2e, 0x0d, 0x16,
	0x5a, 0x34, 0x86, 0x4d, 0xcb, 0xba, 0x68, 0xa2, 0xf7, 0xbe, 0xb3, 0xd5, 0x34, 0x2d, 0x4b, 0x9c,
	0x0a, 0x0e, 0x39, 0x5b, 0x93, 0x96, 0x55, 0x7f, 0x55, 0x81, 0x95, 0xa4, 0x64, 0x92, 0xd1, 0xdf,
	0x0f, 0xb1, 0xe1, 0x96, 0xe7, 0x78, 0x5d, 0x5f, 0x3a, 0xe2, 0x52, 0x0a, 0xdf, 0x62, 0x00, 0xb1,
	0x45, 0x3d, 0xbb, 0x01, 0x80, 0x3c, 0xbb, 0x41, 0x64, 0x7c, 0x76, 0x03, 0x49, 0xf1, 0xaa, 0x8d,
	0x50, 0x41, 0x86, 0x54, 0x15, 0xa4, 0xfe, 0xed, 0x05, 0x36, 0x46, 0x4f, 0xaf, 0x34, 0x65, 0x40,
	0xf4, 0x7b, 0xc4, 0xe9, 0x90, 0x78, 0x18, 0xbb, 0xcf, 0x6b, 0x81, 0xa8, 0x9a, 0xe3, 0xa9, 0x11,
	0x2a, 0xe7, 0x99, 0x50, 0xf7, 0x43, 0x6a, 0xa8, 0xfb, 0x93, 0xac, 0xd2, 0xf1, 0x79, 0x80, 0xc1,
	0x8b, 0xe3, 0xc7, 0x80, 0x46, 0x05, 0x0c, 0x85, 0xc1, 0xa3, 0xac, 0xb4, 0x61, 0x7a, 0xeb, 0xa6,
	0x6b, 0x75, 0xa5, 0xbf, 0xaa, 0x4c, 0xd7, 0x37, 0xd8, 0x7e, 0x51, 0x47, 0xbc, 0x30, 0xf8, 0x9f,
	0x57, 0xd1, 0xfa, 0xbb, 0x0b, 0x4c, 0x17, 0x45, 0x9d, 0xb7, 0xd7, 0x42, 0x59, 0x52, 0x9e, 0x97,
	0x6a, 0xa2, 0xf4, 0xe2, 0x57, 0x53, 0xfa, 0x40, 0xba, 0x99, 0x76, 0x6b, 0x83, 0xf7, 0x0d, 0x91,
	0x91, 0x5e, 0xbc, 0x93, 0x33, 0xc7, 0x46, 0x45, 0x48, 0x3b, 0xc5, 0xea, 0x9d, 0x13, 0xa5, 0x82,
	0xc8, 0x4f, 0xd3, 0x1f, 0x25, 0x50, 0xc8, 0x5a, 0x04, 0xd0, 0x97, 0x58, 0xd5, 0xec, 0x74, 0x1c,
	0xdb, 0x04, 0xa9, 0x22, 0x0e, 0xf9, 0x3e, 0xd1, 0x97, 0xd9, 0xa4, 0xa0, 0x56, 0x82, 0x5e, 0x98,
	0x0a, 0x48, 0x9f, 0x62, 0x65, 0x8c, 0xb3, 0x87, 0xcc, 0x4a, 0xfd, 0x0c, 0xd1, 0x82, 0x19, 0x34,
	0xb3, 0x22, 0x08, 0xaf, 0x8b, 0xa4, 0x3e, 0x1f, 0x0f, 0x99, 0xc8, 0x52, 0x9e, 0x6b, 0xd7, 0x17,
	0x7c, 0x96, 0x89, 0x58, 0xb1, 0xeb, 0x77, 0x62, 0xc8, 0xd1, 0xc7, 0xd9, 0x78, 0xaa, 0x09, 0xae,
	0xfb, 0x42, 0x6f, 0x72, 0x96, 0xa8, 0xeb, 0xf9, 0x2a, 0xdb, 0x97, 0x69, 0x92, 0xeb, 0x76, 0x13,
	0xca, 0x19, 0xe0, 0xc9, 0x3b, 0x9b, 0xd5, 0x44, 0x4b, 0xe5, 0x6c, 0x38, 0xcf, 0x4b, 0xf2, 0x3f,
	0x91, 0xcb, 0x5f, 0x19, 0xd5, 0xa9, 0x8b, 0xb1, 0xe9, 0x06, 0xbc, 0x9e, 0x6b, 0xe7, 0xf5, 0x8f,
	0x0e, 0xe0, 0xbd, 0xf3, 0x73, 0x68, 0x48, 0x8d, 0x7c, 0xf7, 0xd7, 0x20, 0x49, 0x33, 0x5e, 0x46,
	0x74, 0x02, 0x88, 0x54, 0x8e, 0x09, 0xdd, 0x8e, 0x1f, 0x05, 0x22, 0xf4, 0x02, 0x08, 0x25, 0xd1,
	0x8d, 0x2c, 0xf1, 0x28, 0x23, 0xdd, 0xc8, 0x3a, 0xc9, 0x2a, 0x94, 0x49, 0x3c, 0xed, 0x43, 0xc6,
	0xb4, 0xd1, 0x35, 0x2a, 0x16, 0x5f, 0xf1, 0x39, 0xc9, 0x2a, 0xf4, 0x86, 0x49, 0x6b, 0xc3, 0x74,
	0xd7, 0xe5, 0xfd, 0x83, 0x51, 0x84, 0x4d, 0x21, 0x28, 0x6d, 0x55, 0x8d, 0xac, 0x71, 0xe8, 0x8c,
	0x09, 0x08, 0xda, 0x17, 0xe9, 0x99, 0x19, 0x9c, 0xe4, 0xd1, 0xc9, 0x0d, 0xa2, 0xf1, 0xc0, 0xaf,
	0x24, 0xcf, 0xf4, 0x7c, 0x6f, 0x51, 0xf8, 0xe0, 0xe3, 0x12, 0x41, 0xee, 0x11, 0xb4, 0x44, 0xc4,
	0xd7, 0x11, 0x59, 0x22, 0x5c, 0xbe, 0x7a, 0x03, 0x62, 0x34, 0x19, 0x14, 0x32, 0x75, 0x76, 0x5f,
	0xa1, 0x67, 0xb5, 0x94, 0xb3, 0xfb, 0xe8, 0xc2, 0x53, 0x35, 0xef, 0xc2, 0xd3, 0x98, 0x72, 0xe1,
	0x09, 0x0f, 0xd2, 0xcd, 0xc0, 0x73, 0xc5, 0x49, 0x8a, 0x48, 0xd5, 0xdf, 0x3b, 0x88, 0x21, 0x06,
	0xa8, 0xbd, 0x44, 0x67, 0xdd, 0xc6, 0xc6, 0xe9, 0x3d, 0xe2, 0x26, 0x37, 0x83, 0x5e, 0x73, 0xdb,
	0x76, 0x45, 0x8f, 0x55, 0x09, 0x3c, 0x63, 0x06, 0xbd, 0x4b, 0x36, 0x86, 0x13, 0x54, 0xe9, 0x1c,
	0x2f, 0x90, 0x7d, 0x37, 0x16, 0x13, 0xce, 0x7b, 0x01, 0xc6, 0xdc, 0x14, 0x94, 0xe2, 0x56, 0xe3,
	0xb6, 0xb0, 0x2e, 0x0f, 0x19, 0xa2, 0xa8, 0x45, 0x84, 0x03, 0xd7, 0x3b, 0x98, 0x9e, 0xa4, 0x45,
	0xbe, 0xe2, 0x45, 0x1b, 0x95, 0x18, 0x39, 0xc7, 0x75, 0xdd, 0x30, 0x7d, 0x0b, 0xf9, 0x0e, 0xa9,
	0x75, 0x9d, 0x35, 0x7d, 0x2b, 0x59, 0x57, 0xa4, 0x43, 0x9e, 0xc3, 0x6a, 0x5d, 0x81, 0x10, 0x39,
	0x9e, 0x62, 0x5a, 0xc7, 0x0c, 0x82, 0xc4, 0xe7, 0x8f, 0x48, 0xc7, 0x32, 0x84, 0xcb, 0xef, 0x9f,
	0x60, 0xfb, 0x12, 0x94, 0xc8, 0x94, 0x3c, 0xd6, 0xc6, 0x15, 0x52, 0xe4, 0x7a, 0x07, 0xd3, 0x25,
	0xad, 0xd2, 0x04, 0x34, 0x3e, 0x64, 0x79, 0x71, 0x1b, 0xa0, 0x37, 0x5c, 0x82, 0x1a, 0x79, 0x33,
	0xe9, 0x0d, 0xa7, 0x90, 0xa7, 0xeb, 0x1c, 0x35, 0xc3, 0x68, 0xa2, 0xce, 0xb2, 0x1d, 0x94, 0x3a,
	0xc7, 0x0d, 0x51, 0x49, 0xd4, 0x59, 0xb6, 0x44, 0xfd, 0x9b, 0x0a, 0xac, 0x22, 0xe7, 0x31, 0x1a,
	0xef, 0xef, 0x65, 0xc3, 0x3e, 0x0e, 0x11, 0xf1, 0x66, 0x4b, 0xfa, 0xce, 0x51, 0x62, 0xce, 0x1b,
	0x82, 0x56, 0x3f, 0xcb, 0xaa, 0x34, 0x43, 0x9b, 0x22, 0x73, 0xbe, 0x04, 0x98, 0x1c, 0x84, 0x46,
	0xc5, 0x57, 0x52, 0xf5, 0x69, 0x56, 0x59, 0xbe, 0xb8, 0xfc, 0x35, 0xd6, 0xa4, 0xfe, 0x14, 0x2b,
	0x2f, 0x98, 0x61, 0x6b, 0x03, 0xf7, 0x94, 0xfb, 0xd8, 0xa0, 0xf2, 0xb2, 0xd1, 0xc9, 0xf4, 0xf5,
	0x32, 0x41, 0x76, 0x3a, 0xde, 0x43, 0x90, 0xfc, 0xe8, 0xfd, 0xac, 0xfc, 0xd5, 0xad, 0x8a, 0x4b,
	0xac, 0x1a, 0x05, 0xe3, 0xc0, 0x6f, 0xd0, 0xd9, 0x20, 0x0c, 0x1b, 0x29, 0x47, 0xc0, 0x6f, 0x98,
	0xa6, 0xd4, 0xe1, 0x52, 0xd0, 0xa3, 0x14, 0xd0, 0x42, 0x77, 0x89, 0x13, 0x19, 0xfc, 0x5d, 0xff,
	0x7c, 0x91, 0x69, 0x93, 0x64, 0xb1, 0x44, 0xf1, 0x59, 0xbe, 0x72, 0x99, 0xb8, 0xa3, 0x5c, 0xd8,
	0xfb, 0x8e, 0x72, 0xf1, 0x1a, 0xee, 0x28, 0x0f, 0x5c, 0xeb, 0x1d, 0xe5, 0xc1, 0x6b, 0xbc, 0xa3,
	0x3c, 0x94, 0x73, 0x47, 0xf9, 0x6c, 0x74, 0x47, 0x79, 0x38, 0x4f, 0xe8, 0x48, 0x7f, 0x6b, 0xde,
	0x3d, 0xe5, 0xaf, 0xe1, 0xe6, 0x5d, 0xfd, 0xd3, 0x05, 0x56, 0x99, 0xd9, 0xe2, 0x6e, 0x38, 0x25,
	0x9c, 0x8f, 0x1e, 0x00, 0x5d, 0x38, 0x7a, 0x63, 0xa3, 0x90, 0xe7, 0xd1, 0xba, 0xb8, 0x3c, 0x85,
	0x59, 0xc8, 0x21, 0x96, 0xcb, 0x9f, 0xa8, 0x36, 0x6d, 0x45, 0x2e, 0x28, 0xf2, 0x7d, 0x2f, 0x04,
	0x91, 0xa7, 0x59, 0x9d, 0x55, 0xd1, 0x0b, 0x30, 0xf2, 0xd2, 0x10, 0x52, 0x30, 0x00, 0xa5, 0x93,
	0xa1, 0x3c, 0xba, 0x1c, 0xdc, 0xd5, 0x14, 0x4c, 0x47, 0x97, 0x1d, 0x36, 0x8a, 0x9e, 0x4a, 0x93,
	0x5b, 0x66, 0x68, 0xfa, 0xfa, 0x34, 0xba, 0x24, 0x91, 0xe3, 0x98, 0x7c, 0x61, 0x29, 0xc7, 0xbe,
	0x31, 0x25, 0x69, 0x40, 0x1e, 0xc5, 0x62, 0x0d, 0x25, 0x1f, 0xec, 0x71, 0x26, 0xf2, 0x8b, 0xbd,
	0x20, 0x4b, 0x04, 0x98, 0xb3, 0xea, 0xaf, 0x60, 0x63, 0x0b, 0xe6, 0xba, 0xdd, 0x3a, 0x67, 0xbb,
	0x22, 0x3e, 0x40, 0x52, 0x19, 0x13, 0x8f, 0xed, 0xc4, 0xca, 0xd8, 0x4d, 0x6c, 0x94, 0x2c, 0x69,
	0xaa, 0x26, 0xcc, 0x10, 0x14, 0x11, 0xa0, 0x1f, 0x8f, 0xa2, 0xab, 0x15, 0x0d, 0x86, 0x20, 0xd2,
	0xd4, 0x5e, 0xcc, 0x2a, 0x78, 0xce, 0x29, 0x25, 0x71, 0xe5, 0xa8, 0xb2, 0xd0, 0xef, 0xa8, 0xb2,
	0xa8, 0x1e, 0x55, 0xd6, 0xef, 0x81, 0x15, 0xa0, 0x33, 0xe7, 0x86, 0x73, 0x6e, 0x78, 0xad, 0x61,
	0x32, 0xea, 0xdf, 0x5f, 0x60, 0x63, 0xc9, 0x08, 0x2e, 0xea, 0xf9, 0x9a, 0x70, 0xec, 0x93, 0xe7,
	0x6b, 0xea, 0xb1, 0x82, 0xb8, 0x85, 0x18, 0x1d, 0x2b, 0x90, 0xe2, 0x85, 0x06, 0xd0, 0xc8, 0x21,
	0x1b, 0x8d, 0x9f, 0x29, 0xbb, 0xeb, 0x60, 0xc6, 0xee, 0x9a, 0x6f, 0x59, 0x1a, 0xca, 0xb7, 0x2c,
	0xd5, 0x67, 0x59, 0x35, 0x11, 0xd1, 0x66, 0x97, 0xea, 0x26, 0xed, 0xb6, 0xc5, 0x94, 0xdd, 0xb6,
	0x7e, 0x86, 0x95, 0xe4, 0x4d, 0xdb, 0x9c, 0xa0, 0x2e, 0xb9, 0x56, 0x8d, 0xfa, 0xe3, 0xac, 0x4c,
	0xa6, 0x1d, 0xd0, 0x71, 0xd2, 0x2e, 0x90, 0xca, 0x1d, 0x98, 0x7b, 0xd8, 0x50, 0x8b, 0xc3, 0x6c,
	0x2f, 0x5e, 0xcb, 0xed, 0x29, 0xa2, 0xad, 0xbf, 0xad, 0xc8, 0x46, 0xd5, 0x38, 0xd1, 0x37, 0x26,
	0xec, 0x4c, 0x22, 0x44, 0xa3, 0x62, 0x48, 0xc2, 0x93, 0x2e, 0xba, 0x4f, 0x1c, 0x8d, 0xe1, 0xb2,
	0x80, 0xe0, 0x5b, 0x92, 0x83, 0x20, 0xb4, 0x89, 0xa3, 0xdc, 0xe3, 0x39, 0x16, 0x40, 0x22, 0x45,
	0xcd, 0x0d, 0x49, 0xf5, 0x07, 0x58, 0xc9, 0xa2, 0xba, 0x05, 0x62, 0x66, 0xee, 0x51, 0xf3, 0x88,
	0x1c, 0x6f, 0x14, 0x99, 0x41, 0xd8, 0x94, 0xce, 0xe0, 0xe2, 0x3a, 0x2c, 0xc0, 0xa6, 0xe8, 0x5e,
	0xdf, 0xbd, 0xe4, 0x63, 0x46, 0x72, 0xf0, 0x70, 0xae, 0xff, 0xbd, 0x63, 0xf6, 0x40, 0x28, 0xbe,
	0x9b, 0x9c, 0xcf, 0xe0, 0x67, 0xfd, 0x43, 0x05, 0x36, 0x9e, 0xaa, 0xac, 0x7e, 0x27, 0x1b, 0xc2,
	0xa0, 0xb3, 0x42, 0x17, 0xee, 0x1b, 0x33, 0x96, 0xa8, 0xf4, 0xe7, 0xca, 0x0b, 0x49, 0xc5, 0xbd,
	0xa2, 0x76, 0x88, 0xbb, 0x4a, 0xca, 0x7d, 0xff, 0x81, 0x6b, 0xba, 0xef, 0x5f, 0x9f, 0x66, 0xd5,
	0xb3, 0x92, 0x0b, 0xf6, 0x5d, 0xda, 0xce, 0x72, 0x33, 0xab, 0x76, 0x3b, 0x78, 0x68, 0x19, 0x2d,
	0x11, 0xb8, 0x49, 0x08, 0x20, 0xad, 0x01, 0x4b, 0x51, 0xff, 0x03, 0x9f, 0x6b, 0x7c, 0x78, 0xed,
	0x28, 0xf4, 0x19, 0xf9, 0x08, 0x8a, 0x85, 0x36, 0x4a, 0xd7, 0x1f, 0x66, 0xe3, 0xa9, 0x6b, 0xe9,
	0x19, 0xa6, 0x99, 0xd7, 0xb2, 0x87, 0xe2, 0xd7, 0xb2, 0xeb, 0x93, 0x6c, 0x64, 0xde, 0x5e, 0x95,
	0xce, 0x0d, 0x18, 0xdc, 0x15, 0x75, 0x02, 0x0a, 0x09, 0x5a, 0x02, 0x00, 0xea, 0x04, 0x47, 0x58,
	0x89, 0x22, 0xbf, 0x5a, 0xf7, 0x09, 0x07, 0xc1, 0x11, 0x8c, 0x6b, 0x64, 0xdd, 0x57, 0xff, 0xb9,
	0x02, 0xf2, 0x68, 0xf4, 0xdc, 0x56, 0x5a, 0xe6, 0x2f, 0x64, 0x64, 0xfe, 0x84, 0x1b, 0x62, 0x71,
	0xf7, 0x77, 0x6c, 0xc9, 0xd7, 0x50, 0x79, 0xc7, 0x16, 0x7d, 0x55, 0x85, 0x27, 0x67, 0xe4, 0x7f,
	0x50, 0x16, 0x90, 0x39, 0x4b, 0xbf, 0x5d, 0x08, 0x45, 0x14, 0x15, 0x25, 0x15, 0x82, 0x50, 0x7c,
	0x26, 0x09, 0x42, 0x78, 0xcf, 0xb8, 0xcd, 0x6d, 0xe1, 0xe1, 0x8b, 0xbf, 0xa1, 0x73, 0xb0, 0x8b,
	0x67, 0xd6, 0xd6, 0x78, 0x2b, 0xd4, 0x4f, 0x27, 0x2e, 0x1b, 0xa4, 0xb6, 0x4e, 0x24, 0x5c, 0xec,
	0xaa, 0xae, 0x27, 0x1a, 0x1b, 0xd8, 0x32, 0x65, 0xd7, 0xc1, 0xcf, 0xfa, 0x15, 0x56, 0x8d, 0x96,
	0x35, 0x6c, 0xe2, 0x53, 0x4c, 0x8b, 0xd6, 0xbf, 0x66, 0xc0, 0x15, 0xf7, 0xfd, 0xb1, 0x08, 0xde,
	0xe0, 0xc2, 0x34, 0xec, 0x78, 0xdb, 0x3c, 0x08, 0x9b, 0x41, 0x68, 0xfa, 0x72, 0x0b, 0x26, 0x50,
	0x23, 0x34, 0xfd, 0xfa, 0x8f, 0x15, 0xd8, 0x3e, 0x19, 0x8c, 0x27, 0xbe, 0x58, 0xf2, 0x80, 0x70,
	0xcf, 0xef, 0xff, 0xa6, 0xef, 0xb4, 0xef, 0x75, 0x28, 0xe8, 0x04, 0xf9, 0xdf, 0x03, 0xf9, 0x8a,
	0x78, 0xb9, 0x1e, 0xb6, 0xfb, 0xbb, 0xe5, 0xd8, 0xc3, 0x84, 0x84, 0x9e, 0x89, 0x94, 0x57, 0x48,
	0x48, 0xe8, 0x3d, 0xf2, 0xc1, 0x36, 0x4c, 0x48, 0xe8, 0xbd, 0x62, 0x65, 0xa0, 0x84, 0x84, 0xde,
	0x27, 0x14, 0x16, 0x4a, 0xd4, 0x17, 0x58, 0x75, 0xa1, 0xeb, 0x84, 0x76, 0x8e, 0xd3, 0x0f, 0x8d,
	0xda, 0x3b, 0xd8, 0x10, 0x9d, 0x82, 0x16, 0x77, 0x95, 0x1f, 0x88, 0xa8, 0x7e, 0x96, 0xa2, 0x59,
	0x91, 0xbb, 0xd5, 0x54, 0x8e, 0x93, 0x7b, 0x34, 0x15, 0x42, 0xbe, 0x03, 0x7a, 0x7c, 0x27, 0x90,
	0x7e, 0xae, 0x00, 0x58, 0xb1, 0x3b, 0x41, 0x7d, 0x8d, 0xb1, 0x38, 0x92, 0x57, 0x22, 0x68, 0x45,
	0x21, 0x19, 0xb4, 0xe2, 0x76, 0x36, 0x84, 0x3f, 0x85, 0x2a, 0xb0, 0x3f, 0x27, 0x1a, 0x98, 0x41,
	0x14, 0xd1, 0x43, 0xbc, 0x42, 0xf2, 0x85, 0xdf, 0xf5, 0x77, 0x17, 0xd9, 0x28, 0x12, 0x2d, 0x70,
	0xf4, 0x0d, 0xde, 0xf5, 0x69, 0xe7, 0x63, 0xac, 0xfc, 0x72, 0x4f, 0x3a, 0xc3, 0x89, 0xc9, 0x0b,
	0x00, 0x19, 0x7e, 0xa0, 0xcd, 0xdb, 0xcd, 0xc8, 0x6b, 0x6b, 0xc8, 0x18, 0x69, 0x93, 0x37, 0x54,
	0xd2, 0xa4, 0x37, 0x78, 0x8d, 0x26, 0xbd, 0x93, 0xac, 0xd2, 0xf2, 0xdc, 0xd0, 0x97, 0x31, 0x92,
	0xc4, 0x13, 0xc1, 0x04, 0x23, 0x29, 0xe7, 0x14, 0xd3, 0x68, 0x13, 0x20, 0x3a, 0xac, 0x96, 0x0c,
	0x12, 0x00, 0x1b, 0x01, 0x82, 0xb1, 0x72, 0x87, 0xd9, 0xc8, 0x2a, 0x6f, 0x6e, 0x74, 0xfd, 0x50,
	0xbc, 0xc2, 0x37, 0xbc, 0xca, 0x67, 0xbb, 0x3e, 0x7a, 0xeb, 0x88, 0x37, 0xfa, 0xc4, 0x8b, 0xe5,
	0x32, 0x59, 0xff, 0x86, 0x02, 0x1b, 0xa7, 0xe6, 0x8b, 0xfa, 0x12, 0x5b, 0x50, 0x0e, 0xe6, 0xaa,
	0x98, 0x69, 0xb9, 0xe1, 0xc4, 0xd2, 0x4f, 0xeb, 0x0e, 0xa4, 0x9f, 0xd6, 0xc5, 0x97, 0x45, 0xfc,
	0x56, 0x33, 0x6e, 0xec, 0x41, 0xf1, 0x74, 0x93, 0xdf, 0x12, 0xde, 0x80, 0x56, 0xfd, 0x11, 0xd1,
	0x37, 0x14, 0x13, 0x6e, 0xcf, 0x67, 0xb7, 0x55, 0xaf, 0x89, 0x62, 0xda, 0x6b, 0xa2, 0x3e, 0xcf,
	0xc6, 0x90, 0xd9, 0x39, 0x98, 0x9e, 0x67, 0xcd, 0x80, 0x96, 0x51, 0x0c, 0xa0, 0x1c, 0x0b, 0x14,
	0x98, 0xce, 0x1e, 0x06, 0x15, 0xd3, 0x87, 0x41, 0x75, 0x47, 0x70, 0x9b, 0xe5, 0xa6, 0x85, 0x1c,
	0xa3, 0x68, 0x0f, 0x64, 0x45, 0x29, 0xc4, 0xd1, 0x1e, 0x08, 0xfd, 0x82, 0xc4, 0x6b, 0x40, 0xb9,
	0x91, 0x6b, 0x93, 0xd5, 0x53, 0xde, 0x0a, 0xaa, 0x7f, 0x7c, 0x84, 0x0d, 0x21, 0x56, 0x99, 0x44,
	0x03, 0x38, 0x89, 0xf2, 0xc2, 0x36, 0x24, 0x62, 0x58, 0x45, 0x1b, 0x17, 0x8c, 0x27, 0x6c, 0x8d,
	0xc4, 0x9b, 0xf8, 0xa2, 0xd1, 0x2c, 0xf9, 0x0c, 0xa3, 0x88, 0x73, 0x44, 0x21, 0x0e, 0x64, 0x9c,
	0xa3, 0x3a, 0xab, 0x98, 0xae, 0xeb, 0x75, 0xdd, 0x16, 0x3d, 0x21, 0x48, 0xeb, 0x74, 0x02, 0x06,
	0x03, 0x09, 0x44, 0xbf, 0xab, 0x1b, 0xb6, 0xb8, 0x91, 0x21, 0x93, 0x78, 0x28, 0x14, 0x3d, 0x59,
	0x53, 0x12, 0x87, 0x42, 0xf2, 0xc9, 0x9a, 0x1a, 0x1b, 0xd9, 0xe9, 0x9a, 0x6e, 0xcf, 0x74, 0xc5,
	0xb5, 0x0c, 0x99, 0xd4, 0xef, 0x64, 0xfb, 0xf1, 0xb5, 0x2a, 0x9c, 0x71, 0x31, 0x03, 0x26, 0xac,
	0x37, 0xdd, 0xd0, 0x7b, 0x89, 0x67, 0xbb, 0x0b, 0x92, 0x11, 0xbe, 0xa8, 0x1d, 0xb4, 0x6d, 0x11,
	0x93, 0x43, 0xd8, 0x2c, 0x46, 0x05, 0x0c, 0x3f, 0x4f, 0x38, 0xee, 0x54, 0x62, 0xc7, 0x9d, 0xc8,
	0x1a, 0x58, 0x55, 0xad, 0x81, 0x0f, 0xb2, 0xd1, 0x36, 0xae, 0x06, 0xd4, 0x57, 0x07, 0xf2, 0xc4,
	0x18, 0x65, 0xcd, 0x30, 0x18, 0x51, 0x8b, 0x58, 0xff, 0x8c, 0x5e, 0x64, 0xc0, 0xac, 0x07, 0xf7,
	0xca, 0x5a, 0x46, 0x62, 0xe1, 0xa2, 0xad, 0xb8, 0x59, 0x1f, 0xca, 0x93, 0x06, 0x53, 0xb3, 0x51,
	0xf1, 0xae, 0xbe, 0x5f, 0xaa, 0x97, 0x98, 0xf9, 0x70, 0x5e, 0xcc, 0x0c, 0xcc, 0x8c, 0x0a, 0xa6,
	0x50, 0x2e, 0x45, 0xa1, 0xa3, 0xea, 0x23, 0x0f, 0xb5, 0xbe, 0xf5, 0xa5, 0x29, 0x68, 0x30, 0x3b,
	0x7e, 0xcd, 0xe1, 0x24, 0xab, 0x88, 0x66, 0x22, 0x69, 0xe6, 0x08, 0xb5, 0x38, 0xc1, 0xc8, 0xf1,
	0x41, 0xbe, 0xda, 0xc0, 0x2d, 0x3b, 0x4c, 0xbe, 0xda, 0x70, 0x34, 0x7e, 0xb5, 0x61, 0xc6, 0xb2,
	0x43, 0xf5, 0xd5, 0x86, 0x64, 0x18, 0xa2, 0x63, 0xd7, 0x11, 0x86, 0xe8, 0x8c, 0xb4, 0x61, 0xde,
	0x90, 0x67, 0x68, 0x4f, 0xce, 0x57, 0x69, 0xe1, 0x24, 0x45, 0x0a, 0x06, 0x19, 0xba, 0xa6, 0xa1,
	0x22, 0x05, 0x03, 0x0b, 0xe6, 0xf3, 0xa6, 0xdd, 0xda, 0x14, 0x1f, 0x47, 0x61, 0xa0, 0xca, 0x00,
	0xa1, 0x4f, 0x93, 0xef, 0x2c, 0x22, 0x0d, 0x7e, 0xd2, 0x4d, 0xe2, 0x09, 0x34, 0x33, 0x08, 0x1f,
	0xb1, 0x5b, 0x9b, 0xb8, 0x4c, 0x3c, 0x53, 0x14, 0xfb, 0x18, 0xb6, 0x3c, 0x1d, 0x89, 0x27, 0xcc,
	0x00, 0x43, 0xaa, 0xaa, 0x9f, 0x59, 0x13, 0x8b, 0x99, 0x35, 0x11, 0xca, 0xb5, 0x40, 0x12, 0x89,
	0x89, 0x28, 0x40, 0x72, 0x05, 0xa0, 0x11, 0x55, 0xde, 0x9b, 0xf3, 0x62, 0xef, 0x6f, 0xab, 0x12,
	0x41, 0x1b, 0x5f, 0x07, 0x8f, 0xcb, 0xc4, 0xb5, 0x84, 0xa6, 0x77, 0x35, 0x2a, 0x15, 0xa5, 0xbd,
	0x53, 0x4c, 0x53, 0xcb, 0x45, 0x42, 0x9a, 0xe8, 0x63, 0x71, 0xc9, 0x8b, 0x22, 0x5a, 0x1a, 0xb2,
	0xbe, 0x5b, 0x3e, 0xe6, 0x4a, 0xa9, 0xfa, 0x47, 0x0b, 0x8c, 0xc5, 0x01, 0xa9, 0xd2, 0x97, 0x26,
	0xab, 0xd1, 0xa5, 0xc9, 0x03, 0x6c, 0x88, 0xdc, 0x0d, 0x45, 0x98, 0x16, 0x4c, 0x88, 0xeb, 0xc9,
	0x66, 0x10, 0x50, 0x3c, 0x40, 0xba, 0x36, 0x15, 0x4c, 0x62, 0x5a, 0x5f, 0xca, 0x73, 0xfd, 0x1b,
	0xcc, 0x7d, 0x76, 0x35, 0xe7, 0x80, 0x39, 0xeb, 0xe3, 0x57, 0xff, 0x9d, 0x22, 0xab, 0xa8, 0xd7,
	0x0c, 0x72, 0xdd, 0x66, 0xef, 0x60, 0x7a, 0x74, 0x5b, 0x21, 0xbe, 0xf7, 0x46, 0xfe, 0xb3, 0x9a,
	0xc4, 0xcc, 0x2a, 0xf7, 0xdf, 0xe4, 0xe9, 0xc0, 0x40, 0xe2, 0x74, 0xe0, 0xb9, 0x4a, 0x70, 0xc1,
	0x9c, 0x5b, 0x7b, 0x91, 0x91, 0x21, 0x32, 0xf3, 0xe3, 0x7d, 0x23, 0xc7, 0xa1, 0xbb, 0x24, 0x43,
	0xe8, 0xc3, 0x55, 0x02, 0x40, 0x43, 0x84, 0x23, 0xf3, 0x39, 0x86, 0xb0, 0x21, 0xfc, 0x30, 0xe2,
	0x47, 0x05, 0x0c, 0x49, 0x5e, 0xc4, 0xc6, 0xe9, 0x32, 0x8a, 0xef, 0x39, 0x5c, 0xbd, 0x91, 0xd2,
	0x37, 0xb4, 0x5c, 0x15, 0xe9, 0x0d, 0xcf, 0x21, 0x06, 0x0f, 0x4b, 0x06, 0x71, 0x35, 0x4a, 0xbb,
	0x0a, 0x86, 0x94, 0xbf, 0x21, 0xea, 0x58, 0x3f, 0xc7, 0xf6, 0xc7, 0x33, 0x38, 0x16, 0x10, 0x8f,
	0xb0, 0x52, 0x64, 0xc3, 0x12, 0xfb, 0xb1, 0xbc, 0x63, 0x94, 0xab, 0x8b, 0xd5, 0x1f, 0x62, 0x4c,
	0x79, 0x15, 0xe3, 0xba, 0xb3, 0x3b, 0x6c, 0x3c, 0x15, 0x48, 0x13, 0x26, 0x28, 0x88, 0xf8, 0xc9,
	0xc3, 0x25, 0x84, 0x48, 0x19, 0x8f, 0x8b, 0xc7, 0x00, 0x04, 0xab, 0x11, 0x4e, 0xef, 0x00, 0xa4,
	0x63, 0x01, 0x0e, 0xa4, 0x63, 0x01, 0xd6, 0x2f, 0xb0, 0xca, 0xd2, 0xda, 0x9a, 0x63, 0xbb, 0xf4,
	0x46, 0xa3, 0xfe, 0xdc, 0x84, 0x46, 0xd3, 0xef, 0x29, 0x47, 0x45, 0xa5, 0x89, 0xe6, 0x2f, 0xe9,
	0xb2, 0x94, 0xa8, 0x9f, 0x61, 0x2c, 0x76, 0xda, 0xb8, 0x36, 0x1d, 0xb6, 0xfe, 0xef, 0x45, 0x36,
	0x22, 0x82, 0xc0, 0x2b, 0xa7, 0x39, 0x05, 0x19, 0xfe, 0x08, 0x52, 0xc9, 0x90, 0x6e, 0xc2, 0xfa,
	0x14, 0x85, 0x74, 0x13, 0x48, 0x3c, 0xfc, 0x92, 0x93, 0xb1, 0xb3, 0xd5, 0xc1, 0xf7, 0xf4, 0x61,
	0x15, 0x03, 0xe4, 0xb6, 0xed, 0x36, 0x63, 0xf7, 0xf0, 0xaa, 0x31, 0xda, 0xd9, 0xea, 0x5c, 0xb2,
	0xdd, 0x68, 0xf5, 0x04, 0x9a, 0x35, 0xd3, 0x76, 0x04, 0x11, 0xb9, 0xfb, 0x57, 0x3a, 0x5b, 0x9d,
	0x73, 0xa6, 0xed, 0x44, 0x9e, 0xb0, 0xaa, 0x10, 0x39, 0x9c, 0x11, 0x22, 0x0f, 0xe3, 0x6d, 0xcf,
	0xe8, 0x5c, 0x05, 0xbd, 0x19, 0xdc, 0x4b, 0xb6, 0x4b, 0x0a, 0x03, 0xc5, 0xe2, 0x10, 0x17, 0xa5,
	0x80, 0x10, 0x38, 0xe3, 0x2d, 0x1d, 0xf4, 0x65, 0x6b, 0xf5, 0x9a, 0xdb, 0x9c, 0x6f, 0x3a, 0x52,
	0x1b, 0xa7, 0x13, 0x94, 0xfd, 0x12, 0x79, 0x09, 0x71, 0xf1, 0x62, 0x8f, 0xa6, 0xa7, 0x6e, 0xa7,
	0x89, 0x87, 0x82, 0x32, 0x30, 0x26, 0x42, 0x2f, 0x74, 0xf0, 0x84, 0x00, 0xc5, 0x71, 0xa4, 0xc2,
	0xd7, 0x51, 0x89, 0x8e, 0x9e, 0x9a, 0xa6, 0xdc, 0xd3, 0xde, 0x36, 0x9d, 0x25, 0xd4, 0xbf, 0x50,
	0x60, 0xfb, 0xe2, 0x4b, 0x53, 0xb2, 0x2b, 0x0e, 0xb3, 0x11, 0xc7, 0xa6, 0x7b, 0x9a, 0xa2, 0x2f,
	0x20, 0x39, 0x67, 0xe9, 0xfb, 0xd9, 0x90, 0x15, 0xc4, 0xb1, 0xd3, 0x06, 0xad, 0x80, 0x4c, 0xba,
	0x8a, 0xbd, 0xa9, 0x9f, 0x3e, 0x41, 0x86, 0xa6, 0xfb, 0x59, 0xd9, 0xb4, 0x9b, 0xf4, 0x82, 0x9b,
	0x50, 0x40, 0x76, 0xbb, 0x32, 0x5f, 0x32, 0x65, 0xec, 0xd4, 0x67, 0xb3, 0xf1, 0xb6, 0x19, 0xb6,
	0x36, 0x9a, 0xb1, 0x77, 0x01, 0xed, 0x1e, 0x63, 0x08, 0x5e, 0x89, 0x1c, 0x1c, 0x4e, 0xb1, 0x31,
	0x79, 0xaa, 0x22, 0x0e, 0x4c, 0x0f, 0xb1, 0x61, 0x71, 0x9a, 0x2a, 0xe3, 0x4c, 0x60, 0xaa, 0xfe,
	0x13, 0x03, 0x6c, 0x3c, 0xfa, 0x6e, 0x41, 0x4b, 0xa1, 0x60, 0xe4, 0xe9, 0x20, 0x86, 0x82, 0xb9,
	0x64, 0x7f, 0x2d, 0x63, 0x30, 0x7d, 0x5a, 0x3b, 0x98, 0x3d, 0xad, 0x3d, 0x9b, 0xe9, 0xd3, 0xa1,
	0x3c, 0xa1, 0x3c, 0xf9, 0x55, 0xa9, 0x1e, 0x3f, 0x97, 0xd3, 0xe3, 0xc3, 0xd7, 0xc0, 0x25, 0x35,
	0x1e, 0x60, 0x0b, 0x50, 0x62, 0x86, 0x65, 0x0d, 0x75, 0x17, 0x97, 0xe9, 0x11, 0xcf, 0x28, 0x98,
	0xd8, 0x04, 0xdb, 0xe7, 0xbc, 0xbc, 0x19, 0x8d, 0x63, 0x1a, 0xc0, 0xe2, 0xbc, 0xd0, 0x79, 0xf9,
	0x94, 0x80, 0xd3, 0xe0, 0x5d, 0x62, 0xba, 0x4a, 0x2b, 0x0a, 0x2a, 0x63, 0x41, 0x27, 0x33, 0x05,
	0xcd, 0xbf, 0x44, 0xe6, 0x16, 0x45, 0x6a, 0x31, 0x3f, 0x82, 0xd4, 0x5f, 0x3b, 0xc0, 0xc6, 0x53,
	0x4f, 0x1e, 0xc1, 0x54, 0x8d, 0x5e, 0x4a, 0x8a, 0x6d, 0x4d, 0x12, 0x34, 0x67, 0x81, 0x6c, 0x46,
	0x77, 0xa5, 0x8b, 0x79, 0x86, 0x90, 0xc9, 0xa9, 0x95, 0xb9, 0x8b, 0x73, 0x2b, 0x8f, 0x35, 0x1b,
	0x2b, 0x93, 0x2b, 0x33, 0x06, 0x91, 0xe2, 0x63, 0x84, 0x92, 0xa9, 0xa2, 0x57, 0x57, 0x24, 0x10,
	0x85, 0xa6, 0x68, 0xc9, 0xb6, 0x64, 0x78, 0x04, 0xb9, 0x64, 0xe3, 0x1d, 0xde, 0xe4, 0x8a, 0x3e,
	0xd4, 0x67, 0x45, 0xc7, 0xbc, 0xc3, 0xd1, 0x8a, 0x8e, 0x39, 0xd5, 0xc5, 0x7e, 0x24, 0xb9, 0xd8,
	0xa7, 0x2f, 0x31, 0x97, 0xb2, 0x31, 0x3f, 0xcf, 0x61, 0x1c, 0x13, 0xb2, 0x04, 0xa9, 0x9e, 0x26,
	0x37, 0xe5, 0x3f, 0x1d, 0x15, 0x59, 0x8d, 0x30, 0x74, 0x14, 0xfd, 0x44, 0x29, 0xfb, 0x18, 0x2b,
	0xe3, 0x36, 0x8d, 0xe5, 0xd0, 0xaa, 0x53, 0x02, 0x00, 0x14, 0x52, 0x7f, 0x4b, 0x81, 0x55, 0x13,
	0x41, 0xc9, 0xf5, 0x29, 0x69, 0x1a, 0x34, 0x3b, 0xe2, 0xac, 0xe6, 0xd4, 0x2e, 0x31, 0xcc, 0x4f,
	0x9f, 0x53, 0x9f, 0x84, 0x1a, 0x11, 0xc1, 0xd1, 0x8f, 0x3e, 0xc8, 0x2a, 0xe7, 0x76, 0x8f, 0x93,
	0xde, 0x37, 0x8a, 0x7e, 0xfd, 0x21, 0x36, 0xd6, 0x68, 0x71, 0xb7, 0x15, 0xbd, 0x75, 0x9a, 0x67,
	0xf7, 0x09, 0x90, 0x42, 0x39, 0x0a, 0x22, 0xc0, 0x9c, 0x55, 0xbf, 0xc0, 0x06, 0xa7, 0x7c, 0xaf,
	0x43, 0x26, 0x4e, 0xee, 0x58, 0x4a, 0xbc, 0x03, 0x4c, 0x8b, 0xfb, 0xc6, 0xe8, 0xd0, 0x1d, 0xc5,
	0x92, 0x84, 0x24, 0xdd, 0x0a, 0x0f, 0xbc, 0xed, 0xa6, 0x62, 0xe3, 0x19, 0x09, 0xbc, 0x6d, 0xdc,
	0x7c, 0x43, 0x56, 0x3e, 0xd7, 0xf5, 0x5d, 0x3b, 0xec, 0xfa, 0xf9, 0xb1, 0x0d, 0xd2, 0xf7, 0xef,
	0xd4, 0xf2, 0x07, 0x92, 0xe5, 0x9f, 0x62, 0x03, 0x1d, 0x2f, 0xc8, 0xb7, 0xe3, 0x50, 0x58, 0x8c,
	0x33, 0xd3, 0x06, 0x90, 0xd4, 0xe7, 0x59, 0x69, 0x56, 0x3c, 0x5b, 0x95, 0xf1, 0xc3, 0xbb, 0x8b,
	0x0d, 0xd3, 0x47, 0x0b, 0x5b, 0x40, 0x3a, 0x72, 0xab, 0xd7, 0xe6, 0xd4, 0x8e, 0x86, 0xa0, 0xab,
	0xdf, 0xc6, 0x4a, 0x92, 0x3d, 0x05, 0xed, 0xa3, 0x63, 0x31, 0x19, 0xb4, 0x8f, 0x0e, 0x4e, 0x0a,
	0xbd, 0xfa, 0x07, 0x8a, 0x8c, 0xc5, 0xd9, 0x33, 0x05, 0x4f, 0xb3, 0x7d, 0x96, 0x1d, 0xe0, 0xd1,
	0xc0, 0x9a, 0x6c, 0x92, 0xfc, 0x78, 0x11, 0x51, 0x8b, 0x19, 0x9a, 0xc8, 0x11, 0xb7, 0xe1, 0x14,
	0x2b, 0xbb, 0x7c, 0x27, 0x24, 0x93, 0xd6, 0x40, 0x9e, 0x2f, 0x56, 0x5c, 0x85, 0xd3, 0x8b, 0x7c,
	0x07, 0x26, 0xa3, 0x29, 0x7c, 0xb1, 0x5c, 0x91, 0xa4, 0xaf, 0x18, 0x4c, 0x7c, 0xc5, 0x90, 0xf8,
	0x8a, 0xe4, 0x28, 0x19, 0x4e, 0x8e, 0x92, 0xa3, 0x2f, 0x60, 0xd5, 0x04, 0xcf, 0xeb, 0x09, 0x53,
	0x5f, 0x7f, 0x82, 0xe9, 0xcb, 0x17, 0x97, 0xf1, 0x58, 0x5e, 0xde, 0x3b, 0x5d, 0xf3, 0xf6, 0x36,
	0x96, 0xe7, 0x6c, 0x85, 0xc5, 0xdc, 0xad, 0xf0, 0x45, 0x6c, 0xec, 0x3c, 0x5e, 0x9e, 0x3b, 0xeb,
	0x05, 0x81, 0xdc, 0xd8, 0xf1, 0x15, 0xa0, 0x38, 0x3e, 0x0c, 0x24, 0x49, 0x2e, 0x8d, 0x4f, 0x02,
	0xe4, 0x0d, 0xba, 0xfa, 0x14, 0xab, 0xcc, 0xb8, 0x16, 0xbe, 0x9e, 0x29, 0x4f, 0xf7, 0x31, 0xca,
	0x24, 0xe5, 0xa5, 0x28, 0x93, 0x37, 0xb1, 0xd1, 0x20, 0xf4, 0x9b, 0xa6, 0x65, 0x61, 0x3c, 0x5d,
	0x32, 0xff, 0xb0, 0x20, 0xf4, 0x27, 0x09, 0x52, 0x37, 0x59, 0x75, 0xd6, 0xf3, 0x03, 0x6e, 0x98,
	0x2d, 0x7a, 0x0d, 0xf9, 0x79, 0xac, 0xe4, 0x98, 0xee, 0x7a, 0xd7, 0x5c, 0xef, 0x63, 0x45, 0x9f,
	0x17, 0x58, 0x32, 0x45, 0x4b, 0x5a, 0x35, 0xa2, 0x46, 0x31, 0x11, 0x51, 0xa3, 0xfe, 0x9e, 0x02,
	0x63, 0xd3, 0xbe, 0x27, 0x62, 0xbd, 0xe9, 0x53, 0xac, 0x42, 0x87, 0xb2, 0x22, 0x96, 0x46, 0xe1,
	0x5a, 0xe3, 0xc5, 0x61, 0x2e, 0xc1, 0x64, 0x86, 0x55, 0x7d, 0xd3, 0xb5, 0xbc, 0xb6, 0xe4, 0x52,
	0xbc, 0x46, 0x2e, 0x15, 0xca, 0x46, 0x6c, 0xea, 0xb3, 0xb0, 0x43, 0xb5, 0xe4, 0x7d, 0x66, 0x29,
	0xe8, 0x9a, 0x6d, 0x6c, 0x6c, 0x21, 0x5c, 0x51, 0x0a, 0x36, 0x88, 0x75, 0xd3, 0x76, 0x45, 0x84,
	0x30, 0x92, 0xad, 0xcb, 0x00, 0xc1, 0x08, 0x61, 0x75, 0x9b, 0xed, 0x57, 0x38, 0x45, 0x8a, 0x42,
	0xce, 0x7e, 0x57, 0x4d, 0xec, 0x77, 0x77, 0xb3, 0x41, 0x7c, 0x82, 0x29, 0xd7, 0x43, 0x25, 0x55,
	0x37, 0x03, 0x49, 0xeb, 0xc7, 0xd9, 0xc8, 0xb6, 0x8f, 0xda, 0x1e, 0x74, 0x79, 0xe4, 0x7d, 0x3a,
	0x64, 0xe0, 0xef, 0x89, 0xdb, 0x13, 0x21, 0x98, 0x70, 0x93, 0x19, 0x65, 0x23, 0x2b, 0xbe, 0xbd,
	0xbe, 0xce, 0x7d, 0xed, 0x59, 0x7a, 0x99, 0x0d, 0xe1, 0x2b, 0x28, 0x5a, 0x61, 0xe2, 0x34, 0xd3,
	0xa2, 0xfb, 0x06, 0x8d, 0x0e, 0x6f, 0xd9, 0xa6, 0x03, 0xe8, 0x0b, 0xee, 0x85, 0x80, 0x6b, 0xcf,
	0xd2, 0xc7, 0xd9, 0xa8, 0x11, 0xfb, 0xbe, 0x6b, 0x85, 0x89, 0x57, 0xb2, 0xf1, 0x94, 0x0b, 0xbd,
	0x7e, 0x94, 0x1d, 0x4a, 0x81, 0x9a, 0xe4, 0x25, 0xa4, 0x3d, 0x4b, 0xaf, 0xb1, 0x03, 0x69, 0xdc,
	0xac, 0xe9, 0x5b, 0x5a, 0x21, 0x17, 0xc3, 0x1d, 0x47, 0x2b, 0xe6, 0xf1, 0x5b, 0xe8, 0x85, 0x1b,
	0x76, 0x4b, 0x1b, 0x98, 0x78, 0x29, 0xab, 0x60, 0xb0, 0x94, 0x55, 0x6f, 0x67, 0x85, 0x0e, 0x6f,
	0x2a, 0x22, 0xd9, 0x5c, 0xf4, 0x5c, 0xa8, 0xb1, 0x4e, 0xef, 0xe2, 0x00, 0xa4, 0xd1, 0x0b, 0x42,
	0xde, 0xd6, 0x0a, 0x2a, 0x8c, 0xe6, 0xb1, 0x56, 0x54, 0x61, 0xb3, 0xb6, 0x65, 0x71, 0x57, 0x1b,
	0x98, 0x98, 0x64, 0x63, 0x20, 0xdd, 0x52, 0x3e, 0x11, 0x10, 0x65, 0x7f, 0x12, 0x22, 0x8b, 0x39,
	0xc4, 0xf4, 0x14, 0xa2, 0x61, 0xbb, 0x5a, 0x61, 0xe2, 0x4d, 0x05, 0xc6, 0x66, 0x16, 0x3c, 0x97,
	0x93, 0xc8, 0x31, 0xc6, 0x18, 0x26, 0x64, 0xb6, 0x7d, 0xac, 0x4a, 0x69, 0xf1, 0x96, 0x95, 0x56,
	0x88, 0x49, 0xce, 0x7b, 0x8e, 0xa5, 0x15, 0xf1, 0x93, 0x30, 0xdd, 0xb0, 0x9d, 0x2d, 0xee, 0x6b,
	0x03, 0x31, 0xc5, 0x94, 0x67, 0xbb, 0xda, 0xa0, 0x5e, 0x65, 0x65, 0x4a, 0x1b, 0x0b, 0x67, 0xb5,
	0xa1, 0x38, 0x79, 0xa1, 0x31, 0xad, 0x0d, 0xc7, 0xc9, 0xd9, 0x47, 0xa6, 0xb5, 0x91, 0x89, 0x2d,
	0xa8, 0x4f, 0x14, 0x52, 0x06, 0x90, 0xa0, 0x49, 0x89, 0xea, 0x54, 0x58, 0x89, 0x92, 0x7c, 0x5b,
	0x2b, 0x44, 0x48, 0x83, 0x9b, 0x50, 0x91, 0xfd, 0x6c, 0x1c, 0x93, 0xf8, 0x4a, 0x87, 0xd7, 0xda,
	0xe4, 0x96, 0x36, 0xa0, 0x1f, 0x64, 0xfb, 0x22, 0xa0, 0xc1, 0x5b, 0xdc, 0xde, 0xe2, 0x96, 0x36,
	0x28, 0xfb, 0xa1, 0x39, 0x4d, 0x51, 0x44, 0xb4, 0xa1, 0x89, 0xb7, 0x17, 0xd9, 0x3e, 0xf9, 0x7e,
	0x4d, 0xa4, 0x9f, 0x42, 0xb3, 0x25, 0x80, 0xcd, 0xc5, 0xae, 0x23, 0xc6, 0x49, 0x12, 0x4e, 0x9a,
	0xaa, 0x56, 0x80, 0x1e, 0x48, 0x62, 0x68, 0xe4, 0xe2, 0x30, 0x49, 0x21, 0xd0, 0xfb, 0xa0, 0xeb,
	0x6a, 0x03, 0xfa, 0x8d, 0xec, 0x68, 0x0e, 0xee, 0xb2, 0x6d, 0x7a, 0x9b, 0x5d, 0x5b, 0x1b, 0xec,
	0x8f, 0x77, 0xaf, 0x6e, 0x70, 0x6d, 0x48, 0xbf, 0x89, 0x1d, 0xcb, 0xc1, 0x5f, 0xe9, 0x7a, 0x01,
	0x68, 0x04, 0xda, 0x70, 0xb6, 0x56, 0x93, 0x7e, 0xdb, 0xf3, 0xb5, 0x11, 0xfd, 0x38, 0x3b, 0xd2,
	0xa7, 0xe4, 0xc0, 0xd6, 0x4a, 0x13, 0x6f, 0x1f, 0x64, 0x25, 0x79, 0xf5, 0x1d, 0x06, 0xc3, 0x5c,
	0x34, 0xac, 0xa8, 0x1d, 0x34, 0x56, 0x89, 0x40, 0x33, 0x3b, 0x1d, 0x1a, 0xbb, 0x11, 0xa4, 0xd1,
	0x6b, 0x71, 0xae, 0x15, 0xf5, 0x03, 0x4c, 0x8b, 0x60, 0x8f, 0x75, 0x4d, 0xf7, 0xac, 0xe9, 0x69,
	0x03, 0x09, 0x76, 0x38, 0x96, 0x06, 0x13, 0x84, 0xe2, 0x49, 0x34, 0x6d, 0x08, 0x2a, 0x1f, 0x43,
	0xa3, 0xe7, 0x97, 0xe9, 0xab, 0x22, 0x44, 0x6c, 0x3d, 0xd6, 0x46, 0x12, 0xd5, 0x32, 0xda, 0xab,
	0x5a, 0x29, 0x51, 0x18, 0xfc, 0xd0, 0xb0, 0x6f, 0xe3, 0xba, 0xcb, 0x35, 0x45, 0x5b, 0x4b, 0x90,
	0xc2, 0x26, 0xa0, 0xad, 0xc3, 0xd0, 0x8a, 0x6b, 0x40, 0x3d, 0xbd, 0x91, 0xa0, 0x33, 0xba, 0x2e,
	0xd7, 0xec, 0x04, 0xa8, 0xb1, 0x69, 0xbb, 0xda, 0xcb, 0x61, 0xa4, 0xc4, 0x20, 0x58, 0xb0, 0xd6,
	0x7a, 0x58, 0xfe, 0x66, 0xa2, 0xfc, 0xc8, 0x78, 0xab, 0x81, 0xfa, 0x77, 0x38, 0x82, 0x27, 0x2d,
	0xbb, 0x5a, 0x3b, 0xd5, 0x42, 0x78, 0xd1, 0x49, 0x73, 0x13, 0x8d, 0x7e, 0xde, 0x6c, 0x6d, 0x98,
	0x9a, 0x97, 0x6c, 0xb5, 0x48, 0x34, 0xd6, 0x3a, 0x89, 0x72, 0x23, 0xb1, 0x47, 0x7b, 0x45, 0xb2,
	0xe7, 0xa0, 0x99, 0x35, 0x3f, 0x51, 0xdc, 0x79, 0x7b, 0x2d, 0x3c, 0xeb, 0xed, 0x68, 0xc1, 0xc4,
	0xe7, 0x0b, 0x30, 0x7d, 0x42, 0xee, 0xdb, 0xa6, 0x23, 0x47, 0x86, 0x4c, 0xcb, 0x91, 0x71, 0x88,
	0xe9, 0x11, 0x28, 0x6e, 0xdd, 0x02, 0xcd, 0x52, 0x01, 0x17, 0x4d, 0x89, 0x03, 0x24, 0x02, 0x4e,
	0x79, 0xde, 0xa6, 0xed, 0xae, 0x6b, 0x03, 0xb4, 0xe4, 0x49, 0xa8, 0x6f, 0xae, 0x85, 0xda, 0x20,
	0xac, 0xf5, 0x8d, 0xd0, 0xf3, 0x7b, 0xda, 0x10, 0x2c, 0x06, 0x52, 0x7d, 0xa3, 0x65, 0xe4, 0xac,
	0xd3, 0xe5, 0x1d, 0x1f, 0x86, 0xc6, 0x08, 0x7c, 0x7d, 0x94, 0x37, 0x7e, 0x6f, 0x57, 0x2b, 0x25,
	0x98, 0xa2, 0xc9, 0x54, 0x2b, 0x4f, 0xfc, 0x5e, 0x91, 0x95, 0x67, 0xe0, 0x43, 0x30, 0x1c, 0xc2,
	0x18, 0x63, 0x2b, 0x68, 0x20, 0x8c, 0xd7, 0x40, 0x4a, 0x27, 0xd6, 0x40, 0x02, 0xc5, 0x6b, 0x20,
	0xa5, 0xd5, 0x35, 0x70, 0x45, 0x5c, 0x29, 0x93, 0x6b, 0x20, 0xa5, 0x61, 0x96, 0x0c, 0xc5, 0x3c,
	0xe5, 0x28, 0x1f, 0x86, 0x36, 0x10, 0xa0, 0x78, 0x88, 0x8f, 0x40, 0x33, 0x12, 0x74, 0xd2, 0xe5,
	0x2d, 0xd8, 0x68, 0x97, 0xcd, 0x75, 0xae, 0x95, 0xa0, 0x19, 0x09, 0xbe, 0x62, 0x06, 0x9b, 0x44,
	0x5c, 0x86, 0xc5, 0x8e, 0x80, 0x0b, 0xe6, 0x4e, 0xd4, 0x34, 0x0c, 0xda, 0x82, 0xc0, 0x06, 0x37,
	0x1d, 0x14, 0x2d, 0x40, 0x49, 0xd4, 0x46, 0xe3, 0x6a, 0x8b, 0xfd, 0xaf, 0x12, 0xb3, 0x8d, 0xbb,
	0xac, 0xaa, 0x7c, 0x1d, 0xf5, 0xd7, 0x58, 0xfc, 0x75, 0x38, 0xee, 0xc7, 0xe3, 0x34, 0x0e, 0x7a,
	0x0d, 0xb6, 0x61, 0x4a, 0xd3, 0xb0, 0xdd, 0x37, 0xf1, 0x12, 0x76, 0x20, 0x2f, 0xce, 0x35, 0x74,
	0xe7, 0xa2, 0xe7, 0x87, 0x1b, 0xda, 0xb3, 0xf4, 0x12, 0x1b, 0x9c, 0x31, 0x03, 0x18, 0x22, 0xd0,
	0xc7, 0x5e, 0x37, 0xdc, 0xd0, 0x8a, 0x00, 0xbc, 0xc4, 0x83, 0x50, 0x1b, 0x80, 0x5f, 0xd8, 0x1f,
	0x83, 0x13, 0xcf, 0x67, 0xa3, 0x18, 0xdb, 0xaf, 0xbb, 0x8a, 0x63, 0xaf, 0xcc, 0x86, 0x16, 0xb8,
	0xc3, 0xa1, 0xa7, 0x18, 0x1b, 0x46, 0xd7, 0x37, 0x5f, 0x2b, 0x60, 0x4e, 0x1b, 0x3b, 0xa7, 0xc4,
	0x06, 0xa7, 0xcc, 0x76, 0x47, 0x1b, 0x98, 0xb8, 0x8f, 0x76, 0x47, 0x5c, 0xe8, 0x26, 0xb1, 0x02,
	0xc8, 0xe1, 0x46, 0x76, 0x34, 0x07, 0xdc, 0x24, 0x81, 0x4b, 0x7b, 0xd6, 0xc4, 0x0a, 0x3b, 0x98,
	0xf0, 0x03, 0x5c, 0xea, 0x70, 0xdf, 0x0c, 0x3d, 0x1f, 0x16, 0xcf, 0x5c, 0x44, 0x73, 0xd2, 0xb5,
	0xb4, 0x67, 0xe9, 0x37, 0xb0, 0x5a, 0x3e, 0x7a, 0xc9, 0xd7, 0x0a, 0x13, 0x1f, 0x18, 0x24, 0x4b,
	0x59, 0x84, 0x16, 0x3a, 0xff, 0x91, 0x0c, 0x30, 0x1a, 0x24, 0xcf, 0xd2, 0x4f, 0xb2, 0xe3, 0x59,
	0x34, 0xc9, 0x08, 0x28, 0x83, 0x68, 0x05, 0xf9, 0x35, 0x29, 0x12, 0x9f, 0xee, 0x61, 0xd2, 0x3e,
	0x94, 0xc5, 0xe3, 0x92, 0x34, 0x00, 0xfb, 0x48, 0x16, 0x37, 0x6d, 0xf6, 0x96, 0xd6, 0x2e, 0x71,
	0xbe, 0x49, 0x1b, 0x51, 0x1e, 0x01, 0x19, 0x2d, 0xb5, 0x21, 0x58, 0xbb, 0xb2, 0x78, 0x6c, 0x58,
	0x6d, 0x38, 0xbf, 0xe4, 0x59, 0xee, 0x7b, 0xda, 0x48, 0xa6, 0xad, 0x84, 0xec, 0x82, 0xf5, 0x2a,
	0xe9, 0x37, 0xb3, 0x9b, 0x76, 0xfd, 0xec, 0xf9, 0x19, 0xad, 0x9c, 0xdf, 0x36, 0x53, 0xdd, 0xb6,
	0x94, 0x47, 0x35, 0xa6, 0x9f, 0x60, 0x37, 0x64, 0x49, 0x94, 0x9d, 0x63, 0x74, 0xb7, 0x92, 0xa6,
	0xe8, 0xc2, 0x81, 0x56, 0xc9, 0xff, 0x10, 0x1c, 0xfa, 0x55, 0xbd, 0xce, 0x6e, 0xcc, 0xfb, 0x10,
	0xa5, 0x90, 0xb1, 0xfc, 0x42, 0xa6, 0xbc, 0x76, 0x07, 0x84, 0x11, 0x50, 0xc9, 0xb8, 0x36, 0x3e,
	0xf1, 0x0a, 0x36, 0x8a, 0x0d, 0x47, 0xa6, 0x29, 0xd8, 0x47, 0x94, 0x64, 0x73, 0xce, 0x25, 0x8f,
	0x7c, 0x5a, 0x69, 0x55, 0xcc, 0x24, 0xc1, 0x0b, 0x69, 0x38, 0x3d, 0xa6, 0xa9, 0x15, 0xd3, 0x9c,
	0x68, 0x98, 0x83, 0xb0, 0x34, 0xb1, 0xa3, 0xcc, 0x0f, 0x83, 0x77, 0xb8, 0x49, 0x42, 0x90, 0xe8,
	0x9b, 0x14, 0xb8, 0xb9, 0xe4, 0xb6, 0xa0, 0x78, 0x75, 0xf6, 0x28, 0x58, 0xfa, 0xa9, 0x15, 0xe4,
	0xc7, 0xa6, 0xf1, 0x93, 0x2d, 0x54, 0x09, 0x91, 0x49, 0x71, 0xe2, 0x67, 0x0f, 0xb2, 0x6a, 0xe2,
	0x64, 0x00, 0x6a, 0x99, 0x00, 0xc4, 0x32, 0xfa, 0x61, 0xa5, 0x96, 0x88, 0xc1, 0x88, 0x4d, 0x5a,
	0x21, 0x51, 0xcf, 0x78, 0xe0, 0xd1, 0xe2, 0x58, 0xcc, 0xc9, 0x86, 0xbd, 0x39, 0x20, 0xc7, 0x6c,
	0x8c, 0xc0, 0xd7, 0xd8, 0x11, 0x39, 0xa8, 0x3f, 0x87, 0x3d, 0xbb, 0x0f, 0xf2, 0x92, 0x1d, 0x6e,
	0xa8, 0xde, 0xd6, 0xda, 0x90, 0x7e, 0x8a, 0xdd, 0xb2, 0x0b, 0x31, 0x52, 0x01, 0x58, 0x1b, 0xd6,
	0x6f, 0x67, 0xb7, 0xee, 0x45, 0x89, 0x26, 0x4e, 0x6d, 0x64, 0x0f, 0xd2, 0x99, 0x76, 0x27, 0xec,
	0xa1, 0x43, 0xba, 0x56, 0xca, 0x7e, 0x09, 0x3d, 0xb7, 0xe2, 0x78, 0xb0, 0x39, 0x64, 0x5a, 0x07,
	0x91, 0xf4, 0x9d, 0x4c, 0x0e, 0xe9, 0x18, 0x7b, 0x9e, 0x87, 0xf4, 0x59, 0xa3, 0x89, 0x1e, 0x14,
	0x7d, 0xbb, 0xe6, 0xf3, 0x60, 0x43, 0xd9, 0xa8, 0x2a, 0x72, 0xe1, 0x8a, 0x89, 0x16, 0xba, 0xbe,
	0x25, 0x4e, 0xcb, 0xb5, 0x6a, 0x96, 0x87, 0xda, 0x74, 0x44, 0x34, 0x26, 0x97, 0x1f, 0xa5, 0x8a,
	0xb8, 0xe1, 0xcc, 0x93, 0x61, 0x5a, 0x1b, 0xcf, 0x7e, 0x20, 0xd4, 0x92, 0x36, 0x25, 0x2d, 0xdb,
	0x50, 0x84, 0x49, 0x1d, 0x89, 0x5e, 0xe8, 0x68, 0xfb, 0x72, 0x1a, 0x0a, 0x49, 0x17, 0xcc, 0x1d,
	0x4d, 0xcf, 0x7e, 0x09, 0xee, 0x85, 0xa2, 0x98, 0xfd, 0x39, 0x5f, 0x02, 0x13, 0xce, 0x0c, 0xb9,
	0x28, 0x8e, 0x87, 0xda, 0x81, 0x7e, 0x5f, 0x72, 0x81, 0x9c, 0x34, 0xb5, 0x83, 0xfa, 0x2d, 0xec,
	0x44, 0xea, 0x4b, 0x4c, 0xdb, 0x8d, 0x36, 0x5d, 0x6a, 0x90, 0x43, 0xd9, 0xaa, 0xd0, 0x95, 0x7a,
	0xb4, 0xc8, 0x68, 0x87, 0x13, 0x53, 0x8f, 0x6a, 0x4a, 0x01, 0x4f, 0x08, 0x5f, 0xeb, 0x8b, 0xa7,
	0x4e, 0x3f, 0x22, 0xd7, 0x2a, 0x95, 0x7d, 0xab, 0xd7, 0x72, 0xe2, 0x1b, 0xfd, 0xda, 0x51, 0xb9,
	0x64, 0xa6, 0x5a, 0x23, 0xa6, 0x38, 0xa6, 0xdf, 0xc6, 0xea, 0xfd, 0x4b, 0x99, 0x74, 0x2d, 0xfa,
	0x98, 0x1b, 0xb2, 0x6d, 0x72, 0xae, 0xeb, 0x38, 0x31, 0xa3, 0xe3, 0x39, 0x04, 0x9e, 0xe3, 0x78,
	0xdb, 0x72, 0x10, 0xdd, 0x98, 0xfd, 0x1e, 0x22, 0x08, 0x08, 0x7f, 0x53, 0xb6, 0x26, 0x93, 0xc9,
	0x58, 0x76, 0xd4, 0x2e, 0x27, 0xb2, 0x74, 0x53, 0x14, 0xbf, 0xce, 0x0e, 0x7b, 0x0a, 0xdd, 0xc9,
	0xec, 0x94, 0xa1, 0x03, 0x16, 0xdc, 0x94, 0xea, 0xfa, 0x11, 0x12, 0x0b, 0x94, 0x3e, 0x46, 0xd7,
	0xd8, 0x9e, 0x76, 0x73, 0x76, 0x36, 0xc9, 0x2b, 0x10, 0xda, 0x2d, 0xd9, 0x85, 0xad, 0xb1, 0x6d,
	0x87, 0xad, 0x0d, 0xed, 0xd6, 0x3d, 0x66, 0xfa, 0x59, 0x33, 0xb0, 0x5b, 0x34, 0x25, 0x6f, 0xdb,
	0x63, 0xa5, 0xf1, 0xba, 0x21, 0xcd, 0x3e, 0xed, 0xd9, 0xd9, 0xfe, 0x43, 0x7f, 0x48, 0x24, 0x45,
	0x89, 0xf8, 0x54, 0xb6, 0x55, 0x23, 0x8f, 0xc9, 0xf3, 0x3c, 0xd4, 0x6e, 0xcf, 0x8e, 0x12, 0xc4,
	0x63, 0x52, 0xec, 0x29, 0x13, 0xd9, 0x09, 0x35, 0xcd, 0xd7, 0xb8, 0x19, 0x36, 0x6c, 0x57, 0x7b,
	0x4e, 0x76, 0x14, 0x8b, 0x69, 0x80, 0xc2, 0xe3, 0x1d, 0xd9, 0xa9, 0x10, 0x39, 0xb3, 0xc6, 0x83,
	0xe3, 0xce, 0x6c, 0x93, 0x36, 0xb8, 0x6b, 0x81, 0x4a, 0xa2, 0x9d, 0xce, 0x96, 0x8e, 0x19, 0x91,
	0xfd, 0x73, 0xb3, 0xa3, 0xca, 0xe0, 0x01, 0x0f, 0xe5, 0x2d, 0x72, 0xed, 0xae, 0xdc, 0x45, 0x85,
	0xee, 0x7e, 0x6a, 0x77, 0x67, 0x8b, 0x9d, 0x35, 0xbd, 0xf3, 0xa6, 0x3b, 0xdd, 0xd5, 0xce, 0x64,
	0x1b, 0xee, 0x4a, 0xd7, 0x5e, 0xc1, 0x28, 0x42, 0xb3, 0x5d, 0x53, 0xbb, 0xa7, 0x0f, 0xfe, 0xca,
	0x06, 0x77, 0x2f, 0xdb, 0x5c, 0xbb, 0x57, 0xda, 0x64, 0x94, 0x9a, 0x99, 0xee, 0xa6, 0x76, 0x5f,
	0x76, 0xd8, 0x5d, 0x70, 0x1d, 0xaf, 0xb5, 0x79, 0xce, 0xf3, 0x2c, 0xed, 0x79, 0x52, 0xcc, 0x49,
	0xad, 0x3f, 0x7c, 0xd9, 0x0b, 0xb9, 0x1b, 0xda, 0xa6, 0xa3, 0xdd, 0x9f, 0xed, 0xb1, 0x69, 0x7b,
	0x6d, 0x8d, 0xfb, 0xdc, 0x0d, 0xe5, 0x10, 0x7d, 0x7e, 0xb6, 0x70, 0xd0, 0xbb, 0xb4, 0x07, 0xb2,
	0x9d, 0x35, 0xe5, 0xb9, 0x41, 0xb7, 0x4d, 0x83, 0xfe, 0xc1, 0xec, 0x37, 0x9d, 0xe7, 0x61, 0xdc,
	0x4d, 0x2f, 0xc8, 0x36, 0xe6, 0x23, 0xb6, 0xe3, 0x90, 0x09, 0xe4, 0x85, 0xd9, 0xc6, 0x94, 0x46,
	0x47, 0xed, 0xa1, 0xec, 0x67, 0x35, 0x92, 0xb1, 0x5d, 0xb4, 0x87, 0xb3, 0xed, 0xa2, 0x08, 0x55,
	0x2f, 0xca, 0x59, 0x72, 0x37, 0x4c, 0x9f, 0x2f, 0xdb, 0x2d, 0x50, 0x6f, 0x03, 0xed, 0xc5, 0x79,
	0x5d, 0x49, 0x86, 0x0f, 0x6d, 0x32, 0xaf, 0x51, 0x13, 0x2b, 0x87, 0x76, 0x36, 0x3b, 0x91, 0x92,
	0x71, 0xac, 0xb5, 0x29, 0x7d, 0x82, 0xdd, 0xb6, 0x1b, 0x85, 0x90, 0xc0, 0x26, 0x1d, 0x47, 0x9b,
	0xee, 0xb3, 0x8b, 0xc8, 0x05, 0x68, 0xda, 0xec, 0x05, 0xda, 0x4c, 0xb6, 0x56, 0x68, 0x0e, 0x20,
	0xe7, 0x57, 0xd8, 0xcb, 0xb4, 0x73, 0x7d, 0x26, 0xa7, 0xda, 0x67, 0xe7, 0xfb, 0x76, 0x29, 0x34,
	0x9f, 0x36, 0x9b, 0x9d, 0x7f, 0xd9, 0xc8, 0xa1, 0xda, 0x5c, 0xf6, 0xf3, 0x69, 0x86, 0x43, 0x8d,
	0xce, 0x7a, 0x41, 0xa0, 0xbd, 0x04, 0xb4, 0xcf, 0xd4, 0x9a, 0x74, 0x71, 0x59, 0x7b, 0x24, 0xfb,
	0xa5, 0x2f, 0xf1, 0x6c, 0x37, 0x36, 0x48, 0xcc, 0xb9, 0x81, 0x36, 0x9f, 0x25, 0x82, 0xb5, 0x29,
	0x49, 0xb4, 0x90, 0x6d, 0x0e, 0x3a, 0x8c, 0x88, 0xbb, 0x60, 0x31, 0x3b, 0x08, 0xf0, 0xe5, 0x60,
	0x79, 0x54, 0xa5, 0x2d, 0xf5, 0x59, 0xec, 0xe4, 0xb4, 0x58, 0xce, 0x8e, 0xb1, 0xf8, 0xe9, 0x61,
	0xed, 0xd1, 0x3e, 0xec, 0xe5, 0x79, 0xa0, 0x66, 0x4c, 0x3c, 0xc8, 0xaa, 0x33, 0x40, 0x61, 0x78,
	0x1e, 0xd9, 0xcc, 0xaa, 0xac, 0x0c, 0xbf, 0x15, 0x03, 0x26, 0x26, 0x97, 0xb7, 0x96, 0xb5, 0x82,
	0x92, 0x9a, 0xd1, 0x8a, 0x13, 0x0b, 0x6c, 0x6c, 0x66, 0xc6, 0x0d, 0x7d, 0x14, 0x8b, 0xd0, 0xfa,
	0x39, 0xca, 0x46, 0x66, 0x1a, 0x32, 0x6b, 0x95, 0x95, 0x67, 0x1a, 0xd2, 0xf6, 0x5b, 0x00, 0x15,
	0x7b, 0xa6, 0x01, 0x5b, 0xce, 0xf6, 0x92, 0xeb, 0xf4, 0xb4, 0x22, 0xe8, 0xe0, 0x33, 0x0d, 0xb1,
	0x18, 0x80, 0x30, 0xff, 0x5f, 0xd9, 0x58, 0x54, 0x15, 0x62, 0x57, 0x61, 0xa5, 0xf3, 0x46, 0xc4,
	0x6f, 0x3f, 0x1b, 0x87, 0xd4, 0x25, 0xd3, 0x0e, 0x6d, 0x77, 0x1d, 0x3a, 0x45, 0x2b, 0xe8, 0x07,
	0x98, 0xa6, 0x00, 0x0d, 0x6e, 0x5a, 0xc0, 0x7a, 0x9c, 0x8d, 0x02, 0x14, 0xd4, 0xa0, 0xc8, 0x32,
	0x03, 0x80, 0x69, 0x3b, 0x58, 0x35, 0x31, 0x02, 0xa2, 0x36, 0x08, 0xe5, 0x03, 0x6c, 0xca, 0xf1,
	0x02, 0x34, 0xa8, 0xde, 0x0f, 0xf5, 0x71, 0xbc, 0x90, 0xca, 0x1e, 0x67, 0xa3, 0x90, 0x68, 0x5e,
	0x70, 0xbb, 0x80, 0x7e, 0x96, 0x5e, 0x13, 0x00, 0x61, 0xa9, 0xfd, 0x0f, 0xf9, 0xaf, 0x30, 0x31,
	0xc3, 0xaa, 0xf3, 0xdd, 0xd6, 0x66, 0x6f, 0xca, 0xb7, 0x49, 0x15, 0x18, 0x67, 0xa3, 0xf0, 0x3b,
	0xd6, 0x00, 0xc6, 0x18, 0x43, 0x00, 0x92, 0x91, 0x4d, 0x09, 0xd3, 0x17, 0x9c, 0xd0, 0x37, 0x09,
	0x58, 0x9c, 0xd8, 0x64, 0xfb, 0xe2, 0x93, 0x02, 0xbe, 0x33, 0x6f, 0xb7, 0xed, 0x10, 0xba, 0x37,
	0x03, 0x6c, 0x9e, 0xe3, 0x6d, 0xd3, 0x81, 0x26, 0x39, 0xca, 0x0e, 0x65, 0xb1, 0x0b, 0x80, 0x2b,
	0xe4, 0xe7, 0xa4, 0x78, 0x41, 0x5a, 0x71, 0xe2, 0xfd, 0x05, 0x36, 0x7e, 0xc1, 0xb5, 0xc3, 0x29,
	0xf4, 0x63, 0x83, 0x5a, 0xdf, 0x0d, 0xb5, 0x8a, 0x41, 0x8a, 0xb9, 0x5f, 0x01, 0xce, 0x76, 0x5d,
	0x3a, 0x5a, 0x50, 0x60, 0x0b, 0xdd, 0xcb, 0xb6, 0xe9, 0x3d, 0xd2, 0xb5, 0xb5, 0x22, 0x2c, 0xd2,
	0x0a, 0xe6, 0xb2, 0x6d, 0xba, 0x57, 0x36, 0xb8, 0x36, 0x00, 0xba, 0x8c, 0x02, 0xbf, 0xd2, 0xf5,
	0x1a, 0x68, 0xe7, 0x1d, 0x84, 0x39, 0x98, 0xcc, 0xe0, 0x35, 0x6c, 0x6d, 0x68, 0xe2, 0xb7, 0xdf,
	0x57, 0x60, 0xa3, 0x4a, 0x04, 0x16, 0x5d, 0x63, 0x15, 0x91, 0x94, 0x15, 0x2b, 0xb1, 0x01, 0x10,
	0x7f, 0xdf, 0xb2, 0xa8, 0x8f, 0xb0, 0xe2, 0x6c, 0x47, 0xfb, 0xd3, 0x11, 0x7d, 0x94, 0x0d, 0xcf,
	0x76, 0xce, 0x9a, 0x01, 0xd7, 0xde, 0xb7, 0xa8, 0x33, 0x36, 0xb4, 0x60, 0xee, 0xcc, 0x76, 0xb4,
	0x3f, 0x1b, 0xd1, 0xc7, 0x58, 0x19, 0x7f, 0x23, 0xee, 0x3b, 0x17, 0xf5, 0x2a, 0x2b, 0x61, 0x7a,
	0xd2, 0xb2, 0xb4, 0x0f, 0xc7, 0xc9, 0xe5, 0x56, 0xa8, 0x7d, 0x64, 0x51, 0xd7, 0x59, 0x15, 0x93,
	0xe7, 0x6c, 0xd7, 0x74, 0x80, 0xe4, 0xbb, 0x52, 0x30, 0xa0, 0xfb, 0xe8, 0x22, 0x14, 0x37, 0x19,
	0x86, 0x66, 0x6b, 0x53, 0xfb, 0xd2, 0x88, 0x3e, 0xce, 0x18, 0x25, 0xb0, 0x8c, 0x8f, 0x2d, 0x42,
	0x99, 0x04, 0x00, 0x0e, 0x3f, 0xa0, 0xa4, 0x21, 0xf7, 0x0f, 0x2e, 0xea, 0xfb, 0xd9, 0x18, 0xa5,
	0xa3, 0x62, 0x7e, 0x28, 0x0d, 0x04, 0xca, 0x1f, 0x5e, 0xd4, 0x35, 0x36, 0x3a, 0xb5, 0x61, 0x7a,
	0x81, 0x28, 0xec, 0xcf, 0x47, 0xf4, 0x03, 0x6c, 0x5c, 0x81, 0x60, 0x89, 0x9f, 0xc2, 0xcc, 0x0a,
	0x14, 0x38, 0x7e, 0x3a, 0x0d, 0x04, 0x8e, 0x9f, 0x59, 0xd4, 0x6b, 0x6c, 0xbf, 0x02, 0x8c, 0x2a,
	0xf0, 0x63, 0xb9, 0x18, 0xc8, 0xf3, 0xe3, 0xd8, 0x02, 0xc2, 0xc3, 0x44, 0xd4, 0xe3, 0x2f, 0x46,
	0xf4, 0x43, 0x6c, 0x5f, 0x02, 0x86, 0x35, 0xf9, 0xe9, 0x45, 0xfd, 0x20, 0xd3, 0x12, 0x70, 0x60,
	0xfe, 0x33, 0x59, 0x30, 0x70, 0xfe, 0xd9, 0x45, 0xfd, 0x28, 0x3b, 0x98, 0x00, 0x47, 0xf5, 0xf9,
	0xb9, 0x3e, 0x38, 0xc8, 0xf7, 0xf3, 0x8b, 0x7a, 0x85, 0x8d, 0xc0, 0x9a, 0x0e, 0x0a, 0xf9, 0x5f,
	0x8e, 0x40, 0x2b, 0x89, 0x14, 0xd6, 0xe2, 0xf3, 0x8b, 0xd0, 0x25, 0x02, 0x02, 0xcc, 0x7e, 0x59,
	0x05, 0x00, 0x87, 0x2f, 0x2c, 0x42, 0x3b, 0x0a, 0x40, 0x54, 0xe6, 0xaf, 0x64, 0xa0, 0x40, 0xfb,
	0xab, 0x98, 0x19, 0xe6, 0xec, 0x14, 0xaa, 0x0a, 0xda, 0x5f, 0x8d, 0x60, 0xcb, 0x46, 0x00, 0x2c,
	0xf3, 0xb7, 0xb0, 0x95, 0x62, 0x20, 0xf0, 0xfb, 0xed, 0x14, 0x0c, 0xb8, 0xfd, 0xaf, 0x45, 0xfd,
	0x30, 0xd3, 0x63, 0x58, 0x54, 0xf8, 0xff, 0x2f, 0x0f, 0x01, 0x39, 0x7e, 0x07, 0x07, 0x29, 0x20,
	0x0c, 0x33, 0xe4, 0xda, 0x5f, 0x8f, 0xe8, 0xfb, 0x58, 0x45, 0x26, 0xb1, 0xec, 0x3f, 0xa0, 0x71,
	0x22, 0x40, 0xc0, 0xec, 0xff, 0x26, 0x20, 0xc0, 0xe5, 0x0f, 0xb1, 0x0b, 0x24, 0x24, 0x2a, 0xf5,
	0xff, 0x9f, 0x05, 0x03, 0xf5, 0x1f, 0xe1, 0x08, 0x6f, 0x6c, 0xd8, 0xdc, 0xb1, 0xb4, 0x2f, 0xe3,
	0x08, 0xa7, 0x04, 0x96, 0xf7, 0xa5, 0x45, 0x31, 0xab, 0x04, 0xc1, 0xdf, 0x8c, 0x88, 0x39, 0xa2,
	0xd0, 0x7c, 0x65, 0x11, 0xaa, 0x19, 0xc1, 0xa0, 0xac, 0xbf, 0x4f, 0x82, 0xa0, 0x9c, 0x7f, 0x58,
	0x84, 0x71, 0x14, 0x81, 0xa2, 0x6a, 0xfd, 0x63, 0x0e, 0x1c, 0xe8, 0xff, 0x09, 0xbf, 0xeb, 0xac,
	0xcf, 0xcd, 0x4d, 0x51, 0xf6, 0xdf, 0xe1, 0x8c, 0x50, 0x20, 0x58, 0xfa, 0x33, 0x4b, 0xd0, 0x45,
	0x0a, 0x14, 0x98, 0xbe, 0x2e, 0x0d, 0x04, 0x8e, 0xaf, 0x5f, 0x82, 0x71, 0xaf, 0x00, 0xa3, 0x3a,
	0xbc, 0x21, 0x17, 0x03, 0x79, 0xde, 0xb8, 0x04, 0x65, 0x12, 0xd0, 0xe0, 0xeb, 0x1c, 0x75, 0x30,
	0xed, 0x2b, 0x23, 0x40, 0x9f, 0x82, 0x62, 0x6d, 0xde, 0xbe, 0x04, 0x5d, 0x9b, 0xc2, 0x40, 0x11,
	0xef, 0xc8, 0x43, 0x40, 0x09, 0xef, 0x5c, 0x82, 0x6e, 0x51, 0x10, 0xa4, 0x35, 0xfe, 0xfd, 0x88,
	0x7e, 0x84, 0x1d, 0x48, 0x83, 0xb1, 0x8c, 0x0f, 0x2c, 0xa5, 0x4a, 0x47, 0x14, 0x14, 0xf2, 0x2d,
	0xb9, 0x18, 0x28, 0xe5, 0x83, 0xd8, 0x20, 0x84, 0x99, 0x16, 0xb7, 0x27, 0xb5, 0x7f, 0x18, 0x89,
	0xeb, 0x24, 0x81, 0x58, 0xc2, 0x47, 0x96, 0xa0, 0x4f, 0x92, 0x08, 0x5c, 0x21, 0x73, 0xe0, 0xb8,
	0x4a, 0x26, 0xca, 0xb5, 0xba, 0xf4, 0x58, 0x24, 0x0c, 0xe1, 0x7f, 0x1c, 0xd1, 0x6f, 0x60, 0x87,
	0x73, 0x30, 0x58, 0xce, 0x0f, 0x2e, 0xe9, 0xc7, 0xd8, 0xa1, 0x1c, 0x2c, 0xae, 0x93, 0xfd, 0x90,
	0xb8, 0x5e, 0xe2, 0xf7, 0x9c, 0xb3, 0x7d, 0x6e, 0xf0, 0xc0, 0x0e, 0x42, 0x9c, 0xad, 0xff, 0x84,
	0xdf, 0x93, 0x04, 0x62, 0x39, 0x9f, 0xc1, 0x7a, 0x27, 0x11, 0xb8, 0x12, 0xe6, 0xc0, 0x71, 0x1d,
	0x5c, 0x82, 0x51, 0x3e, 0xd7, 0x52, 0x99, 0xff, 0x33, 0xae, 0x83, 0x09, 0x18, 0xf2, 0xfe, 0x59,
	0xec, 0xbf, 0x04, 0x1c, 0x17, 0xb5, 0x2c, 0x18, 0xd7, 0x33, 0x1c, 0x4f, 0xf3, 0xc2, 0x33, 0x51,
	0xf2, 0xfe, 0x17, 0x1c, 0x4f, 0x29, 0x28, 0x72, 0xff, 0x02, 0x0e, 0x9b, 0x14, 0x06, 0x17, 0xb0,
	0x3c, 0x04, 0xae, 0x61, 0xd8, 0x32, 0xd3, 0xa6, 0xbf, 0xa9, 0x14, 0xf0, 0xaf, 0xd8, 0x32, 0x49,
	0x20, 0xf2, 0xff, 0x5f, 0xd8, 0x02, 0x49, 0x04, 0x2e, 0x51, 0x39, 0x70, 0x5c, 0xa1, 0x96, 0x60,
	0x85, 0xba, 0xe0, 0x84, 0x76, 0x1b, 0xba, 0xf7, 0xdf, 0x70, 0x85, 0x92, 0x49, 0xe4, 0xf8, 0x87,
	0x4b, 0x30, 0x6f, 0x17, 0xcc, 0x9d, 0x88, 0xe8, 0xdf, 0x71, 0xde, 0x2a, 0x10, 0xa4, 0xfb, 0x0b,
	0xac, 0xa7, 0x02, 0x85, 0x62, 0xff, 0x32, 0x0d, 0x84, 0x32, 0xff, 0x6a, 0x09, 0x56, 0x28, 0x61,
	0x39, 0xf8, 0x0f, 0x5c, 0xa1, 0x28, 0x81, 0x7c, 0xfe, 0x61, 0x49, 0xac, 0x50, 0x82, 0xe0, 0x1b,
	0x4a, 0x62, 0x85, 0x52, 0x68, 0x5e, 0xb5, 0x2c, 0x96, 0x23, 0x82, 0x41, 0x49, 0xff, 0x3d, 0x09,
	0x82, 0x72, 0x5e, 0xbd, 0x8c, 0x39, 0x85, 0x7d, 0x10, 0x55, 0x11, 0xed, 0x55, 0x25, 0x5c, 0x9d,
	0x54, 0x18, 0x72, 0x7c, 0x3d, 0x65, 0x47, 0xf8, 0x85, 0x80, 0x2f, 0xfb, 0x5c, 0xfb, 0xef, 0x25,
	0xe8, 0x71, 0x15, 0x84, 0x94, 0xef, 0x5c, 0x86, 0xa6, 0x57, 0x9a, 0x1d, 0x56, 0x19, 0x50, 0xb6,
	0x5e, 0x5d, 0x82, 0xf1, 0x9d, 0x45, 0x60, 0xae, 0x0f, 0x2e, 0xc3, 0x9e, 0x98, 0x45, 0x42, 0xd5,
	0xbf, 0xb5, 0x0f, 0x0e, 0xbe, 0xe1, 0xdb, 0x96, 0x61, 0x24, 0xa5, 0x70, 0x30, 0xc0, 0xb5, 0xd7,
	0x94, 0x60, 0x26, 0xe6, 0x60, 0xb0, 0xbc, 0x8f, 0x2e, 0xe7, 0x54, 0x06, 0xb0, 0x50, 0xe0, 0x77,
	0xf7, 0x43, 0x42, 0x89, 0xdf, 0x93, 0xf7, 0x7d, 0x73, 0x2d, 0xae, 0x3d, 0x9d, 0xf7, 0x7d, 0x73,
	0x62, 0xdc, 0xfd, 0x70, 0xde, 0x37, 0xcc, 0xd1, 0xd8, 0xfb, 0x91, 0x3e, 0x38, 0x28, 0xed, 0x47,
	0x97, 0x61, 0x59, 0x4c, 0xe1, 0x70, 0x16, 0x68, 0xdf, 0x58, 0xd2, 0x8f, 0xb3, 0x5a, 0x1e, 0x0a,
	0x4b, 0xfc, 0xf1, 0xe5, 0x9c, 0xef, 0x47, 0x34, 0x94, 0xf9, 0x3f, 0xfa, 0x62, 0xa1, 0xd4, 0x9f,
	0xc8, 0x6b, 0x55, 0x98, 0x1c, 0xda, 0x6b, 0xf3, 0x5a, 0x15, 0x30, 0x58, 0xe6, 0xcf, 0xe7, 0x35,
	0x1c, 0x60, 0xa1, 0xc8, 0x5f, 0xe8, 0x87, 0x84, 0x12, 0x7f, 0x71, 0x19, 0x66, 0xd1, 0xf2, 0x46,
	0x2f, 0xb0, 0x5b, 0x88, 0xd0, 0xbe, 0xa9, 0x04, 0xb3, 0x48, 0x81, 0x60, 0x09, 0xbf, 0xba, 0x0c,
	0x13, 0x46, 0x81, 0x02, 0xe7, 0x2f, 0xa6, 0x81, 0xc0, 0xf1, 0xd7, 0x70, 0x74, 0x4f, 0x3a, 0x8e,
	0xb2, 0x2c, 0x3c, 0x83, 0xa3, 0x3b, 0x01, 0x43, 0xae, 0xbf, 0xb3, 0x0c, 0x43, 0x39, 0x01, 0x07,
	0xbe, 0xff, 0x3b, 0x0b, 0x06, 0xce, 0xbf, 0xbb, 0x9c, 0x99, 0x23, 0x53, 0x5d, 0x9f, 0x6b, 0xaf,
	0x2b, 0x41, 0x3f, 0x66, 0xe0, 0x58, 0xc2, 0x1f, 0x61, 0x3f, 0x66, 0x70, 0x50, 0xca, 0xff, 0xcb,
	0x47, 0x41, 0x49, 0x7f, 0x8c, 0xb3, 0x0e, 0xf5, 0x1d, 0x69, 0x7c, 0x7f, 0x3d, 0xce, 0x3a, 0x15,
	0x84, 0xfc, 0xff, 0x6a, 0x19, 0x5a, 0x4b, 0x05, 0x03, 0xeb, 0xbf, 0xce, 0x40, 0x81, 0xeb, 0x97,
	0x97, 0x23, 0x16, 0x0d, 0x1e, 0x2e, 0x72, 0x6e, 0x4d, 0x7b, 0xdb, 0xae, 0xf6, 0x86, 0x12, 0xd4,
	0x23, 0x0d, 0x46, 0xee, 0xff, 0x84, 0xe3, 0x21, 0x8d, 0x82, 0x12, 0xfe, 0x39, 0x17, 0x03, 0xa5,
	0xfc, 0xcb, 0xb2, 0x7e, 0x82, 0x1d, 0x23, 0xeb, 0xd1, 0x94, 0xd7, 0xee, 0xf8, 0x7c, 0x83, 0xbb,
	0x81, 0xed, 0xb9, 0x40, 0x80, 0x7b, 0xe5, 0x1b, 0x4b, 0xfa, 0x2d, 0xec, 0xa6, 0x5d, 0x28, 0xb0,
	0xec, 0x57, 0x3f, 0xaa, 0xdf, 0xcc, 0x6e, 0xdc, 0x85, 0x0a, 0xaa, 0xf1, 0x9a, 0xbd, 0x88, 0xa0,
	0x46, 0x4f, 0x3f, 0x0a, 0x23, 0x22, 0x79, 0x96, 0xf1, 0x26, 0x1c, 0x11, 0x09, 0x18, 0x96, 0xfa,
	0xc6, 0x47, 0x51, 0x4a, 0x51, 0xe1, 0x50, 0xce, 0x9b, 0xb2, 0x60, 0xe0, 0xfc, 0xe6, 0x47, 0x51,
	0xb0, 0x00, 0x30, 0x5a, 0x86, 0x23, 0xf6, 0x6f, 0xc6, 0x35, 0x21, 0x8b, 0xc0, 0x32, 0xde, 0xfd,
	0x28, 0x8c, 0x97, 0x2c, 0x12, 0x0a, 0x7a, 0x4f, 0x8c, 0x73, 0xe2, 0x03, 0x22, 0x2a, 0xed, 0xbd,
	0x58, 0x09, 0xd5, 0xe0, 0x77, 0xb6, 0xbb, 0xb6, 0xa6, 0xbd, 0x05, 0xfb, 0x2f, 0x0d, 0xc6, 0x92,
	0xbe, 0xed, 0x51, 0xe8, 0xa5, 0x34, 0x0a, 0xca, 0xf9, 0xf6, 0x5c, 0x0c, 0x94, 0xf2, 0x21, 0x2c,
	0x65, 0x99, 0xfb, 0x6b, 0xbc, 0x15, 0xa2, 0xe2, 0x10, 0xf0, 0x0b, 0x1d, 0xed, 0xad, 0x58, 0x4a,
	0x1a, 0x8c, 0xa5, 0x7c, 0x0f, 0xf2, 0x4a, 0xa3, 0xa0, 0x94, 0xef, 0xcd, 0xc5, 0x40, 0x29, 0xdf,
	0x87, 0xa5, 0x90, 0x45, 0x61, 0xda, 0x6c, 0x9b, 0xeb, 0xfc, 0x2c, 0x28, 0x61, 0x6f, 0xc3, 0x52,
	0xd2, 0x60, 0x2c, 0xe5, 0x47, 0x91, 0x57, 0x1a, 0x05, 0xa5, 0x7c, 0x3c, 0x17, 0x03, 0xa5, 0x7c,
	0xe2, 0x51, 0xfd, 0x46, 0x76, 0x44, 0x1c, 0x75, 0x29, 0xfc, 0x7a, 0xf4, 0x5b, 0x7b, 0x7b, 0x49,
	0xaf, 0xb3, 0xe3, 0x7d, 0xf1, 0x58, 0xee, 0x4f, 0x3c, 0xaa, 0x9f, 0x64, 0x37, 0xf4, 0xa5, 0x81,
	0x0a, 0xfc, 0xe4, 0xee, 0x24, 0x50, 0x93, 0xcf, 0x3e, 0xaa, 0xdf, 0xc4, 0x8e, 0xe6, 0x91, 0x08,
	0x95, 0xef, 0x1d, 0x25, 0x18, 0xc9, 0xfd, 0x09, 0xb0, 0x2e, 0xbf, 0xf8, 0x68, 0xbf, 0xfa, 0xc6,
	0x8a, 0xe1, 0xff, 0xdc, 0x83, 0x06, 0x6a, 0xf3, 0xb9, 0x47, 0x61, 0xe1, 0x9c, 0x35, 0x1d, 0x6f,
	0xce, 0x0d, 0xb9, 0xbf, 0x65, 0xc2, 0x98, 0x7d, 0x67, 0x09, 0x06, 0x73, 0x12, 0x88, 0xa5, 0xfe,
	0xda, 0xa3, 0x30, 0x57, 0x92, 0x08, 0x28, 0xe9, 0xd7, 0x73, 0xe0, 0xc0, 0xfd, 0x37, 0x1e, 0x85,
	0x35, 0xdd, 0xe0, 0x5b, 0xf6, 0x16, 0x3d, 0x3c, 0xa0, 0xbd, 0x0b, 0xd7, 0x74, 0x05, 0x82, 0x7c,
	0x7f, 0x17, 0x6b, 0xa1, 0x40, 0x81, 0xe9, 0xff, 0x49, 0x03, 0x81, 0xe3, 0xef, 0xe1, 0x3c, 0x53,
	0xf4, 0x16, 0x29, 0xb6, 0xbc, 0x1b, 0xe7, 0x59, 0x16, 0x81, 0xfc, 0xff, 0x18, 0xc7, 0xd8, 0x6c,
	0x47, 0xc0, 0x96, 0x29, 0x9e, 0xae, 0xf6, 0x1e, 0x1c, 0x63, 0x69, 0x30, 0xe6, 0xf8, 0xf2, 0xa3,
	0x20, 0x74, 0xad, 0xf8, 0x5d, 0xd1, 0x70, 0xda, 0x7b, 0x4b, 0x50, 0x9b, 0x18, 0x80, 0x54, 0xff,
	0x82, 0xeb, 0x49, 0x0c, 0x84, 0x6a, 0xff, 0x6b, 0x0a, 0x06, 0xb5, 0xfe, 0xb7, 0x47, 0xc5, 0x4e,
	0xa4, 0x30, 0xfc, 0x66, 0xb9, 0x13, 0xa5, 0x78, 0x3e, 0x6d, 0x88, 0x2d, 0x27, 0xc9, 0xf6, 0x1b,
	0xb3, 0x60, 0xe0, 0xfc, 0x5a, 0x43, 0xe8, 0xef, 0x6d, 0x7e, 0xd6, 0xf1, 0x3c, 0x4b, 0x7b, 0x5f,
	0x49, 0xe8, 0xef, 0x02, 0x80, 0x3c, 0xdf, 0x6c, 0x08, 0xf5, 0x5b, 0x02, 0xe1, 0x3f, 0xe0, 0xfa,
	0x96, 0x3c, 0x04, 0xf0, 0x7d, 0xab, 0x21, 0xb4, 0xfb, 0x36, 0x8e, 0x99, 0xd9, 0xae, 0x1f, 0x6a,
	0xef, 0xc7, 0x1a, 0x27, 0x60, 0xc8, 0xfd, 0xbd, 0x86, 0x50, 0xb3, 0x63, 0x38, 0xf0, 0xfe, 0xe6,
	0x2c, 0x18, 0x38, 0xbf, 0xcf, 0x40, 0x8b, 0x06, 0x7e, 0x01, 0x2a, 0x9d, 0xda, 0x07, 0x70, 0x4c,
	0x28, 0x10, 0xe4, 0xfa, 0x21, 0x83, 0xa4, 0xfa, 0x08, 0x0a, 0x3c, 0xbf, 0x23, 0x0d, 0x04, 0x8e,
	0xdf, 0x69, 0x80, 0x3c, 0x3c, 0xcb, 0x4d, 0x87, 0xf8, 0x7d, 0x0b, 0xca, 0xc3, 0x51, 0x1a, 0xb9,
	0x7d, 0x9f, 0x01, 0xfb, 0x68, 0x04, 0x03, 0x5e, 0xdf, 0x9f, 0x04, 0x01, 0xa7, 0x8f, 0x19, 0x50,
	0x13, 0x4c, 0x2a, 0x26, 0x91, 0x0f, 0x96, 0x60, 0x55, 0x49, 0x41, 0x91, 0xeb, 0x27, 0x0c, 0x52,
	0xbf, 0x12, 0x18, 0xe0, 0xfd, 0xc9, 0x3c, 0x04, 0x94, 0xf0, 0x29, 0x44, 0x88, 0x05, 0x50, 0x6d,
	0x84, 0x6f, 0xc5, 0xf1, 0x9b, 0x45, 0x60, 0x39, 0x9f, 0x35, 0x60, 0x2f, 0xc8, 0x22, 0xa1, 0xa8,
	0x9f, 0xea, 0x83, 0x83, 0xd2, 0x7e, 0xda, 0x00, 0x3d, 0xc2, 0xf4, 0x7a, 0xb6, 0x61, 0x69, 0xdf,
	0x56, 0x82, 0xa1, 0x42, 0x09, 0xe4, 0xfa, 0x39, 0x6c, 0x37, 0x02, 0x00, 0xa7, 0x5f, 0x52, 0xd2,
	0x90, 0xfb, 0xf3, 0x06, 0x68, 0x3e, 0x9d, 0xee, 0xba, 0xe7, 0xae, 0x1b, 0x96, 0xf6, 0xed, 0x25,
	0x68, 0x2f, 0x99, 0x44, 0x0e, 0xbf, 0x81, 0x7d, 0x29, 0x41, 0xc0, 0xe3, 0x37, 0x13, 0x10, 0xe0,
	0xf2, 0x5b, 0xd8, 0xa6, 0x8a, 0x91, 0x6b, 0xd6, 0xf4, 0xdb, 0xda, 0x87, 0xb0, 0x4d, 0x53, 0x50,
	0xe4, 0xf9, 0x7b, 0xd8, 0x42, 0x29, 0x0c, 0xb0, 0xfe, 0x7d, 0x03, 0x66, 0xab, 0xf8, 0x50, 0xc4,
	0xcc, 0x7b, 0x41, 0x80, 0xdc, 0xbe, 0x03, 0x05, 0xe1, 0x3c, 0x14, 0xb2, 0xfc, 0x53, 0x03, 0x44,
	0xd6, 0x3c, 0x34, 0xf0, 0xfd, 0x33, 0x83, 0x44, 0x5d, 0xd3, 0x59, 0xde, 0xea, 0xa0, 0xda, 0xcd,
	0xc9, 0xf7, 0x5f, 0xfb, 0x4e, 0x21, 0xea, 0x66, 0x30, 0xc8, 0xf5, 0x6f, 0x0d, 0x92, 0x66, 0x33,
	0x58, 0x60, 0xfa, 0x77, 0xfd, 0x90, 0xd0, 0x24, 0x5f, 0x31, 0x48, 0xdc, 0x27, 0xa4, 0x95, 0x28,
	0xf3, 0xc3, 0x25, 0xd8, 0xa8, 0x72, 0x71, 0x58, 0xea, 0xbf, 0x19, 0x24, 0xf3, 0xe7, 0xe0, 0xa1,
	0xdc, 0x7f, 0xef, 0x8f, 0x86, 0x92, 0xff, 0x23, 0xf1, 0xad, 0x96, 0x32, 0xc8, 0x3f, 0x92, 0xf8,
	0x56, 0x2b, 0x35, 0xd0, 0x5f, 0xdb, 0x50, 0x3f, 0xc7, 0x4a, 0x0e, 0xf6, 0x6f, 0xea, 0x87, 0x84,
	0x12, 0x9f, 0x69, 0xc0, 0xa2, 0x91, 0x40, 0xa2, 0xe8, 0xf7, 0x5d, 0xa5, 0x44, 0x1b, 0x24, 0x4c,
	0x7e, 0x6f, 0x6d, 0x90, 0xca, 0x93, 0xc2, 0x41, 0x59, 0x6f, 0xcb, 0x47, 0x41, 0x49, 0x6f, 0x6f,
	0xc0, 0xf8, 0x14, 0xa8, 0xcb, 0xb6, 0xfb, 0x58, 0x57, 0xfb, 0x28, 0x8a, 0xca, 0x2a, 0x88, 0x8c,
	0xe8, 0x0d, 0xda, 0x84, 0x62, 0x30, 0xb0, 0x7e, 0x7f, 0x06, 0x0a, 0x5c, 0x3f, 0xd0, 0xa0, 0x5d,
	0x48, 0x14, 0x48, 0x7c, 0xbf, 0xbb, 0x44, 0x1a, 0xa0, 0x0a, 0x24, 0x13, 0x7c, 0xf2, 0x6b, 0x23,
	0xde, 0x1f, 0xce, 0x81, 0xa3, 0x51, 0xbe, 0x41, 0x1b, 0xa4, 0x7b, 0xc9, 0x74, 0xd7, 0x57, 0xec,
	0x79, 0x5b, 0xfb, 0x1e, 0xb1, 0x41, 0x46, 0x10, 0x32, 0xbb, 0x8b, 0x5a, 0x44, 0x50, 0xb4, 0xbd,
	0xa7, 0x81, 0x68, 0x80, 0x17, 0x9d, 0x11, 0x01, 0x0d, 0x8a, 0xb5, 0x83, 0x56, 0xbc, 0xef, 0x2d,
	0x81, 0xec, 0x91, 0x8f, 0x24, 0x63, 0x7b, 0x83, 0x46, 0x5f, 0x1e, 0x01, 0xda, 0xdd, 0x77, 0xc1,
	0xa3, 0x09, 0xbe, 0x01, 0x4b, 0x06, 0xad, 0x42, 0x33, 0x96, 0xf6, 0x79, 0x5c, 0x32, 0x64, 0x92,
	0x84, 0xf9, 0x8b, 0xf1, 0xf2, 0x3f, 0x83, 0x4b, 0xc6, 0x6b, 0x12, 0x10, 0x14, 0xd3, 0x2f, 0xc6,
	0xab, 0x3c, 0x09, 0x73, 0x33, 0x96, 0xf6, 0xcb, 0x25, 0x32, 0xe8, 0xa8, 0x40, 0x12, 0xd4, 0x2f,
	0x92, 0xe1, 0x46, 0x45, 0xa0, 0xa4, 0x9e, 0x03, 0x47, 0x51, 0xfd, 0x62, 0xbc, 0xdd, 0x08, 0x13,
	0xfc, 0x8c, 0xa5, 0x7d, 0x01, 0x17, 0xa4, 0x14, 0x94, 0x84, 0xf4, 0x8b, 0x71, 0xc1, 0x11, 0x06,
	0x25, 0xf4, 0x3c, 0x04, 0x8a, 0xe7, 0x17, 0xd5, 0xcf, 0x46, 0x5b, 0xc4, 0xaf, 0xe0, 0x48, 0x54,
	0x41, 0x24, 0x96, 0xab, 0x75, 0xb1, 0xa4, 0xf5, 0xe1, 0xdb, 0x33, 0x50, 0x14, 0xc7, 0x13, 0xed,
	0x34, 0xd7, 0xe2, 0xda, 0xaf, 0x96, 0x54, 0x3a, 0x69, 0x68, 0xf8, 0x1e, 0xa5, 0xf5, 0x10, 0x8a,
	0xf2, 0x77, 0x1a, 0x88, 0xa2, 0xf7, 0x45, 0xd8, 0x28, 0x25, 0x90, 0x6c, 0x0a, 0x5f, 0x2c, 0xc5,
	0xad, 0x26, 0x60, 0x24, 0x74, 0x5f, 0x54, 0x3f, 0x20, 0xb2, 0x22, 0x7c, 0x3c, 0x0b, 0x46, 0x71,
	0x3b, 0xd1, 0x02, 0x68, 0x37, 0xf8, 0xb5, 0x44, 0x0b, 0x44, 0x06, 0x83, 0x9f, 0x48, 0x7c, 0xab,
	0xb4, 0x14, 0xfc, 0x64, 0x06, 0x8a, 0xa2, 0xf3, 0x45, 0xbd, 0xc2, 0x46, 0x66, 0x1c, 0x3b, 0x84,
	0xc1, 0xf5, 0xeb, 0x25, 0x68, 0x0f, 0x91, 0x22, 0xa1, 0xf8, 0x22, 0xec, 0x70, 0x02, 0x82, 0x12,
	0xb0, 0x0a, 0x40, 0x71, 0xf7, 0x22, 0x6c, 0x88, 0x67, 0xbd, 0x20, 0x98, 0xb1, 0xb4, 0xdf, 0xc0,
	0x0d, 0x91, 0x12, 0x24, 0xde, 0x5e, 0x84, 0x0d, 0x90, 0x00, 0x28, 0xd6, 0x2a, 0x69, 0x14, 0x67,
	0x31, 0xbd, 0xe0, 0xb9, 0x41, 0xc8, 0xfd, 0x19, 0x4b, 0xfb, 0x4d, 0x32, 0xbc, 0xc9, 0x34, 0x89,
	0xb2, 0xf8, 0xe5, 0x11, 0x0c, 0x05, 0xd9, 0x24, 0x08, 0xc5, 0x58, 0xfc, 0x12, 0xf4, 0x96, 0x9e,
	0xb1, 0xb4, 0xdf, 0xc2, 0x2f, 0x11, 0x29, 0x12, 0x58, 0xb1, 0xe2, 0x02, 0x02, 0x3c, 0xfe, 0x44,
	0x05, 0x00, 0x87, 0x3f, 0xbd, 0x08, 0x33, 0x8d, 0x9c, 0xac, 0x67, 0x2c, 0xed, 0xb7, 0x71, 0xa6,
	0xc9, 0x24, 0x89, 0xb0, 0x38, 0x5e, 0x24, 0x08, 0x98, 0xfc, 0x4d, 0x02, 0x02, 0x5c, 0xfe, 0xf6,
	0x62, 0x3c, 0x5f, 0x0d, 0x4b, 0xfb, 0x92, 0x32, 0x5f, 0xc5, 0x16, 0xff, 0xb1, 0xcb, 0xf1, 0xa8,
	0xa3, 0x2d, 0xfe, 0x07, 0x12, 0x10, 0x5c, 0x73, 0x2e, 0xa7, 0xe7, 0xab, 0x61, 0x69, 0x7f, 0x9e,
	0x99, 0xaf, 0x82, 0xe3, 0xa7, 0x2e, 0xa7, 0xe7, 0x25, 0xf1, 0xfd, 0x74, 0x0e, 0x1c, 0xd7, 0x94,
	0xcb, 0x99, 0xf9, 0x6a, 0x58, 0xda, 0x5f, 0x64, 0xe7, 0xab, 0xe0, 0xff, 0xd3, 0x97, 0x33, 0xd3,
	0x92, 0x0a, 0xf8, 0x99, 0x3c, 0x04, 0x1e, 0xd5, 0x5d, 0x56, 0x3f, 0x1b, 0xe7, 0xeb, 0x5f, 0x2a,
	0xa3, 0xd5, 0x88, 0xe7, 0xeb, 0xe7, 0x95, 0xba, 0x18, 0xd1, 0x7c, 0xfd, 0xe5, 0x0c, 0x14, 0x8f,
	0xe1, 0x12, 0xed, 0x04, 0xf3, 0xf5, 0xaf, 0x4a, 0x2a, 0x9d, 0x9c, 0xaf, 0xbf, 0xa5, 0xb4, 0x9e,
	0x21, 0xe7, 0xeb, 0x6f, 0xa7, 0x81, 0x78, 0xbc, 0x76, 0x39, 0x9e, 0xaf, 0x86, 0x98, 0xaf, 0x7f,
	0xad, 0xcc, 0x57, 0x43, 0x99, 0xaf, 0x7f, 0x70, 0x59, 0xfd, 0x80, 0x68, 0xbe, 0xfe, 0xdf, 0x2c,
	0x18, 0x0f, 0xd0, 0x12, 0x2d, 0x80, 0xf3, 0xf5, 0xcb, 0x89, 0x16, 0x88, 0xe6, 0xeb, 0x97, 0x12,
	0xdf, 0x2a, 0xe7, 0xeb, 0x9f, 0x67, 0xa0, 0xc0, 0xf5, 0x2f, 0x2e, 0x47, 0xf3, 0xd5, 0xb0, 0xb4,
	0xbf, 0x89, 0xe7, 0xab, 0xe8, 0xa9, 0xaf, 0x5c, 0x8e, 0xa6, 0x27, 0xf5, 0xd0, 0xdf, 0xab, 0x00,
	0x3c, 0x42, 0xbb, 0x2c, 0xe7, 0xab, 0x61, 0x69, 0x7f, 0x1b, 0xcd, 0x57, 0x91, 0xff, 0x3f, 0x2e,
	0xcb, 0xf9, 0x49, 0xd9, 0xbf, 0xe1, 0xb1, 0x38, 0x0d, 0xb9, 0x5f, 0xf5, 0x98, 0x32, 0x5f, 0x0d,
	0x4b, 0xfb, 0x3b, 0x75, 0xbe, 0x0a, 0x1e, 0xcf, 0x3c, 0xa6, 0x4c, 0x4e, 0x62, 0xf3, 0xba, 0x24,
	0x08, 0x0f, 0xd2, 0x1e, 0x8b, 0xe6, 0xab, 0x61, 0x69, 0x5f, 0x89, 0xe7, 0xab, 0xe0, 0xf2, 0xf6,
	0xc7, 0xa2, 0xe9, 0x49, 0x3c, 0xde, 0xa1, 0x02, 0xf0, 0xd0, 0xeb, 0xb1, 0x78, 0xbe, 0x1a, 0x96,
	0xf6, 0xf7, 0xca, 0x7c, 0x15, 0x3c, 0x3e, 0xf0, 0x58, 0x3c, 0x3b, 0x89, 0xc9, 0xb7, 0x24, 0x20,
	0x78, 0xa8, 0xf5, 0x18, 0x0c, 0x61, 0x9a, 0x1d, 0x24, 0x22, 0x0b, 0x6d, 0xf2, 0x99, 0x32, 0x6c,
	0xfb, 0x59, 0x04, 0x19, 0x37, 0xaf, 0x80, 0xac, 0x95, 0x45, 0xa2, 0x85, 0xb3, 0x0f, 0x0e, 0xcd,
	0x9c, 0x57, 0xe2, 0x39, 0x46, 0x14, 0x28, 0x3c, 0xcf, 0x58, 0xda, 0xeb, 0xca, 0x28, 0x51, 0x67,
	0x31, 0x64, 0xea, 0xbc, 0x82, 0xba, 0x4c, 0x16, 0x8b, 0xc6, 0xce, 0x7e, 0x48, 0x34, 0x77, 0x5e,
	0x41, 0x19, 0x5f, 0x9d, 0xa2, 0xb2, 0xc8, 0xd7, 0x97, 0x51, 0xc6, 0xcf, 0x41, 0x91, 0xf9, 0xf3,
	0x4a, 0x5c, 0xa3, 0x24, 0x1a, 0xcd, 0xa0, 0x7d, 0xb1, 0x68, 0x0e, 0xbd, 0x02, 0x9d, 0x71, 0xde,
	0x73, 0x2c, 0xf4, 0x41, 0xea, 0x38, 0x3d, 0xed, 0x0d, 0x65, 0xb4, 0xb0, 0x29, 0x20, 0x32, 0x83,
	0x5e, 0x81, 0x71, 0xae, 0x82, 0xd1, 0x04, 0x9a, 0x81, 0xa2, 0xf9, 0xf3, 0x0a, 0x8e, 0xf7, 0x9d,
	0x4e, 0xc4, 0xf4, 0x8d, 0x65, 0x34, 0xc6, 0xc6, 0x10, 0x92, 0x88, 0x1e, 0x87, 0xa9, 0xae, 0x40,
	0x51, 0x28, 0x4a, 0x03, 0x51, 0x2e, 0x7a, 0x1c, 0x1d, 0x13, 0x5e, 0xd1, 0xb5, 0x3b, 0xd3, 0xbe,
	0x17, 0xf3, 0x7d, 0x53, 0x19, 0xdd, 0x09, 0xd2, 0x70, 0x92, 0x8e, 0x1e, 0x8f, 0x6c, 0xba, 0x2a,
	0x0e, 0x05, 0xa4, 0x7c, 0x14, 0xca, 0x48, 0x8f, 0x43, 0x27, 0x45, 0x28, 0x7a, 0xad, 0x4e, 0x16,
	0xf7, 0xe6, 0x32, 0x48, 0x91, 0xf9, 0x48, 0x92, 0x98, 0x1e, 0x07, 0x29, 0x31, 0x9f, 0x00, 0x05,
	0xa7, 0x5d, 0xf0, 0x28, 0x3f, 0x3d, 0x0e, 0xfd, 0x31, 0x6f, 0xaf, 0xf1, 0x19, 0xb3, 0xb5, 0x31,
	0xed, 0x6d, 0xb7, 0xb5, 0xb7, 0x60, 0x7f, 0xa8, 0x20, 0x92, 0x9f, 0x1e, 0xa7, 0xc3, 0xc5, 0x18,
	0x8c, 0xf2, 0x53, 0x06, 0x8a, 0xf2, 0xd3, 0xe3, 0x68, 0xfc, 0xb5, 0x2d, 0xe1, 0x1f, 0xbe, 0xd8,
	0x6d, 0x6b, 0x6f, 0x2d, 0xa3, 0xf1, 0x57, 0x85, 0x91, 0x0c, 0xf5, 0x38, 0x5a, 0x79, 0x55, 0x38,
	0x4a, 0x51, 0x8f, 0xd3, 0xf4, 0x0b, 0x27, 0x1d, 0xc7, 0xdb, 0x6e, 0x98, 0x6d, 0x81, 0xd6, 0xde,
	0x26, 0xa6, 0x5f, 0x1a, 0x41, 0xa2, 0xd3, 0xe3, 0x34, 0xc5, 0xd2, 0x48, 0x94, 0x9f, 0x1e, 0x97,
	0xbe, 0x00, 0x5d, 0x3b, 0x5c, 0xd9, 0xf6, 0x16, 0x39, 0xb7, 0x96, 0x5c, 0xae, 0xbd, 0x1d, 0xbb,
	0x34, 0x03, 0x27, 0x91, 0x09, 0xfb, 0x2d, 0x83, 0x43, 0xb9, 0x09, 0x5b, 0x6e, 0xc5, 0x37, 0x3b,
	0xd1, 0x9e, 0xfe, 0x0e, 0x6c, 0x39, 0x15, 0x44, 0xb2, 0x12, 0xb6, 0x91, 0x0a, 0x46, 0x81, 0x29,
	0x03, 0x45, 0xa9, 0x09, 0x2b, 0x39, 0x69, 0x59, 0xe7, 0xec, 0x1d, 0xd9, 0xaa, 0xb3, 0x76, 0xa8,
	0xfd, 0x20, 0x56, 0x32, 0x03, 0xa7, 0x7d, 0xe2, 0x65, 0x50, 0xc9, 0x0c, 0x0e, 0x37, 0x8b, 0x7c,
	0x14, 0xee, 0x18, 0x2f, 0x13, 0x25, 0x2d, 0xb7, 0x42, 0xb5, 0xa4, 0x1f, 0x92, 0x25, 0x25, 0xe1,
	0xb4, 0x8b, 0x48, 0x76, 0x49, 0x1c, 0xee, 0x27, 0xf9, 0x28, 0xdc, 0x59, 0x5e, 0x86, 0x66, 0x09,
	0xcb, 0x92, 0xf0, 0x47, 0x6c, 0xc7, 0xd1, 0x7e, 0xb8, 0x8c, 0x66, 0x89, 0x24, 0x94, 0xf6, 0x9a,
	0x97, 0xa1, 0x59, 0x22, 0x89, 0xc1, 0x4d, 0xe7, 0x89, 0x1c, 0x04, 0xee, 0x3e, 0x4f, 0xa0, 0xc5,
	0x70, 0xc3, 0xf3, 0xdd, 0x73, 0xf6, 0x8e, 0x58, 0xa7, 0x7f, 0xa4, 0x0c, 0xd4, 0x49, 0x20, 0xed,
	0x43, 0x4f, 0xc0, 0x97, 0x27, 0x11, 0xb8, 0x19, 0xe5, 0xc0, 0x71, 0x47, 0x8a, 0xb9, 0x2f, 0xb7,
	0x42, 0xc1, 0xfd, 0x47, 0x63, 0xee, 0x11, 0x90, 0xf6, 0xa7, 0x98, 0x4b, 0x84, 0xc0, 0x6d, 0x2a,
	0x07, 0x8e, 0xbb, 0xd5, 0x13, 0xc2, 0xbf, 0xca, 0x76, 0xef, 0x9e, 0xf2, 0x3c, 0x0c, 0x23, 0xa4,
	0x7d, 0x1c, 0xb9, 0x27, 0x81, 0xb4, 0x73, 0x21, 0x97, 0x24, 0x02, 0xf7, 0xaf, 0x1c, 0x38, 0xee,
	0x62, 0x31, 0xf7, 0x33, 0x11, 0xf7, 0x4f, 0xc4, 0xdc, 0xcf, 0x24, 0xb8, 0x7f, 0x24, 0xe6, 0x72,
	0x46, 0xe5, 0xfe, 0x5d, 0x39, 0x70, 0x74, 0xcd, 0x50, 0x4a, 0x55, 0x9d, 0x69, 0x3e, 0x89, 0x63,
	0x28, 0x03, 0x27, 0xb7, 0x8c, 0x27, 0x60, 0xa0, 0x64, 0x70, 0xe8, 0x94, 0x91, 0x8f, 0x42, 0x97,
	0x0c, 0xa5, 0x06, 0x6a, 0x49, 0x9f, 0x8a, 0x4b, 0x3a, 0x93, 0x2e, 0xe9, 0x33, 0x31, 0xbb, 0x33,
	0xa9, 0x92, 0x7e, 0x2c, 0x1f, 0x85, 0xee, 0x19, 0x4f, 0x08, 0xd7, 0x38, 0xdb, 0xbd, 0x3b, 0xee,
	0xee, 0x4f, 0x97, 0x85, 0x5b, 0x9b, 0x0a, 0x25, 0x17, 0x8d, 0x27, 0xe2, 0xae, 0x4a, 0x74, 0xf8,
	0xcf, 0xe5, 0x21, 0xd0, 0x4d, 0x23, 0x2e, 0xe1, 0x4c, 0x5c, 0xc2, 0x67, 0xe2, 0x12, 0xce, 0x24,
	0x4b, 0xf8, 0x42, 0xcc, 0xe8, 0x4c, 0xa2, 0x84, 0x5f, 0xc9, 0x43, 0xa0, 0x9b, 0xc6, 0x13, 0x68,
	0x52, 0x06, 0x44, 0xc3, 0xf1, 0xc2, 0x79, 0xbe, 0x16, 0x6a, 0x3f, 0x56, 0x8e, 0x5a, 0x50, 0xc2,
	0xc8, 0x49, 0xe3, 0x09, 0x58, 0x4f, 0x13, 0xf0, 0xb8, 0x52, 0x3f, 0x8e, 0xfb, 0x4f, 0x3e, 0x92,
	0x1c, 0x32, 0x9e, 0x80, 0xfd, 0x25, 0x9f, 0x00, 0xfd, 0xc2, 0x76, 0xc1, 0xa3, 0x83, 0x18, 0xb6,
	0x05, 0x9d, 0xc7, 0x9e, 0xeb, 0xe2, 0x6c, 0x9e, 0xb1, 0xb4, 0xff, 0x81, 0x6d, 0x91, 0x82, 0x92,
	0x63, 0x07, 0x7e, 0x72, 0x0a, 0x83, 0xce, 0x1d, 0x79, 0x08, 0x74, 0xf0, 0xc8, 0x96, 0x60, 0x58,
	0xda, 0x4f, 0x64, 0x4b, 0x10, 0xab, 0xf5, 0x3f, 0x64, 0x19, 0xd1, 0x82, 0xfd, 0x8f, 0x79, 0x08,
	0x74, 0x26, 0x7b, 0x02, 0xc4, 0x25, 0x42, 0xe0, 0xf1, 0xe1, 0x79, 0x8e, 0x07, 0x7b, 0xc2, 0xdc,
	0xf7, 0x93, 0x65, 0xb9, 0x45, 0x1a, 0x66, 0xc8, 0x05, 0x4e, 0xfb, 0x6c, 0x19, 0x7d, 0xa6, 0x36,
	0x7b, 0x90, 0x5a, 0xda, 0xe2, 0xbe, 0x63, 0x76, 0xb4, 0x9f, 0x2a, 0xeb, 0x27, 0xd8, 0x31, 0x3a,
	0x5b, 0xa7, 0x36, 0x5a, 0xf1, 0x84, 0x0c, 0x25, 0x3a, 0xe4, 0xa7, 0xcb, 0xfa, 0x2d, 0xec, 0xa6,
	0x5d, 0x28, 0xc8, 0xc1, 0xa3, 0xa9, 0xdf, 0xcc, 0x6e, 0xdc, 0x85, 0x0a, 0x3d, 0x3d, 0xf6, 0x22,
	0x42, 0x97, 0x8f, 0x66, 0xec, 0x77, 0x22, 0xce, 0x6e, 0x26, 0x1d, 0x47, 0xfb, 0x99, 0x72, 0xe6,
	0x18, 0x5d, 0x3a, 0x97, 0x7c, 0xb4, 0x19, 0xb7, 0x6c, 0x8c, 0x42, 0x4f, 0x8f, 0x26, 0xc8, 0xe5,
	0xe7, 0x3d, 0x7f, 0x9d, 0x7b, 0xdd, 0x40, 0xfb, 0xd9, 0x32, 0x89, 0x82, 0x94, 0x24, 0xc7, 0x8d,
	0x26, 0xc8, 0x71, 0x12, 0x84, 0xee, 0x1a, 0x09, 0x08, 0x3a, 0x69, 0x34, 0xf1, 0xe4, 0x55, 0x40,
	0xa6, 0xbd, 0xee, 0xaa, 0xc3, 0xc5, 0x46, 0xf3, 0x73, 0x28, 0xb7, 0xe6, 0xa1, 0xc8, 0x49, 0xa3,
	0x09, 0x92, 0x69, 0x1e, 0x1a, 0x9d, 0x34, 0xb0, 0xa4, 0x79, 0x1e, 0x04, 0x74, 0x3d, 0xcf, 0xd2,
	0x7e, 0x9e, 0x3a, 0x2e, 0x86, 0x90, 0xdb, 0x45, 0x13, 0x3a, 0x4e, 0x81, 0xa2, 0xbb, 0x45, 0x1a,
	0x88, 0x6e, 0x16, 0x08, 0x6c, 0x74, 0xfd, 0x8e, 0x19, 0x33, 0xfd, 0x05, 0x5c, 0x7b, 0x93, 0x40,
	0x72, 0xb6, 0x68, 0xa2, 0x7c, 0x94, 0x40, 0xa0, 0xbf, 0x45, 0x0e, 0x1c, 0x5d, 0x2e, 0xb0, 0x67,
	0xf0, 0x2a, 0x24, 0xdd, 0x78, 0x24, 0xf1, 0xe8, 0x17, 0xb1, 0x67, 0xd2, 0x60, 0xd2, 0x4d, 0xb0,
	0x67, 0xd2, 0x28, 0xd4, 0x4c, 0x10, 0x33, 0xe9, 0x38, 0xf3, 0xb6, 0xbb, 0x29, 0x86, 0xb0, 0xcb,
	0x7d, 0xd3, 0xd1, 0xfe, 0x27, 0x6a, 0x1f, 0x39, 0x18, 0xd2, 0x3e, 0x9a, 0xb0, 0x76, 0xe4, 0x60,
	0x51, 0xfb, 0x68, 0x8a, 0x63, 0xb4, 0x08, 0x39, 0xe9, 0xf5, 0x6c, 0xed, 0x73, 0x58, 0xc1, 0x34,
	0x98, 0x14, 0x8b, 0x4c, 0x35, 0x00, 0x85, 0x4a, 0x45, 0x53, 0x88, 0x10, 0x22, 0xfc, 0x0d, 0x5d,
	0x09, 0xfb, 0x25, 0x29, 0x42, 0xa8, 0x50, 0x52, 0x1e, 0x9a, 0x42, 0x52, 0x50, 0x31, 0xa8, 0x3f,
	0x34, 0xc9, 0x4c, 0x8d, 0xa6, 0xd4, 0x5e, 0xe4, 0x45, 0xf6, 0xf9, 0x32, 0xd9, 0xba, 0x93, 0x60,
	0xd2, 0x19, 0x9e, 0x24, 0x39, 0xad, 0x9b, 0x38, 0x43, 0xfa, 0x65, 0x2c, 0x3a, 0x05, 0x25, 0x2d,
	0xe0, 0x49, 0x14, 0x0c, 0x92, 0x18, 0xd4, 0x01, 0x9e, 0x04, 0x15, 0x39, 0x72, 0x8f, 0xd5, 0xbe,
	0x50, 0x86, 0x45, 0x3a, 0x4a, 0x93, 0x38, 0xff, 0x24, 0xe9, 0xaa, 0x8a, 0x67, 0xed, 0x7b, 0x9e,
	0x04, 0x7d, 0x18, 0x40, 0x17, 0x4d, 0x47, 0xfb, 0x95, 0x32, 0xe9, 0xa9, 0x98, 0x22, 0xb9, 0xfc,
	0x49, 0x50, 0x7f, 0x05, 0x04, 0x45, 0x72, 0x2c, 0x07, 0x96, 0x15, 0x2a, 0xe7, 0x57, 0xb1, 0x9c,
	0x28, 0x4d, 0x42, 0x37, 0x96, 0x13, 0xc1, 0x50, 0xe0, 0x7e, 0x12, 0x47, 0xab, 0x19, 0xda, 0xe8,
	0x79, 0x89, 0xbe, 0xfe, 0xda, 0x17, 0x69, 0xb4, 0x26, 0x80, 0x24, 0x68, 0x3f, 0x89, 0xa3, 0x32,
	0x81, 0x40, 0x21, 0x1b, 0x19, 0x9f, 0xf3, 0x3c, 0xeb, 0x42, 0x20, 0xae, 0x64, 0xfe, 0x1a, 0x4a,
	0xc5, 0x2a, 0x88, 0x44, 0x6b, 0x6c, 0x57, 0x15, 0x8c, 0x52, 0x35, 0x7e, 0xed, 0xa5, 0x2e, 0xbe,
	0x6f, 0xa3, 0xfd, 0x3a, 0x7e, 0xad, 0x48, 0x91, 0x2c, 0x8d, 0x5f, 0x2b, 0x20, 0x28, 0x46, 0x3f,
	0x49, 0x86, 0x87, 0x2d, 0xde, 0xe8, 0x70, 0x6e, 0x69, 0xef, 0x64, 0x64, 0x78, 0x10, 0x69, 0x32,
	0x36, 0x72, 0xb2, 0x32, 0x08, 0x18, 0xda, 0x1b, 0x93, 0x20, 0x34, 0x39, 0x72, 0xd4, 0x0f, 0x24,
	0x28, 0x6a, 0x98, 0xdf, 0xcc, 0x81, 0xe3, 0x69, 0x1b, 0x97, 0x25, 0x4d, 0xba, 0x76, 0x9b, 0x4a,
	0x7f, 0x17, 0x93, 0xb4, 0x11, 0x8c, 0x4c, 0x95, 0x1c, 0x97, 0x51, 0x15, 0x8e, 0xe6, 0xca, 0x2c,
	0x18, 0x4d, 0x96, 0x1c, 0x3e, 0x9b, 0x4c, 0x04, 0xc4, 0xf7, 0xdd, 0x2c, 0x3e, 0xd9, 0x8b, 0xb9,
	0xfe, 0x31, 0x8f, 0x9d, 0xfd, 0x23, 0x9e, 0x7f, 0x92, 0x06, 0xa2, 0x09, 0x93, 0xc7, 0x67, 0x80,
	0xc9, 0xaf, 0xfb, 0xb3, 0x5c, 0x0c, 0xe4, 0xf9, 0x12, 0x8f, 0xcb, 0x8c, 0xbf, 0xf0, 0x3d, 0x2c,
	0xa6, 0x4f, 0x7e, 0xe3, 0x97, 0x79, 0x7c, 0x9a, 0x98, 0xf8, 0xca, 0xbf, 0xc9, 0x43, 0xa0, 0x49,
	0x94, 0xe3, 0xe2, 0x92, 0x44, 0x44, 0x35, 0xfb, 0xbb, 0xbe, 0x58, 0x3c, 0xd8, 0xe3, 0xfa, 0x28,
	0x1b, 0x16, 0x27, 0x79, 0xef, 0x65, 0x38, 0x2a, 0xe2, 0xa3, 0xbb, 0x7f, 0xe1, 0x30, 0x2a, 0xe2,
	0xb3, 0xba, 0x7f, 0x55, 0xd2, 0xe8, 0x25, 0xc0, 0x69, 0x95, 0xb4, 0xc3, 0xa5, 0xd5, 0x97, 0x2f,
	0xfb, 0x5e, 0x87, 0xfb, 0x61, 0x8f, 0x22, 0x84, 0xfc, 0x13, 0x0e, 0x20, 0x81, 0x12, 0xfc, 0xff,
	0x19, 0xbb, 0x35, 0x01, 0x23, 0xd9, 0xaf, 0x4d, 0x6b, 0xb0, 0x02, 0x47, 0xc9, 0x2f, 0x0b, 0x46,
	0xb9, 0xaf, 0x0d, 0xed, 0x20, 0xc0, 0x0b, 0xe6, 0xce, 0xac, 0x2d, 0xee, 0x3c, 0xff, 0x0b, 0x43,
	0x13, 0x40, 0x06, 0x41, 0xd2, 0x5f, 0x1b, 0x2d, 0x0e, 0x19, 0x24, 0x0a, 0x80, 0x7d, 0x70, 0x28,
	0x03, 0xaa, 0x95, 0x00, 0x0d, 0xd0, 0xf3, 0x5b, 0xfc, 0xb2, 0xf6, 0xaf, 0x4c, 0xf9, 0xf2, 0x08,
	0x4c, 0x92, 0x60, 0x9b, 0xf6, 0x87, 0x24, 0x0a, 0x1d, 0x76, 0x73, 0x31, 0xe8, 0xb2, 0x9b, 0x57,
	0xca, 0x63, 0xda, 0xbf, 0xe5, 0x95, 0xf2, 0x18, 0x49, 0x8c, 0x79, 0xbc, 0x1e, 0x43, 0x59, 0x31,
	0x17, 0x83, 0x52, 0x62, 0x5e, 0x29, 0x57, 0xb4, 0x7f, 0xcf, 0x2b, 0xe5, 0x0a, 0xc9, 0x89, 0x79,
	0xbc, 0xae, 0xa0, 0xa0, 0x98, 0x8b, 0x41, 0x49, 0x51, 0xed, 0x1f, 0x39, 0x28, 0x66, 0x5c, 0x4b,
	0xfb, 0xdf, 0xa3, 0xb8, 0x0a, 0xe2, 0xcd, 0xff, 0xc4, 0x58, 0xf9, 0xdd, 0x51, 0x12, 0xe2, 0x70,
	0x73, 0x09, 0x3c, 0x7f, 0x75, 0xde, 0xdb, 0xd6, 0xfe, 0x4f, 0x4c, 0x1d, 0x01, 0xc9, 0x31, 0xa2,
	0x8b, 0x6b, 0x66, 0x02, 0x81, 0xde, 0x11, 0x39, 0x70, 0x74, 0x91, 0xe8, 0xa2, 0x15, 0x25, 0x86,
	0x5f, 0xe8, 0x68, 0xbf, 0x37, 0x9a, 0xa2, 0x15, 0xee, 0x42, 0x9f, 0xe8, 0xa2, 0x15, 0x45, 0x85,
	0xa3, 0x73, 0x44, 0x16, 0x8c, 0xae, 0x11, 0x31, 0x58, 0x55, 0xa6, 0x7e, 0x7f, 0x14, 0xaf, 0x05,
	0xa4, 0xc0, 0xe4, 0x16, 0xd1, 0x45, 0x27, 0xfc, 0x14, 0x0a, 0x9d, 0x22, 0x72, 0x31, 0xe8, 0x12,
	0x11, 0xd7, 0x3f, 0x52, 0x3d, 0xff, 0x20, 0xae, 0x7f, 0x42, 0xf3, 0xfc, 0x5c, 0x5c, 0x23, 0x55,
	0xf1, 0xfc, 0xa5, 0x2c, 0x18, 0xdd, 0x25, 0xba, 0x51, 0xbb, 0xc7, 0xfa, 0xfe, 0x97, 0xe3, 0x76,
	0x4f, 0xea, 0xfb, 0x5f, 0xda, 0x8a, 0xca, 0x4c, 0xe8, 0xfb, 0x7f, 0x9e, 0x03, 0x47, 0xcb, 0xc8,
	0x56, 0xc4, 0x3d, 0xd6, 0x84, 0xfe, 0x46, 0x19, 0x03, 0x09, 0x0d, 0xe8, 0x2b, 0x31, 0x97, 0x84,
	0xe6, 0xf3, 0xf7, 0x39, 0x70, 0xb4, 0x86, 0x6c, 0xa1, 0xb3, 0xa1, 0x28, 0x35, 0x29, 0xdd, 0xff,
	0xed, 0x28, 0x08, 0xb0, 0x31, 0x2e, 0x25, 0xd6, 0xff, 0xc7, 0x16, 0xde, 0x77, 0xc8, 0x41, 0xa3,
	0x75, 0x64, 0xbb, 0x1f, 0x16, 0x4d, 0x24, 0xdb, 0x51, 0xb1, 0xa0, 0x1a, 0x25, 0x8a, 0xfd, 0xbb,
	0xb8, 0x58, 0xc4, 0xa5, 0x8a, 0x7d, 0x26, 0x66, 0x9c, 0x42, 0xa3, 0xd5, 0xa4, 0x2f, 0x16, 0x6d,
	0x27, 0xdb, 0x6a, 0x5b, 0x4e, 0xfa, 0x6d, 0xaf, 0xeb, 0x6b, 0x5f, 0x49, 0xb4, 0x25, 0x01, 0xc9,
	0x76, 0xb2, 0xad, 0xb6, 0x19, 0x21, 0xd0, 0x76, 0x92, 0x03, 0x47, 0xdb, 0xc9, 0x36, 0x6c, 0x94,
	0x08, 0x17, 0x0e, 0xfa, 0x4f, 0x57, 0xf0, 0x4a, 0x4d, 0x0c, 0x21, 0xbd, 0x62, 0x27, 0xaa, 0x45,
	0xec, 0xa4, 0xff, 0x23, 0x69, 0x20, 0x6a, 0x17, 0x3b, 0xa0, 0xf0, 0xaa, 0xf9, 0xe3, 0x31, 0x8d,
	0xce, 0x14, 0xdf, 0x58, 0x41, 0xe7, 0xd7, 0xbe, 0x04, 0xa4, 0x69, 0xec, 0xe8, 0x75, 0x76, 0xbc,
	0x3f, 0x11, 0xea, 0x1b, 0x7b, 0xd0, 0xa0, 0x6b, 0xf8, 0x4e, 0xd4, 0x69, 0x44, 0x23, 0x4c, 0x85,
	0x50, 0x91, 0xd7, 0x56, 0x40, 0xb3, 0xce, 0xc5, 0x91, 0x9e, 0xb2, 0x13, 0x75, 0x6a, 0x1a, 0x8f,
	0x1a, 0x4b, 0x7f, 0x34, 0xea, 0x2e, 0x3b, 0xd1, 0xdc, 0x8d, 0x84, 0xe4, 0x6f, 0xaa, 0x44, 0xbd,
	0x90, 0x90, 0x90, 0x7f, 0x75, 0x27, 0x9a, 0xa4, 0xea, 0x75, 0x8b, 0x2f, 0x66, 0xc1, 0xa8, 0xb7,
	0xec, 0xc4, 0xcb, 0xa3, 0xe3, 0x28, 0x1f, 0xf4, 0x4c, 0x05, 0xdd, 0x77, 0x33, 0x08, 0xd2, 0x5d,
	0xe2, 0x96, 0x48, 0x20, 0x51, 0x7b, 0xe9, 0x83, 0xc3, 0x73, 0x95, 0x9d, 0x68, 0x3c, 0x28, 0x1e,
	0x38, 0xaf, 0xab, 0x44, 0x6b, 0x56, 0xca, 0xfb, 0xe6, 0x8f, 0xe2, 0xda, 0x25, 0x3d, 0x6f, 0xfe,
	0x5f, 0x1e, 0x02, 0xcf, 0x51, 0x76, 0xa2, 0xf1, 0x9f, 0x73, 0x1b, 0xef, 0x4f, 0xfa, 0x62, 0x51,
	0x2c, 0x8b, 0x5b, 0x39, 0xf2, 0xd6, 0x79, 0x7d, 0xdc, 0xca, 0x09, 0x4f, 0x9d, 0xbf, 0x8a, 0x9b,
	0x53, 0xf5, 0xd2, 0xf9, 0xeb, 0x2c, 0x18, 0xcf, 0x59, 0x62, 0xb0, 0xea, 0xe7, 0xff, 0x86, 0x4a,
	0xb4, 0xc2, 0xa7, 0x9d, 0xfd, 0xff, 0x69, 0x27, 0x6a, 0x93, 0x94, 0xc7, 0xff, 0x3f, 0xe7, 0x62,
	0xf0, 0xdc, 0x65, 0x27, 0xee, 0xb2, 0x8c, 0xc9, 0xfa, 0x8d, 0x95, 0x68, 0x2a, 0xe5, 0xdb, 0xad,
	0x5f, 0xdd, 0x8b, 0x46, 0x70, 0xae, 0xf1, 0xfa, 0x35, 0xbb, 0xe0, 0xf1, 0x8c, 0xa6, 0x17, 0x7d,
	0x4c, 0xda, 0xb8, 0xfc, 0xa6, 0x4a, 0x34, 0xba, 0xf3, 0x2c, 0xcc, 0x6f, 0xec, 0x45, 0xbd, 0x92,
	0x63, 0x66, 0x7e, 0x53, 0x5f, 0x2c, 0x9e, 0xd7, 0xf4, 0xa2, 0xd1, 0x36, 0x6b, 0x87, 0x49, 0x53,
	0xcf, 0x9b, 0x2b, 0xb1, 0x1b, 0xfe, 0x39, 0xdb, 0xe7, 0x89, 0x65, 0x16, 0x7b, 0xf7, 0x2d, 0x95,
	0xd8, 0x0d, 0x3f, 0x97, 0x82, 0x74, 0xba, 0x5e, 0xec, 0x61, 0x9f, 0x4b, 0x85, 0x7a, 0xde, 0x5e,
	0x44, 0x78, 0x12, 0xd3, 0xc3, 0x4e, 0x40, 0xa2, 0xb9, 0x56, 0x4e, 0x85, 0xde, 0x5a, 0x89, 0xb9,
	0xe4, 0x11, 0x90, 0xba, 0xd8, 0xc3, 0xb5, 0xaa, 0x2f, 0x11, 0xea, 0x8f, 0x7b, 0xd0, 0xa0, 0x17,
	0x4c, 0x4f, 0x3f, 0xc9, 0x6e, 0x10, 0x1e, 0xfd, 0x20, 0x16, 0x67, 0xeb, 0xf3, 0xb6, 0x8a, 0x7e,
	0x2b, 0x3b, 0xb1, 0x1b, 0x09, 0xe9, 0x9f, 0xbd, 0xb8, 0x1d, 0xf3, 0xc9, 0x50, 0x1b, 0xdd, 0x93,
	0x0a, 0x3d, 0x68, 0x7a, 0x71, 0xaf, 0x4d, 0x9b, 0xfe, 0x66, 0xb6, 0x52, 0x6f, 0x57, 0x7a, 0x2d,
	0x97, 0x82, 0x34, 0x5a, 0xa5, 0x43, 0x72, 0xa9, 0x50, 0xc1, 0xdd, 0x8b, 0x08, 0xbd, 0x6f, 0x7a,
	0xd1, 0xba, 0xb0, 0x62, 0x6e, 0x72, 0x34, 0x18, 0xbe, 0x03, 0x87, 0xf4, 0xa4, 0xb8, 0xa1, 0x90,
	0x19, 0x7a, 0xef, 0xac, 0x44, 0x59, 0x1a, 0x9b, 0x3d, 0x14, 0x6a, 0xb5, 0x77, 0xc5, 0x4b, 0x89,
	0x84, 0x91, 0x36, 0xda, 0x8b, 0x16, 0x07, 0x09, 0x47, 0x6d, 0x34, 0x0b, 0x46, 0x6d, 0xb4, 0x17,
	0x2d, 0xa1, 0x4b, 0x5b, 0xdc, 0x17, 0xb2, 0xe2, 0xbb, 0xe3, 0x25, 0x34, 0x86, 0x92, 0x56, 0xda,
	0x8b, 0x56, 0xca, 0x18, 0x83, 0x6b, 0x61, 0x1e, 0x02, 0x97, 0xc1, 0x5e, 0xb4, 0x8d, 0x37, 0x3a,
	0x8e, 0x19, 0x6c, 0x68, 0xef, 0x89, 0xb7, 0x71, 0x82, 0x90, 0x86, 0xd9, 0x8b, 0x76, 0x6c, 0x82,
	0xa2, 0x76, 0x99, 0x06, 0xa2, 0x66, 0x19, 0x37, 0x20, 0xcc, 0x5f, 0xbc, 0x31, 0xf4, 0xde, 0xb8,
	0x35, 0x24, 0x8c, 0x74, 0xc5, 0xf8, 0xb3, 0x25, 0x1c, 0x55, 0xc6, 0x2c, 0x18, 0x35, 0xc7, 0x78,
	0xfa, 0x2f, 0x98, 0x9b, 0x1c, 0xa3, 0xbc, 0x4c, 0x79, 0xee, 0x5a, 0x37, 0xe0, 0xda, 0x37, 0x2b,
	0x5b, 0x72, 0x0a, 0x47, 0xfe, 0xe6, 0x57, 0xe3, 0x3d, 0x37, 0x85, 0x47, 0xbf, 0xf3, 0xfe, 0x68,
	0xf4, 0x3f, 0xbf, 0x1a, 0x8b, 0xfe, 0xab, 0x20, 0xcb, 0xaf, 0x78, 0x93, 0x8e, 0xd3, 0xd3, 0xde,
	0x57, 0x89, 0xb7, 0x3f, 0x05, 0x4e, 0xde, 0xe8, 0x57, 0xe3, 0x25, 0x52, 0xc1, 0xa1, 0x3f, 0x7a,
	0x3e, 0x0a, 0x3d, 0xd2, 0xaf, 0x46, 0x0b, 0xa0, 0xb0, 0x9f, 0x5d, 0x08, 0xf8, 0xa4, 0xbf, 0xde,
	0xc5, 0x78, 0x37, 0xef, 0xa7, 0x45, 0x2e, 0x1f, 0x4b, 0x5e, 0xea, 0x57, 0xa3, 0x95, 0x3f, 0x4b,
	0x81, 0xfe, 0xea, 0xbb, 0x11, 0xa0, 0xe7, 0xfa, 0xd5, 0xa8, 0xff, 0x15, 0x3f, 0xfe, 0x0f, 0xc4,
	0x63, 0x2e, 0xe5, 0xc9, 0xff, 0xa1, 0xab, 0xd1, 0xd0, 0x4a, 0xfa, 0xf2, 0x7f, 0x47, 0x1e, 0x02,
	0x3d, 0xd9, 0xaf, 0xaa, 0x32, 0xa8, 0x52, 0xc8, 0x07, 0x63, 0x31, 0x24, 0x81, 0x20, 0x35, 0xeb,
	0xaa, 0x2a, 0x45, 0x27, 0x8b, 0xfa, 0x64, 0x1f, 0x1c, 0x2a, 0x5c, 0x57, 0x13, 0x1b, 0x3d, 0x7a,
	0x52, 0x7f, 0x6b, 0x72, 0xa3, 0x8f, 0x5c, 0xa8, 0x3f, 0x7b, 0x35, 0xb1, 0xa3, 0x4b, 0xdf, 0xe9,
	0x9f, 0xca, 0x82, 0x51, 0xc9, 0x8a, 0x4b, 0x95, 0xe0, 0x48, 0xf8, 0xf8, 0x99, 0x3e, 0x38, 0x74,
	0xc4, 0x8a, 0x47, 0x13, 0xbe, 0x8c, 0xd5, 0x16, 0xb5, 0xfa, 0xb6, 0x78, 0x34, 0xa9, 0x70, 0x52,
	0xd2, 0xe2, 0x21, 0xa3, 0xe2, 0x50, 0x51, 0xcb, 0x47, 0xa1, 0xb2, 0x16, 0xb7, 0x74, 0x6c, 0x8c,
	0xbe, 0x68, 0x3a, 0xda, 0xb7, 0xc7, 0x2d, 0x9d, 0x40, 0x90, 0xbf, 0x7b, 0x5c, 0xf7, 0x04, 0x12,
	0x2d, 0x72, 0x7d, 0x70, 0x68, 0x95, 0x8b, 0x47, 0x8e, 0x78, 0x99, 0xbb, 0x1b, 0xfa, 0xda, 0x87,
	0xe2, 0x91, 0x13, 0x43, 0xc9, 0x07, 0x3e, 0x5d, 0x3b, 0xc0, 0xa0, 0x0f, 0x7c, 0x1e, 0x02, 0x4a,
	0xf8, 0x03, 0xfa, 0x54, 0x32, 0x9e, 0x87, 0xe1, 0x8a, 0x47, 0x0b, 0x72, 0xd7, 0x0f, 0xb5, 0xef,
	0x20, 0xb1, 0x23, 0x07, 0x45, 0xce, 0xf1, 0x34, 0xaf, 0x72, 0xd0, 0x68, 0x89, 0xeb, 0x8b, 0x45,
	0x6b, 0xdc, 0xd5, 0x3c, 0xd6, 0x30, 0xca, 0xb0, 0xe4, 0xef, 0xac, 0xc4, 0x3b, 0x6b, 0x16, 0x4d,
	0x4e, 0xf4, 0x57, 0xe3, 0x6d, 0x2e, 0x4b, 0x82, 0x16, 0xb7, 0x5d, 0x29, 0xd0, 0xea, 0x76, 0x35,
	0xbe, 0x29, 0x17, 0x53, 0x90, 0x6c, 0xf9, 0x61, 0x5a, 0xfd, 0xf2, 0x70, 0xe4, 0x4e, 0x9f, 0xfb,
	0x05, 0x91, 0x94, 0xf9, 0xef, 0xfd, 0xd1, 0xe8, 0x4e, 0xaf, 0x8e, 0xd7, 0x2e, 0x8f, 0x56, 0xf5,
	0x8f, 0xa8, 0xe3, 0x35, 0x86, 0x93, 0x2b, 0xfd, 0x53, 0xca, 0xa0, 0x8c, 0x71, 0xe8, 0x48, 0x9f,
	0x8f, 0x42, 0x37, 0xfa, 0xa7, 0xe2, 0x5b, 0x8a, 0x6a, 0xe7, 0x7e, 0x57, 0x25, 0xfe, 0xf6, 0x74,
	0xcf, 0xbe, 0xf5, 0xa9, 0x78, 0x4c, 0xa4, 0xba, 0xf5, 0x6d, 0xf9, 0x28, 0x74, 0xa3, 0x7f, 0x2a,
	0xc3, 0x31, 0xea, 0xd0, 0x8f, 0x2a, 0xad, 0x99, 0xd7, 0x9b, 0xef, 0x7b, 0x2a, 0x6e, 0xae, 0x9c,
	0xae, 0x7c, 0x7f, 0x7f, 0x34, 0xba, 0xda, 0x3f, 0x15, 0x6d, 0x35, 0xc6, 0xda, 0x39, 0x7b, 0x87,
	0x5b, 0x0d, 0xd5, 0x10, 0xf4, 0xdd, 0x34, 0x9a, 0xfa, 0xa0, 0xc9, 0xfd, 0xfe, 0xa9, 0x68, 0x17,
	0xc8, 0x21, 0x41, 0x47, 0xfc, 0x5d, 0x29, 0xd0, 0x25, 0xff, 0xa9, 0xa8, 0xef, 0x04, 0x45, 0x6c,
	0x6f, 0xf9, 0x9e, 0x78, 0x2f, 0x4d, 0xe3, 0xc8, 0x59, 0x36, 0xf3, 0x05, 0x09, 0xeb, 0xcb, 0x0f,
	0xf4, 0x47, 0xa3, 0x1b, 0xed, 0x53, 0x39, 0xdc, 0x95, 0x4d, 0xe0, 0x7b, 0x2b, 0x91, 0x72, 0x9e,
	0x87, 0x27, 0xe7, 0xda, 0xa7, 0xd2, 0x8d, 0x94, 0xd9, 0x12, 0x3e, 0xbd, 0x3b, 0x09, 0xba, 0xdc,
	0x3e, 0x15, 0x6b, 0xc9, 0x1d, 0x79, 0x15, 0x67, 0x47, 0xfb, 0xbe, 0x58, 0x51, 0x53, 0xc0, 0xe4,
	0x74, 0xfb, 0x54, 0xb4, 0x96, 0x29, 0x28, 0x5c, 0xef, 0x73, 0x31, 0xb8, 0xda, 0x67, 0x4b, 0x01,
	0xf0, 0xf7, 0x67, 0x4b, 0x91, 0x87, 0xa5, 0x9f, 0xcf, 0xf2, 0x12, 0x07, 0xa5, 0xbf, 0x9c, 0x8b,
	0x41, 0x37, 0xdc, 0xa7, 0xa2, 0x05, 0x5d, 0x29, 0x5f, 0x58, 0x66, 0x3e, 0x16, 0xab, 0x83, 0x19,
	0x24, 0x39, 0xe7, 0xc6, 0x7d, 0x92, 0x21, 0x40, 0x3f, 0xdd, 0x5d, 0xf0, 0xe8, 0xb2, 0x9b, 0x2d,
	0x7d, 0xb9, 0x25, 0x63, 0x42, 0xfe, 0x40, 0xb6, 0xf4, 0x08, 0x49, 0x4e, 0xbc, 0x59, 0xee, 0x11,
	0x01, 0x7a, 0xf3, 0xee, 0x82, 0x47, 0xb7, 0xde, 0xa7, 0x22, 0x19, 0x16, 0x04, 0xb7, 0xf5, 0x9e,
	0xf6, 0x83, 0xb1, 0x0c, 0x4b, 0x10, 0x32, 0x46, 0x3e, 0x15, 0x89, 0xab, 0x04, 0x45, 0x4b, 0x64,
	0x1a, 0x88, 0x66, 0xc8, 0xb8, 0xcf, 0x54, 0x63, 0xf4, 0x4f, 0xa2, 0xd8, 0x80, 0x17, 0x87, 0x13,
	0xb6, 0xe8, 0xcf, 0x56, 0xe4, 0x91, 0x1e, 0x2c, 0x66, 0x78, 0x07, 0xe5, 0xa7, 0x2a, 0xc0, 0x41,
	0x05, 0x51, 0xd0, 0x88, 0x57, 0x62, 0xa8, 0x1b, 0x05, 0x0c, 0x75, 0x78, 0x57, 0x06, 0x0a, 0x95,
	0x78, 0xf7, 0x2b, 0x61, 0x17, 0x7c, 0x44, 0x51, 0x44, 0x84, 0xbe, 0xf1, 0xd3, 0x11, 0x6f, 0xe1,
	0xbc, 0x40, 0x47, 0x19, 0x3f, 0x83, 0x23, 0x2a, 0x0d, 0x26, 0xc7, 0x80, 0x57, 0x62, 0x1c, 0x9c,
	0x14, 0x0a, 0x1d, 0x03, 0x72, 0x31, 0x18, 0xff, 0xe1, 0x95, 0x14, 0x7f, 0x63, 0xdd, 0x6e, 0x9d,
	0xb3, 0x5d, 0x4b, 0xfb, 0xd9, 0x0a, 0xc5, 0xdf, 0x10, 0x69, 0x32, 0xee, 0xbd, 0x92, 0x82, 0x6d,
	0x08, 0x18, 0x9a, 0xf6, 0x92, 0x20, 0x34, 0xec, 0x45, 0x9f, 0xa7, 0x36, 0xe6, 0x77, 0x54, 0xe1,
	0xf3, 0x30, 0x24, 0x7e, 0xb2, 0x35, 0xbf, 0xb3, 0x0a, 0x3d, 0x82, 0x88, 0x19, 0x97, 0xfb, 0xeb,
	0xbd, 0x05, 0x73, 0x47, 0xfb, 0x70, 0x55, 0xaf, 0x09, 0xea, 0x08, 0x48, 0x5b, 0xdb, 0x6b, 0x0a,
	0xfa, 0x61, 0xb6, 0x2f, 0x89, 0xc1, 0x4d, 0x2d, 0x0f, 0x81, 0xdb, 0xd9, 0x6b, 0x0a, 0xf0, 0x65,
	0x8d, 0x6e, 0x10, 0x9a, 0xb6, 0x3b, 0x65, 0x69, 0x1f, 0x81, 0x02, 0xab, 0x51, 0x9a, 0xf6, 0xaf,
	0xa7, 0x0b, 0xba, 0xce, 0x2a, 0x11, 0x10, 0x37, 0xae, 0x14, 0x0c, 0x77, 0xac, 0xa7, 0x0b, 0xfa,
	0x28, 0x1b, 0x9e, 0xf2, 0x1c, 0x6b, 0xca, 0xd2, 0xbe, 0xab, 0xaa, 0x6b, 0x8c, 0x51, 0x82, 0x36,
	0xa7, 0xa7, 0x0b, 0xfa, 0x38, 0x2b, 0x13, 0x04, 0xb7, 0x24, 0x15, 0x80, 0x1b, 0xd1, 0xd3, 0x05,
	0x74, 0xb3, 0x88, 0xab, 0xa9, 0x7d, 0xb4, 0xaa, 0x1f, 0x64, 0xe3, 0x0a, 0x84, 0x76, 0x9d, 0xa7,
	0x0b, 0xe8, 0xac, 0xab, 0x36, 0x18, 0xb4, 0xe3, 0x6f, 0x56, 0xc9, 0xb9, 0x33, 0x8e, 0x5e, 0x4a,
	0xd1, 0x03, 0x7f, 0xbf, 0xaa, 0x1f, 0x63, 0x07, 0x33, 0x70, 0x92, 0x73, 0x9f, 0x29, 0xe8, 0x47,
	0xd9, 0x81, 0x0c, 0x12, 0x85, 0xdd, 0x3e, 0x38, 0x94, 0x78, 0x9f, 0x29, 0x4c, 0x7c, 0xb0, 0xc0,
	0x2a, 0xb3, 0xa6, 0x6b, 0x9d, 0xf5, 0xbc, 0x4d, 0x8c, 0xed, 0x76, 0x90, 0x1e, 0x32, 0x91, 0x69,
	0x19, 0xe0, 0x2d, 0x0d, 0x9e, 0xa3, 0xb7, 0x66, 0xc4, 0xb3, 0x24, 0x11, 0x38, 0x0e, 0xe6, 0x59,
	0x94, 0xaf, 0x86, 0x44, 0x38, 0xe1, 0x57, 0x31, 0x20, 0x9f, 0x45, 0x89, 0x33, 0x61, 0x80, 0x4f,
	0x7c, 0xbf, 0x23, 0x59, 0xf4, 0xf2, 0x94, 0x36, 0x34, 0xf1, 0xf1, 0x02, 0x2b, 0x5d, 0x70, 0x45,
	0x30, 0xbf, 0x51, 0x36, 0x22, 0x7c, 0xdc, 0xc5, 0xc3, 0x3e, 0x8e, 0x1d, 0x72, 0x8a, 0xd7, 0x8f,
	0x71, 0x24, 0x8b, 0xfa, 0x08, 0x1b, 0x80, 0x7c, 0x18, 0xf2, 0x7f, 0xc5, 0x37, 0x3b, 0xf4, 0xea,
	0xc3, 0x59, 0xc7, 0x6b, 0x6d, 0x6a, 0x43, 0xf0, 0x73, 0x6a, 0x83, 0xe2, 0xc9, 0x6b, 0xac, 0x82,
	0x3f, 0x25, 0xbf, 0x11, 0xbd, 0xca, 0xca, 0x0d, 0xdb, 0x15, 0x6f, 0xe6, 0xe0, 0xa3, 0x1f, 0xb8,
	0x3c, 0x6d, 0x48, 0x8a, 0x32, 0x52, 0x98, 0x5b, 0x9c, 0x58, 0x30, 0xa8, 0xcd, 0x39, 0xdf, 0x5c,
	0xb7, 0x1d, 0xae, 0x8d, 0xea, 0xe3, 0xf4, 0xb0, 0x80, 0x7c, 0x77, 0xa8, 0x32, 0xf1, 0xdf, 0x28,
	0x82, 0x9f, 0xb0, 0x4b, 0xac, 0xd0, 0x53, 0xa5, 0x9a, 0x02, 0x92, 0x6d, 0x9b, 0x82, 0xe2, 0x5d,
	0x8e, 0x82, 0x0c, 0x00, 0x28, 0xa1, 0x73, 0x2d, 0xae, 0x15, 0x65, 0x84, 0x3e, 0x09, 0xa4, 0xeb,
	0x14, 0x03, 0x69, 0x0e, 0x78, 0x17, 0x62, 0x70, 0x62, 0x89, 0x8d, 0x9e, 0x9f, 0x59, 0x9c, 0x9e,
	0x31, 0x9a, 0x2b, 0x8f, 0x2d, 0xcf, 0x60, 0x74, 0xc6, 0x38, 0xd9, 0x5c, 0xbc, 0x30, 0x3f, 0x2f,
	0x02, 0x39, 0x2a, 0xd0, 0x85, 0xc9, 0x45, 0xad, 0x80, 0xc1, 0x38, 0x15, 0xe0, 0xa5, 0x25, 0x00,
	0x17, 0x27, 0x1e, 0x66, 0xd5, 0x95, 0xb9, 0x85, 0x99, 0xe6, 0xd2, 0x85, 0x15, 0x62, 0x89, 0xef,
	0x4b, 0x28, 0x00, 0xc9, 0x14, 0x9f, 0x92, 0x50, 0xe1, 0x2b, 0x97, 0x17, 0xb5, 0xc2, 0xc4, 0x7f,
	0x61, 0xa5, 0x95, 0xcb, 0x8b, 0x94, 0x75, 0x1f, 0xab, 0xca, 0xdf, 0x32, 0xd7, 0x01, 0xa6, 0x45,
	0xa0, 0x0b, 0x8b, 0x8f, 0x2c, 0x2e, 0x5d, 0x82, 0xba, 0xa8, 0x84, 0x17, 0x97, 0x56, 0x66, 0xb4,
	0xa2, 0x7e, 0x8c, 0x1d, 0x8e, 0xf3, 0x4e, 0xae, 0xcc, 0x2d, 0x2d, 0x36, 0x27, 0x97, 0x97, 0x97,
	0xe6, 0x16, 0x57, 0x28, 0xba, 0x61, 0x84, 0x5c, 0x9e, 0x34, 0x56, 0x1e, 0x6b, 0x2e, 0x2d, 0xcf,
	0x2c, 0x6a, 0x83, 0x13, 0xdf, 0x50, 0x60, 0x0c, 0x30, 0xc6, 0x4c, 0xe3, 0xc2, 0xfc, 0x0a, 0x3e,
	0x56, 0x11, 0xa5, 0x64, 0x15, 0xe0, 0x83, 0x62, 0x60, 0x5c, 0x09, 0xf8, 0xa0, 0x18, 0x7e, 0x6e,
	0x72, 0x6e, 0x7e, 0x66, 0x9a, 0x22, 0x2c, 0x2a, 0xe0, 0xc6, 0x85, 0xa9, 0xa9, 0x99, 0x46, 0x83,
	0x46, 0xb8, 0x02, 0x87, 0xa6, 0x58, 0xba, 0xb0, 0xa2, 0x0d, 0x4e, 0x7c, 0xaa, 0xc0, 0xca, 0xcb,
	0xc6, 0xd2, 0x32, 0x35, 0x81, 0xce, 0xc6, 0xa2, 0x84, 0xd2, 0x1d, 0x31, 0x6c, 0x7e, 0xe6, 0xe2,
	0xcc, 0x3c, 0x0d, 0x85, 0x18, 0x38, 0xf3, 0xe8, 0x85, 0xb9, 0x65, 0x7a, 0xf5, 0x24, 0x06, 0x36,
	0xa6, 0x8c, 0xa5, 0xf9, 0x79, 0x6d, 0x20, 0x49, 0xda, 0x78, 0x64, 0x6e, 0x7e, 0x5e, 0x1b, 0x84,
	0xea, 0xc4, 0xc0, 0xa9, 0x79, 0xc1, 0x17, 0x9f, 0xc6, 0x89, 0xe1, 0x4b, 0xc6, 0x79, 0x81, 0x18,
	0x4e, 0xd6, 0xcc, 0xb8, 0xb0, 0x38, 0xa3, 0x8d, 0x4c, 0xbc, 0xa6, 0xc0, 0xf6, 0x9d, 0x9d, 0x5c,
	0x59, 0x99, 0x87, 0x66, 0x6d, 0x34, 0x88, 0x16, 0x16, 0x80, 0x0c, 0x50, 0x7e, 0xcb, 0x11, 0x76,
	0x30, 0x8b, 0x9b, 0x5f, 0xba, 0x44, 0xeb, 0x46, 0x16, 0x35, 0x3b, 0x77, 0x7e, 0x56, 0x2b, 0xea,
	0x37, 0xb0, 0x5a, 0x16, 0x37, 0x35, 0x3b, 0xf9, 0x92, 0xb9, 0x49, 0x6d, 0x60, 0x62, 0x95, 0xb1,
	0xc6, 0xdc, 0x62, 0x73, 0x65, 0xd6, 0x98, 0x99, 0xc4, 0x4e, 0x8c, 0x53, 0xcd, 0xc5, 0xa5, 0xc5,
	0x19, 0x6a, 0x43, 0x05, 0x38, 0x33, 0xd9, 0x78, 0x8c, 0x7a, 0x30, 0x41, 0x69, 0x2c, 0x4c, 0xce,
	0xd3, 0xb3, 0x4f, 0x0a, 0x78, 0x76, 0xd2, 0x98, 0xd6, 0x06, 0x26, 0x3e, 0x73, 0x89, 0x8d, 0x1b,
	0x33, 0xcb, 0x17, 0x56, 0x68, 0x6c, 0x61, 0x67, 0xd5, 0xd8, 0x81, 0x14, 0x48, 0x7e, 0xe6, 0x04,
	0xbb, 0x2d, 0x8d, 0x39, 0x37, 0x67, 0x34, 0x56, 0x9a, 0xc6, 0xcc, 0xd4, 0xec, 0xa4, 0x71, 0x7e,
	0xa6, 0xf9, 0xd8, 0x85, 0xc9, 0xc5, 0xb3, 0x93, 0x4b, 0x5a, 0x41, 0x7f, 0x36, 0xbb, 0x39, 0x4d,
	0x1b, 0x51, 0x4d, 0x4e, 0x4d, 0x5d, 0x58, 0xb8, 0x30, 0x3f, 0x89, 0x43, 0xbc, 0xce, 0x6e, 0xec,
	0x4b, 0x38, 0x3f, 0x07, 0xcc, 0x06, 0xf4, 0x13, 0xec, 0x86, 0x34, 0xcd, 0xff, 0x47, 0xd9, 0x97,
	0x87, 0xc9, 0x91, 0x5c, 0x75, 0xba, 0xef, 0x56, 0xea, 0xe8, 0xa7, 0xd2, 0x39, 0x92, 0x46, 0x23,
	0x69, 0xa4, 0xd1, 0x4c, 0xcd, 0x61, 0xf5, 0xa1, 0xcb, 0xc6, 0x40, 0x56, 0x56, 0x54, 0x55, 0x74,
	0x57, 0x45, 0x96, 0xf2, 0xe8, 0xee, 0x6a, 0xf0, 0x96, 0x53, 0xdd, 0x39, 0xdd, 0x69, 0x55, 0x57,
	0xb5, 0xeb, 0x90, 0x46, 0xde, 0x03, 0x1b, 0xfc, 0xed, 0x1a, 0x0c, 0xd8, 0xeb, 0x5d, 0xd8, 0x8b,
	0x5d, 0x3e, 0xc0, 0x78, 0xf1, 0xb5, 0xac, 0x77, 0x39, 0x0c, 0xbb, 0x80, 0xb1, 0x39, 0x6c, 0xf6,
	0x04, 0xdf, 0x07, 0x37, 0xd8, 0x63, 0x1b, 0x6c, 0xc0, 0xdc, 0x7b, 0x7e, 0x11, 0x91, 0x99, 0x95,
	0xc7, 0xab, 0xea, 0xa9, 0xff, 0xaa, 0xde, 0xfb, 0x45, 0xc4, 0x8b, 0x17, 0x2f, 0x5e, 0xbc, 0x38,
	0x53, 0xd3, 0x8d, 0xaa, 0x59, 0x37, 0x69, 0x91, 0x51, 0x06, 0x93, 0x99, 0x27, 0x95, 0xcb, 0x38,
	0x42, 0xd3, 0x99, 0x65, 0xd0, 0x9c, 0x6d, 0x11, 0xd1, 0x20, 0x53, 0x99, 0xa7, 0x95, 0xab, 0xfb,
	0x22, 0x2b, 0x34, 0x9f, 0x2f, 0x13, 0xf9, 0xfd, 0x81, 0x7d, 0xc1, 0xa2, 0x31, 0x67, 0x32, 0x8f,
	0x29, 0x67, 0x71, 0xa8, 0x5a, 0xad, 0x96, 0x6b, 0x30, 0x9b, 0x79, 0x54, 0x79, 0x04, 0x07, 0x90,
	0xf5, 0x2a, 0x1c, 0x18, 0x5c, 0x47, 0x59, 0x14, 0x28, 0xdc, 0x19, 0x24, 0x11, 0xe5, 0x56, 0x73,
	0xbb, 0xe6, 0x35, 0xe1, 0x20, 0xb7, 0xf0, 0x24, 0x73, 0x95, 0x56, 0xe1, 0x08, 0xa6, 0xdf, 0x55,
	0x5a, 0xe5, 0x85, 0x12, 0x83, 0x12, 0xa6, 0x11, 0x98, 0xc3, 0xaa, 0x59, 0xe0, 0xcc, 0x7c, 0xbd,
	0x48, 0xac, 0x7a, 0x91, 0x16, 0xac, 0xba, 0xa6, 0xdb, 0xcc, 0x02, 0x40, 0x6d, 0xc0, 0x87, 0xd2,
	0x55, 0x12, 0xc5, 0x1e, 0xcd, 0x5c, 0x56, 0x2e, 0xa4, 0x04, 0xd6, 0x8b, 0x94, 0x45, 0x0d, 0xe0,
	0x78, 0xe6, 0xe5, 0xca, 0xd3, 0x03, 0x0d, 0x20, 0x4f, 0xd5, 0x8a, 0xce, 0xf2, 0xd1, 0x04, 0x67,
	0x31, 0x4d, 0x15, 0x0c, 0x12, 0x82, 0x61, 0x0d, 0xab, 0x73, 0x5e, 0x67, 0xaa, 0xd5, 0xc7, 0xac,
	0x63, 0xda, 0x34, 0x29, 0x33, 0x75, 0xbb, 0x0c, 0x35, 0x4c, 0x9b, 0x26, 0x65, 0xb0, 0xc1, 0xbb,
	0x73, 0x92, 0x31, 0x5f, 0xbf, 0xc1, 0x79, 0xdf, 0x82, 0xf1, 0x96, 0xea, 0xf3, 0x9c, 0xf7, 0xad,
	0x98, 0x75, 0xd4, 0x74, 0xfb, 0x0e, 0x65, 0xc5, 0x3c, 0x55, 0x19, 0xbc, 0x1a, 0xab, 0x94, 0x74,
	0x75, 0x16, 0xd5, 0x56, 0x88, 0x05, 0xaf, 0xc9, 0x3c, 0xa1, 0x5c, 0x4a, 0x21, 0xb8, 0xdb, 0xab,
	0x1b, 0xa4, 0x40, 0x19, 0xa9, 0xcb, 0x61, 0xc1, 0xc1, 0x2a, 0x4f, 0x58, 0xbe, 0x4c, 0x4c, 0xde,
	0x5d, 0x58, 0xb1, 0x4c, 0xe0, 0x6e, 0xe6, 0xa2, 0xf2, 0xe8, 0x20, 0x4c, 0xc5, 0x2e, 0x5b, 0x14,
	0x36, 0xb9, 0x73, 0x4a, 0x42, 0x72, 0x65, 0x9b, 0x08, 0x05, 0x6d, 0x65, 0x1e, 0x57, 0x1e, 0x4b,
	0x09, 0x53, 0x52, 0x0d, 0x52, 0xaf, 0x52, 0xcd, 0x6f, 0x7f, 0x17, 0x93, 0x24, 0x67, 0xd7, 0xb8,
	0xd4, 0xcc, 0xc7, 0x3c, 0x8f, 0xd9, 0x88, 0x45, 0x2a, 0x55, 0xbf, 0x6a, 0xb2, 0x4e, 0xdb, 0x98,
	0xfa, 0x72, 0x65, 0x55, 0x5b, 0xa9, 0x9b, 0x16, 0xf7, 0x84, 0x3b, 0x18, 0xa0, 0xa8, 0x6a, 0x25,
	0xd5, 0x2f, 0xc7, 0xc3, 0xf4, 0x1b, 0x01, 0xcc, 0xc3, 0x6b, 0xf7, 0x41, 0x2c, 0xc0, 0xbd, 0x7d,
	0x10, 0x8b, 0xd0, 0xd8, 0x07, 0xb1, 0x04, 0xbb, 0x18, 0xa2, 0x64, 0xab, 0x05, 0xbb, 0xee, 0xb7,
	0x73, 0x13, 0xf3, 0x9c, 0x12, 0x51, 0xb5, 0x8d, 0x6a, 0x99, 0x04, 0xc0, 0x16, 0x66, 0x6f, 0x25,
	0x5b, 0x65, 0x16, 0x85, 0x3d, 0xcc, 0x58, 0xa4, 0x37, 0xf1, 0x07, 0x1c, 0x3e, 0x52, 0x9b, 0xf0,
	0xba, 0xcc, 0x15, 0xe5, 0xe2, 0x50, 0x9c, 0xa6, 0x53, 0x06, 0x6d, 0xac, 0x95, 0x24, 0xcc, 0x22,
	0x5a, 0xc9, 0x6f, 0xa5, 0x4e, 0xe6, 0xbc, 0x72, 0x26, 0xdd, 0x96, 0x21, 0xbf, 0x8b, 0x35, 0xd2,
	0x3a, 0x55, 0x75, 0x93, 0x6e, 0xd8, 0xd4, 0xa2, 0xd0, 0xc3, 0xa4, 0x59, 0xd3, 0x8d, 0x72, 0xbe,
	0x9e, 0xd3, 0x4d, 0x33, 0xa8, 0xf8, 0x7d, 0xcc, 0x5d, 0xad, 0x53, 0x56, 0xcc, 0x51, 0x55, 0x8f,
	0x2b, 0xf3, 0x01, 0x06, 0x35, 0x08, 0x5b, 0x53, 0x59, 0x51, 0x04, 0x4b, 0xf5, 0x35, 0x92, 0xab,
	0x9b, 0xd4, 0x22, 0xf0, 0x02, 0xd6, 0x32, 0x1b, 0x25, 0x95, 0x95, 0x29, 0x2b, 0xd6, 0x0b, 0x74,
	0x1d, 0x1e, 0x62, 0x0a, 0x2f, 0xd0, 0xf5, 0xba, 0x76, 0x1b, 0x5e, 0x9f, 0x79, 0x46, 0x79, 0x32,
	0xd5, 0x21, 0x88, 0x66, 0x10, 0xab, 0x5e, 0xa0, 0x65, 0x5e, 0xe8, 0x9a, 0x6a, 0xe4, 0x7d, 0xb5,
	0xff, 0x5d, 0x6c, 0x2c, 0x58, 0xb3, 0x4b, 0x36, 0x13, 0x05, 0xfd, 0x3d, 0x6c, 0x8c, 0x4a, 0xf4,
	0xae, 0xa0, 0x16, 0xf0, 0xf7, 0x51, 0x9b, 0xb3, 0xcd, 0x12, 0xaf, 0xa2, 0x68, 0xbd, 0x7f, 0x80,
	0xa9, 0x35, 0x2a, 0x9b, 0x59, 0x22, 0xc4, 0x82, 0x6f, 0xcb, 0x5c, 0x19, 0xe4, 0xae, 0xf9, 0x08,
	0x44, 0x99, 0xad, 0xdb, 0x26, 0xbc, 0x61, 0x2c, 0xf3, 0x44, 0x3a, 0x37, 0x4b, 0xb7, 0xd4, 0x72,
	0xac, 0xc3, 0xbd, 0x71, 0x2c, 0xf3, 0x54, 0x7a, 0x48, 0x96, 0xd1, 0x02, 0x61, 0x25, 0x95, 0x69,
	0x61, 0x28, 0xf7, 0xed, 0x63, 0xe2, 0xd9, 0x0b, 0x44, 0xb1, 0xeb, 0xd4, 0x2e, 0xdb, 0x3a, 0x7c,
	0xc7, 0x58, 0xe6, 0x22, 0xe2, 0xf2, 0xe9, 0x3a, 0xf7, 0x67, 0x75, 0x43, 0x65, 0x2b, 0xf0, 0xa6,
	0xb1, 0xcc, 0xe3, 0x69, 0x67, 0x13, 0x7e, 0x53, 0x3c, 0x47, 0x8a, 0x94, 0xc1, 0x47, 0xd1, 0x7c,
	0x42, 0xd0, 0xc2, 0xb5, 0x05, 0xf8, 0xb5, 0xe1, 0x10, 0xc2, 0xf2, 0xf0, 0xb6, 0x09, 0xf1, 0x86,
	0x4b, 0xd2, 0xa8, 0x54, 0xb6, 0x22, 0x86, 0x88, 0x77, 0x4d, 0x62, 0xb5, 0x11, 0xec, 0xaa, 0xbe,
	0x46, 0x0c, 0x78, 0xf7, 0x64, 0xe6, 0x52, 0xda, 0xfb, 0x0a, 0x40, 0x5e, 0xdd, 0xe0, 0x1d, 0xb8,
	0x08, 0xef, 0x99, 0xc4, 0xaa, 0xd3, 0xcf, 0x44, 0x94, 0xf4, 0xde, 0xc9, 0x81, 0x82, 0x54, 0x57,
	0xab, 0xf0, 0x3e, 0x54, 0x10, 0xad, 0xa4, 0xdb, 0x2b, 0x6a, 0x9d, 0x3b, 0xcd, 0xcf, 0x0c, 0x03,
	0x58, 0x84, 0xc1, 0x67, 0x27, 0x31, 0x65, 0x84, 0x63, 0x33, 0xb3, 0x2b, 0xf0, 0xb9, 0xc9, 0x4c,
	0x16, 0xe9, 0x61, 0xba, 0xf0, 0x1c, 0xa6, 0x55, 0x2f, 0xeb, 0xac, 0x58, 0xa3, 0xac, 0x6e, 0xda,
	0x15, 0xf8, 0x3c, 0x5a, 0x29, 0x69, 0x04, 0xf5, 0x32, 0xad, 0x57, 0x54, 0x5a, 0x86, 0x9f, 0x9b,
	0xca, 0x5c, 0x4e, 0x0f, 0x2d, 0x6b, 0xcb, 0xcb, 0xcb, 0x72, 0x60, 0x92, 0xa8, 0x9f, 0x9f, 0xca,
	0x5c, 0x4d, 0x3b, 0xb8, 0x12, 0xa1, 0x2a, 0x5b, 0xb7, 0x57, 0x74, 0x56, 0xdc, 0xe0, 0x33, 0x12,
	0x62, 0xc1, 0x2f, 0x4c, 0x61, 0x56, 0xcd, 0x7b, 0xa1, 0x65, 0xa8, 0x3c, 0xda, 0xbe, 0x63, 0x13,
	0xd3, 0x82, 0x0f, 0x4e, 0x61, 0x35, 0xf5, 0x45, 0x93, 0xd3, 0x90, 0x5f, 0x9c, 0xca, 0x5c, 0x48,
	0xbb, 0x2f, 0x95, 0x2d, 0x53, 0xe6, 0x67, 0xf2, 0xa1, 0x29, 0xf1, 0xfa, 0x4a, 0xaa, 0x07, 0x99,
	0x96, 0x18, 0xf1, 0xe0, 0xc3, 0x68, 0x0e, 0x7c, 0xce, 0xc1, 0x47, 0x70, 0x9b, 0xe5, 0xe1, 0x97,
	0xd0, 0xca, 0x0b, 0x84, 0x59, 0xd6, 0x2d, 0xbf, 0x4e, 0xbf, 0x8c, 0xd6, 0x49, 0x0c, 0xaa, 0x62,
	0x2a, 0x63, 0x92, 0x32, 0xd1, 0x2c, 0xf8, 0x15, 0xb4, 0x38, 0xb2, 0x4a, 0x98, 0xc5, 0x67, 0x8b,
	0x6a, 0x05, 0x7e, 0x15, 0x2d, 0x8e, 0xf7, 0x2b, 0x89, 0x92, 0xd5, 0xfa, 0xc8, 0x14, 0x66, 0x26,
	0x1b, 0xb4, 0xa6, 0x32, 0xe1, 0x6b, 0xe1, 0xa3, 0x68, 0x41, 0x79, 0xbb, 0x5a, 0xa6, 0xfe, 0xbc,
	0xec, 0xd7, 0xa6, 0x30, 0x93, 0xe7, 0x05, 0xa9, 0x96, 0x1f, 0x45, 0xc3, 0x7f, 0x99, 0x42, 0xad,
	0xa3, 0xc6, 0xb4, 0xba, 0x59, 0xd2, 0xab, 0xf5, 0xa5, 0xc5, 0x6b, 0xd7, 0xe0, 0xbf, 0xa2, 0xed,
	0x54, 0xa6, 0x76, 0x55, 0xa5, 0x75, 0xad, 0x44, 0xb4, 0x15, 0xf8, 0x6f, 0x68, 0xa5, 0x7c, 0x69,
	0x88, 0xe6, 0xfb, 0x9c, 0xff, 0x8e, 0xa2, 0x56, 0x78, 0xe7, 0xe3, 0x26, 0xeb, 0xb7, 0xf9, 0xff,
	0x40, 0x35, 0x6d, 0x90, 0x8a, 0xbe, 0x2a, 0xe2, 0xc1, 0x7a, 0x91, 0x30, 0x83, 0xc0, 0xff, 0x44,
	0xab, 0xb7, 0x51, 0x52, 0xf5, 0x92, 0x1d, 0x88, 0xf5, 0xeb, 0x53, 0xa8, 0xdf, 0x24, 0xa6, 0x65,
	0x12, 0x63, 0x95, 0x18, 0x75, 0xca, 0x56, 0xf9, 0x30, 0xf4, 0x1b, 0x28, 0x6e, 0xcd, 0xae, 0xd1,
	0x30, 0x43, 0xd1, 0x03, 0x3e, 0x86, 0x2a, 0x5d, 0xb4, 0x58, 0xfd, 0xf6, 0xb5, 0xdb, 0x8b, 0xf3,
	0xf0, 0x89, 0x29, 0xcc, 0x03, 0xdb, 0x4c, 0xad, 0xf0, 0x2a, 0x94, 0x25, 0x4d, 0x2b, 0xa9, 0x94,
	0xc1, 0x27, 0xa7, 0x30, 0x4f, 0x62, 0x19, 0x2a, 0x33, 0x0b, 0xc4, 0x80, 0x4f, 0xe1, 0x06, 0x17,
	0xd4, 0x3f, 0xf0, 0xe3, 0x9f, 0x46, 0x1b, 0x47, 0x04, 0x7c, 0x25, 0xbd, 0x4a, 0x2d, 0x52, 0x81,
	0xcf, 0xa0, 0xfd, 0x56, 0x2b, 0x13, 0xd5, 0xa8, 0x5b, 0x44, 0xad, 0x04, 0x41, 0x28, 0x7c, 0x76,
	0x2a, 0xf3, 0x64, 0x3a, 0x0c, 0x4a, 0xa9, 0xab, 0xbe, 0x00, 0x9f, 0x43, 0x15, 0x26, 0x7a, 0x9d,
	0xcd, 0xa8, 0x55, 0x52, 0x59, 0x3e, 0xa7, 0xeb, 0x2b, 0xf0, 0x79, 0xb4, 0xc5, 0x4d, 0xe2, 0x9b,
	0x79, 0xdd, 0xb4, 0xf8, 0xe4, 0xe2, 0x37, 0xa7, 0xc4, 0x3b, 0x5b, 0x48, 0x55, 0xb9, 0xb7, 0xfb,
	0x2d, 0xb4, 0x86, 0x32, 0x84, 0x91, 0x7d, 0x06, 0x7e, 0x7b, 0x6a, 0xd8, 0x58, 0x25, 0xd6, 0x67,
	0x7e, 0xe7, 0x25, 0xd6, 0x6d, 0x11, 0x7e, 0x17, 0xed, 0x7a, 0x05, 0x5d, 0xcf, 0xfb, 0xa3, 0xec,
	0xef, 0xa1, 0x56, 0xc0, 0x4b, 0xb3, 0x6c, 0x95, 0xad, 0x90, 0x1a, 0xfc, 0xfe, 0xe0, 0xae, 0xc7,
	0xa7, 0xa5, 0x65, 0x6a, 0x5a, 0xf0, 0x07, 0x03, 0xfd, 0xc0, 0x1a, 0x21, 0x2b, 0x75, 0xbb, 0x9a,
	0xe7, 0xaa, 0xf9, 0xc3, 0xa9, 0xcc, 0x73, 0xca, 0x53, 0x49, 0x54, 0x75, 0xb5, 0xca, 0x47, 0x04,
	0xc2, 0xe7, 0x7e, 0x7e, 0x8c, 0x63, 0x12, 0xd5, 0xd4, 0x19, 0x7c, 0x01, 0xed, 0xd0, 0xbc, 0xad,
	0x99, 0x48, 0x45, 0x59, 0x41, 0x87, 0x2f, 0xa2, 0x3e, 0xb3, 0xa6, 0xdb, 0x35, 0x55, 0x84, 0x42,
	0x2f, 0xa2, 0x1a, 0x58, 0xa7, 0xa4, 0xa4, 0xdb, 0x02, 0xf0, 0xa5, 0x29, 0x6c, 0x00, 0x8a, 0x97,
	0x12, 0x48, 0xf4, 0x65, 0x14, 0x9b, 0x56, 0xfc, 0x52, 0x7d, 0x1e, 0xbe, 0xf2, 0x12, 0x1b, 0x69,
	0x09, 0xbe, 0x8a, 0xd6, 0xb3, 0x40, 0xd7, 0x85, 0x0f, 0xb1, 0xa5, 0x07, 0xfc, 0xda, 0x54, 0x66,
	0x5e, 0x79, 0x26, 0xd5, 0x37, 0x44, 0x8c, 0x2d, 0xd6, 0x7e, 0xc8, 0x7a, 0xb5, 0xbe, 0x51, 0x22,
	0xac, 0xa4, 0xb3, 0xa2, 0x74, 0xab, 0x3f, 0x34, 0x9d, 0x59, 0x50, 0x9e, 0x1d, 0x25, 0xc9, 0x3c,
	0xfc, 0xf0, 0xc8, 0x69, 0x16, 0xe0, 0x47, 0x46, 0x4e, 0xb3, 0x08, 0xef, 0x18, 0x39, 0xcd, 0x12,
	0xfc, 0xe8, 0xc8, 0x69, 0xae, 0xc3, 0x3b, 0x47, 0x4e, 0x73, 0x03, 0xfe, 0xed, 0xc8, 0x69, 0x6e,
	0xc2, 0x8f, 0x8d, 0x9c, 0xe6, 0x16, 0xbc, 0x6b, 0xe4, 0x34, 0xb7, 0xe1, 0xdd, 0xd3, 0x99, 0x45,
	0xe5, 0xb9, 0x91, 0xda, 0xf4, 0x1a, 0xbc, 0x67, 0xf4, 0x44, 0x0b, 0xf0, 0xde, 0xd1, 0x13, 0x2d,
	0xc2, 0xfb, 0x46, 0x4f, 0xb4, 0x04, 0xff, 0x6e, 0xf4, 0x44, 0xd7, 0xe1, 0xc7, 0x47, 0x4f, 0x74,
	0x03, 0xfe, 0xfd, 0xe8, 0x89, 0x6e, 0xc2, 0xfb, 0x47, 0x4f, 0x74, 0x0b, 0xfe, 0xc3, 0xe8, 0x89,
	0x6e, 0xc3, 0x7f, 0x1c, 0x39, 0xd1, 0xc2, 0x35, 0xf8, 0x89, 0xd1, 0x13, 0xcd, 0xc3, 0x4f, 0x8e,
	0x9e, 0x68, 0x01, 0x7e, 0x6a, 0xf4, 0x44, 0x8b, 0xf0, 0xd3, 0xa3, 0x27, 0x5a, 0x82, 0x0f, 0x8c,
	0x9e, 0xe8, 0x3a, 0xfc, 0xcc, 0xe8, 0x89, 0x6e, 0xc0, 0xcf, 0x8e, 0x9e, 0xe8, 0x26, 0xfc, 0xa7,
	0xd1, 0x13, 0xdd, 0x82, 0xff, 0x3c, 0x7a, 0xa2, 0xdb, 0xf0, 0x73, 0x23, 0x27, 0x5a, 0xbc, 0x06,
	0x3f, 0x3f, 0x7a, 0xa2, 0x79, 0xf8, 0x85, 0xd1, 0x13, 0x2d, 0xc0, 0x07, 0x47, 0x4f, 0xb4, 0x08,
	0xbf, 0x38, 0x7a, 0xa2, 0x25, 0xf8, 0xd0, 0xe8, 0x89, 0xae, 0xc3, 0x87, 0x47, 0x4f, 0x74, 0x03,
	0x7e, 0x69, 0xf4, 0x44, 0x37, 0xe1, 0x97, 0x47, 0x4f, 0x74, 0x0b, 0x7e, 0x65, 0xf4, 0x44, 0xb7,
	0xe1, 0x57, 0x47, 0x4e, 0xb4, 0x74, 0x0d, 0x3e, 0x32, 0x8d, 0x05, 0x41, 0x15, 0x9d, 0x59, 0xa5,
	0x7a, 0x4e, 0x2d, 0xce, 0xc3, 0xc7, 0x86, 0x03, 0x16, 0xe0, 0xe3, 0xc3, 0x01, 0x8b, 0xf0, 0x89,
	0xe1, 0x80, 0x25, 0xf8, 0xe4, 0x70, 0xc0, 0x75, 0xf8, 0xd4, 0x70, 0xc0, 0x0d, 0xf8, 0xf4, 0x70,
	0xc0, 0x4d, 0xf8, 0xcc, 0x70, 0xc0, 0x2d, 0xf8, 0xec, 0x70, 0xc0, 0x6d, 0xf8, 0xdc, 0x34, 0x16,
	0x0e, 0xf7, 0x15, 0x75, 0x0d, 0x3e, 0xbf, 0x0f, 0x62, 0x1e, 0x7e, 0x73, 0x1f, 0xc4, 0x02, 0xfc,
	0xd6, 0x3e, 0x88, 0x45, 0xf8, 0xed, 0x7d, 0x10, 0x4b, 0xf0, 0x3b, 0xfb, 0x20, 0xae, 0xc3, 0xef,
	0xee, 0x83, 0xb8, 0x01, 0xbf, 0xb7, 0x0f, 0xe2, 0x26, 0xfc, 0xfe, 0x3e, 0x88, 0x5b, 0xf0, 0x07,
	0xfb, 0x20, 0x6e, 0xc3, 0x1f, 0x0e, 0x47, 0x2c, 0x5c, 0x83, 0x2f, 0xec, 0x83, 0x98, 0x87, 0x2f,
	0xee, 0x83, 0x58, 0x80, 0x17, 0xf7, 0x41, 0x2c, 0xc2, 0x97, 0xf6, 0x41, 0x2c, 0xc1, 0x97, 0xf7,
	0x41, 0x5c, 0x87, 0xaf, 0xec, 0x83, 0xb8, 0x01, 0x7f, 0xb4, 0x0f, 0xe2, 0x26, 0xfc, 0xf1, 0x3e,
	0x88, 0x5b, 0xf0, 0xd5, 0x7d, 0x10, 0xb7, 0xe1, 0x6b, 0xc3, 0x11, 0x8b, 0xd7, 0xe0, 0x4f, 0xa6,
	0xb1, 0x79, 0x68, 0x49, 0xb7, 0x0a, 0x74, 0x7d, 0x1e, 0xfe, 0x74, 0x08, 0x77, 0x01, 0xfe, 0x6c,
	0x08, 0x77, 0x11, 0xbe, 0x3e, 0x84, 0xbb, 0x04, 0x7f, 0x3e, 0x84, 0x7b, 0x1d, 0xfe, 0x62, 0x08,
	0xf7, 0x06, 0xfc, 0xe5, 0x10, 0xee, 0x4d, 0xf8, 0xab, 0x21, 0xdc, 0x5b, 0xf0, 0xd7, 0x43, 0xb8,
	0xb7, 0xe1, 0x6f, 0xa6, 0xb1, 0xf5, 0x09, 0x5f, 0x1b, 0xd7, 0xe0, 0x6f, 0xa7, 0xf1, 0xf5, 0x17,
	0xc2, 0x8a, 0x79, 0x55, 0xb7, 0x28, 0xc9, 0x51, 0x78, 0x71, 0x46, 0x3c, 0x68, 0x9d, 0x52, 0x79,
	0x8d, 0x32, 0xf8, 0xd2, 0x0c, 0x36, 0x67, 0x5f, 0xa6, 0xcc, 0x24, 0xcb, 0x94, 0x15, 0x4d, 0x9b,
	0xc2, 0x97, 0x67, 0x30, 0xd7, 0xb3, 0xa6, 0xb2, 0x8a, 0x2e, 0xf7, 0x2e, 0xbe, 0x32, 0x83, 0xce,
	0x76, 0x4b, 0x36, 0x5b, 0xa6, 0xc1, 0xcc, 0x18, 0xfe, 0x08, 0x2d, 0xc8, 0x2c, 0xd1, 0x32, 0x55,
	0x99, 0x94, 0xf3, 0x8f, 0x67, 0xb0, 0x09, 0x71, 0x8e, 0xd6, 0xec, 0x32, 0xb5, 0x6b, 0x04, 0xbe,
	0x8a, 0xf3, 0x09, 0x5b, 0xa7, 0x8c, 0xd7, 0xe5, 0x6b, 0x33, 0xe2, 0x81, 0xe9, 0xd4, 0x72, 0x08,
	0x2b, 0xe6, 0x28, 0xfc, 0x09, 0x9a, 0x38, 0x6f, 0xab, 0x6c, 0xc3, 0xa6, 0x39, 0x0a, 0x7f, 0x3a,
	0x83, 0x2d, 0xf4, 0xac, 0xdb, 0x2a, 0x13, 0xdb, 0x09, 0x55, 0x43, 0x17, 0xa7, 0x3e, 0xfe, 0x6c,
	0x06, 0x5b, 0x2f, 0x58, 0xa7, 0x2a, 0x2b, 0x10, 0x56, 0x2c, 0x53, 0x56, 0xac, 0xaa, 0x14, 0xbe,
	0x8e, 0xa2, 0xb4, 0x12, 0x2d, 0x11, 0x2a, 0x46, 0xb6, 0x3b, 0xb6, 0xca, 0xe0, 0xcf, 0x51, 0xc5,
	0xde, 0xa1, 0xac, 0xb8, 0x51, 0xa2, 0x65, 0x42, 0xe1, 0x2f, 0x66, 0xb0, 0xb6, 0x5f, 0xa6, 0x72,
	0x63, 0x06, 0xfe, 0x12, 0x55, 0x69, 0x99, 0x57, 0xc9, 0xdf, 0xbb, 0x81, 0xbf, 0x42, 0x55, 0xb2,
	0xa1, 0xb3, 0xe2, 0x06, 0x85, 0xbf, 0x46, 0xed, 0xa2, 0xa6, 0xea, 0x25, 0x1b, 0xfe, 0x06, 0x2d,
	0xfa, 0x8e, 0x68, 0x0b, 0x56, 0x84, 0xbf, 0x9d, 0xc1, 0xcc, 0xae, 0x42, 0x55, 0xb6, 0x6c, 0x6b,
	0x2a, 0xab, 0x52, 0x95, 0xc1, 0xff, 0x42, 0xb3, 0x28, 0xa9, 0x34, 0x47, 0xb8, 0xc2, 0xff, 0x37,
	0x9a, 0xc5, 0x3a, 0x25, 0x1a, 0x37, 0xde, 0x1a, 0x65, 0xcb, 0x14, 0xfe, 0x0f, 0xda, 0x68, 0xeb,
	0x94, 0x55, 0x74, 0x21, 0xc6, 0xff, 0x9d, 0xc1, 0x9c, 0x49, 0x8d, 0x1b, 0x6e, 0x49, 0x15, 0x88,
	0xff, 0x37, 0x83, 0x75, 0xae, 0x1c, 0x65, 0xc5, 0x75, 0x9b, 0xc0, 0x1b, 0x66, 0xf1, 0x51, 0x95,
	0xdb, 0x8c, 0x48, 0xfe, 0xc6, 0x59, 0x54, 0x00, 0x3b, 0x30, 0xd9, 0x6f, 0x47, 0x33, 0xa8, 0xe9,
	0x76, 0xc9, 0x96, 0x0d, 0xf0, 0x1d, 0x78, 0x09, 0x74, 0x99, 0xd7, 0x81, 0x1b, 0xed, 0x9b, 0x66,
	0x31, 0x2d, 0x09, 0x1e, 0x37, 0x5b, 0xff, 0xc3, 0x5d, 0xe9, 0xbe, 0xc5, 0x4b, 0xff, 0x87, 0xa8,
	0x74, 0x45, 0x9b, 0x56, 0xa8, 0x28, 0xfc, 0x1f, 0xa1, 0x79, 0xe7, 0x54, 0x5a, 0x14, 0x26, 0xff,
	0xe6, 0x59, 0xb4, 0x05, 0x6c, 0xd1, 0xf3, 0xfd, 0x2c, 0xbe, 0x13, 0x95, 0x5f, 0xec, 0xd4, 0xd4,
	0x08, 0x97, 0xff, 0xbb, 0xd0, 0x32, 0x8a, 0x36, 0xad, 0x09, 0x11, 0xdf, 0x22, 0x3e, 0x64, 0x92,
	0x3a, 0x36, 0x70, 0x6d, 0xf1, 0x06, 0x7c, 0xf7, 0x2c, 0xee, 0x7a, 0x54, 0xde, 0x99, 0xa5, 0xfa,
	0xbf, 0x67, 0x16, 0x6b, 0x3d, 0x91, 0x33, 0x2b, 0xc2, 0xf7, 0xce, 0x62, 0xad, 0x6f, 0x72, 0xf3,
	0x31, 0x4b, 0x94, 0x0b, 0xf7, 0xd6, 0x59, 0xdc, 0x3e, 0x2a, 0x44, 0x44, 0x98, 0xeb, 0x36, 0xbc,
	0x0d, 0x55, 0x61, 0x41, 0x15, 0xfc, 0x1c, 0x85, 0x7f, 0x8c, 0xf2, 0xb9, 0x80, 0x77, 0xa8, 0x9d,
	0xa3, 0xf0, 0x76, 0xb4, 0xfa, 0x05, 0x42, 0xcd, 0x12, 0x4f, 0xfe, 0x4f, 0x50, 0x15, 0x97, 0xb8,
	0x53, 0x11, 0xeb, 0xed, 0xbc, 0x1a, 0xff, 0x14, 0x6d, 0xe2, 0x92, 0xcd, 0x6a, 0x2a, 0x83, 0xef,
	0x43, 0x33, 0x28, 0x13, 0x5a, 0xb3, 0xb9, 0x0e, 0x78, 0x4b, 0xc1, 0xf7, 0xa3, 0x98, 0x80, 0xcd,
	0xbb, 0xa3, 0x0e, 0xff, 0x0c, 0x6d, 0xc7, 0x9c, 0xaf, 0xe8, 0x1c, 0x85, 0x7f, 0x8e, 0xaa, 0xda,
	0xb2, 0x65, 0x47, 0xfb, 0x17, 0xb3, 0xb8, 0xab, 0x52, 0x99, 0xef, 0x5e, 0xff, 0x25, 0xaa, 0xa7,
	0x3b, 0x54, 0x67, 0x45, 0x2e, 0x29, 0xfc, 0xab, 0x01, 0x1d, 0x89, 0xf8, 0x76, 0xfe, 0x03, 0xa8,
	0x1e, 0x79, 0x47, 0x13, 0xc9, 0xff, 0x35, 0x6a, 0x2b, 0x5c, 0x87, 0xa1, 0xad, 0xfc, 0x1b, 0x54,
	0x8d, 0x79, 0x95, 0xe6, 0xe8, 0x3c, 0xfc, 0xe0, 0x60, 0xe6, 0x82, 0xff, 0x81, 0x13, 0x94, 0xb9,
	0x08, 0x3f, 0x34, 0x98, 0xb9, 0x04, 0x3f, 0x3c, 0x98, 0x79, 0x1d, 0x7e, 0x64, 0x30, 0xf3, 0x06,
	0xbc, 0x63, 0x30, 0xf3, 0x26, 0xfc, 0xe8, 0x60, 0xe6, 0x2d, 0x78, 0xe7, 0x60, 0xe6, 0xed, 0xe0,
	0x5b, 0x19, 0xa8, 0x12, 0xae, 0xc1, 0x8f, 0x0d, 0xe1, 0xce, 0xc3, 0xbb, 0x86, 0x70, 0x17, 0xe0,
	0xdd, 0x43, 0xb8, 0x8b, 0xf0, 0x9e, 0x21, 0xdc, 0x25, 0x78, 0xef, 0x10, 0xee, 0x75, 0x78, 0xdf,
	0x2c, 0xb6, 0x34, 0xbd, 0x46, 0x68, 0x4e, 0x17, 0x67, 0xdc, 0xea, 0x94, 0xd5, 0x75, 0xc6, 0xf1,
	0x35, 0xf8, 0xf5, 0xb9, 0xcc, 0xd3, 0xe9, 0x43, 0x58, 0x71, 0xac, 0xb5, 0xa6, 0x73, 0xac, 0x09,
	0xbf, 0x31, 0x97, 0x79, 0x36, 0x7d, 0x32, 0x21, 0x01, 0x2e, 0x89, 0xd3, 0x53, 0x1c, 0xfe, 0xb1,
	0xb9, 0xcc, 0x33, 0xe9, 0xb3, 0x07, 0x71, 0x78, 0x41, 0xb7, 0x0d, 0x89, 0xfe, 0xf8, 0x4b, 0x41,
	0xd3, 0x55, 0x3f, 0xef, 0x4f, 0xbc, 0x04, 0xb9, 0x4d, 0xba, 0x2e, 0xc1, 0x9f, 0x7c, 0x09, 0x72,
	0x9b, 0x64, 0x95, 0x30, 0x09, 0xff, 0xd4, 0x4b, 0x80, 0x13, 0x5a, 0x2c, 0x59, 0x12, 0xfe, 0xe9,
	0x97, 0x20, 0x38, 0xa3, 0xcc, 0x17, 0xfc, 0x33, 0x2f, 0x45, 0xe1, 0x81, 0x24, 0x9f, 0x9d, 0xc3,
	0x02, 0xc1, 0x85, 0x6b, 0x0b, 0xf3, 0x62, 0xe3, 0x8e, 0x83, 0xe6, 0xe1, 0x27, 0xce, 0xee, 0x0b,
	0x5a, 0x80, 0x9f, 0xdc, 0x1f, 0xb4, 0x08, 0x3f, 0xb5, 0x3f, 0x68, 0x09, 0x7e, 0x7a, 0x7f, 0xd0,
	0x75, 0xf8, 0xc0, 0xfe, 0xa0, 0x1b, 0xf0, 0x33, 0xfb, 0x83, 0x6e, 0xc2, 0xcf, 0x9e, 0xc5, 0x0f,
	0x51, 0xc8, 0x83, 0x2b, 0xe2, 0x2c, 0xe9, 0x9b, 0xaf, 0x62, 0xee, 0x3a, 0x80, 0xd4, 0xec, 0x9a,
	0x4d, 0xe0, 0x3b, 0xaf, 0xe2, 0x67, 0x3a, 0x24, 0x46, 0xee, 0xba, 0xc1, 0x77, 0x5d, 0xc5, 0x23,
	0x28, 0xb1, 0x25, 0xa7, 0x19, 0x44, 0xb5, 0x08, 0xbc, 0x65, 0x78, 0x46, 0xe2, 0xc0, 0x00, 0x7c,
	0x37, 0x9e, 0x91, 0x60, 0x06, 0x19, 0x7d, 0xcf, 0x55, 0x6c, 0x28, 0x8d, 0x9e, 0x71, 0xf8, 0xde,
	0xab, 0x58, 0x04, 0x9d, 0x3a, 0x0a, 0xf1, 0xd6, 0xa1, 0xd5, 0x97, 0x7b, 0x7b, 0x6f, 0x63, 0x99,
	0xf3, 0xe9, 0xd1, 0x20, 0x6f, 0xfa, 0x87, 0x59, 0x3e, 0xf8, 0xa6, 0x57, 0x65, 0xdf, 0x3e, 0xa3,
	0x1c, 0x10, 0x6a, 0x0f, 0x0e, 0x59, 0x87, 0x7f, 0x82, 0x13, 0xbb, 0x31, 0x5a, 0x89, 0x94, 0xab,
	0x30, 0x96, 0x79, 0x44, 0x39, 0xd1, 0xa7, 0xa9, 0x8c, 0xe9, 0xb6, 0x46, 0x2a, 0x84, 0x59, 0x30,
	0x1e, 0x67, 0x95, 0xe9, 0x3a, 0x65, 0xc5, 0x35, 0x1e, 0xad, 0xcb, 0x83, 0xde, 0x7d, 0x56, 0xb1,
	0x62, 0xd5, 0x4d, 0xc2, 0xf2, 0x30, 0x19, 0x4f, 0xa2, 0x95, 0x55, 0xe6, 0xaf, 0x66, 0xc1, 0x54,
	0xe6, 0x92, 0x72, 0x3e, 0xc1, 0xca, 0x53, 0xb3, 0x42, 0x4d, 0xb3, 0xbe, 0x42, 0xb5, 0x15, 0xdd,
	0xb6, 0x60, 0x3a, 0x9e, 0x5c, 0x9c, 0x5d, 0xf1, 0xe7, 0x4a, 0x33, 0x71, 0xd6, 0xaa, 0x6e, 0x85,
	0xd3, 0xa8, 0x59, 0x24, 0x67, 0xff, 0xb8, 0x5a, 0x8e, 0xa8, 0x96, 0xa5, 0x6a, 0x2b, 0x70, 0x20,
	0x73, 0x46, 0x39, 0xd9, 0xc7, 0x54, 0x88, 0x51, 0x24, 0x75, 0xb9, 0x75, 0x07, 0x4a, 0x5c, 0x2d,
	0x66, 0x49, 0xaf, 0xc2, 0xc1, 0xcc, 0x69, 0xe5, 0x78, 0xa4, 0x82, 0x7a, 0x39, 0x2f, 0x76, 0x48,
	0x09, 0x1c, 0x8a, 0x73, 0x2a, 0x7a, 0x8e, 0x4f, 0x0e, 0xd4, 0x82, 0x0d, 0x87, 0x33, 0xe7, 0x95,
	0x33, 0x7d, 0x8e, 0x5e, 0x25, 0xcc, 0xac, 0x99, 0x16, 0xa9, 0xf8, 0x72, 0x1e, 0xc9, 0x9c, 0x52,
	0x8e, 0x45, 0xca, 0x09, 0x4e, 0xba, 0xc0, 0x5c, 0x5c, 0x38, 0xd1, 0x7d, 0x18, 0x59, 0xab, 0x11,
	0xd5, 0x00, 0x88, 0xf3, 0xf2, 0xaa, 0x11, 0x9e, 0xb8, 0x81, 0xa3, 0x09, 0x75, 0x45, 0x8e, 0x8e,
	0x64, 0xe2, 0x2c, 0x4b, 0x35, 0x43, 0x4d, 0x1e, 0xcb, 0x9c, 0x50, 0x8e, 0xf6, 0x59, 0xfe, 0x31,
	0x02, 0x38, 0x9e, 0x39, 0xae, 0x40, 0x24, 0x33, 0xc2, 0xd4, 0x0a, 0x81, 0x13, 0xf1, 0x86, 0x0e,
	0xcf, 0x00, 0x9c, 0x8c, 0x6b, 0xa1, 0x60, 0x10, 0xa2, 0x95, 0x74, 0xaa, 0x11, 0x38, 0x95, 0x39,
	0xa6, 0xcc, 0x45, 0x5a, 0x43, 0x37, 0xaa, 0x26, 0x9c, 0x8e, 0xc3, 0xfb, 0x0b, 0x9c, 0xf0, 0x48,
	0xbc, 0x00, 0x93, 0x58, 0x05, 0x9d, 0xd0, 0x3c, 0x9c, 0x89, 0x2b, 0x4b, 0x64, 0x23, 0x8e, 0x76,
	0x9d, 0x4d, 0xe8, 0x9f, 0x54, 0x72, 0xc4, 0x10, 0x9c, 0x73, 0x48, 0x92, 0x9c, 0x6e, 0x9a, 0xf0,
	0x68, 0x5c, 0x24, 0x71, 0xb2, 0x0e, 0xce, 0xc7, 0xd5, 0x60, 0x90, 0xa2, 0x5d, 0x56, 0x0d, 0x78,
	0x2c, 0xf3, 0xa8, 0xf2, 0x48, 0x9f, 0x2c, 0xf6, 0xb3, 0x23, 0x66, 0x78, 0x21, 0x5e, 0xba, 0xdc,
	0xee, 0x16, 0x9c, 0x8b, 0x71, 0xfd, 0xc9, 0x3d, 0x69, 0xb8, 0x94, 0x35, 0x94, 0xb9, 0x3e, 0x4a,
	0xf6, 0xcc, 0x63, 0x31, 0x52, 0xe4, 0xfe, 0x43, 0x9f, 0xb8, 0x46, 0xc8, 0x8a, 0x3c, 0xbb, 0x1f,
	0x21, 0xfa, 0xfb, 0xd6, 0xe3, 0xd9, 0xef, 0x1b, 0x53, 0xe6, 0xe4, 0xf2, 0x90, 0x16, 0x66, 0xca,
	0xe5, 0x8a, 0x93, 0x82, 0x9c, 0x11, 0x8e, 0x9f, 0x3d, 0xb7, 0x91, 0x04, 0x47, 0xfc, 0x87, 0x71,
	0x2c, 0x91, 0xb0, 0xc7, 0x09, 0x2c, 0x91, 0x3c, 0x97, 0x3f, 0x99, 0x7d, 0x41, 0x99, 0x15, 0xbd,
	0xaf, 0xaa, 0x9b, 0x99, 0xa3, 0xca, 0xe1, 0xe0, 0x77, 0xa4, 0x8a, 0x7d, 0x92, 0xbc, 0x87, 0x30,
	0x16, 0x23, 0x56, 0x54, 0xd3, 0x22, 0x86, 0x2c, 0x3d, 0x24, 0xae, 0x52, 0x8d, 0x04, 0x9c, 0x09,
	0xae, 0x91, 0x90, 0xc3, 0xa7, 0xf4, 0xc5, 0xb2, 0x28, 0xf9, 0xc5, 0x29, 0xe5, 0x88, 0xa0, 0xeb,
	0xd5, 0xe0, 0xd6, 0xcf, 0x29, 0xe5, 0x58, 0x9c, 0x12, 0xb9, 0x9d, 0x91, 0x60, 0xf8, 0xfe, 0x7c,
	0x0c, 0x49, 0xb3, 0xac, 0x53, 0x26, 0xaf, 0x74, 0x25, 0x18, 0x24, 0x4f, 0x2d, 0xa9, 0x8d, 0x04,
	0xc3, 0x24, 0xaa, 0xa1, 0x95, 0x60, 0x92, 0x77, 0xdc, 0x04, 0xcb, 0xf7, 0x77, 0x30, 0x95, 0xb9,
	0xa0, 0x9c, 0x4b, 0xf0, 0x2a, 0xa4, 0x42, 0x72, 0xc4, 0xa8, 0xab, 0x45, 0x83, 0x10, 0x98, 0xce,
	0x3c, 0xae, 0x3c, 0x36, 0x00, 0x91, 0xa7, 0xa6, 0x04, 0xcd, 0x64, 0x2e, 0x2a, 0x8f, 0x0e, 0x02,
	0x91, 0x32, 0xb1, 0x08, 0xf0, 0x39, 0xca, 0xd9, 0x01, 0x90, 0x3b, 0x36, 0xb5, 0xe0, 0x00, 0x77,
	0x9e, 0x83, 0x44, 0xf1, 0xaf, 0x16, 0x89, 0xab, 0x06, 0x09, 0x4c, 0xe8, 0x09, 0x0e, 0xf2, 0x0e,
	0x93, 0xd4, 0x67, 0x78, 0x1b, 0x02, 0x0e, 0x21, 0x1a, 0xf2, 0x7d, 0xf2, 0xe1, 0xcc, 0x39, 0xe5,
	0x74, 0x82, 0x95, 0x0b, 0xb9, 0x47, 0x10, 0xfd, 0x6d, 0x94, 0x08, 0xd3, 0x4a, 0x2a, 0xcc, 0x65,
	0xae, 0x28, 0x17, 0x51, 0xb5, 0xfb, 0xfe, 0xa0, 0x2e, 0x0e, 0xb2, 0x40, 0xe6, 0xb2, 0x72, 0x01,
	0x87, 0x89, 0xd3, 0x2e, 0x12, 0x75, 0x14, 0xd1, 0x80, 0x8f, 0x2a, 0xeb, 0x45, 0x89, 0xc9, 0x20,
	0x0d, 0xc6, 0xe3, 0xef, 0x15, 0x52, 0xf3, 0xef, 0x73, 0x1c, 0x43, 0xda, 0x22, 0x40, 0x70, 0x9f,
	0x6c, 0x12, 0x38, 0xce, 0xc7, 0x87, 0x04, 0x44, 0x1e, 0xa6, 0xa9, 0x17, 0xca, 0x6a, 0x11, 0x4e,
	0x20, 0x6d, 0xce, 0x08, 0x91, 0x03, 0x0f, 0xd5, 0xc4, 0xa8, 0x0f, 0x27, 0xb3, 0x2f, 0x9e, 0x51,
	0x8e, 0x54, 0x88, 0xa5, 0xd6, 0xf3, 0xaa, 0xa5, 0x86, 0xa6, 0x1e, 0xa7, 0x04, 0xa6, 0x7e, 0x51,
	0x79, 0x34, 0xc1, 0xf0, 0x47, 0x1d, 0xbb, 0x5a, 0x34, 0xd4, 0x3c, 0xf1, 0x7d, 0x00, 0x06, 0x81,
	0x71, 0x2e, 0x0e, 0x9e, 0xba, 0x7f, 0x4c, 0x6f, 0x42, 0x38, 0x8a, 0x24, 0x88, 0x30, 0x02, 0x93,
	0x08, 0x47, 0x9e, 0x20, 0x9c, 0x42, 0x38, 0xe2, 0xbe, 0x9a, 0x3f, 0xfe, 0xc7, 0x39, 0xe1, 0xf8,
	0xff, 0xa4, 0x72, 0x39, 0xc9, 0xe2, 0x8e, 0x59, 0xde, 0x92, 0x52, 0xc5, 0xc9, 0xc0, 0x8a, 0x9e,
	0xe7, 0x26, 0x7f, 0x41, 0x39, 0x97, 0x14, 0x49, 0xdc, 0x1e, 0x08, 0x2a, 0x7d, 0x00, 0x51, 0x98,
	0xcd, 0x28, 0x37, 0xf4, 0x73, 0xca, 0x69, 0x84, 0x21, 0x2a, 0x0c, 0x07, 0x45, 0x9c, 0x91, 0xc8,
	0xd8, 0xd2, 0x0d, 0xb5, 0x48, 0xc2, 0xac, 0x0f, 0x21, 0x39, 0x88, 0xf3, 0x8a, 0xe2, 0xbc, 0xdb,
	0x61, 0xa4, 0x60, 0x11, 0x6e, 0x1c, 0x11, 0xa1, 0x03, 0x26, 0xb3, 0x3c, 0x91, 0x37, 0x87, 0xa9,
	0x59, 0x9c, 0x24, 0x02, 0xa4, 0xb6, 0x6a, 0x7e, 0x55, 0x1e, 0xa8, 0x16, 0x88, 0xa3, 0x88, 0x48,
	0xe2, 0x2c, 0x92, 0x08, 0xf2, 0x32, 0x88, 0x8d, 0x84, 0xdc, 0xba, 0xc9, 0x5d, 0xc4, 0x31, 0xde,
	0x8d, 0x06, 0x42, 0xfc, 0xd3, 0xdb, 0x70, 0x3c, 0xf3, 0x84, 0x72, 0x69, 0x20, 0xaa, 0x6f, 0x31,
	0x27, 0xc4, 0x00, 0x1b, 0xc7, 0xe5, 0x0d, 0xbd, 0x5a, 0x2f, 0x1a, 0xba, 0x5d, 0x85, 0x93, 0x88,
	0x8a, 0x72, 0x76, 0xa1, 0x00, 0xa7, 0x10, 0xdb, 0x50, 0x57, 0x55, 0x4b, 0x35, 0xfc, 0xe8, 0x22,
	0xce, 0x92, 0x17, 0xfa, 0x1e, 0x41, 0xb4, 0x43, 0xcb, 0x65, 0x52, 0x54, 0xcb, 0xa4, 0xbe, 0x66,
	0xe8, 0x41, 0x9c, 0x11, 0x47, 0x88, 0x13, 0x95, 0x67, 0xb9, 0xd3, 0x4b, 0x66, 0xaa, 0xfb, 0xbd,
	0xf0, 0x1c, 0x92, 0x4a, 0xb4, 0xf0, 0xa3, 0x48, 0xaa, 0x12, 0x31, 0x74, 0x71, 0xa9, 0xeb, 0x3c,
	0x22, 0xa7, 0x3c, 0x26, 0xf8, 0x18, 0x77, 0xd3, 0x58, 0xb2, 0xc0, 0xae, 0x2e, 0x20, 0x05, 0x72,
	0x00, 0x5c, 0x44, 0xf2, 0xd4, 0x74, 0x66, 0x5a, 0x70, 0x09, 0x51, 0xb4, 0xdf, 0x7f, 0x4d, 0x62,
	0xc1, 0xe3, 0x88, 0xa4, 0x15, 0xb5, 0x5a, 0xcf, 0xeb, 0xba, 0x01, 0x97, 0x11, 0x79, 0xf2, 0xd4,
	0x94, 0x6d, 0xc8, 0x15, 0x70, 0x05, 0xe9, 0x0b, 0xfe, 0xbd, 0xaf, 0x92, 0xaa, 0x17, 0x55, 0x96,
	0xb7, 0xe1, 0x09, 0x44, 0x66, 0x71, 0xa5, 0xf2, 0x2a, 0xd2, 0x2a, 0x9c, 0xd1, 0x37, 0x92, 0x27,
	0x11, 0xe1, 0x38, 0xc2, 0x2c, 0xeb, 0x16, 0x3c, 0x25, 0x42, 0x62, 0x84, 0x49, 0x2c, 0xc8, 0x22,
	0xe6, 0xec, 0xf3, 0x02, 0x55, 0x3e, 0x8d, 0x25, 0x57, 0xd9, 0x0a, 0x65, 0x45, 0x78, 0x06, 0x29,
	0x37, 0x38, 0xed, 0x0f, 0xcf, 0x22, 0x16, 0x68, 0xb3, 0xb2, 0xae, 0xad, 0xc0, 0x73, 0x48, 0x1f,
	0x93, 0x8e, 0xc9, 0xb4, 0xab, 0xf0, 0x72, 0x44, 0x11, 0x05, 0x5d, 0xcf, 0xc3, 0x35, 0xa4, 0x89,
	0xfc, 0xe3, 0xa7, 0x34, 0x4f, 0x60, 0x1e, 0x73, 0x17, 0x2b, 0x94, 0xc1, 0x02, 0xee, 0xe2, 0x58,
	0x5f, 0x81, 0x8b, 0x7c, 0x84, 0x44, 0x3d, 0x99, 0xe8, 0x32, 0x75, 0x73, 0x8d, 0x5a, 0x5a, 0x09,
	0x96, 0x30, 0x3d, 0x07, 0xd3, 0x8b, 0x1b, 0x58, 0x33, 0x55, 0x72, 0x11, 0x7f, 0x76, 0x13, 0x4b,
	0xee, 0x23, 0xe0, 0x16, 0x62, 0x43, 0x66, 0x95, 0x68, 0xb4, 0x50, 0x93, 0xa9, 0x6f, 0x23, 0x4e,
	0x4f, 0x5c, 0x9e, 0x96, 0x67, 0xf1, 0xe1, 0x15, 0x58, 0x06, 0x91, 0x1b, 0x6e, 0xf0, 0xca, 0xcc,
	0x55, 0xe5, 0xf1, 0x21, 0x80, 0xb0, 0xf7, 0x7c, 0xc3, 0xe0, 0xa1, 0xcc, 0x20, 0x94, 0x15, 0x74,
	0x43, 0x23, 0xf0, 0x2a, 0xa4, 0xba, 0xc1, 0x25, 0x38, 0x43, 0x65, 0x45, 0x02, 0xdf, 0x38, 0x04,
	0x91, 0x13, 0xe7, 0x94, 0xbf, 0x09, 0x69, 0x50, 0xbd, 0x18, 0xca, 0xf1, 0xcd, 0x48, 0xab, 0xc4,
	0x32, 0x10, 0x9e, 0x10, 0xd4, 0x21, 0xb0, 0xb0, 0x89, 0x4d, 0xc8, 0x21, 0xfa, 0x09, 0x6f, 0xf6,
	0xf1, 0x16, 0xd0, 0x10, 0x69, 0x4a, 0x44, 0xcd, 0xd7, 0x0b, 0x06, 0x9f, 0xdb, 0xe5, 0x91, 0x3e,
	0x5c, 0x52, 0x59, 0xbe, 0x9e, 0xd3, 0xf5, 0x95, 0x3a, 0x61, 0xa4, 0x52, 0x03, 0x82, 0xb4, 0x91,
	0x7f, 0x9d, 0x59, 0xad, 0x11, 0x03, 0x18, 0x22, 0x83, 0xd8, 0x01, 0x0d, 0xda, 0xa8, 0x8a, 0x0c,
	0x1e, 0x51, 0x80, 0x58, 0x0c, 0x81, 0x3b, 0x08, 0x2a, 0x4f, 0x48, 0xb5, 0x6e, 0x52, 0xc6, 0x88,
	0x51, 0x2f, 0xd0, 0x62, 0xc9, 0x02, 0x03, 0x89, 0x01, 0xc2, 0x4b, 0xd2, 0xe5, 0x32, 0x61, 0xc5,
	0x20, 0xc4, 0x30, 0x5f, 0x02, 0x92, 0xac, 0x5b, 0x86, 0x0a, 0x16, 0xe2, 0x0d, 0x0a, 0xbc, 0xcb,
	0xeb, 0x0c, 0x6c, 0xa4, 0xbd, 0x8b, 0x36, 0x9f, 0xf5, 0x04, 0x0d, 0xba, 0x8a, 0x78, 0x5f, 0x81,
	0x80, 0x35, 0x24, 0xad, 0x9f, 0xaf, 0x3f, 0x36, 0xad, 0x23, 0xad, 0x1c, 0x20, 0x2c, 0xa2, 0x95,
	0x98, 0x5e, 0xd6, 0x8b, 0x35, 0xa8, 0x65, 0x9e, 0x56, 0xae, 0xee, 0x0b, 0xf3, 0x47, 0xcf, 0x0d,
	0xa4, 0xb9, 0x22, 0x57, 0xca, 0xe1, 0x5b, 0x90, 0x32, 0xa3, 0x57, 0xce, 0xfd, 0x60, 0xeb, 0x5b,
	0x91, 0x6c, 0x82, 0x32, 0xd7, 0x54, 0x03, 0x5e, 0x3d, 0x44, 0xf4, 0x88, 0x81, 0xfd, 0x1d, 0x44,
	0xb7, 0xa6, 0xb8, 0x8a, 0x67, 0xc0, 0x6b, 0x10, 0xc3, 0x09, 0xb2, 0x10, 0x93, 0x76, 0x07, 0x1b,
	0x3d, 0x54, 0x9a, 0x87, 0xbb, 0x58, 0xac, 0x24, 0x3b, 0x33, 0xe3, 0xf1, 0xdf, 0x26, 0x12, 0x88,
	0x44, 0xf8, 0x61, 0xdb, 0x6d, 0x21, 0xce, 0x2b, 0x98, 0xee, 0x83, 0x8b, 0x0d, 0x9e, 0xe2, 0x8e,
	0x5c, 0x81, 0x96, 0x09, 0x3c, 0x8f, 0x79, 0x9e, 0x90, 0x1d, 0x89, 0x76, 0xb6, 0xb1, 0x10, 0xbc,
	0x0f, 0xac, 0xa8, 0x55, 0xd8, 0x41, 0x6c, 0x35, 0x02, 0x89, 0x98, 0x82, 0x87, 0x05, 0x17, 0x7a,
	0x85, 0x94, 0x55, 0x96, 0x87, 0x7b, 0xd8, 0x60, 0x41, 0x48, 0x1e, 0x1a, 0xc8, 0xd8, 0x54, 0xb0,
	0x0d, 0x46, 0x2d, 0xdb, 0x20, 0xb0, 0x8b, 0x68, 0x2b, 0xc8, 0xb3, 0xae, 0xe9, 0xba, 0x91, 0xe7,
	0xc3, 0x0a, 0x81, 0x26, 0xe6, 0xea, 0x75, 0xbb, 0x4c, 0x2c, 0x8b, 0x40, 0x0b, 0x6b, 0x2b, 0x5d,
	0xaf, 0xc0, 0x1e, 0x52, 0x7d, 0xd9, 0x0f, 0x39, 0x5b, 0x54, 0xff, 0x75, 0x68, 0xc6, 0x7a, 0x45,
	0x8c, 0x9c, 0x6d, 0x84, 0x19, 0x5e, 0xf2, 0xeb, 0x60, 0xa3, 0xa0, 0x1f, 0xe0, 0xd8, 0x95, 0x8a,
	0xce, 0xa0, 0x8b, 0x24, 0x17, 0x37, 0xd2, 0x73, 0xfa, 0x3a, 0xf4, 0x10, 0x0b, 0x54, 0x35, 0xad,
	0x3f, 0xfe, 0xdd, 0xcf, 0xbe, 0x71, 0xd2, 0x5f, 0x87, 0x48, 0xbe, 0x89, 0x10, 0x4c, 0x79, 0x07,
	0x3c, 0x8c, 0x10, 0xcc, 0xf3, 0x90, 0x23, 0x3d, 0xa4, 0x06, 0x63, 0xe1, 0x3c, 0x2f, 0x75, 0x1b,
	0xab, 0x7f, 0x09, 0x7f, 0x3c, 0x93, 0x55, 0x9e, 0x40, 0x41, 0xc2, 0x17, 0x52, 0x56, 0xac, 0x6b,
	0x6a, 0x55, 0xd5, 0x78, 0x60, 0x32, 0x31, 0xb0, 0x40, 0x71, 0x96, 0x04, 0x26, 0xc3, 0x79, 0x70,
	0x6a, 0x89, 0xd9, 0xa8, 0xd4, 0x82, 0xa5, 0x98, 0xa9, 0x70, 0x06, 0x8b, 0xa2, 0x4c, 0xa2, 0xc2,
	0x74, 0x38, 0x55, 0x46, 0x21, 0xc2, 0x0e, 0x67, 0x86, 0x67, 0xa3, 0x52, 0x03, 0x66, 0x33, 0x4f,
	0x29, 0x57, 0x50, 0x48, 0xf4, 0xcd, 0x05, 0xa1, 0xab, 0x03, 0xbc, 0x73, 0xec, 0x07, 0x15, 0xb1,
	0x94, 0xc2, 0xbb, 0x24, 0x8a, 0x34, 0x88, 0xa9, 0xdb, 0x86, 0xb8, 0x60, 0xaa, 0x1b, 0x04, 0x0e,
	0x72, 0x87, 0x8a, 0xab, 0x5f, 0x5c, 0x73, 0x5b, 0xa7, 0xf6, 0x46, 0xc9, 0x2e, 0xa8, 0xac, 0x58,
	0xb3, 0xe1, 0x50, 0xf6, 0x0b, 0x63, 0xca, 0x49, 0xff, 0x8e, 0x47, 0xd2, 0x0a, 0x1e, 0x53, 0xce,
	0xe2, 0x9c, 0xc0, 0x0e, 0xae, 0x28, 0x17, 0x07, 0x00, 0xe4, 0xfb, 0x2c, 0x26, 0x9f, 0xbd, 0x8c,
	0x65, 0x9e, 0x51, 0x9e, 0x1c, 0x00, 0x8b, 0xae, 0x65, 0x1b, 0xba, 0xcd, 0xf2, 0x30, 0xce, 0xa5,
	0x1f, 0x80, 0x16, 0x37, 0x98, 0x7d, 0x9e, 0xd8, 0x7c, 0x9a, 0xe0, 0x8a, 0x1e, 0x00, 0x0e, 0xef,
	0x6d, 0xca, 0xed, 0x85, 0xc9, 0xec, 0x3b, 0x27, 0x95, 0x23, 0x94, 0x71, 0x15, 0xe8, 0x46, 0x2d,
	0x5c, 0x57, 0x88, 0x53, 0x22, 0x06, 0x9e, 0x60, 0xe4, 0x54, 0x6d, 0xa5, 0xaa, 0x6a, 0x2b, 0x6a,
	0x91, 0xc0, 0x18, 0xf7, 0x38, 0x09, 0x7e, 0x7f, 0xc6, 0x39, 0x8e, 0x64, 0x2b, 0xa2, 0xda, 0x09,
	0x24, 0x99, 0x45, 0x2a, 0x55, 0xdd, 0x50, 0x8d, 0x9a, 0x5c, 0x4f, 0x48, 0x66, 0x2a, 0x26, 0x4f,
	0x53, 0x3c, 0x2e, 0x4f, 0x66, 0x28, 0xd7, 0x30, 0xa6, 0x91, 0xb2, 0xe4, 0xab, 0x2e, 0xdc, 0xed,
	0x25, 0xd3, 0xf8, 0x73, 0xf9, 0x68, 0x55, 0x66, 0x79, 0xd7, 0x19, 0x80, 0xeb, 0x57, 0xe9, 0x00,
	0xb7, 0xf9, 0x01, 0x28, 0x5f, 0x12, 0x85, 0x5b, 0xcb, 0x00, 0x88, 0x90, 0xe8, 0x20, 0x52, 0x3f,
	0x39, 0x8c, 0x1e, 0x42, 0xea, 0xe7, 0x5f, 0xec, 0x3f, 0xcc, 0x47, 0xd8, 0x54, 0xae, 0x72, 0x84,
	0x3d, 0xc2, 0xbd, 0x54, 0x92, 0xd7, 0x1f, 0xc2, 0xe6, 0x10, 0x6d, 0xf7, 0x87, 0x05, 0x40, 0xa4,
	0xf1, 0x9f, 0xf1, 0xc8, 0xb6, 0x94, 0x43, 0x7e, 0x19, 0xe1, 0x5b, 0x48, 0xd1, 0xff, 0xfe, 0x65,
	0xc9, 0x97, 0xa5, 0xe8, 0xdc, 0xda, 0x2d, 0xff, 0x41, 0x9a, 0x28, 0x3d, 0x4f, 0xc5, 0x93, 0x42,
	0xa7, 0x95, 0xe3, 0x31, 0xf2, 0x2a, 0xd5, 0x78, 0xd9, 0x30, 0x91, 0xbd, 0xaf, 0x1c, 0x93, 0x1b,
	0x29, 0xf5, 0x0a, 0x31, 0x4d, 0xae, 0x31, 0x51, 0xee, 0x09, 0xe5, 0x68, 0x70, 0x75, 0xbc, 0xdf,
	0x14, 0x62, 0x8f, 0x2b, 0x71, 0xa3, 0x5c, 0x3c, 0xa5, 0x54, 0x24, 0x56, 0xcc, 0x08, 0xc5, 0xf3,
	0x4f, 0x96, 0xdc, 0xd9, 0x09, 0x1f, 0x11, 0x3a, 0xa4, 0xcc, 0x72, 0xa2, 0x98, 0x9e, 0x4c, 0x66,
	0x1b, 0xca, 0x91, 0x60, 0x1f, 0x89, 0x86, 0x7b, 0x6a, 0x7d, 0x8a, 0xdf, 0x17, 0x0e, 0x2b, 0x07,
	0x08, 0xb3, 0x88, 0x51, 0xaf, 0xae, 0x72, 0xd3, 0x3f, 0xac, 0x1c, 0x90, 0x23, 0x1c, 0xff, 0x2b,
	0x8a, 0xf1, 0x53, 0x50, 0x66, 0x5a, 0x62, 0xa5, 0x64, 0x22, 0x58, 0xeb, 0xaf, 0x8a, 0x18, 0x5a,
	0xde, 0x7c, 0x9b, 0xcc, 0x7e, 0x68, 0x4c, 0x39, 0x50, 0x75, 0xda, 0xdd, 0x87, 0xe2, 0xc1, 0xac,
	0x8c, 0x72, 0x24, 0xfc, 0x13, 0x79, 0x2e, 0x2b, 0x4a, 0x6b, 0xef, 0x3a, 0x0d, 0x7f, 0x8f, 0x20,
	0xa4, 0x16, 0x9c, 0x7b, 0xae, 0xe9, 0x35, 0xfd, 0x57, 0x92, 0x42, 0x72, 0x5e, 0x7c, 0x95, 0x1a,
	0x26, 0xb8, 0x22, 0xfa, 0x54, 0x0e, 0x9c, 0x14, 0xc2, 0x84, 0xa4, 0x5c, 0xc3, 0x11, 0xcf, 0x85,
	0x3d, 0xa2, 0x9c, 0xe8, 0x13, 0xb5, 0x56, 0x7b, 0xaf, 0x93, 0x73, 0xba, 0xdd, 0x86, 0x0b, 0xd3,
	0x7c, 0x48, 0x8d, 0xe0, 0x05, 0x35, 0x7c, 0x49, 0x2c, 0xfb, 0xe1, 0x31, 0xbf, 0x80, 0x72, 0x6b,
	0x53, 0x7c, 0xd6, 0x4b, 0x3c, 0xc1, 0x14, 0x25, 0x04, 0x95, 0x39, 0xa5, 0x1c, 0x8b, 0xd3, 0xad,
	0x76, 0xaf, 0x79, 0x0f, 0xc6, 0xb8, 0x1d, 0xc4, 0x19, 0xb9, 0xb6, 0xd3, 0xdc, 0xdc, 0x91, 0x8f,
	0x4e, 0x25, 0x38, 0xad, 0x4e, 0x47, 0xae, 0xc1, 0xc7, 0xe9, 0xd5, 0xb6, 0xbb, 0xe7, 0xb4, 0x5d,
	0x98, 0x0c, 0x85, 0xed, 0x27, 0x69, 0xb8, 0x9d, 0x8e, 0xb9, 0xd3, 0xda, 0xf3, 0x5f, 0x81, 0x4a,
	0x30, 0x79, 0xed, 0xa7, 0xb3, 0x6f, 0x01, 0x65, 0xae, 0x60, 0x33, 0x19, 0x8d, 0xca, 0x29, 0x3e,
	0x17, 0x2b, 0x41, 0x0a, 0x5e, 0x5d, 0xba, 0xa0, 0x9c, 0x4b, 0x72, 0xcc, 0x92, 0xbe, 0x16, 0xae,
	0x8c, 0x8d, 0xf1, 0x51, 0x33, 0x89, 0x20, 0x4c, 0xcd, 0x95, 0x49, 0x88, 0x19, 0xe7, 0xee, 0x01,
	0xcd, 0xc5, 0x9f, 0x47, 0x4d, 0x70, 0x17, 0x33, 0x20, 0x13, 0x1f, 0x32, 0xc9, 0xdd, 0x32, 0x9a,
	0x07, 0x77, 0x34, 0x44, 0xee, 0x3a, 0x0c, 0xc8, 0x42, 0x22, 0xa6, 0x07, 0x4a, 0x51, 0x51, 0x8d,
	0x15, 0x62, 0xc9, 0xc1, 0x7d, 0x40, 0x16, 0x3e, 0x64, 0x76, 0xa0, 0x3e, 0x2a, 0x94, 0x51, 0x1e,
	0xf1, 0x1d, 0xc0, 0x32, 0x11, 0x88, 0xf0, 0x76, 0xae, 0xc2, 0x43, 0xa4, 0x01, 0xe5, 0x84, 0xa0,
	0x83, 0xdc, 0x37, 0x27, 0x41, 0x65, 0xba, 0x66, 0x97, 0x29, 0xab, 0xab, 0xf9, 0xbc, 0x7c, 0x5c,
	0xe3, 0x10, 0x5a, 0x27, 0xd3, 0xe0, 0x08, 0x83, 0x47, 0xb6, 0x87, 0x87, 0xd4, 0xc9, 0x77, 0x0c,
	0x47, 0x30, 0xc8, 0x32, 0x15, 0x07, 0xe2, 0xe4, 0x6c, 0x16, 0xe6, 0x30, 0xc8, 0x46, 0x89, 0xb0,
	0x75, 0xea, 0x4f, 0x78, 0x01, 0x30, 0x49, 0x82, 0x26, 0xe4, 0x43, 0xc0, 0x51, 0xcc, 0x50, 0xc4,
	0x25, 0xff, 0xfe, 0xe2, 0x57, 0x86, 0xc7, 0x85, 0x49, 0x8c, 0xef, 0x61, 0x0a, 0x94, 0x94, 0xf3,
	0x75, 0x22, 0x36, 0xb7, 0x99, 0x56, 0x83, 0x63, 0xa8, 0x16, 0x57, 0xf5, 0xb2, 0x58, 0xc3, 0xab,
	0x17, 0x74, 0x1e, 0xe5, 0x1e, 0x47, 0xad, 0x73, 0x5d, 0x2b, 0xa9, 0x7c, 0x92, 0x2c, 0x31, 0x27,
	0xb0, 0x8c, 0x72, 0x65, 0x9b, 0x54, 0x0d, 0xca, 0x2c, 0x1f, 0x74, 0x72, 0x88, 0x79, 0x49, 0xc4,
	0x29, 0x3e, 0x22, 0xe1, 0x46, 0xce, 0xab, 0x7f, 0x7a, 0x88, 0x7e, 0x44, 0x88, 0xf7, 0x08, 0x96,
	0xde, 0x36, 0x82, 0x56, 0x3a, 0x93, 0x79, 0x56, 0x79, 0x6a, 0x40, 0xfa, 0xa2, 0xc1, 0xe7, 0x33,
	0x72, 0x17, 0xd1, 0x97, 0xe6, 0x2c, 0x0f, 0x18, 0x07, 0xb5, 0x7b, 0x74, 0x99, 0xe9, 0x1c, 0x8f,
	0xe3, 0x06, 0x00, 0x37, 0xd4, 0x92, 0xad, 0xcb, 0xd5, 0x96, 0x47, 0x79, 0xa8, 0x3a, 0xd4, 0x8e,
	0xea, 0xa6, 0x65, 0xe8, 0xac, 0x08, 0xe7, 0x87, 0x94, 0x1c, 0x5b, 0x3c, 0x79, 0x6c, 0x48, 0x8d,
	0xfc, 0x95, 0x11, 0xb1, 0x4a, 0xe2, 0x1f, 0xb1, 0xb8, 0x30, 0xc4, 0x92, 0xfd, 0x80, 0xe1, 0xe2,
	0x90, 0x46, 0x92, 0x5b, 0xf5, 0x97, 0x86, 0x74, 0xbd, 0x70, 0x29, 0xf4, 0xf1, 0x21, 0x2e, 0xcd,
	0xa8, 0xe4, 0x84, 0x3e, 0x2e, 0x0f, 0xc9, 0xa8, 0x48, 0x36, 0x68, 0x99, 0xab, 0xe2, 0x0a, 0x8f,
	0x50, 0x07, 0xd5, 0x90, 0x5b, 0x86, 0xa6, 0x57, 0x72, 0x7a, 0x3d, 0x67, 0x31, 0x78, 0x62, 0x18,
	0x34, 0xbe, 0xab, 0x75, 0x75, 0x48, 0x8b, 0x91, 0x75, 0x6a, 0xf9, 0x2b, 0x30, 0x4f, 0x0e, 0x91,
	0x90, 0x47, 0xa4, 0xa2, 0x1a, 0x4f, 0xf1, 0x48, 0x71, 0x00, 0xc8, 0x7f, 0xde, 0x4e, 0xe0, 0xb2,
	0x43, 0x70, 0xfe, 0x59, 0x1f, 0x81, 0x7b, 0x1a, 0x33, 0x13, 0x51, 0xd5, 0x02, 0x35, 0xad, 0x20,
	0x2a, 0xe7, 0x13, 0xd4, 0x67, 0x06, 0xfa, 0xc9, 0x50, 0xb8, 0x67, 0x31, 0x17, 0x28, 0x20, 0x51,
	0xd1, 0x9e, 0x1b, 0x88, 0x8a, 0x0a, 0xf6, 0x72, 0x3e, 0x0f, 0xc1, 0x8b, 0x8b, 0x4e, 0xaa, 0xeb,
	0xab, 0x34, 0x4f, 0x74, 0xb8, 0xc6, 0xe7, 0x21, 0x83, 0x54, 0x5c, 0xa9, 0x5a, 0x35, 0xd1, 0x85,
	0xfc, 0x9e, 0x39, 0x9f, 0x79, 0x4e, 0xc9, 0x0e, 0x6f, 0x3a, 0xf9, 0x42, 0x93, 0xe8, 0x49, 0xd7,
	0x60, 0x61, 0x24, 0xfc, 0x3c, 0x2c, 0x8e, 0x84, 0x5f, 0x84, 0xa5, 0x4c, 0x16, 0x33, 0x25, 0x19,
	0x34, 0x56, 0xd4, 0xf5, 0x60, 0x53, 0x31, 0x9f, 0x87, 0x17, 0x67, 0xb2, 0xef, 0x9d, 0x52, 0x0e,
	0x05, 0x21, 0x42, 0xf0, 0x52, 0x6c, 0xf4, 0x7f, 0x24, 0xa2, 0x49, 0x90, 0xfd, 0x08, 0xed, 0xa4,
	0x92, 0x89, 0x31, 0xb4, 0x36, 0x0f, 0x33, 0xc4, 0xf1, 0xaa, 0x18, 0x3d, 0xef, 0x3c, 0x64, 0xfe,
	0xbb, 0xa6, 0xc9, 0x24, 0x56, 0xeb, 0x81, 0xdb, 0x86, 0xc9, 0x54, 0xd1, 0x96, 0xeb, 0xec, 0xc2,
	0x14, 0x9f, 0x05, 0xa4, 0xc8, 0x6a, 0xe7, 0x61, 0x73, 0x13, 0xa6, 0x53, 0x49, 0x44, 0xd0, 0x34,
	0xc3, 0xa3, 0xff, 0x18, 0xd9, 0xec, 0xdd, 0x0d, 0xfe, 0xc3, 0x6c, 0x2a, 0x91, 0xe6, 0x75, 0x1f,
	0xc2, 0x01, 0xa4, 0x78, 0xf1, 0x1c, 0x6c, 0xb2, 0xe6, 0x7e, 0xc4, 0x76, 0x30, 0x55, 0x43, 0xab,
	0xed, 0x78, 0x4d, 0xaf, 0xb9, 0x2d, 0x47, 0xe5, 0x18, 0x4b, 0xdd, 0xec, 0x7a, 0xf7, 0xbd, 0xee,
	0x43, 0xd3, 0x6b, 0x6e, 0x37, 0x5c, 0x38, 0x9c, 0x4a, 0x5b, 0xe9, 0x35, 0xba, 0x1e, 0x0f, 0x59,
	0xc5, 0x66, 0x29, 0x9a, 0x56, 0x40, 0x60, 0x8e, 0x47, 0x7d, 0x31, 0xfe, 0xda, 0xf2, 0xf2, 0xb2,
	0x9f, 0x2f, 0xa4, 0x74, 0xc5, 0x99, 0x32, 0xe1, 0x51, 0x3e, 0xbe, 0xa0, 0xf2, 0x1a, 0x4e, 0xf3,
	0x1e, 0x64, 0x52, 0x3a, 0x8b, 0x06, 0xc6, 0xc7, 0x52, 0xa5, 0x92, 0x86, 0x7b, 0xdf, 0x6d, 0x0a,
	0x75, 0x1f, 0x4f, 0x95, 0x2a, 0x93, 0x72, 0xde, 0x09, 0x1e, 0x5a, 0xc6, 0x78, 0x86, 0xeb, 0x34,
	0xaa, 0xab, 0x55, 0x38, 0x99, 0xca, 0xd2, 0x74, 0x37, 0xdb, 0x6e, 0xb7, 0xe0, 0x35, 0x5c, 0x38,
	0x95, 0x6a, 0x8c, 0x52, 0x6b, 0xd7, 0x85, 0xd3, 0xd9, 0xb7, 0x8e, 0x29, 0x87, 0x44, 0x58, 0x5b,
	0x74, 0x43, 0x73, 0x8d, 0xfe, 0x0f, 0xcc, 0xf5, 0x8c, 0x72, 0x32, 0x46, 0x2e, 0x78, 0xed, 0x4e,
	0xb7, 0xea, 0x74, 0x3a, 0xd2, 0x62, 0x63, 0xbc, 0x3b, 0x3d, 0xde, 0xd0, 0xe3, 0x61, 0x38, 0x1d,
	0xd0, 0x0d, 0x77, 0xaf, 0xd7, 0x95, 0x36, 0x33, 0x11, 0x86, 0xd3, 0x21, 0xd3, 0x69, 0x6e, 0xb5,
	0x76, 0x61, 0x32, 0xfb, 0xf1, 0x31, 0xe5, 0x80, 0xff, 0x32, 0x79, 0x6f, 0x97, 0xcf, 0x6c, 0xc2,
	0x3f, 0x81, 0x2c, 0x31, 0xda, 0x72, 0x6f, 0x77, 0x0f, 0xc6, 0xe2, 0xb4, 0xbc, 0xd3, 0xd9, 0xf1,
	0x1f, 0x2d, 0x0d, 0x69, 0xf2, 0x69, 0x63, 0xf1, 0x06, 0x70, 0x9f, 0x28, 0xdf, 0x55, 0x97, 0xd3,
	0x9a, 0x3e, 0x55, 0x7e, 0xec, 0x59, 0xf4, 0x93, 0x3e, 0x91, 0xd7, 0xd5, 0xbb, 0xef, 0x4a, 0xde,
	0x74, 0x3c, 0x1b, 0x5b, 0x52, 0xc5, 0xa9, 0xc3, 0x48, 0xe6, 0x0f, 0x9c, 0x7b, 0x6e, 0x53, 0xb2,
	0x66, 0xb3, 0xef, 0x39, 0xac, 0x1c, 0x62, 0x55, 0x8d, 0xdc, 0x0f, 0x1e, 0x39, 0x3e, 0xa1, 0x1c,
	0x8d, 0xfe, 0x8f, 0xbc, 0x20, 0x1d, 0x23, 0x6b, 0x3b, 0x4e, 0x57, 0x9e, 0x35, 0x8a, 0x91, 0x7d,
	0x3b, 0x1a, 0x4f, 0xe1, 0xc5, 0x6c, 0x65, 0x82, 0xcb, 0x1e, 0x23, 0xf7, 0x5f, 0x9c, 0x16, 0xef,
	0xdc, 0xc6, 0x93, 0xf8, 0xf5, 0x3d, 0xae, 0x40, 0x8c, 0x5e, 0x71, 0xf6, 0x60, 0x3a, 0x95, 0x93,
	0xb6, 0xe3, 0xb4, 0x9d, 0x4d, 0xf9, 0x14, 0x74, 0x92, 0x27, 0x7a, 0x80, 0xd1, 0x6a, 0xed, 0xc2,
	0x2c, 0x6f, 0xfd, 0x18, 0x4f, 0xed, 0x74, 0xbc, 0xed, 0xa6, 0x78, 0x10, 0xfb, 0x00, 0xef, 0x1b,
	0x71, 0x11, 0x7a, 0x77, 0x77, 0xbd, 0xae, 0x2b, 0xb8, 0x4a, 0x4a, 0x40, 0x69, 0x50, 0x07, 0x53,
	0x75, 0xad, 0x38, 0x5e, 0x43, 0x2e, 0x78, 0xc4, 0xc8, 0x25, 0xa7, 0xb9, 0x75, 0xb7, 0xd5, 0xba,
	0x27, 0x4f, 0x50, 0xc4, 0x58, 0x85, 0xb6, 0xe7, 0x36, 0xb7, 0xe4, 0x71, 0xa1, 0x78, 0xad, 0xda,
	0xde, 0xae, 0x2b, 0x3a, 0xee, 0x5c, 0x4a, 0x72, 0xee, 0x1f, 0xb5, 0xb6, 0xeb, 0x74, 0xb9, 0x43,
	0x48, 0x16, 0xc6, 0x99, 0xcb, 0x2d, 0xaf, 0x29, 0xcf, 0x57, 0xa6, 0x58, 0xe4, 0x05, 0xaf, 0x2b,
	0x7d, 0x41, 0x8a, 0x95, 0xf7, 0x3a, 0xbb, 0x5e, 0xa7, 0x03, 0xc7, 0xd2, 0x6a, 0x74, 0x9d, 0x5d,
	0xf9, 0x2c, 0xfc, 0x71, 0x54, 0x18, 0xda, 0xbc, 0xef, 0x75, 0x5d, 0x38, 0xc1, 0x5d, 0x5b, 0x8a,
	0xa9, 0x76, 0xbb, 0x6e, 0x53, 0x74, 0x32, 0x11, 0x63, 0xa7, 0xf8, 0x6b, 0x8e, 0xd7, 0xd5, 0x9c,
	0xbd, 0xae, 0xe3, 0x35, 0xe1, 0x14, 0xf7, 0x26, 0xf1, 0x86, 0xe8, 0xb6, 0xda, 0xce, 0xb6, 0x0b,
	0xa7, 0x53, 0x79, 0x37, 0xbc, 0x07, 0xbd, 0x86, 0xd7, 0xdc, 0x6d, 0xbd, 0x96, 0xbb, 0xe4, 0x47,
	0x52, 0x82, 0xbd, 0x7e, 0xc7, 0x0d, 0x98, 0x67, 0x52, 0x2d, 0x58, 0x74, 0x9b, 0x6d, 0x57, 0x9e,
	0x92, 0x88, 0xd3, 0x9d, 0x5d, 0x37, 0xef, 0x39, 0x8d, 0xd6, 0x36, 0x9c, 0x4b, 0x31, 0xf3, 0x6e,
	0xa7, 0xdb, 0x6e, 0x3d, 0x64, 0x7b, 0x9b, 0xf0, 0x68, 0x2a, 0x47, 0xf1, 0x0b, 0xce, 0xa7, 0x12,
	0x91, 0x66, 0xd7, 0x6d, 0xcb, 0xc7, 0xe0, 0x1f, 0x4b, 0x19, 0x4c, 0xa1, 0xd5, 0xda, 0x82, 0x0b,
	0xa9, 0xd6, 0x90, 0x6f, 0x99, 0x17, 0x7b, 0xde, 0x96, 0x0b, 0x17, 0x53, 0x39, 0x72, 0x95, 0x3c,
	0x5c, 0xf5, 0xb6, 0xdc, 0x16, 0x5c, 0x4a, 0x25, 0xe5, 0x16, 0x5b, 0x71, 0x9a, 0xce, 0xb6, 0xdb,
	0x86, 0xc7, 0xf9, 0x88, 0x10, 0xb7, 0xf9, 0xfb, 0x4e, 0xd7, 0x69, 0x9b, 0x0f, 0xbc, 0xee, 0xe6,
	0x0e, 0x5c, 0x4e, 0xd5, 0xa1, 0xd0, 0x6a, 0x6f, 0xbb, 0x70, 0x25, 0x65, 0x38, 0x5c, 0x1e, 0xb5,
	0xe9, 0xed, 0xc2, 0x13, 0x7c, 0xe0, 0x8b, 0xb1, 0x0c, 0xb7, 0xdb, 0x6b, 0x37, 0x2b, 0x8e, 0xd7,
	0x14, 0x83, 0xec, 0xd5, 0x94, 0xb4, 0xd2, 0x8f, 0x0a, 0xaf, 0xf1, 0x64, 0x3a, 0xb5, 0x60, 0x72,
	0x2d, 0x08, 0xc0, 0x53, 0xa9, 0xe6, 0x2f, 0x38, 0x9d, 0x1d, 0x6e, 0x3a, 0xd9, 0x54, 0x55, 0xc8,
	0x0b, 0x9b, 0x3b, 0x4e, 0x73, 0x5b, 0x76, 0xd1, 0xa7, 0x53, 0x22, 0x07, 0x83, 0x2a, 0x3c, 0x93,
	0x62, 0x19, 0xee, 0xe6, 0x8e, 0xc3, 0x2b, 0xfa, 0x6c, 0xca, 0xa6, 0x82, 0x54, 0xb2, 0xbd, 0x9e,
	0x4b, 0x17, 0xda, 0xdc, 0x6a, 0xb8, 0x9d, 0x8e, 0x64, 0xbf, 0x3c, 0xa5, 0xfc, 0xb2, 0xeb, 0x6c,
	0xb9, 0xed, 0xbb, 0x2d, 0xa7, 0xbd, 0x05, 0xd7, 0x52, 0xdc, 0xf5, 0xde, 0xbd, 0x56, 0x73, 0x5b,
	0x2c, 0xe1, 0xc0, 0x7c, 0x8a, 0xeb, 0x67, 0x2d, 0xdc, 0xe5, 0x02, 0x0f, 0xed, 0x07, 0x16, 0x6c,
	0xef, 0x09, 0xd0, 0x62, 0xca, 0x99, 0xe8, 0x7b, 0x6e, 0xd3, 0xa6, 0xb0, 0x94, 0xaa, 0x16, 0x73,
	0x1f, 0x48, 0xff, 0x2c, 0x06, 0xc8, 0xeb, 0x7c, 0xfa, 0x83, 0x38, 0x6f, 0x39, 0xe2, 0x6b, 0xad,
	0x5e, 0xbb, 0x0b, 0x37, 0x52, 0x3e, 0x80, 0xdb, 0x80, 0x34, 0xba, 0x9b, 0x69, 0xd9, 0xe5, 0x03,
	0xf6, 0xe6, 0x3d, 0xaf, 0x09, 0xb7, 0x52, 0x56, 0x55, 0x6d, 0x38, 0xcd, 0x2e, 0xdc, 0x4e, 0xf7,
	0x41, 0x61, 0xdf, 0xaf, 0x48, 0x49, 0x63, 0x79, 0xbb, 0xae, 0xfc, 0x9e, 0x7e, 0xd0, 0x86, 0xaf,
	0xcc, 0xaa, 0xca, 0xa1, 0xa0, 0xd9, 0xc4, 0x60, 0x75, 0x4a, 0x39, 0x16, 0xfd, 0x1f, 0x44, 0xab,
	0xe2, 0xb8, 0x70, 0x8c, 0x51, 0xeb, 0x39, 0xcd, 0xbb, 0x4e, 0x0b, 0xc6, 0xb2, 0x3f, 0x3e, 0xa5,
	0xcc, 0x71, 0xc5, 0xe5, 0xbd, 0xce, 0x5e, 0xc3, 0x91, 0xeb, 0x94, 0x7c, 0x44, 0x8d, 0x93, 0xfa,
	0x39, 0xf1, 0xb1, 0x33, 0xc1, 0xb3, 0xda, 0xce, 0x96, 0x0b, 0x63, 0x62, 0xeb, 0x04, 0x63, 0xc9,
	0x16, 0x86, 0x71, 0xee, 0xe7, 0x92, 0x00, 0xf9, 0x19, 0x05, 0xb3, 0xb7, 0xbb, 0x2b, 0xc2, 0x0d,
	0x24, 0x77, 0xd9, 0xfb, 0x26, 0x31, 0x96, 0x18, 0x0d, 0xe4, 0xd1, 0xc3, 0x14, 0xab, 0xd5, 0xde,
	0x93, 0x47, 0x0f, 0xd3, 0x9c, 0x5e, 0xb3, 0x0b, 0x0b, 0x98, 0xb4, 0x22, 0x5a, 0xd2, 0x64, 0x2f,
	0x58, 0xe4, 0x5d, 0x36, 0x09, 0xe0, 0x6a, 0xcb, 0x39, 0x2d, 0x58, 0xc2, 0x54, 0x54, 0x79, 0x28,
	0x5a, 0xfa, 0x3a, 0xb7, 0xb3, 0x24, 0x4f, 0x6f, 0x77, 0x77, 0xdc, 0xb6, 0xe0, 0xdf, 0xe0, 0xdd,
	0x27, 0xc9, 0xcf, 0x3b, 0x0f, 0x73, 0x3d, 0x6e, 0xcc, 0x70, 0x13, 0xd3, 0xd2, 0x9a, 0xeb, 0xde,
	0x6b, 0x04, 0x88, 0x5b, 0x7c, 0x0a, 0x99, 0x2a, 0xbc, 0xd5, 0xec, 0xee, 0x84, 0x90, 0xdb, 0x98,
	0x0c, 0x65, 0xef, 0x79, 0xd7, 0xe7, 0xbf, 0x02, 0xe3, 0x47, 0xfa, 0xc2, 0x2b, 0x31, 0x19, 0x45,
	0x11, 0x1a, 0xef, 0xc4, 0xdf, 0x80, 0x49, 0x10, 0xef, 0x4d, 0xaf, 0xc2, 0xd4, 0x67, 0x76, 0xbd,
	0xcd, 0x7b, 0x6e, 0x1b, 0xbe, 0x11, 0x63, 0x06, 0xcf, 0x9c, 0x7f, 0x13, 0x56, 0x76, 0x68, 0xfc,
	0xf0, 0xcd, 0xd9, 0x57, 0x2a, 0x07, 0xf3, 0x6e, 0xc3, 0xbb, 0xef, 0xb6, 0x85, 0xb1, 0x9e, 0x54,
	0x32, 0x91, 0xbf, 0x7d, 0x43, 0x3d, 0xae, 0x40, 0x94, 0x2e, 0x82, 0x90, 0xb1, 0xec, 0x1b, 0xc6,
	0x95, 0x8c, 0xff, 0x6d, 0xd4, 0x5e, 0x73, 0x33, 0x9c, 0xfd, 0x9d, 0x0d, 0xbe, 0xb0, 0x16, 0xa5,
	0x06, 0xb1, 0xde, 0x85, 0xe0, 0x0b, 0x6a, 0x31, 0xa6, 0xb6, 0xe3, 0x36, 0x4d, 0x6f, 0x63, 0x27,
	0xb0, 0xfc, 0x34, 0x62, 0x63, 0xc7, 0xab, 0x09, 0x80, 0x78, 0x00, 0x1f, 0xcd, 0xa2, 0xe7, 0x34,
	0xcd, 0x5e, 0x8b, 0x63, 0x26, 0x06, 0x14, 0xb3, 0xec, 0x35, 0xb7, 0x6b, 0x4e, 0x33, 0x97, 0x93,
	0x4b, 0xc1, 0x18, 0xa2, 0xe7, 0x2e, 0x7b, 0xb9, 0x1c, 0x4c, 0x65, 0x2e, 0x07, 0x5f, 0x48, 0x8d,
	0xf1, 0x4b, 0x3d, 0xa7, 0xd9, 0xf5, 0x02, 0xd4, 0x74, 0xb6, 0xa8, 0x1c, 0xe0, 0x5e, 0xab, 0xd2,
	0xda, 0x72, 0xe7, 0xc5, 0x96, 0x44, 0xf0, 0x27, 0x12, 0xb8, 0xf7, 0x69, 0x85, 0xb6, 0xeb, 0xca,
	0xc0, 0xbd, 0x4f, 0xd3, 0x5a, 0x7c, 0xe2, 0x90, 0x75, 0x94, 0xb9, 0x88, 0x7b, 0x16, 0x7a, 0x3c,
	0xad, 0x1c, 0x4f, 0x90, 0x22, 0x13, 0xe9, 0x14, 0xc7, 0x7d, 0x00, 0x63, 0x5c, 0xf5, 0x49, 0x86,
	0xbd, 0xb7, 0x2d, 0x5c, 0xca, 0x78, 0xf6, 0xfb, 0xc7, 0x94, 0x83, 0xda, 0x8e, 0xd3, 0x6c, 0xba,
	0x0d, 0x91, 0xff, 0x31, 0x65, 0x2e, 0xf2, 0xb7, 0xae, 0x36, 0x1a, 0xfe, 0x15, 0x84, 0x08, 0x91,
	0xb6, 0x3a, 0xfe, 0xa9, 0xff, 0x28, 0xb2, 0xb9, 0xd5, 0x6e, 0x79, 0x5b, 0x72, 0xc3, 0x21, 0xca,
	0x28, 0xf5, 0x9c, 0x07, 0xae, 0xe7, 0x5f, 0x42, 0x88, 0xd0, 0x73, 0xaf, 0xdf, 0x71, 0x9a, 0x72,
	0x72, 0x1e, 0x25, 0xeb, 0xbc, 0x1f, 0xc3, 0x54, 0xf6, 0xfd, 0x93, 0x4a, 0x46, 0x0c, 0x3b, 0xda,
	0x8e, 0xd3, 0x68, 0xb8, 0x4d, 0xdf, 0x01, 0xf3, 0xb9, 0x5d, 0x8a, 0x1a, 0x6c, 0x2a, 0x3d, 0xa1,
	0x5c, 0x42, 0x98, 0x22, 0xe4, 0x0f, 0xe3, 0xfe, 0x0e, 0xb8, 0x99, 0xa7, 0x94, 0x2b, 0x58, 0x26,
	0xad, 0x6e, 0x12, 0xfa, 0xfc, 0x00, 0x28, 0x79, 0xdd, 0xde, 0x9d, 0x9e, 0xd3, 0xf0, 0xba, 0x0f,
	0xc9, 0xeb, 0x7c, 0xe8, 0x76, 0xe6, 0x19, 0xe5, 0xc9, 0x41, 0xb9, 0xa6, 0xd0, 0x3b, 0xc3, 0x64,
	0xd8, 0x33, 0x7b, 0x5e, 0x37, 0x84, 0x7a, 0x03, 0x32, 0xe6, 0xb1, 0x8f, 0xb9, 0xd9, 0x6a, 0x34,
	0x64, 0x05, 0xc5, 0xcf, 0x0e, 0xbc, 0x36, 0xf3, 0x72, 0xe5, 0xe9, 0xa1, 0xe8, 0xa0, 0x9a, 0x7e,
	0x82, 0x7b, 0x03, 0x12, 0xa8, 0xc1, 0xe7, 0x17, 0x93, 0x09, 0x1a, 0xbc, 0xaf, 0x21, 0x09, 0xe4,
	0x52, 0x01, 0xb7, 0xdf, 0x86, 0x38, 0x1f, 0x73, 0x11, 0x95, 0xa2, 0xd9, 0x73, 0x1a, 0x8d, 0x87,
	0xa6, 0xdb, 0x70, 0x37, 0xbb, 0xf0, 0x91, 0xb1, 0xcc, 0x15, 0xe5, 0x02, 0x82, 0xe3, 0x1e, 0xae,
	0xef, 0x91, 0x3e, 0x3a, 0x96, 0xb9, 0xac, 0x3c, 0x86, 0xc0, 0x0a, 0x5e, 0xd3, 0xeb, 0xec, 0xf8,
	0x03, 0xce, 0x17, 0x67, 0xb2, 0xf3, 0xca, 0x21, 0x11, 0xe6, 0xb0, 0xde, 0xae, 0x30, 0x96, 0x23,
	0x8a, 0x22, 0xfe, 0x07, 0x5d, 0xe4, 0xa8, 0x72, 0x58, 0xdd, 0xda, 0xb2, 0x5a, 0x5d, 0xa7, 0x21,
	0x43, 0xa9, 0xb1, 0xec, 0xd7, 0xc7, 0x95, 0x99, 0x42, 0x4f, 0xfa, 0x28, 0x50, 0x0e, 0xf9, 0x3f,
	0xeb, 0xac, 0x27, 0x0c, 0xff, 0x84, 0x72, 0x34, 0xa0, 0x14, 0x5b, 0x8d, 0x2d, 0x75, 0x6f, 0xaf,
	0xe1, 0xca, 0x89, 0x7e, 0x40, 0xae, 0xb4, 0xee, 0x3a, 0xad, 0x52, 0xcf, 0x79, 0xbe, 0x07, 0xe3,
	0x62, 0x27, 0xa9, 0x17, 0x78, 0x1e, 0x61, 0xd2, 0xea, 0xde, 0x5e, 0xcb, 0x6b, 0x76, 0xc5, 0x84,
	0x73, 0x42, 0x2c, 0xc4, 0xfb, 0xfc, 0x92, 0xd7, 0xe1, 0xe1, 0xb4, 0xe5, 0x76, 0xba, 0xea, 0xe6,
	0x8e, 0x77, 0xdf, 0x1f, 0x80, 0x03, 0x36, 0xef, 0xa9, 0x3c, 0xc2, 0x34, 0xdc, 0x8e, 0xdb, 0x85,
	0x29, 0xde, 0x03, 0x03, 0xd6, 0xc6, 0x0e, 0x2f, 0xd0, 0x93, 0x63, 0x6f, 0x28, 0x6f, 0x6c, 0x6c,
	0x38, 0x20, 0xf6, 0xdd, 0x7a, 0xc1, 0x32, 0xcf, 0x66, 0xb9, 0xb5, 0xed, 0x35, 0xf3, 0xce, 0xc3,
	0x0e, 0x28, 0xd1, 0x2a, 0x89, 0xf5, 0x9b, 0x7c, 0xbb, 0xb5, 0x07, 0x07, 0xa3, 0xa2, 0x33, 0xf7,
	0x81, 0x9c, 0x08, 0xf4, 0xf9, 0xe2, 0x80, 0x7e, 0x42, 0x80, 0x3e, 0xf7, 0x70, 0x34, 0xd3, 0xea,
	0x6a, 0xd5, 0x74, 0x9d, 0x4e, 0xab, 0x29, 0x6f, 0xee, 0x45, 0xa4, 0x08, 0xe3, 0xdf, 0xb9, 0xec,
	0xa7, 0xc7, 0x95, 0x23, 0x3c, 0x29, 0x79, 0xa1, 0xeb, 0x36, 0xb7, 0x82, 0xc8, 0x2a, 0x4e, 0x09,
	0xda, 0xe0, 0xac, 0x72, 0x2a, 0xc1, 0x08, 0x94, 0x23, 0xef, 0x61, 0x24, 0x99, 0xf2, 0xb3, 0x51,
	0xe2, 0xbb, 0x30, 0x09, 0x56, 0x7f, 0xee, 0x3f, 0x81, 0x14, 0x27, 0xc6, 0xaf, 0x49, 0xde, 0x46,
	0x09, 0x86, 0x9c, 0xf2, 0x1a, 0xad, 0x06, 0x8f, 0x84, 0xd2, 0xd2, 0xf0, 0xbf, 0xa6, 0x73, 0xdf,
	0x85, 0x69, 0x3e, 0xc0, 0x0c, 0x10, 0x55, 0xb6, 0xa3, 0x58, 0x28, 0x48, 0x20, 0x82, 0xe6, 0x9c,
	0x45, 0x52, 0x27, 0x5b, 0xf5, 0x92, 0x72, 0x3e, 0x81, 0x28, 0x36, 0x5a, 0x77, 0x9d, 0x7e, 0xaf,
	0x00, 0x25, 0xfb, 0x6a, 0xb1, 0x00, 0xd4, 0x94, 0x3d, 0x2c, 0xd0, 0x6c, 0x9c, 0x12, 0x68, 0xf6,
	0xb4, 0xf8, 0x04, 0x61, 0x94, 0x21, 0x34, 0x24, 0x77, 0x93, 0x13, 0x1c, 0x53, 0x2c, 0x10, 0x8d,
	0x67, 0xdf, 0x3c, 0xa6, 0xcc, 0x89, 0x55, 0xb8, 0x8a, 0xbb, 0x7b, 0xd7, 0x0f, 0x10, 0xf8, 0x48,
	0x10, 0x27, 0xd5, 0x2b, 0xee, 0x2e, 0xbc, 0x4c, 0xdc, 0x54, 0x4a, 0x30, 0x36, 0xf8, 0xe4, 0xa9,
	0xcc, 0x03, 0x63, 0x71, 0x39, 0x28, 0xc1, 0x5d, 0xf5, 0x36, 0xdd, 0x52, 0xcf, 0x13, 0x20, 0xd9,
	0x84, 0x49, 0x44, 0xc8, 0x9d, 0xc8, 0xfe, 0x00, 0x17, 0x45, 0x7c, 0x3f, 0xc1, 0x20, 0x55, 0x3b,
	0xbc, 0xcf, 0x97, 0x20, 0x05, 0x63, 0x03, 0x17, 0x32, 0xc1, 0x21, 0xeb, 0x55, 0xf9, 0x6d, 0xa1,
	0x24, 0xc3, 0x7f, 0x46, 0x7a, 0x1c, 0xe3, 0xf9, 0x1f, 0x92, 0x91, 0xa7, 0xc7, 0x12, 0xbc, 0xe8,
	0x77, 0x1c, 0xb2, 0x77, 0x95, 0xe3, 0x32, 0x30, 0x50, 0x3b, 0x1d, 0xaf, 0xd3, 0xd5, 0xf7, 0xfa,
	0xda, 0x92, 0xf4, 0x80, 0x12, 0x34, 0xc7, 0x49, 0x25, 0x93, 0x60, 0x98, 0x6e, 0x57, 0xda, 0x78,
	0x82, 0xae, 0x39, 0xcd, 0xcd, 0x06, 0x1f, 0xbd, 0xbf, 0x38, 0xae, 0x28, 0x62, 0x51, 0xa8, 0xd8,
	0x6e, 0xf5, 0xf6, 0xb8, 0x97, 0xe8, 0xff, 0x8b, 0x9c, 0x7f, 0x88, 0x10, 0xf3, 0x8e, 0xd7, 0x78,
	0x08, 0x63, 0x5c, 0xfa, 0x08, 0xb5, 0xd8, 0x6e, 0x3d, 0xe8, 0xee, 0x70, 0x2b, 0x93, 0x7e, 0x71,
	0x9c, 0x77, 0x83, 0x14, 0x3f, 0x5c, 0x87, 0x9e, 0x48, 0x94, 0x64, 0xf2, 0x09, 0x95, 0x18, 0xc9,
	0xa3, 0x44, 0x39, 0xdb, 0x17, 0xa7, 0x22, 0xd2, 0x59, 0xb9, 0x9b, 0x3b, 0xf2, 0x9c, 0x51, 0x84,
	0x15, 0xce, 0xbb, 0x66, 0x12, 0x69, 0x22, 0x9d, 0x60, 0x36, 0x51, 0x1f, 0xf9, 0x6d, 0xb5, 0x03,
	0x89, 0x9c, 0x82, 0xef, 0xc2, 0xc9, 0x35, 0xb4, 0x68, 0x4e, 0x55, 0xa9, 0x80, 0x83, 0x09, 0x61,
	0x73, 0x55, 0x3e, 0x03, 0x80, 0x43, 0x29, 0xb8, 0xb5, 0xe3, 0xee, 0xba, 0x70, 0x38, 0x7b, 0x47,
	0x39, 0xc0, 0x3d, 0x5b, 0xd7, 0xe9, 0xf6, 0x3a, 0x22, 0x56, 0x0b, 0xfe, 0x44, 0x3e, 0x05, 0xd6,
	0xa7, 0xc9, 0x9d, 0x10, 0xbb, 0xea, 0x1f, 0xcc, 0x48, 0xd0, 0xf3, 0xfa, 0x1a, 0x83, 0xf1, 0x6c,
	0x55, 0x39, 0x56, 0x5d, 0xad, 0x96, 0x97, 0xb5, 0x5e, 0xbb, 0xed, 0x36, 0x37, 0x1f, 0xfa, 0x99,
	0x83, 0x72, 0x48, 0x92, 0xcd, 0xc8, 0x87, 0xce, 0x02, 0x8a, 0x66, 0x50, 0x8b, 0x6a, 0xaa, 0x7f,
	0x3a, 0x27, 0xa0, 0x96, 0x69, 0x85, 0x5a, 0x30, 0x9e, 0x7d, 0xb5, 0x48, 0x5a, 0xf0, 0xb6, 0x77,
	0xc2, 0xa5, 0xd5, 0xe8, 0xff, 0xc8, 0x55, 0xce, 0x18, 0x39, 0x22, 0xed, 0x59, 0xe5, 0x14, 0xc2,
	0xf2, 0x05, 0xfe, 0xc1, 0x31, 0xe5, 0x48, 0xf8, 0x15, 0x07, 0xf1, 0xd4, 0x37, 0x57, 0x7b, 0x9c,
	0x12, 0xb9, 0x3e, 0x9b, 0x60, 0x68, 0x65, 0xdd, 0xf4, 0x6f, 0x8b, 0x26, 0x38, 0xe2, 0x41, 0x6f,
	0x31, 0x79, 0x4d, 0x26, 0xd1, 0x2b, 0x15, 0x71, 0xa2, 0x56, 0x24, 0x9d, 0xe0, 0xb3, 0x80, 0x01,
	0x08, 0xff, 0x9b, 0x6d, 0x9f, 0x1c, 0x53, 0x0e, 0x87, 0x08, 0xe1, 0x10, 0xce, 0x2b, 0x67, 0x42,
	0x82, 0x56, 0xd3, 0xca, 0xc4, 0xef, 0xc5, 0xb6, 0x69, 0xe9, 0x15, 0x78, 0x19, 0xb7, 0x73, 0x94,
	0xcf, 0x7f, 0x4a, 0x1f, 0x85, 0xb1, 0xf3, 0xb6, 0x21, 0xaf, 0x34, 0x09, 0x1f, 0x85, 0x21, 0xc4,
	0x5d, 0xe1, 0x89, 0xcc, 0x55, 0xe5, 0x71, 0x94, 0x4b, 0xad, 0x92, 0xbc, 0xea, 0x2e, 0x2f, 0xd3,
	0x4f, 0x0e, 0x92, 0x23, 0xaf, 0xd2, 0x72, 0x0d, 0xa6, 0xb2, 0x45, 0x65, 0x96, 0xb5, 0xb6, 0x64,
	0x08, 0x7c, 0x54, 0x39, 0x1c, 0xfc, 0x0e, 0xfa, 0xf8, 0x31, 0x65, 0x2e, 0x42, 0xf2, 0x37, 0xd0,
	0xa2, 0x44, 0xb1, 0xb4, 0xbd, 0x05, 0xe3, 0xd9, 0xb7, 0x8f, 0x29, 0x87, 0xb5, 0x76, 0x6b, 0xaf,
	0x13, 0xfa, 0xa3, 0x8c, 0x72, 0x24, 0x24, 0x04, 0xf9, 0xf1, 0x10, 0x3e, 0xa4, 0x99, 0xad, 0x07,
	0xa6, 0xeb, 0x6e, 0x99, 0xd2, 0x3c, 0xfa, 0xf4, 0x35, 0xa7, 0xeb, 0xb6, 0xbd, 0xe6, 0xb6, 0xa0,
	0xf8, 0xde, 0x3a, 0x64, 0x16, 0xdc, 0x76, 0xd7, 0x6b, 0x78, 0xaf, 0x77, 0x0b, 0xe2, 0xc3, 0xc6,
	0x62, 0x21, 0xbe, 0xcf, 0x2d, 0x39, 0xed, 0xfb, 0x6e, 0xa7, 0x2b, 0x53, 0x4e, 0x66, 0xdf, 0x3f,
	0xc6, 0xe3, 0x87, 0x76, 0xd3, 0xeb, 0xf6, 0xda, 0x6e, 0x28, 0x98, 0x88, 0xb2, 0x22, 0xc4, 0x40,
	0x38, 0x11, 0x8a, 0x44, 0xe9, 0x7c, 0xf4, 0x2d, 0x3b, 0x0f, 0xf5, 0x1e, 0xf7, 0x96, 0x22, 0xc6,
	0x8a, 0x72, 0xb5, 0x86, 0xeb, 0xb4, 0x7d, 0xf6, 0xb8, 0x8c, 0x54, 0x62, 0x89, 0xdd, 0xae, 0xbc,
	0x8f, 0x19, 0x27, 0x1b, 0xee, 0x6e, 0x4b, 0x04, 0x65, 0x29, 0x29, 0x2a, 0x9c, 0x3e, 0x95, 0x7d,
	0x8d, 0x32, 0x9b, 0x6b, 0x75, 0x3a, 0x41, 0x8b, 0x04, 0xbf, 0x23, 0x53, 0xbc, 0x90, 0xb4, 0xde,
	0x73, 0xd9, 0x7d, 0x79, 0xe6, 0xac, 0x4f, 0xf3, 0x9a, 0x9a, 0x3f, 0xca, 0x9d, 0x54, 0x32, 0x21,
	0xb9, 0xe4, 0x7a, 0xeb, 0xbd, 0x95, 0x96, 0x18, 0xdf, 0x56, 0x14, 0x28, 0xb5, 0x76, 0xdd, 0x86,
	0xd3, 0xdc, 0x0a, 0x75, 0xc2, 0xc7, 0x82, 0x04, 0x2d, 0xa2, 0x96, 0x14, 0x2b, 0x98, 0xe7, 0x8d,
	0x65, 0x0b, 0xca, 0x9c, 0xd1, 0x6a, 0xed, 0xda, 0x4d, 0xaf, 0x9b, 0xf7, 0xc2, 0xbc, 0x12, 0xa4,
	0xba, 0x21, 0x36, 0x52, 0xe5, 0x6a, 0x56, 0x82, 0x55, 0x76, 0x9f, 0xef, 0xc2, 0x58, 0x76, 0x57,
	0x81, 0x80, 0x63, 0xee, 0xb4, 0x1e, 0x24, 0x33, 0x0a, 0x68, 0x91, 0x99, 0x7d, 0x8a, 0x45, 0x77,
	0x77, 0xdd, 0x2d, 0xcf, 0xe9, 0xba, 0x62, 0x20, 0x3a, 0xa7, 0x9c, 0x4e, 0x21, 0x82, 0x8f, 0x62,
	0x8e, 0x67, 0x3f, 0x30, 0xa6, 0xcc, 0x88, 0xcf, 0x64, 0x3a, 0xdb, 0xdc, 0x31, 0xfa, 0x3f, 0x23,
	0x4a, 0x0e, 0x29, 0x72, 0x20, 0x18, 0x0b, 0xbf, 0xab, 0xe9, 0x6c, 0xd7, 0x57, 0x5d, 0xae, 0xde,
	0x08, 0xc8, 0x90, 0xa0, 0x89, 0x28, 0xcd, 0xec, 0xba, 0xce, 0xd6, 0x3c, 0x4c, 0xa6, 0x68, 0x0b,
	0x30, 0x95, 0xa2, 0x2d, 0xca, 0x8f, 0x1d, 0xc6, 0x68, 0x4b, 0x30, 0x93, 0xa2, 0x5d, 0x87, 0xd9,
	0xec, 0x3b, 0xc6, 0x94, 0x43, 0x65, 0xa7, 0xb9, 0xdd, 0x73, 0xb6, 0xc3, 0x7e, 0x1b, 0xfc, 0x0f,
	0x2a, 0x70, 0x5e, 0x39, 0x13, 0x92, 0x4c, 0x6f, 0x77, 0xaf, 0xe1, 0x3d, 0xef, 0xb9, 0x5b, 0xda,
	0x8e, 0xd7, 0x74, 0x3b, 0xfe, 0xb2, 0x47, 0xc8, 0xb7, 0xda, 0xce, 0x96, 0xd7, 0xf5, 0x5a, 0x4d,
	0x1e, 0xef, 0x49, 0x80, 0x38, 0xaf, 0x18, 0x02, 0x48, 0x73, 0xbb, 0xe1, 0x75, 0x76, 0xe4, 0x4c,
	0x3b, 0xa4, 0x2e, 0x3b, 0x7b, 0x8e, 0x00, 0x8b, 0xcd, 0xbd, 0x90, 0xbc, 0xd2, 0x6a, 0xbb, 0x4e,
	0x13, 0xa6, 0xb2, 0x8e, 0x72, 0x34, 0x12, 0x9b, 0xeb, 0x7b, 0x41, 0xd7, 0x8b, 0x11, 0x23, 0x7e,
	0x21, 0x4e, 0x37, 0x1f, 0x36, 0x37, 0x65, 0x23, 0xc6, 0xe9, 0x45, 0xc7, 0x6b, 0x1a, 0xee, 0x03,
	0xa7, 0xcd, 0x7d, 0xce, 0xb7, 0x29, 0x8f, 0xc8, 0x38, 0x35, 0xef, 0x6e, 0xf5, 0x36, 0xbb, 0xfe,
	0x3a, 0x94, 0x5f, 0xd4, 0x79, 0xe5, 0x0c, 0xca, 0x8c, 0x58, 0x10, 0xce, 0x97, 0xff, 0xa5, 0x8f,
	0xc6, 0x11, 0x41, 0x98, 0x94, 0x9b, 0x78, 0xf7, 0xf8, 0xcb, 0xee, 0x4e, 0xef, 0xb5, 0x5b, 0xdd,
	0xd6, 0xe2, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x21, 0x4c, 0x52, 0x85, 0x91, 0x01, 0x00,
}
